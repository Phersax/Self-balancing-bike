
main_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a84  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005c50  08005c50  00006c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ca8  08005ca8  00007080  2**0
                  CONTENTS
  4 .ARM          00000008  08005ca8  08005ca8  00006ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cb0  08005cb0  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb0  08005cb0  00006cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cb4  08005cb4  00006cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08005cb8  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000080  08005d38  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08005d38  00007348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e96c  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002633  00000000  00000000  00015a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00018050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2c  00000000  00000000  00018eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e50  00000000  00000000  000199dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013362  00000000  00000000  0003c82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d172e  00000000  00000000  0004fb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001212bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd0  00000000  00000000  00121300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001252d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000080 	.word	0x20000080
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005c34 	.word	0x08005c34

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000084 	.word	0x20000084
 8000204:	08005c34 	.word	0x08005c34

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b96a 	b.w	8000eac <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	9d08      	ldr	r5, [sp, #32]
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14e      	bne.n	8000c9a <__udivmoddi4+0xaa>
 8000bfc:	4694      	mov	ip, r2
 8000bfe:	458c      	cmp	ip, r1
 8000c00:	4686      	mov	lr, r0
 8000c02:	fab2 f282 	clz	r2, r2
 8000c06:	d962      	bls.n	8000cce <__udivmoddi4+0xde>
 8000c08:	b14a      	cbz	r2, 8000c1e <__udivmoddi4+0x2e>
 8000c0a:	f1c2 0320 	rsb	r3, r2, #32
 8000c0e:	4091      	lsls	r1, r2
 8000c10:	fa20 f303 	lsr.w	r3, r0, r3
 8000c14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c18:	4319      	orrs	r1, r3
 8000c1a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f f68c 	uxth.w	r6, ip
 8000c26:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb04 f106 	mul.w	r1, r4, r6
 8000c3a:	4299      	cmp	r1, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x64>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c46:	f080 8112 	bcs.w	8000e6e <__udivmoddi4+0x27e>
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	f240 810f 	bls.w	8000e6e <__udivmoddi4+0x27e>
 8000c50:	3c02      	subs	r4, #2
 8000c52:	4463      	add	r3, ip
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	fa1f f38e 	uxth.w	r3, lr
 8000c5a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f606 	mul.w	r6, r0, r6
 8000c6a:	429e      	cmp	r6, r3
 8000c6c:	d90a      	bls.n	8000c84 <__udivmoddi4+0x94>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c76:	f080 80fc 	bcs.w	8000e72 <__udivmoddi4+0x282>
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	f240 80f9 	bls.w	8000e72 <__udivmoddi4+0x282>
 8000c80:	4463      	add	r3, ip
 8000c82:	3802      	subs	r0, #2
 8000c84:	1b9b      	subs	r3, r3, r6
 8000c86:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	b11d      	cbz	r5, 8000c96 <__udivmoddi4+0xa6>
 8000c8e:	40d3      	lsrs	r3, r2
 8000c90:	2200      	movs	r2, #0
 8000c92:	e9c5 3200 	strd	r3, r2, [r5]
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d905      	bls.n	8000caa <__udivmoddi4+0xba>
 8000c9e:	b10d      	cbz	r5, 8000ca4 <__udivmoddi4+0xb4>
 8000ca0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e7f5      	b.n	8000c96 <__udivmoddi4+0xa6>
 8000caa:	fab3 f183 	clz	r1, r3
 8000cae:	2900      	cmp	r1, #0
 8000cb0:	d146      	bne.n	8000d40 <__udivmoddi4+0x150>
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xcc>
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	f0c0 80f0 	bcc.w	8000e9c <__udivmoddi4+0x2ac>
 8000cbc:	1a86      	subs	r6, r0, r2
 8000cbe:	eb64 0303 	sbc.w	r3, r4, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d0e6      	beq.n	8000c96 <__udivmoddi4+0xa6>
 8000cc8:	e9c5 6300 	strd	r6, r3, [r5]
 8000ccc:	e7e3      	b.n	8000c96 <__udivmoddi4+0xa6>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	f040 8090 	bne.w	8000df4 <__udivmoddi4+0x204>
 8000cd4:	eba1 040c 	sub.w	r4, r1, ip
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cea:	fb08 4416 	mls	r4, r8, r6, r4
 8000cee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf2:	fb07 f006 	mul.w	r0, r7, r6
 8000cf6:	4298      	cmp	r0, r3
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x11c>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x11a>
 8000d04:	4298      	cmp	r0, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2b4>
 8000d0a:	4626      	mov	r6, r4
 8000d0c:	1a1c      	subs	r4, r3, r0
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d16:	fb08 4410 	mls	r4, r8, r0, r4
 8000d1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1e:	fb00 f707 	mul.w	r7, r0, r7
 8000d22:	429f      	cmp	r7, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x148>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x146>
 8000d30:	429f      	cmp	r7, r3
 8000d32:	f200 80b0 	bhi.w	8000e96 <__udivmoddi4+0x2a6>
 8000d36:	4620      	mov	r0, r4
 8000d38:	1bdb      	subs	r3, r3, r7
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	e7a5      	b.n	8000c8c <__udivmoddi4+0x9c>
 8000d40:	f1c1 0620 	rsb	r6, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4a:	431f      	orrs	r7, r3
 8000d4c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d50:	fa04 f301 	lsl.w	r3, r4, r1
 8000d54:	ea43 030c 	orr.w	r3, r3, ip
 8000d58:	40f4      	lsrs	r4, r6
 8000d5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5e:	0c38      	lsrs	r0, r7, #16
 8000d60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d64:	fbb4 fef0 	udiv	lr, r4, r0
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d74:	fb0e f90c 	mul.w	r9, lr, ip
 8000d78:	45a1      	cmp	r9, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x1a6>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d86:	f080 8084 	bcs.w	8000e92 <__udivmoddi4+0x2a2>
 8000d8a:	45a1      	cmp	r9, r4
 8000d8c:	f240 8081 	bls.w	8000e92 <__udivmoddi4+0x2a2>
 8000d90:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d94:	443c      	add	r4, r7
 8000d96:	eba4 0409 	sub.w	r4, r4, r9
 8000d9a:	fa1f f983 	uxth.w	r9, r3
 8000d9e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da2:	fb00 4413 	mls	r4, r0, r3, r4
 8000da6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000daa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x1d2>
 8000db2:	193c      	adds	r4, r7, r4
 8000db4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db8:	d267      	bcs.n	8000e8a <__udivmoddi4+0x29a>
 8000dba:	45a4      	cmp	ip, r4
 8000dbc:	d965      	bls.n	8000e8a <__udivmoddi4+0x29a>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	443c      	add	r4, r7
 8000dc2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	46ce      	mov	lr, r9
 8000dd2:	469c      	mov	ip, r3
 8000dd4:	d351      	bcc.n	8000e7a <__udivmoddi4+0x28a>
 8000dd6:	d04e      	beq.n	8000e76 <__udivmoddi4+0x286>
 8000dd8:	b155      	cbz	r5, 8000df0 <__udivmoddi4+0x200>
 8000dda:	ebb8 030e 	subs.w	r3, r8, lr
 8000dde:	eb64 040c 	sbc.w	r4, r4, ip
 8000de2:	fa04 f606 	lsl.w	r6, r4, r6
 8000de6:	40cb      	lsrs	r3, r1
 8000de8:	431e      	orrs	r6, r3
 8000dea:	40cc      	lsrs	r4, r1
 8000dec:	e9c5 6400 	strd	r6, r4, [r5]
 8000df0:	2100      	movs	r1, #0
 8000df2:	e750      	b.n	8000c96 <__udivmoddi4+0xa6>
 8000df4:	f1c2 0320 	rsb	r3, r2, #32
 8000df8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa24 f303 	lsr.w	r3, r4, r3
 8000e04:	4094      	lsls	r4, r2
 8000e06:	430c      	orrs	r4, r1
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e18:	fb08 3110 	mls	r1, r8, r0, r3
 8000e1c:	0c23      	lsrs	r3, r4, #16
 8000e1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e22:	fb00 f107 	mul.w	r1, r0, r7
 8000e26:	4299      	cmp	r1, r3
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x24c>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e32:	d22c      	bcs.n	8000e8e <__udivmoddi4+0x29e>
 8000e34:	4299      	cmp	r1, r3
 8000e36:	d92a      	bls.n	8000e8e <__udivmoddi4+0x29e>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e44:	fb08 3311 	mls	r3, r8, r1, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb01 f307 	mul.w	r3, r1, r7
 8000e50:	42a3      	cmp	r3, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x276>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e5c:	d213      	bcs.n	8000e86 <__udivmoddi4+0x296>
 8000e5e:	42a3      	cmp	r3, r4
 8000e60:	d911      	bls.n	8000e86 <__udivmoddi4+0x296>
 8000e62:	3902      	subs	r1, #2
 8000e64:	4464      	add	r4, ip
 8000e66:	1ae4      	subs	r4, r4, r3
 8000e68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e6c:	e739      	b.n	8000ce2 <__udivmoddi4+0xf2>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	e6f0      	b.n	8000c54 <__udivmoddi4+0x64>
 8000e72:	4608      	mov	r0, r1
 8000e74:	e706      	b.n	8000c84 <__udivmoddi4+0x94>
 8000e76:	45c8      	cmp	r8, r9
 8000e78:	d2ae      	bcs.n	8000dd8 <__udivmoddi4+0x1e8>
 8000e7a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e82:	3801      	subs	r0, #1
 8000e84:	e7a8      	b.n	8000dd8 <__udivmoddi4+0x1e8>
 8000e86:	4631      	mov	r1, r6
 8000e88:	e7ed      	b.n	8000e66 <__udivmoddi4+0x276>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	e799      	b.n	8000dc2 <__udivmoddi4+0x1d2>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e7d4      	b.n	8000e3c <__udivmoddi4+0x24c>
 8000e92:	46d6      	mov	lr, sl
 8000e94:	e77f      	b.n	8000d96 <__udivmoddi4+0x1a6>
 8000e96:	4463      	add	r3, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e74d      	b.n	8000d38 <__udivmoddi4+0x148>
 8000e9c:	4606      	mov	r6, r0
 8000e9e:	4623      	mov	r3, r4
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e70f      	b.n	8000cc4 <__udivmoddi4+0xd4>
 8000ea4:	3e02      	subs	r6, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	e730      	b.n	8000d0c <__udivmoddi4+0x11c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <updateOrientation>:
Orientation or;
angleGyro A_gyro;
angleAcc A_acc;

void updateOrientation(float accX, float accY, float accZ, float gyroX, float gyroY, float gyroZ) 
{
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	ed87 0a05 	vstr	s0, [r7, #20]
 8000eba:	edc7 0a04 	vstr	s1, [r7, #16]
 8000ebe:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ec2:	edc7 1a02 	vstr	s3, [r7, #8]
 8000ec6:	ed87 2a01 	vstr	s4, [r7, #4]
 8000eca:	edc7 2a00 	vstr	s5, [r7]
  // compute pitch and roll from accelerometer
  updateAngleAcc(accX, accY,accZ);
 8000ece:	ed97 1a03 	vldr	s2, [r7, #12]
 8000ed2:	edd7 0a04 	vldr	s1, [r7, #16]
 8000ed6:	ed97 0a05 	vldr	s0, [r7, #20]
 8000eda:	f000 f879 	bl	8000fd0 <updateAngleAcc>

  // compute pitch and roll from gyroscope
  updateAngleGyro(gyroX, gyroY);
 8000ede:	edd7 0a01 	vldr	s1, [r7, #4]
 8000ee2:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ee6:	f000 f913 	bl	8001110 <updateAngleGyro>

  // include complementary filter
  or.pitch = ALPHA * (or.pitch + A_gyro.pitchGyro) + (1 - ALPHA) * A_acc.pitchAcc;
 8000eea:	4b35      	ldr	r3, [pc, #212]	@ (8000fc0 <updateOrientation+0x110>)
 8000eec:	ed93 7a00 	vldr	s14, [r3]
 8000ef0:	4b34      	ldr	r3, [pc, #208]	@ (8000fc4 <updateOrientation+0x114>)
 8000ef2:	edd3 7a00 	vldr	s15, [r3]
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efa:	ee17 0a90 	vmov	r0, s15
 8000efe:	f7ff fae7 	bl	80004d0 <__aeabi_f2d>
 8000f02:	a32b      	add	r3, pc, #172	@ (adr r3, 8000fb0 <updateOrientation+0x100>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff fb3a 	bl	8000580 <__aeabi_dmul>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4614      	mov	r4, r2
 8000f12:	461d      	mov	r5, r3
 8000f14:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc8 <updateOrientation+0x118>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fad9 	bl	80004d0 <__aeabi_f2d>
 8000f1e:	a326      	add	r3, pc, #152	@ (adr r3, 8000fb8 <updateOrientation+0x108>)
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	f7ff fb2c 	bl	8000580 <__aeabi_dmul>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	4629      	mov	r1, r5
 8000f30:	f7ff f970 	bl	8000214 <__adddf3>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f7ff fdf0 	bl	8000b20 <__aeabi_d2f>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc0 <updateOrientation+0x110>)
 8000f44:	6013      	str	r3, [r2, #0]
  or.roll = ALPHA * (or.roll + A_acc.rollAcc) + (1 - ALPHA) * A_acc.rollAcc;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <updateOrientation+0x110>)
 8000f48:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <updateOrientation+0x118>)
 8000f4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f56:	ee17 0a90 	vmov	r0, s15
 8000f5a:	f7ff fab9 	bl	80004d0 <__aeabi_f2d>
 8000f5e:	a314      	add	r3, pc, #80	@ (adr r3, 8000fb0 <updateOrientation+0x100>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff fb0c 	bl	8000580 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4614      	mov	r4, r2
 8000f6e:	461d      	mov	r5, r3
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <updateOrientation+0x118>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff faab 	bl	80004d0 <__aeabi_f2d>
 8000f7a:	a30f      	add	r3, pc, #60	@ (adr r3, 8000fb8 <updateOrientation+0x108>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff fafe 	bl	8000580 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4620      	mov	r0, r4
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f7ff f942 	bl	8000214 <__adddf3>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fdc2 	bl	8000b20 <__aeabi_d2f>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a08      	ldr	r2, [pc, #32]	@ (8000fc0 <updateOrientation+0x110>)
 8000fa0:	6053      	str	r3, [r2, #4]
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	f3af 8000 	nop.w
 8000fb0:	f5c28f5c 	.word	0xf5c28f5c
 8000fb4:	3fef5c28 	.word	0x3fef5c28
 8000fb8:	47ae1480 	.word	0x47ae1480
 8000fbc:	3f947ae1 	.word	0x3f947ae1
 8000fc0:	2000009c 	.word	0x2000009c
 8000fc4:	200000a4 	.word	0x200000a4
 8000fc8:	200000ac 	.word	0x200000ac
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <updateAngleAcc>:

void updateAngleAcc(float accX, float accY, float accZ){
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000fda:	edc7 0a02 	vstr	s1, [r7, #8]
 8000fde:	ed87 1a01 	vstr	s2, [r7, #4]
	// compute pitch and roll using trigonometric formulas
	A_acc.pitchAcc = atan(accX / sqrt(accY*accY + accZ*accZ)) * 180 / M_PI;
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f7ff fa74 	bl	80004d0 <__aeabi_f2d>
 8000fe8:	4604      	mov	r4, r0
 8000fea:	460d      	mov	r5, r1
 8000fec:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ff0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ff4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001000:	ee17 0a90 	vmov	r0, s15
 8001004:	f7ff fa64 	bl	80004d0 <__aeabi_f2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	ec43 2b10 	vmov	d0, r2, r3
 8001010:	f004 fb6a 	bl	80056e8 <sqrt>
 8001014:	ec53 2b10 	vmov	r2, r3, d0
 8001018:	4620      	mov	r0, r4
 800101a:	4629      	mov	r1, r5
 800101c:	f7ff fbda 	bl	80007d4 <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	ec43 2b17 	vmov	d7, r2, r3
 8001028:	eeb0 0a47 	vmov.f32	s0, s14
 800102c:	eef0 0a67 	vmov.f32	s1, s15
 8001030:	f004 fb86 	bl	8005740 <atan>
 8001034:	ec51 0b10 	vmov	r0, r1, d0
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <updateAngleAcc+0x138>)
 800103e:	f7ff fa9f 	bl	8000580 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	a32d      	add	r3, pc, #180	@ (adr r3, 8001100 <updateAngleAcc+0x130>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fbc0 	bl	80007d4 <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fd60 	bl	8000b20 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a2a      	ldr	r2, [pc, #168]	@ (800110c <updateAngleAcc+0x13c>)
 8001064:	6013      	str	r3, [r2, #0]
	A_acc.rollAcc = atan(-accY / sqrt(accX*accX + accZ*accZ)) * 180 / M_PI;
 8001066:	edd7 7a02 	vldr	s15, [r7, #8]
 800106a:	eef1 7a67 	vneg.f32	s15, s15
 800106e:	ee17 3a90 	vmov	r3, s15
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa2c 	bl	80004d0 <__aeabi_f2d>
 8001078:	4604      	mov	r4, r0
 800107a:	460d      	mov	r5, r1
 800107c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001080:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001084:	edd7 7a01 	vldr	s15, [r7, #4]
 8001088:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800108c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001090:	ee17 0a90 	vmov	r0, s15
 8001094:	f7ff fa1c 	bl	80004d0 <__aeabi_f2d>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	ec43 2b10 	vmov	d0, r2, r3
 80010a0:	f004 fb22 	bl	80056e8 <sqrt>
 80010a4:	ec53 2b10 	vmov	r2, r3, d0
 80010a8:	4620      	mov	r0, r4
 80010aa:	4629      	mov	r1, r5
 80010ac:	f7ff fb92 	bl	80007d4 <__aeabi_ddiv>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	ec43 2b17 	vmov	d7, r2, r3
 80010b8:	eeb0 0a47 	vmov.f32	s0, s14
 80010bc:	eef0 0a67 	vmov.f32	s1, s15
 80010c0:	f004 fb3e 	bl	8005740 <atan>
 80010c4:	ec51 0b10 	vmov	r0, r1, d0
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <updateAngleAcc+0x138>)
 80010ce:	f7ff fa57 	bl	8000580 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	a309      	add	r3, pc, #36	@ (adr r3, 8001100 <updateAngleAcc+0x130>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fb78 	bl	80007d4 <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fd18 	bl	8000b20 <__aeabi_d2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a06      	ldr	r2, [pc, #24]	@ (800110c <updateAngleAcc+0x13c>)
 80010f4:	6053      	str	r3, [r2, #4]
}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bdb0      	pop	{r4, r5, r7, pc}
 80010fe:	bf00      	nop
 8001100:	54442d18 	.word	0x54442d18
 8001104:	400921fb 	.word	0x400921fb
 8001108:	40668000 	.word	0x40668000
 800110c:	200000ac 	.word	0x200000ac

08001110 <updateAngleGyro>:

void updateAngleGyro(float gyroX, float gyroY){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	ed87 0a01 	vstr	s0, [r7, #4]
 800111a:	edc7 0a00 	vstr	s1, [r7]
	// compute pitch and roll by multiplying the sampling time by the angular velocity
	A_gyro.pitchGyro = gyroX * DT;
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff f9d6 	bl	80004d0 <__aeabi_f2d>
 8001124:	a312      	add	r3, pc, #72	@ (adr r3, 8001170 <updateAngleGyro+0x60>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff fa29 	bl	8000580 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fcf3 	bl	8000b20 <__aeabi_d2f>
 800113a:	4603      	mov	r3, r0
 800113c:	4a0e      	ldr	r2, [pc, #56]	@ (8001178 <updateAngleGyro+0x68>)
 800113e:	6013      	str	r3, [r2, #0]
	A_gyro.pitchGyro = gyroY * DT;
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f7ff f9c5 	bl	80004d0 <__aeabi_f2d>
 8001146:	a30a      	add	r3, pc, #40	@ (adr r3, 8001170 <updateAngleGyro+0x60>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fa18 	bl	8000580 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fce2 	bl	8000b20 <__aeabi_d2f>
 800115c:	4603      	mov	r3, r0
 800115e:	4a06      	ldr	r2, [pc, #24]	@ (8001178 <updateAngleGyro+0x68>)
 8001160:	6013      	str	r3, [r2, #0]
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	f3af 8000 	nop.w
 8001170:	47ae147b 	.word	0x47ae147b
 8001174:	3f747ae1 	.word	0x3f747ae1
 8001178:	200000a4 	.word	0x200000a4

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <MX_GPIO_Init+0x9c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a1f      	ldr	r2, [pc, #124]	@ (8001218 <MX_GPIO_Init+0x9c>)
 800119c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001218 <MX_GPIO_Init+0x9c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <MX_GPIO_Init+0x9c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <MX_GPIO_Init+0x9c>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <MX_GPIO_Init+0x9c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_GPIO_Init+0x9c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a11      	ldr	r2, [pc, #68]	@ (8001218 <MX_GPIO_Init+0x9c>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_GPIO_Init+0x9c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ec:	480b      	ldr	r0, [pc, #44]	@ (800121c <MX_GPIO_Init+0xa0>)
 80011ee:	f001 fb01 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Direction_Pin;
 80011f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011fc:	2302      	movs	r3, #2
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Direction_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	4804      	ldr	r0, [pc, #16]	@ (800121c <MX_GPIO_Init+0xa0>)
 800120c:	f001 f946 	bl	800249c <HAL_GPIO_Init>

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40020400 	.word	0x40020400

08001220 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
 //To reset a previously used I2C channel
  I2C_ClearBusyBus();
 8001224:	f000 f874 	bl	8001310 <I2C_ClearBusyBus>
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <MX_I2C1_Init+0x54>)
 800122a:	4a13      	ldr	r2, [pc, #76]	@ (8001278 <MX_I2C1_Init+0x58>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <MX_I2C1_Init+0x54>)
 8001230:	4a12      	ldr	r2, [pc, #72]	@ (800127c <MX_I2C1_Init+0x5c>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <MX_I2C1_Init+0x54>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <MX_I2C1_Init+0x54>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <MX_I2C1_Init+0x54>)
 8001242:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001248:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <MX_I2C1_Init+0x54>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <MX_I2C1_Init+0x54>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <MX_I2C1_Init+0x54>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <MX_I2C1_Init+0x54>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	@ (8001274 <MX_I2C1_Init+0x54>)
 8001262:	f001 fae1 	bl	8002828 <HAL_I2C_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_I2C1_Init+0x50>
  {
    Error_Handler();
 800126c:	f000 f9f4 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200000b4 	.word	0x200000b4
 8001278:	40005400 	.word	0x40005400
 800127c:	00061a80 	.word	0x00061a80

08001280 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	@ 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a19      	ldr	r2, [pc, #100]	@ (8001304 <HAL_I2C_MspInit+0x84>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d12c      	bne.n	80012fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d0:	2304      	movs	r3, #4
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	480c      	ldr	r0, [pc, #48]	@ (800130c <HAL_I2C_MspInit+0x8c>)
 80012dc:	f001 f8de 	bl	800249c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f0:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	@ 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40005400 	.word	0x40005400
 8001308:	40023800 	.word	0x40023800
 800130c:	40020400 	.word	0x40020400

08001310 <I2C_ClearBusyBus>:
}

/* USER CODE BEGIN 1 */
/* To reset a previously used I2C channel  */
void I2C_ClearBusyBus(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	463b      	mov	r3, r7
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]

    // Configure SCL and SDA as output for manual control
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001324:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001328:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132a:	2304      	movs	r3, #4
 800132c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  // Open-drain mode
 800132e:	2311      	movs	r3, #17
 8001330:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001336:	2302      	movs	r3, #2
 8001338:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	4825      	ldr	r0, [pc, #148]	@ (80013d4 <I2C_ClearBusyBus+0xc4>)
 8001340:	f001 f8ac 	bl	800249c <HAL_GPIO_Init>

    // Set both SCL and SDA to high initially
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001344:	2201      	movs	r2, #1
 8001346:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800134a:	4822      	ldr	r0, [pc, #136]	@ (80013d4 <I2C_ClearBusyBus+0xc4>)
 800134c:	f001 fa52 	bl	80027f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001356:	481f      	ldr	r0, [pc, #124]	@ (80013d4 <I2C_ClearBusyBus+0xc4>)
 8001358:	f001 fa4c 	bl	80027f4 <HAL_GPIO_WritePin>

    // Ensure SDA is high (released)
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET)
 800135c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001360:	481c      	ldr	r0, [pc, #112]	@ (80013d4 <I2C_ClearBusyBus+0xc4>)
 8001362:	f001 fa2f 	bl	80027c4 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d11a      	bne.n	80013a2 <I2C_ClearBusyBus+0x92>
    {
        // SDA is stuck low, so generate 9 clock pulses
        for (int i = 0; i < 9; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e014      	b.n	800139c <I2C_ClearBusyBus+0x8c>
        {
            // Toggle the SCL pin to generate a clock pulse
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001378:	4816      	ldr	r0, [pc, #88]	@ (80013d4 <I2C_ClearBusyBus+0xc4>)
 800137a:	f001 fa3b 	bl	80027f4 <HAL_GPIO_WritePin>
            HAL_Delay(1); // Small delay to simulate clock cycle
 800137e:	2001      	movs	r0, #1
 8001380:	f000 ff56 	bl	8002230 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800138a:	4812      	ldr	r0, [pc, #72]	@ (80013d4 <I2C_ClearBusyBus+0xc4>)
 800138c:	f001 fa32 	bl	80027f4 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001390:	2001      	movs	r0, #1
 8001392:	f000 ff4d 	bl	8002230 <HAL_Delay>
        for (int i = 0; i < 9; i++)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	2b08      	cmp	r3, #8
 80013a0:	dde7      	ble.n	8001372 <I2C_ClearBusyBus+0x62>
        }
    }

    // After the clock cycles, set SDA and SCL back to high
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013a8:	480a      	ldr	r0, [pc, #40]	@ (80013d4 <I2C_ClearBusyBus+0xc4>)
 80013aa:	f001 fa23 	bl	80027f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013b4:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <I2C_ClearBusyBus+0xc4>)
 80013b6:	f001 fa1d 	bl	80027f4 <HAL_GPIO_WritePin>

    // Reconfigure the pins back to I2C mode
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;  // Alternate function open-drain for I2C
 80013ba:	2312      	movs	r3, #18
 80013bc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // Adjust according to your I2C peripheral
 80013be:	2304      	movs	r3, #4
 80013c0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	463b      	mov	r3, r7
 80013c4:	4619      	mov	r1, r3
 80013c6:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <I2C_ClearBusyBus+0xc4>)
 80013c8:	f001 f868 	bl	800249c <HAL_GPIO_Init>
}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40020400 	.word	0x40020400

080013d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013dc:	f000 feb6 	bl	800214c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013e0:	f000 f842 	bl	8001468 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013e4:	f7ff feca 	bl	800117c <MX_GPIO_Init>
	MX_TIM5_Init();
 80013e8:	f000 fdaa 	bl	8001f40 <MX_TIM5_Init>
	MX_I2C1_Init();
 80013ec:	f7ff ff18 	bl	8001220 <MX_I2C1_Init>
	MX_TIM3_Init();
 80013f0:	f000 fd58 	bl	8001ea4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	pid_init(&pid, 1, 0.1, 0.01, -max_pwm, max_pwm);
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <main+0x74>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	eef1 7a67 	vneg.f32	s15, s15
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <main+0x74>)
 8001400:	ed93 7a00 	vldr	s14, [r3]
 8001404:	eeb0 2a47 	vmov.f32	s4, s14
 8001408:	eef0 1a67 	vmov.f32	s3, s15
 800140c:	ed9f 1a10 	vldr	s2, [pc, #64]	@ 8001450 <main+0x78>
 8001410:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8001454 <main+0x7c>
 8001414:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001418:	480f      	ldr	r0, [pc, #60]	@ (8001458 <main+0x80>)
 800141a:	f000 fb29 	bl	8001a70 <pid_init>
	pid_set_setpoint(&pid, set_point);
 800141e:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <main+0x84>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	eeb0 0a67 	vmov.f32	s0, s15
 8001428:	480b      	ldr	r0, [pc, #44]	@ (8001458 <main+0x80>)
 800142a:	f000 fb4f 	bl	8001acc <pid_set_setpoint>
	status = mpu6050_init();
 800142e:	f000 f919 	bl	8001664 <mpu6050_init>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <main+0x88>)
 8001438:	701a      	strb	r2, [r3, #0]
	nidec_h24_init();
 800143a:	f000 fa81 	bl	8001940 <nidec_h24_init>
	HAL_TIM_Base_Start_IT(&htim3);
 800143e:	4809      	ldr	r0, [pc, #36]	@ (8001464 <main+0x8c>)
 8001440:	f003 f94a 	bl	80046d8 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f000 fef3 	bl	8002230 <HAL_Delay>
 800144a:	e7fb      	b.n	8001444 <main+0x6c>
 800144c:	2000000c 	.word	0x2000000c
 8001450:	3c23d70a 	.word	0x3c23d70a
 8001454:	3dcccccd 	.word	0x3dcccccd
 8001458:	20000124 	.word	0x20000124
 800145c:	20000000 	.word	0x20000000
 8001460:	20000120 	.word	0x20000120
 8001464:	2000017c 	.word	0x2000017c

08001468 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b094      	sub	sp, #80	@ 0x50
 800146c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	2234      	movs	r2, #52	@ 0x34
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f004 f904 	bl	8005684 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <SystemClock_Config+0xd0>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	4a28      	ldr	r2, [pc, #160]	@ (8001538 <SystemClock_Config+0xd0>)
 8001496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	@ 0x40
 800149c:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <SystemClock_Config+0xd0>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	4b23      	ldr	r3, [pc, #140]	@ (800153c <SystemClock_Config+0xd4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014b4:	4a21      	ldr	r2, [pc, #132]	@ (800153c <SystemClock_Config+0xd4>)
 80014b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <SystemClock_Config+0xd4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	2301      	movs	r3, #1
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d0:	2310      	movs	r3, #16
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d4:	2302      	movs	r3, #2
 80014d6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d8:	2300      	movs	r3, #0
 80014da:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80014dc:	2308      	movs	r3, #8
 80014de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 84;
 80014e0:	2354      	movs	r3, #84	@ 0x54
 80014e2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80014e8:	2302      	movs	r3, #2
 80014ea:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 fd99 	bl	800402c <HAL_RCC_OscConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x9c>
		Error_Handler();
 8001500:	f000 f8aa 	bl	8001658 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001504:	230f      	movs	r3, #15
 8001506:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001508:	2302      	movs	r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001514:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	2102      	movs	r1, #2
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fad3 	bl	8003acc <HAL_RCC_ClockConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0xc8>
		Error_Handler();
 800152c:	f000 f894 	bl	8001658 <Error_Handler>
	}
}
 8001530:	bf00      	nop
 8001532:	3750      	adds	r7, #80	@ 0x50
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	40007000 	.word	0x40007000

08001540 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	61f8      	str	r0, [r7, #28]
	if (htim->Instance == TIM3) {
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a39      	ldr	r2, [pc, #228]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d16c      	bne.n	800162c <HAL_TIM_PeriodElapsedCallback+0xec>
		data = mpu6050_data();
 8001552:	4c39      	ldr	r4, [pc, #228]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001554:	463b      	mov	r3, r7
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f92e 	bl	80017b8 <mpu6050_data>
 800155c:	4625      	mov	r5, r4
 800155e:	463c      	mov	r4, r7
 8001560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001564:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001568:	e885 0003 	stmia.w	r5, {r0, r1}
		updateOrientation(data.ax, data.ay, data.az, data.gx, data.gy, data.gz);
 800156c:	4b32      	ldr	r3, [pc, #200]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001574:	ed93 7a01 	vldr	s14, [r3, #4]
 8001578:	4b2f      	ldr	r3, [pc, #188]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800157a:	edd3 6a02 	vldr	s13, [r3, #8]
 800157e:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001580:	ed93 6a03 	vldr	s12, [r3, #12]
 8001584:	4b2c      	ldr	r3, [pc, #176]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001586:	edd3 5a04 	vldr	s11, [r3, #16]
 800158a:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800158c:	ed93 5a05 	vldr	s10, [r3, #20]
 8001590:	eef0 2a45 	vmov.f32	s5, s10
 8001594:	eeb0 2a65 	vmov.f32	s4, s11
 8001598:	eef0 1a46 	vmov.f32	s3, s12
 800159c:	eeb0 1a66 	vmov.f32	s2, s13
 80015a0:	eef0 0a47 	vmov.f32	s1, s14
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f7ff fc82 	bl	8000eb0 <updateOrientation>
		if (fabs(or.pitch - set_point) < max_angle && fabs(or.pitch - set_point) > min_angle) {
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015ae:	ed93 7a00 	vldr	s14, [r3]
 80015b2:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015bc:	eeb0 7ae7 	vabs.f32	s14, s15
 80015c0:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ce:	d528      	bpl.n	8001622 <HAL_TIM_PeriodElapsedCallback+0xe2>
 80015d0:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015d2:	ed93 7a00 	vldr	s14, [r3]
 80015d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e0:	eeb0 7ae7 	vabs.f32	s14, s15
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f2:	dd16      	ble.n	8001622 <HAL_TIM_PeriodElapsedCallback+0xe2>
			pwm = pid_compute_control_action(&pid, or.pitch, NULL);
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	2100      	movs	r1, #0
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	4812      	ldr	r0, [pc, #72]	@ (800164c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001602:	f000 fa73 	bl	8001aec <pid_compute_control_action>
 8001606:	eef0 7a40 	vmov.f32	s15, s0
 800160a:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800160c:	edc3 7a00 	vstr	s15, [r3]
		    nidec_h24_Move(pwm, 1);
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	2001      	movs	r0, #1
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	f000 f9e4 	bl	80019e8 <nidec_h24_Move>
		}
		else {
			nidec_h24_Move(0, 0);
		}
	}
}
 8001620:	e004      	b.n	800162c <HAL_TIM_PeriodElapsedCallback+0xec>
			nidec_h24_Move(0, 0);
 8001622:	2000      	movs	r0, #0
 8001624:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001654 <HAL_TIM_PeriodElapsedCallback+0x114>
 8001628:	f000 f9de 	bl	80019e8 <nidec_h24_Move>
}
 800162c:	bf00      	nop
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bdb0      	pop	{r4, r5, r7, pc}
 8001634:	40000400 	.word	0x40000400
 8001638:	20000108 	.word	0x20000108
 800163c:	2000009c 	.word	0x2000009c
 8001640:	20000000 	.word	0x20000000
 8001644:	20000008 	.word	0x20000008
 8001648:	20000004 	.word	0x20000004
 800164c:	20000124 	.word	0x20000124
 8001650:	2000015c 	.word	0x2000015c
 8001654:	00000000 	.word	0x00000000

08001658 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <Error_Handler+0x8>

08001664 <mpu6050_init>:
short gx_bias = 0;
short gy_bias = 0;
short gz_bias = 0;

/*mpu6050 initialization*/
HAL_StatusTypeDef mpu6050_init(){
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDR, 1, 100);
 800166a:	2364      	movs	r3, #100	@ 0x64
 800166c:	2201      	movs	r2, #1
 800166e:	21d0      	movs	r1, #208	@ 0xd0
 8001670:	4823      	ldr	r0, [pc, #140]	@ (8001700 <mpu6050_init+0x9c>)
 8001672:	f001 fd49 	bl	8003108 <HAL_I2C_IsDeviceReady>
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK) {
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d139      	bne.n	80016f4 <mpu6050_init+0x90>
			uint8_t data;

			/* power management register 0X6B must be all 0s to wake the sensor up */
			data = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 100);
 8001684:	2364      	movs	r3, #100	@ 0x64
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2301      	movs	r3, #1
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	1dbb      	adds	r3, r7, #6
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	226b      	movs	r2, #107	@ 0x6b
 8001694:	21d0      	movs	r1, #208	@ 0xd0
 8001696:	481a      	ldr	r0, [pc, #104]	@ (8001700 <mpu6050_init+0x9c>)
 8001698:	f001 fa0a 	bl	8002ab0 <HAL_I2C_Mem_Write>

			/* Set DATA RATE of 1KHz by writing SMPLRT_DIV register */
			data = 0x07;
 800169c:	2307      	movs	r3, #7
 800169e:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 100);
 80016a0:	2364      	movs	r3, #100	@ 0x64
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	2301      	movs	r3, #1
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	1dbb      	adds	r3, r7, #6
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	2219      	movs	r2, #25
 80016b0:	21d0      	movs	r1, #208	@ 0xd0
 80016b2:	4813      	ldr	r0, [pc, #76]	@ (8001700 <mpu6050_init+0x9c>)
 80016b4:	f001 f9fc 	bl	8002ab0 <HAL_I2C_Mem_Write>

			/*  Set accelerometer configuration in ACCEL_CONFIG Register */
			/* XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g */
			data = FS_ACC_2G;
 80016b8:	2300      	movs	r3, #0
 80016ba:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 100);
 80016bc:	2364      	movs	r3, #100	@ 0x64
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	2301      	movs	r3, #1
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	1dbb      	adds	r3, r7, #6
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2301      	movs	r3, #1
 80016ca:	221c      	movs	r2, #28
 80016cc:	21d0      	movs	r1, #208	@ 0xd0
 80016ce:	480c      	ldr	r0, [pc, #48]	@ (8001700 <mpu6050_init+0x9c>)
 80016d0:	f001 f9ee 	bl	8002ab0 <HAL_I2C_Mem_Write>

			/* Set Gyroscope configuration in GYRO_CONFIG Register */
			/* XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 deg/s */
			data = FS_GYRO_1000;
 80016d4:	2309      	movs	r3, #9
 80016d6:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 100);
 80016d8:	2364      	movs	r3, #100	@ 0x64
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	2301      	movs	r3, #1
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	1dbb      	adds	r3, r7, #6
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2301      	movs	r3, #1
 80016e6:	221b      	movs	r2, #27
 80016e8:	21d0      	movs	r1, #208	@ 0xd0
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <mpu6050_init+0x9c>)
 80016ec:	f001 f9e0 	bl	8002ab0 <HAL_I2C_Mem_Write>

			calculate_gyroscope_bias();
 80016f0:	f000 f808 	bl	8001704 <calculate_gyroscope_bias>
		}
		return status;
 80016f4:	79fb      	ldrb	r3, [r7, #7]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200000b4 	.word	0x200000b4

08001704 <calculate_gyroscope_bias>:

/*Gyroscope bias calculate*/
void calculate_gyroscope_bias() {
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	@ 0x38
 8001708:	af04      	add	r7, sp, #16
	// Number of samples to average
    int num_samples = 1000;
 800170a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170e:	617b      	str	r3, [r7, #20]
    long gx_sum = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
    long gy_sum = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
    long gz_sum = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < num_samples; i++) {
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	e023      	b.n	800176a <calculate_gyroscope_bias+0x66>
    	uint8_t buffer[14];
    	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 100);
 8001722:	2364      	movs	r3, #100	@ 0x64
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	230e      	movs	r3, #14
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2301      	movs	r3, #1
 8001730:	223b      	movs	r2, #59	@ 0x3b
 8001732:	21d0      	movs	r1, #208	@ 0xd0
 8001734:	481b      	ldr	r0, [pc, #108]	@ (80017a4 <calculate_gyroscope_bias+0xa0>)
 8001736:	f001 fab5 	bl	8002ca4 <HAL_I2C_Mem_Read>
    	gx_sum += buffer[8] << 8  | buffer[9];
 800173a:	7b3b      	ldrb	r3, [r7, #12]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	7b7a      	ldrb	r2, [r7, #13]
 8001740:	4313      	orrs	r3, r2
 8001742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001744:	4413      	add	r3, r2
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
    	gy_sum += buffer[10] << 8  | buffer[11];
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	4313      	orrs	r3, r2
 8001750:	6a3a      	ldr	r2, [r7, #32]
 8001752:	4413      	add	r3, r2
 8001754:	623b      	str	r3, [r7, #32]
    	gz_sum += buffer[12] << 8  | buffer[13];
 8001756:	7c3b      	ldrb	r3, [r7, #16]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	7c7a      	ldrb	r2, [r7, #17]
 800175c:	4313      	orrs	r3, r2
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	4413      	add	r3, r2
 8001762:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < num_samples; i++) {
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	3301      	adds	r3, #1
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	429a      	cmp	r2, r3
 8001770:	dbd7      	blt.n	8001722 <calculate_gyroscope_bias+0x1e>
    }

    gx_bias = gx_sum / num_samples;
 8001772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fb92 f3f3 	sdiv	r3, r2, r3
 800177a:	b21a      	sxth	r2, r3
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <calculate_gyroscope_bias+0xa4>)
 800177e:	801a      	strh	r2, [r3, #0]
    gy_bias = gy_sum / num_samples;
 8001780:	6a3a      	ldr	r2, [r7, #32]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	fb92 f3f3 	sdiv	r3, r2, r3
 8001788:	b21a      	sxth	r2, r3
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <calculate_gyroscope_bias+0xa8>)
 800178c:	801a      	strh	r2, [r3, #0]
    gz_bias = gz_sum / num_samples;
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fb92 f3f3 	sdiv	r3, r2, r3
 8001796:	b21a      	sxth	r2, r3
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <calculate_gyroscope_bias+0xac>)
 800179a:	801a      	strh	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	@ 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200000b4 	.word	0x200000b4
 80017a8:	20000160 	.word	0x20000160
 80017ac:	20000162 	.word	0x20000162
 80017b0:	20000164 	.word	0x20000164
 80017b4:	00000000 	.word	0x00000000

080017b8 <mpu6050_data>:
	res.data = (imu_data - gz_bias) / GYRO_SCALE;
	return res;
}

/* All data reading MPU6050 */
mpu_data mpu6050_data() {
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b090      	sub	sp, #64	@ 0x40
 80017bc:	af04      	add	r7, sp, #16
 80017be:	6078      	str	r0, [r7, #4]
	uint8_t buffer[14];
	 HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 100);
 80017c0:	2364      	movs	r3, #100	@ 0x64
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	230e      	movs	r3, #14
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	f107 0320 	add.w	r3, r7, #32
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	223b      	movs	r2, #59	@ 0x3b
 80017d2:	21d0      	movs	r1, #208	@ 0xd0
 80017d4:	4858      	ldr	r0, [pc, #352]	@ (8001938 <mpu6050_data+0x180>)
 80017d6:	f001 fa65 	bl	8002ca4 <HAL_I2C_Mem_Read>
	 mpu_data data;
	 data.ax = (int16_t)(buffer[0] << 8 | buffer[1]) / ACC_SCALE;
 80017da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe5d 	bl	80004ac <__aeabi_i2d>
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b51      	ldr	r3, [pc, #324]	@ (800193c <mpu6050_data+0x184>)
 80017f8:	f7fe ffec 	bl	80007d4 <__aeabi_ddiv>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f98c 	bl	8000b20 <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	60bb      	str	r3, [r7, #8]
	 data.ay = (int16_t)(buffer[2] << 8 | buffer[3]) / ACC_SCALE;
 800180c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21a      	sxth	r2, r3
 8001814:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001818:	b21b      	sxth	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b21b      	sxth	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe44 	bl	80004ac <__aeabi_i2d>
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	4b44      	ldr	r3, [pc, #272]	@ (800193c <mpu6050_data+0x184>)
 800182a:	f7fe ffd3 	bl	80007d4 <__aeabi_ddiv>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f973 	bl	8000b20 <__aeabi_d2f>
 800183a:	4603      	mov	r3, r0
 800183c:	60fb      	str	r3, [r7, #12]
	 data.az = (int16_t)(buffer[4] << 8 | buffer[5]) / ACC_SCALE_Z;
 800183e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800184a:	b21b      	sxth	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	b21b      	sxth	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe2b 	bl	80004ac <__aeabi_i2d>
 8001856:	a334      	add	r3, pc, #208	@ (adr r3, 8001928 <mpu6050_data+0x170>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe ffba 	bl	80007d4 <__aeabi_ddiv>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f95a 	bl	8000b20 <__aeabi_d2f>
 800186c:	4603      	mov	r3, r0
 800186e:	613b      	str	r3, [r7, #16]
	 data.gx = (int16_t)(buffer[8] << 8 | buffer[9]) / GYRO_SCALE;
 8001870:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b21a      	sxth	r2, r3
 8001878:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800187c:	b21b      	sxth	r3, r3
 800187e:	4313      	orrs	r3, r2
 8001880:	b21b      	sxth	r3, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe12 	bl	80004ac <__aeabi_i2d>
 8001888:	a329      	add	r3, pc, #164	@ (adr r3, 8001930 <mpu6050_data+0x178>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	f7fe ffa1 	bl	80007d4 <__aeabi_ddiv>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff f941 	bl	8000b20 <__aeabi_d2f>
 800189e:	4603      	mov	r3, r0
 80018a0:	617b      	str	r3, [r7, #20]
	 data.gy = (int16_t)(buffer[10] << 8 | buffer[11]) / GYRO_SCALE;
 80018a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	4313      	orrs	r3, r2
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fdf9 	bl	80004ac <__aeabi_i2d>
 80018ba:	a31d      	add	r3, pc, #116	@ (adr r3, 8001930 <mpu6050_data+0x178>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe ff88 	bl	80007d4 <__aeabi_ddiv>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f928 	bl	8000b20 <__aeabi_d2f>
 80018d0:	4603      	mov	r3, r0
 80018d2:	61bb      	str	r3, [r7, #24]
	 data.gz = (int16_t)(buffer[12] << 8 | buffer[13]) / GYRO_SCALE;
 80018d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	b21a      	sxth	r2, r3
 80018dc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fde0 	bl	80004ac <__aeabi_i2d>
 80018ec:	a310      	add	r3, pc, #64	@ (adr r3, 8001930 <mpu6050_data+0x178>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe ff6f 	bl	80007d4 <__aeabi_ddiv>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f90f 	bl	8000b20 <__aeabi_d2f>
 8001902:	4603      	mov	r3, r0
 8001904:	61fb      	str	r3, [r7, #28]
	 return data;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	461d      	mov	r5, r3
 800190a:	f107 0408 	add.w	r4, r7, #8
 800190e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001912:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001916:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	3730      	adds	r7, #48	@ 0x30
 800191e:	46bd      	mov	sp, r7
 8001920:	bdb0      	pop	{r4, r5, r7, pc}
 8001922:	bf00      	nop
 8001924:	f3af 8000 	nop.w
 8001928:	00000000 	.word	0x00000000
 800192c:	40cc2900 	.word	0x40cc2900
 8001930:	66666666 	.word	0x66666666
 8001934:	40406666 	.word	0x40406666
 8001938:	200000b4 	.word	0x200000b4
 800193c:	40d00000 	.word	0x40d00000

08001940 <nidec_h24_init>:

/*Default timer settings*/
extern  TIM_HandleTypeDef htim5;

/* To initialize the PWM and direction pins of the motor */
void nidec_h24_init(){
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};  // Declare the GPIO init struct
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <nidec_h24_init+0x98>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	4a1e      	ldr	r2, [pc, #120]	@ (80019d8 <nidec_h24_init+0x98>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	6313      	str	r3, [r2, #48]	@ 0x30
 8001964:	4b1c      	ldr	r3, [pc, #112]	@ (80019d8 <nidec_h24_init+0x98>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : Direction_Pin */
	GPIO_InitStruct.Pin = DIRECTION_PIN;
 8001970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001974:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800197a:	2302      	movs	r3, #2
 800197c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DIRECTION_PORT, &GPIO_InitStruct);
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4815      	ldr	r0, [pc, #84]	@ (80019dc <nidec_h24_init+0x9c>)
 8001988:	f000 fd88 	bl	800249c <HAL_GPIO_Init>

    /*Configure GPIO pin : Brake_Pin */
	GPIO_InitStruct.Pin = BRAKE_PIN;
 800198c:	2310      	movs	r3, #16
 800198e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001994:	2302      	movs	r3, #2
 8001996:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(BRAKE_PORT, &GPIO_InitStruct);
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	480e      	ldr	r0, [pc, #56]	@ (80019dc <nidec_h24_init+0x9c>)
 80019a2:	f000 fd7b 	bl	800249c <HAL_GPIO_Init>

	// Set the direction pin to low initially
	HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019ac:	480b      	ldr	r0, [pc, #44]	@ (80019dc <nidec_h24_init+0x9c>)
 80019ae:	f000 ff21 	bl	80027f4 <HAL_GPIO_WritePin>
    
	// Set the brake pin to low initially
	HAL_GPIO_WritePin(BRAKE_PORT, BRAKE_PIN, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2110      	movs	r1, #16
 80019b6:	4809      	ldr	r0, [pc, #36]	@ (80019dc <nidec_h24_init+0x9c>)
 80019b8:	f000 ff1c 	bl	80027f4 <HAL_GPIO_WritePin>

	// Start PWM on the specified timer and channel
	TIM5->CCR1 = 0;
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <nidec_h24_init+0xa0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_Base_Start(&htim5);
 80019c2:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <nidec_h24_init+0xa4>)
 80019c4:	f002 fe20 	bl	8004608 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim5, CHANNEL);
 80019c8:	2100      	movs	r1, #0
 80019ca:	4806      	ldr	r0, [pc, #24]	@ (80019e4 <nidec_h24_init+0xa4>)
 80019cc:	f002 ff44 	bl	8004858 <HAL_TIM_PWM_Start>
}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40000c00 	.word	0x40000c00
 80019e4:	200001c4 	.word	0x200001c4

080019e8 <nidec_h24_Move>:

/* To make the motor turn based on the input */
void nidec_h24_Move(float dutyCycle, uint8_t brk){
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80019f2:	4603      	mov	r3, r0
 80019f4:	70fb      	strb	r3, [r7, #3]
    // Calculate the compare value
    //uint32_t ccr = (uint16_t)(dutyCycle * (float)(htim5.Instance->ARR + 1))/100;

    // Set the PWM duty cycle
    TIM5->CCR1 = 100 - fabs(dutyCycle);
 80019f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019fa:	eef0 7ae7 	vabs.f32	s15, s15
 80019fe:	ee17 0a90 	vmov	r0, s15
 8001a02:	f7fe fd65 	bl	80004d0 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	f04f 0000 	mov.w	r0, #0
 8001a0e:	4915      	ldr	r1, [pc, #84]	@ (8001a64 <nidec_h24_Move+0x7c>)
 8001a10:	f7fe fbfe 	bl	8000210 <__aeabi_dsub>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4c13      	ldr	r4, [pc, #76]	@ (8001a68 <nidec_h24_Move+0x80>)
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f85f 	bl	8000ae0 <__aeabi_d2uiz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	6363      	str	r3, [r4, #52]	@ 0x34

    if (dutyCycle > 0) {
 8001a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	dd06      	ble.n	8001a42 <nidec_h24_Move+0x5a>
        // counter-clockwise
        HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a3a:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <nidec_h24_Move+0x84>)
 8001a3c:	f000 feda 	bl	80027f4 <HAL_GPIO_WritePin>
 8001a40:	e005      	b.n	8001a4e <nidec_h24_Move+0x66>
    }else{
        // clockwise
        HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, GPIO_PIN_SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a48:	4808      	ldr	r0, [pc, #32]	@ (8001a6c <nidec_h24_Move+0x84>)
 8001a4a:	f000 fed3 	bl	80027f4 <HAL_GPIO_WritePin>
    }

    // brk -> 0: brakes
    HAL_GPIO_WritePin(BRAKE_PORT, BRAKE_PIN, brk);
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	461a      	mov	r2, r3
 8001a52:	2110      	movs	r1, #16
 8001a54:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <nidec_h24_Move+0x84>)
 8001a56:	f000 fecd 	bl	80027f4 <HAL_GPIO_WritePin>

    // Generate an update event to reload the value immediately
    //htim5.Instance->EGR = TIM_EGR_UG;
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd90      	pop	{r4, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40590000 	.word	0x40590000
 8001a68:	40000c00 	.word	0x40000c00
 8001a6c:	40020400 	.word	0x40020400

08001a70 <pid_init>:
static float pid_get_current_sampling_time(PID_t *p);

float p_action, i_action, d_action, error_debug;


void pid_init(PID_t *p, float k_p, float k_i, float k_d, float min_out, float max_out){
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6178      	str	r0, [r7, #20]
 8001a78:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a7c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a80:	ed87 1a02 	vstr	s2, [r7, #8]
 8001a84:	edc7 1a01 	vstr	s3, [r7, #4]
 8001a88:	ed87 2a00 	vstr	s4, [r7]
    p->k_p = k_p;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	611a      	str	r2, [r3, #16]
    p->k_i = k_i;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	615a      	str	r2, [r3, #20]
    p->k_d = k_d;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	619a      	str	r2, [r3, #24]
    p->integral_error = 0;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
    p->last_error = 0;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
    p->last_updated_ts = 0;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
    p->min_output = min_out;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	621a      	str	r2, [r3, #32]
    p->max_output = max_out;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	61da      	str	r2, [r3, #28]
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <pid_set_setpoint>:


void pid_set_setpoint(PID_t *p, float set_point){
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	ed87 0a00 	vstr	s0, [r7]
    p->set_point = set_point;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	605a      	str	r2, [r3, #4]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <pid_compute_control_action>:


float pid_compute_control_action(PID_t *p, float est_output, float *est_out_derivative){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	@ 0x30
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001af8:	6079      	str	r1, [r7, #4]
    float delta_T;
    float error, integral_error;
    float u;
    static float last_u;
    float derivative;
    float alpha = 0.9;
 8001afa:	4b87      	ldr	r3, [pc, #540]	@ (8001d18 <pid_compute_control_action+0x22c>)
 8001afc:	623b      	str	r3, [r7, #32]
    float k_p = p->k_p;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	61fb      	str	r3, [r7, #28]

    error = pid_get_setpoint(p) - est_output;
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f913 	bl	8001d30 <pid_get_setpoint>
 8001b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b16:	edc7 7a06 	vstr	s15, [r7, #24]

    delta_T = pid_get_current_sampling_time(p);
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f918 	bl	8001d50 <pid_get_current_sampling_time>
 8001b20:	ed87 0a05 	vstr	s0, [r7, #20]

    if (p->k_d != 0.0){
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d04a      	beq.n	8001bca <pid_compute_control_action+0xde>
        if (est_out_derivative == NULL){
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d127      	bne.n	8001b8a <pid_compute_control_action+0x9e>
            derivative = (1 - alpha) * (error - p->last_error)/delta_T + alpha * p->d_term/(p->k_d * k_p);
 8001b3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b4c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b54:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001b66:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b6a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b74:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b7c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b84:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001b88:	e022      	b.n	8001bd0 <pid_compute_control_action+0xe4>
        } else {
            derivative = (1 - alpha) * (*est_out_derivative) + alpha * p->d_term/(p->k_d * k_p);
 8001b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001ba6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001baa:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	edd3 6a06 	vldr	s13, [r3, #24]
 8001bb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bb8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bbc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001bc8:	e002      	b.n	8001bd0 <pid_compute_control_action+0xe4>
        }
    } else {
        derivative = 0;
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (error > p->pos_deadzone || error < p->neg_deadzone){
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001bd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be2:	dc09      	bgt.n	8001bf8 <pid_compute_control_action+0x10c>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001bea:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	d50d      	bpl.n	8001c14 <pid_compute_control_action+0x128>
        integral_error = p->integral_error + delta_T * error;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bfe:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8001c12:	e002      	b.n	8001c1a <pid_compute_control_action+0x12e>
    } else {
        integral_error = p->integral_error;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    u = k_p * (error + p->k_i * integral_error + p->k_d * derivative);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c20:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c28:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edd3 6a06 	vldr	s13, [r3, #24]
 8001c36:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c42:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    p->p_term = k_p * error;
 8001c4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c52:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    p->i_term = k_p * p->k_i * integral_error;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    p->d_term = k_p * p->k_d * derivative;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c82:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    p_action = p->p_term;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d1c <pid_compute_control_action+0x230>)
 8001c9e:	6013      	str	r3, [r2, #0]
    i_action = p->i_term;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d20 <pid_compute_control_action+0x234>)
 8001ca6:	6013      	str	r3, [r2, #0]
    d_action = p->d_term;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cac:	4a1d      	ldr	r2, [pc, #116]	@ (8001d24 <pid_compute_control_action+0x238>)
 8001cae:	6013      	str	r3, [r2, #0]

    // reset wind-up
    if (u < p->min_output) {
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cb6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	d503      	bpl.n	8001ccc <pid_compute_control_action+0x1e0>
	u = p->min_output;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cca:	e010      	b.n	8001cee <pid_compute_control_action+0x202>
    } else if (u > p->max_output) {
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edd3 7a07 	vldr	s15, [r3, #28]
 8001cd2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001cd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	dd03      	ble.n	8001ce8 <pid_compute_control_action+0x1fc>
	u = p->max_output;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ce6:	e002      	b.n	8001cee <pid_compute_control_action+0x202>
    } else {
	p->integral_error = integral_error;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cec:	609a      	str	r2, [r3, #8]
    }

    last_u = u;
 8001cee:	4a0e      	ldr	r2, [pc, #56]	@ (8001d28 <pid_compute_control_action+0x23c>)
 8001cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf2:	6013      	str	r3, [r2, #0]

    p->last_error = error;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	60da      	str	r2, [r3, #12]
    error_debug = error;
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001d2c <pid_compute_control_action+0x240>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6013      	str	r3, [r2, #0]
    pid_update_ts(p);
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f84d 	bl	8001da0 <pid_update_ts>
    return u;
 8001d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d08:	ee07 3a90 	vmov	s15, r3
}
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	3730      	adds	r7, #48	@ 0x30
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	3f666666 	.word	0x3f666666
 8001d1c:	20000168 	.word	0x20000168
 8001d20:	2000016c 	.word	0x2000016c
 8001d24:	20000170 	.word	0x20000170
 8001d28:	20000178 	.word	0x20000178
 8001d2c:	20000174 	.word	0x20000174

08001d30 <pid_get_setpoint>:
float pid_get_error(PID_t *p){
	return p->last_error;
}


float pid_get_setpoint(PID_t *p){
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    return p->set_point;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	ee07 3a90 	vmov	s15, r3
}
 8001d40:	eeb0 0a67 	vmov.f32	s0, s15
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <pid_get_current_sampling_time>:


static float pid_get_current_sampling_time(PID_t *p){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	return (float) (HAL_GetTick() - p->last_updated_ts)/1000.0;
 8001d58:	f000 fa5e 	bl	8002218 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6c:	ee17 0a90 	vmov	r0, s15
 8001d70:	f7fe fbae 	bl	80004d0 <__aeabi_f2d>
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <pid_get_current_sampling_time+0x4c>)
 8001d7a:	f7fe fd2b 	bl	80007d4 <__aeabi_ddiv>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f7fe fecb 	bl	8000b20 <__aeabi_d2f>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	ee07 3a90 	vmov	s15, r3
}
 8001d90:	eeb0 0a67 	vmov.f32	s0, s15
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	408f4000 	.word	0x408f4000

08001da0 <pid_update_ts>:


void pid_update_ts(PID_t *p){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	p->last_updated_ts = HAL_GetTick();
 8001da8:	f000 fa36 	bl	8002218 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	601a      	str	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	4a0f      	ldr	r2, [pc, #60]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <NMI_Handler+0x4>

08001e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <HardFault_Handler+0x4>

08001e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <MemManage_Handler+0x4>

08001e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e62:	f000 f9c5 	bl	80021f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <TIM3_IRQHandler+0x10>)
 8001e72:	f002 fdb9 	bl	80049e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000017c 	.word	0x2000017c

08001e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <SystemInit+0x20>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ea0 <SystemInit+0x20>)
 8001e8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	463b      	mov	r3, r7
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <MX_TIM3_Init+0x94>)
 8001ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f3c <MX_TIM3_Init+0x98>)
 8001ec4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <MX_TIM3_Init+0x94>)
 8001ec8:	2229      	movs	r2, #41	@ 0x29
 8001eca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <MX_TIM3_Init+0x94>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <MX_TIM3_Init+0x94>)
 8001ed4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eda:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <MX_TIM3_Init+0x94>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee0:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <MX_TIM3_Init+0x94>)
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ee6:	4814      	ldr	r0, [pc, #80]	@ (8001f38 <MX_TIM3_Init+0x94>)
 8001ee8:	f002 fb3e 	bl	8004568 <HAL_TIM_Base_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001ef2:	f7ff fbb1 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001efa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	4619      	mov	r1, r3
 8001f02:	480d      	ldr	r0, [pc, #52]	@ (8001f38 <MX_TIM3_Init+0x94>)
 8001f04:	f002 ff22 	bl	8004d4c <HAL_TIM_ConfigClockSource>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001f0e:	f7ff fba3 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4806      	ldr	r0, [pc, #24]	@ (8001f38 <MX_TIM3_Init+0x94>)
 8001f20:	f003 fb20 	bl	8005564 <HAL_TIMEx_MasterConfigSynchronization>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001f2a:	f7ff fb95 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000017c 	.word	0x2000017c
 8001f3c:	40000400 	.word	0x40000400

08001f40 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	@ 0x28
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
 8001f5e:	615a      	str	r2, [r3, #20]
 8001f60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f62:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <MX_TIM5_Init+0xa8>)
 8001f64:	4a21      	ldr	r2, [pc, #132]	@ (8001fec <MX_TIM5_Init+0xac>)
 8001f66:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 43;
 8001f68:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <MX_TIM5_Init+0xa8>)
 8001f6a:	222b      	movs	r2, #43	@ 0x2b
 8001f6c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <MX_TIM5_Init+0xa8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <MX_TIM5_Init+0xa8>)
 8001f76:	2263      	movs	r2, #99	@ 0x63
 8001f78:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe8 <MX_TIM5_Init+0xa8>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <MX_TIM5_Init+0xa8>)
 8001f82:	2280      	movs	r2, #128	@ 0x80
 8001f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f86:	4818      	ldr	r0, [pc, #96]	@ (8001fe8 <MX_TIM5_Init+0xa8>)
 8001f88:	f002 fc16 	bl	80047b8 <HAL_TIM_PWM_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001f92:	f7ff fb61 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f9e:	f107 0320 	add.w	r3, r7, #32
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4810      	ldr	r0, [pc, #64]	@ (8001fe8 <MX_TIM5_Init+0xa8>)
 8001fa6:	f003 fadd 	bl	8005564 <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001fb0:	f7ff fb52 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb4:	2360      	movs	r3, #96	@ 0x60
 8001fb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4807      	ldr	r0, [pc, #28]	@ (8001fe8 <MX_TIM5_Init+0xa8>)
 8001fcc:	f002 fdfc 	bl	8004bc8 <HAL_TIM_PWM_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001fd6:	f7ff fb3f 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001fda:	4803      	ldr	r0, [pc, #12]	@ (8001fe8 <MX_TIM5_Init+0xa8>)
 8001fdc:	f000 f852 	bl	8002084 <HAL_TIM_MspPostInit>

}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	@ 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200001c4 	.word	0x200001c4
 8001fec:	40000c00 	.word	0x40000c00

08001ff0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8002038 <HAL_TIM_Base_MspInit+0x48>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d115      	bne.n	800202e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_TIM_Base_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	4a0c      	ldr	r2, [pc, #48]	@ (800203c <HAL_TIM_Base_MspInit+0x4c>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	6413      	str	r3, [r2, #64]	@ 0x40
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_TIM_Base_MspInit+0x4c>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	201d      	movs	r0, #29
 8002024:	f000 fa03 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002028:	201d      	movs	r0, #29
 800202a:	f000 fa1c 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40000400 	.word	0x40000400
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0b      	ldr	r2, [pc, #44]	@ (800207c <HAL_TIM_PWM_MspInit+0x3c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10d      	bne.n	800206e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <HAL_TIM_PWM_MspInit+0x40>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	4a09      	ldr	r2, [pc, #36]	@ (8002080 <HAL_TIM_PWM_MspInit+0x40>)
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	6413      	str	r3, [r2, #64]	@ 0x40
 8002062:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <HAL_TIM_PWM_MspInit+0x40>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40000c00 	.word	0x40000c00
 8002080:	40023800 	.word	0x40023800

08002084 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a12      	ldr	r2, [pc, #72]	@ (80020ec <HAL_TIM_MspPostInit+0x68>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d11d      	bne.n	80020e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <HAL_TIM_MspPostInit+0x6c>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	4a10      	ldr	r2, [pc, #64]	@ (80020f0 <HAL_TIM_MspPostInit+0x6c>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_TIM_MspPostInit+0x6c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020c2:	2301      	movs	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	@ (80020f4 <HAL_TIM_MspPostInit+0x70>)
 80020de:	f000 f9dd 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80020e2:	bf00      	nop
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40000c00 	.word	0x40000c00
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000

080020f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002130 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020fc:	f7ff fec0 	bl	8001e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002100:	480c      	ldr	r0, [pc, #48]	@ (8002134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002102:	490d      	ldr	r1, [pc, #52]	@ (8002138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002104:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002118:	4c0a      	ldr	r4, [pc, #40]	@ (8002144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002126:	f003 fabb 	bl	80056a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212a:	f7ff f955 	bl	80013d8 <main>
  bx  lr    
 800212e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002130:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800213c:	08005cb8 	.word	0x08005cb8
  ldr r2, =_sbss
 8002140:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002144:	20000348 	.word	0x20000348

08002148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <ADC_IRQHandler>
	...

0800214c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002150:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <HAL_Init+0x40>)
 8002156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800215a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <HAL_Init+0x40>)
 8002162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a07      	ldr	r2, [pc, #28]	@ (800218c <HAL_Init+0x40>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002174:	2003      	movs	r0, #3
 8002176:	f000 f94f 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217a:	200f      	movs	r0, #15
 800217c:	f000 f808 	bl	8002190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002180:	f7ff fe1c 	bl	8001dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00

08002190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <HAL_InitTick+0x54>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <HAL_InitTick+0x58>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f967 	bl	8002482 <HAL_SYSTICK_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00e      	b.n	80021dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d80a      	bhi.n	80021da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c4:	2200      	movs	r2, #0
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f000 f92f 	bl	800242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d0:	4a06      	ldr	r2, [pc, #24]	@ (80021ec <HAL_InitTick+0x5c>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000010 	.word	0x20000010
 80021e8:	20000018 	.word	0x20000018
 80021ec:	20000014 	.word	0x20000014

080021f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000018 	.word	0x20000018
 8002214:	2000020c 	.word	0x2000020c

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	2000020c 	.word	0x2000020c

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff ffee 	bl	8002218 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_Delay+0x44>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffde 	bl	8002218 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000018 	.word	0x20000018

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	@ (8002314 <__NVIC_EnableIRQ+0x38>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	@ (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	@ (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	@ 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	@ 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f7ff ff8e 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff29 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff3e 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff8e 	bl	800236c <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5d 	bl	8002318 <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff31 	bl	80022dc <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e165      	b.n	8002784 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 8154 	bne.w	800277e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d005      	beq.n	80024ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d130      	bne.n	8002550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b03      	cmp	r3, #3
 800255a:	d017      	beq.n	800258c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d123      	bne.n	80025e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80ae 	beq.w	800277e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	4b5d      	ldr	r3, [pc, #372]	@ (800279c <HAL_GPIO_Init+0x300>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	4a5c      	ldr	r2, [pc, #368]	@ (800279c <HAL_GPIO_Init+0x300>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002630:	6453      	str	r3, [r2, #68]	@ 0x44
 8002632:	4b5a      	ldr	r3, [pc, #360]	@ (800279c <HAL_GPIO_Init+0x300>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263e:	4a58      	ldr	r2, [pc, #352]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4f      	ldr	r2, [pc, #316]	@ (80027a4 <HAL_GPIO_Init+0x308>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d025      	beq.n	80026b6 <HAL_GPIO_Init+0x21a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4e      	ldr	r2, [pc, #312]	@ (80027a8 <HAL_GPIO_Init+0x30c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01f      	beq.n	80026b2 <HAL_GPIO_Init+0x216>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4d      	ldr	r2, [pc, #308]	@ (80027ac <HAL_GPIO_Init+0x310>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d019      	beq.n	80026ae <HAL_GPIO_Init+0x212>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4c      	ldr	r2, [pc, #304]	@ (80027b0 <HAL_GPIO_Init+0x314>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_GPIO_Init+0x20e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4b      	ldr	r2, [pc, #300]	@ (80027b4 <HAL_GPIO_Init+0x318>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00d      	beq.n	80026a6 <HAL_GPIO_Init+0x20a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4a      	ldr	r2, [pc, #296]	@ (80027b8 <HAL_GPIO_Init+0x31c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x206>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a49      	ldr	r2, [pc, #292]	@ (80027bc <HAL_GPIO_Init+0x320>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_GPIO_Init+0x202>
 800269a:	2306      	movs	r3, #6
 800269c:	e00c      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 800269e:	2307      	movs	r3, #7
 80026a0:	e00a      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e008      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e004      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026b6:	2300      	movs	r3, #0
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4093      	lsls	r3, r2
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c8:	4935      	ldr	r1, [pc, #212]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d6:	4b3a      	ldr	r3, [pc, #232]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fa:	4a31      	ldr	r2, [pc, #196]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002700:	4b2f      	ldr	r3, [pc, #188]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002724:	4a26      	ldr	r2, [pc, #152]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272a:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274e:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002754:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002778:	4a11      	ldr	r2, [pc, #68]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	f67f ae96 	bls.w	80024b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3724      	adds	r7, #36	@ 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40020000 	.word	0x40020000
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40021400 	.word	0x40021400
 80027bc:	40021800 	.word	0x40021800
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e001      	b.n	80027e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002810:	e003      	b.n	800281a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e12b      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fd16 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2224      	movs	r2, #36	@ 0x24
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800287a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800288a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800288c:	f001 fa10 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 8002890:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a81      	ldr	r2, [pc, #516]	@ (8002a9c <HAL_I2C_Init+0x274>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d807      	bhi.n	80028ac <HAL_I2C_Init+0x84>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a80      	ldr	r2, [pc, #512]	@ (8002aa0 <HAL_I2C_Init+0x278>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e006      	b.n	80028ba <HAL_I2C_Init+0x92>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a7d      	ldr	r2, [pc, #500]	@ (8002aa4 <HAL_I2C_Init+0x27c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0e7      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a78      	ldr	r2, [pc, #480]	@ (8002aa8 <HAL_I2C_Init+0x280>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9b      	lsrs	r3, r3, #18
 80028cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a9c <HAL_I2C_Init+0x274>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d802      	bhi.n	80028fc <HAL_I2C_Init+0xd4>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3301      	adds	r3, #1
 80028fa:	e009      	b.n	8002910 <HAL_I2C_Init+0xe8>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	4a69      	ldr	r2, [pc, #420]	@ (8002aac <HAL_I2C_Init+0x284>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	3301      	adds	r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	430b      	orrs	r3, r1
 8002916:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002922:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	495c      	ldr	r1, [pc, #368]	@ (8002a9c <HAL_I2C_Init+0x274>)
 800292c:	428b      	cmp	r3, r1
 800292e:	d819      	bhi.n	8002964 <HAL_I2C_Init+0x13c>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e59      	subs	r1, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fbb1 f3f3 	udiv	r3, r1, r3
 800293e:	1c59      	adds	r1, r3, #1
 8002940:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002944:	400b      	ands	r3, r1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_I2C_Init+0x138>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1e59      	subs	r1, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fbb1 f3f3 	udiv	r3, r1, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	e051      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002960:	2304      	movs	r3, #4
 8002962:	e04f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d111      	bne.n	8002990 <HAL_I2C_Init+0x168>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	440b      	add	r3, r1
 800297a:	fbb0 f3f3 	udiv	r3, r0, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e012      	b.n	80029b6 <HAL_I2C_Init+0x18e>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e58      	subs	r0, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	0099      	lsls	r1, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Init+0x196>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e022      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10e      	bne.n	80029e4 <HAL_I2C_Init+0x1bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e58      	subs	r0, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	440b      	add	r3, r1
 80029d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029e2:	e00f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	6809      	ldr	r1, [r1, #0]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6911      	ldr	r1, [r2, #16]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	4311      	orrs	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	000186a0 	.word	0x000186a0
 8002aa0:	001e847f 	.word	0x001e847f
 8002aa4:	003d08ff 	.word	0x003d08ff
 8002aa8:	431bde83 	.word	0x431bde83
 8002aac:	10624dd3 	.word	0x10624dd3

08002ab0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	4608      	mov	r0, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	817b      	strh	r3, [r7, #10]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	813b      	strh	r3, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aca:	f7ff fba5 	bl	8002218 <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	f040 80d9 	bne.w	8002c90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2319      	movs	r3, #25
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	496d      	ldr	r1, [pc, #436]	@ (8002c9c <HAL_I2C_Mem_Write+0x1ec>)
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fdb9 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0cc      	b.n	8002c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Mem_Write+0x56>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e0c5      	b.n	8002c92 <HAL_I2C_Mem_Write+0x1e2>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d007      	beq.n	8002b2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2221      	movs	r2, #33	@ 0x21
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2240      	movs	r2, #64	@ 0x40
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a3a      	ldr	r2, [r7, #32]
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a4d      	ldr	r2, [pc, #308]	@ (8002ca0 <HAL_I2C_Mem_Write+0x1f0>)
 8002b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b6e:	88f8      	ldrh	r0, [r7, #6]
 8002b70:	893a      	ldrh	r2, [r7, #8]
 8002b72:	8979      	ldrh	r1, [r7, #10]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fbf0 	bl	8003364 <I2C_RequestMemoryWrite>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d052      	beq.n	8002c30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e081      	b.n	8002c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fe7e 	bl	8003894 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d107      	bne.n	8002bb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e06b      	b.n	8002c92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d11b      	bne.n	8002c30 <HAL_I2C_Mem_Write+0x180>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d017      	beq.n	8002c30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1aa      	bne.n	8002b8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fe71 	bl	8003924 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d107      	bne.n	8002c60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e016      	b.n	8002c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	00100002 	.word	0x00100002
 8002ca0:	ffff0000 	.word	0xffff0000

08002ca4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	@ 0x30
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	4608      	mov	r0, r1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	817b      	strh	r3, [r7, #10]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	813b      	strh	r3, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cbe:	f7ff faab 	bl	8002218 <HAL_GetTick>
 8002cc2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	f040 8214 	bne.w	80030fa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	2319      	movs	r3, #25
 8002cd8:	2201      	movs	r2, #1
 8002cda:	497b      	ldr	r1, [pc, #492]	@ (8002ec8 <HAL_I2C_Mem_Read+0x224>)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fcbf 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e207      	b.n	80030fc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_I2C_Mem_Read+0x56>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e200      	b.n	80030fc <HAL_I2C_Mem_Read+0x458>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d007      	beq.n	8002d20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2222      	movs	r2, #34	@ 0x22
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2240      	movs	r2, #64	@ 0x40
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ecc <HAL_I2C_Mem_Read+0x228>)
 8002d60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d62:	88f8      	ldrh	r0, [r7, #6]
 8002d64:	893a      	ldrh	r2, [r7, #8]
 8002d66:	8979      	ldrh	r1, [r7, #10]
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	4603      	mov	r3, r0
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fb8c 	bl	8003490 <I2C_RequestMemoryRead>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e1bc      	b.n	80030fc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d113      	bne.n	8002db2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e190      	b.n	80030d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d11b      	bne.n	8002df2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e170      	b.n	80030d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d11b      	bne.n	8002e32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	e150      	b.n	80030d4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e48:	e144      	b.n	80030d4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	f200 80f1 	bhi.w	8003036 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d123      	bne.n	8002ea4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fda7 	bl	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e145      	b.n	80030fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ea2:	e117      	b.n	80030d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d14e      	bne.n	8002f4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	4906      	ldr	r1, [pc, #24]	@ (8002ed0 <HAL_I2C_Mem_Read+0x22c>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fbd2 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e11a      	b.n	80030fc <HAL_I2C_Mem_Read+0x458>
 8002ec6:	bf00      	nop
 8002ec8:	00100002 	.word	0x00100002
 8002ecc:	ffff0000 	.word	0xffff0000
 8002ed0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f48:	e0c4      	b.n	80030d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f50:	2200      	movs	r2, #0
 8002f52:	496c      	ldr	r1, [pc, #432]	@ (8003104 <HAL_I2C_Mem_Read+0x460>)
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fb83 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0cb      	b.n	80030fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fac:	2200      	movs	r2, #0
 8002fae:	4955      	ldr	r1, [pc, #340]	@ (8003104 <HAL_I2C_Mem_Read+0x460>)
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fb55 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e09d      	b.n	80030fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003034:	e04e      	b.n	80030d4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003038:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fcba 	bl	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e058      	b.n	80030fc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b04      	cmp	r3, #4
 8003088:	d124      	bne.n	80030d4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308e:	2b03      	cmp	r3, #3
 8003090:	d107      	bne.n	80030a2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f47f aeb6 	bne.w	8002e4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3728      	adds	r7, #40	@ 0x28
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	00010004 	.word	0x00010004

08003108 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	460b      	mov	r3, r1
 8003116:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003118:	f7ff f87e 	bl	8002218 <HAL_GetTick>
 800311c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b20      	cmp	r3, #32
 800312c:	f040 8111 	bne.w	8003352 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2319      	movs	r3, #25
 8003136:	2201      	movs	r2, #1
 8003138:	4988      	ldr	r1, [pc, #544]	@ (800335c <HAL_I2C_IsDeviceReady+0x254>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa90 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	e104      	b.n	8003354 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_I2C_IsDeviceReady+0x50>
 8003154:	2302      	movs	r3, #2
 8003156:	e0fd      	b.n	8003354 <HAL_I2C_IsDeviceReady+0x24c>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d007      	beq.n	800317e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800318c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2224      	movs	r2, #36	@ 0x24
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a70      	ldr	r2, [pc, #448]	@ (8003360 <HAL_I2C_IsDeviceReady+0x258>)
 80031a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fa4e 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00d      	beq.n	80031e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031d8:	d103      	bne.n	80031e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0b6      	b.n	8003354 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80031f6:	f7ff f80f 	bl	8002218 <HAL_GetTick>
 80031fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b02      	cmp	r3, #2
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003220:	bf0c      	ite	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	2300      	movne	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800322a:	e025      	b.n	8003278 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800322c:	f7fe fff4 	bl	8002218 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d302      	bcc.n	8003242 <HAL_I2C_IsDeviceReady+0x13a>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	22a0      	movs	r2, #160	@ 0xa0
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b02      	cmp	r3, #2
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2ba0      	cmp	r3, #160	@ 0xa0
 8003282:	d005      	beq.n	8003290 <HAL_I2C_IsDeviceReady+0x188>
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_I2C_IsDeviceReady+0x188>
 800328a:	7dbb      	ldrb	r3, [r7, #22]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0cd      	beq.n	800322c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d129      	bne.n	80032fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2319      	movs	r3, #25
 80032d2:	2201      	movs	r2, #1
 80032d4:	4921      	ldr	r1, [pc, #132]	@ (800335c <HAL_I2C_IsDeviceReady+0x254>)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f9c2 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e036      	b.n	8003354 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	e02c      	b.n	8003354 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003308:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003312:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2319      	movs	r3, #25
 800331a:	2201      	movs	r2, #1
 800331c:	490f      	ldr	r1, [pc, #60]	@ (800335c <HAL_I2C_IsDeviceReady+0x254>)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f99e 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e012      	b.n	8003354 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	3301      	adds	r3, #1
 8003332:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	f4ff af32 	bcc.w	80031a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
  }
}
 8003354:	4618      	mov	r0, r3
 8003356:	3720      	adds	r7, #32
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00100002 	.word	0x00100002
 8003360:	ffff0000 	.word	0xffff0000

08003364 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	817b      	strh	r3, [r7, #10]
 8003376:	460b      	mov	r3, r1
 8003378:	813b      	strh	r3, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800338c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	2200      	movs	r2, #0
 8003396:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f960 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033b4:	d103      	bne.n	80033be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e05f      	b.n	8003482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	492d      	ldr	r1, [pc, #180]	@ (800348c <I2C_RequestMemoryWrite+0x128>)
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f9bb 	bl	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e04c      	b.n	8003482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003400:	6a39      	ldr	r1, [r7, #32]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fa46 	bl	8003894 <I2C_WaitOnTXEFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	2b04      	cmp	r3, #4
 8003414:	d107      	bne.n	8003426 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003424:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e02b      	b.n	8003482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d105      	bne.n	800343c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003430:	893b      	ldrh	r3, [r7, #8]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	611a      	str	r2, [r3, #16]
 800343a:	e021      	b.n	8003480 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800343c:	893b      	ldrh	r3, [r7, #8]
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	b29b      	uxth	r3, r3
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800344a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800344c:	6a39      	ldr	r1, [r7, #32]
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fa20 	bl	8003894 <I2C_WaitOnTXEFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	2b04      	cmp	r3, #4
 8003460:	d107      	bne.n	8003472 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003470:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e005      	b.n	8003482 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003476:	893b      	ldrh	r3, [r7, #8]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	00010002 	.word	0x00010002

08003490 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	4608      	mov	r0, r1
 800349a:	4611      	mov	r1, r2
 800349c:	461a      	mov	r2, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	817b      	strh	r3, [r7, #10]
 80034a2:	460b      	mov	r3, r1
 80034a4:	813b      	strh	r3, [r7, #8]
 80034a6:	4613      	mov	r3, r2
 80034a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f8c2 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00d      	beq.n	80034fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f0:	d103      	bne.n	80034fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0aa      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034fe:	897b      	ldrh	r3, [r7, #10]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800350c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	4952      	ldr	r1, [pc, #328]	@ (800365c <I2C_RequestMemoryRead+0x1cc>)
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f91d 	bl	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e097      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353c:	6a39      	ldr	r1, [r7, #32]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f9a8 	bl	8003894 <I2C_WaitOnTXEFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	2b04      	cmp	r3, #4
 8003550:	d107      	bne.n	8003562 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003560:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e076      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d105      	bne.n	8003578 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800356c:	893b      	ldrh	r3, [r7, #8]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	611a      	str	r2, [r3, #16]
 8003576:	e021      	b.n	80035bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003578:	893b      	ldrh	r3, [r7, #8]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	b29b      	uxth	r3, r3
 800357e:	b2da      	uxtb	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003588:	6a39      	ldr	r1, [r7, #32]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f982 	bl	8003894 <I2C_WaitOnTXEFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	2b04      	cmp	r3, #4
 800359c:	d107      	bne.n	80035ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e050      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035b2:	893b      	ldrh	r3, [r7, #8]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035be:	6a39      	ldr	r1, [r7, #32]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f967 	bl	8003894 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00d      	beq.n	80035e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d107      	bne.n	80035e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e035      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	2200      	movs	r2, #0
 8003600:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f82b 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800361e:	d103      	bne.n	8003628 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003626:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e013      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800362c:	897b      	ldrh	r3, [r7, #10]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	6a3a      	ldr	r2, [r7, #32]
 8003640:	4906      	ldr	r1, [pc, #24]	@ (800365c <I2C_RequestMemoryRead+0x1cc>)
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f886 	bl	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	00010002 	.word	0x00010002

08003660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003670:	e048      	b.n	8003704 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d044      	beq.n	8003704 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fe fdcd 	bl	8002218 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d139      	bne.n	8003704 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10d      	bne.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	43da      	mvns	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	e00c      	b.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	43da      	mvns	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d116      	bne.n	8003704 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e023      	b.n	800374c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d10d      	bne.n	800372a <I2C_WaitOnFlagUntilTimeout+0xca>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	43da      	mvns	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4013      	ands	r3, r2
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	e00c      	b.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	43da      	mvns	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4013      	ands	r3, r2
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	429a      	cmp	r2, r3
 8003748:	d093      	beq.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003762:	e071      	b.n	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800376e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003772:	d123      	bne.n	80037bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003782:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800378c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	f043 0204 	orr.w	r2, r3, #4
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e067      	b.n	800388c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c2:	d041      	beq.n	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c4:	f7fe fd28 	bl	8002218 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d302      	bcc.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d136      	bne.n	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10c      	bne.n	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4013      	ands	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf14      	ite	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	2300      	moveq	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	e00b      	b.n	8003816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	43da      	mvns	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4013      	ands	r3, r2
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d016      	beq.n	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e021      	b.n	800388c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	0c1b      	lsrs	r3, r3, #16
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d10c      	bne.n	800386c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	43da      	mvns	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e00b      	b.n	8003884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	43da      	mvns	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4013      	ands	r3, r2
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	bf14      	ite	ne
 800387e:	2301      	movne	r3, #1
 8003880:	2300      	moveq	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	f47f af6d 	bne.w	8003764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038a0:	e034      	b.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f8e3 	bl	8003a6e <I2C_IsAcknowledgeFailed>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e034      	b.n	800391c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d028      	beq.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ba:	f7fe fcad 	bl	8002218 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d302      	bcc.n	80038d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d11d      	bne.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038da:	2b80      	cmp	r3, #128	@ 0x80
 80038dc:	d016      	beq.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f8:	f043 0220 	orr.w	r2, r3, #32
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e007      	b.n	800391c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003916:	2b80      	cmp	r3, #128	@ 0x80
 8003918:	d1c3      	bne.n	80038a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003930:	e034      	b.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f89b 	bl	8003a6e <I2C_IsAcknowledgeFailed>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e034      	b.n	80039ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d028      	beq.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fe fc65 	bl	8002218 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11d      	bne.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d016      	beq.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003988:	f043 0220 	orr.w	r2, r3, #32
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e007      	b.n	80039ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d1c3      	bne.n	8003932 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039c0:	e049      	b.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d119      	bne.n	8003a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0210 	mvn.w	r2, #16
 80039d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e030      	b.n	8003a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a04:	f7fe fc08 	bl	8002218 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d302      	bcc.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11d      	bne.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a24:	2b40      	cmp	r3, #64	@ 0x40
 8003a26:	d016      	beq.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	f043 0220 	orr.w	r2, r3, #32
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e007      	b.n	8003a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a60:	2b40      	cmp	r3, #64	@ 0x40
 8003a62:	d1ae      	bne.n	80039c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a84:	d11b      	bne.n	8003abe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	f043 0204 	orr.w	r2, r3, #4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0cc      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b68      	ldr	r3, [pc, #416]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d90c      	bls.n	8003b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b65      	ldr	r3, [pc, #404]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b63      	ldr	r3, [pc, #396]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0b8      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d020      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b20:	4b59      	ldr	r3, [pc, #356]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4a58      	ldr	r2, [pc, #352]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b38:	4b53      	ldr	r3, [pc, #332]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4a52      	ldr	r2, [pc, #328]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b44:	4b50      	ldr	r3, [pc, #320]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	494d      	ldr	r1, [pc, #308]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d044      	beq.n	8003bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	4b47      	ldr	r3, [pc, #284]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d119      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e07f      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d003      	beq.n	8003b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d107      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e06f      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e067      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003baa:	4b37      	ldr	r3, [pc, #220]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f023 0203 	bic.w	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4934      	ldr	r1, [pc, #208]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bbc:	f7fe fb2c 	bl	8002218 <HAL_GetTick>
 8003bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	e00a      	b.n	8003bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc4:	f7fe fb28 	bl	8002218 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e04f      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bda:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 020c 	and.w	r2, r3, #12
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d1eb      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bec:	4b25      	ldr	r3, [pc, #148]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d20c      	bcs.n	8003c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4b22      	ldr	r3, [pc, #136]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b20      	ldr	r3, [pc, #128]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e032      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c20:	4b19      	ldr	r3, [pc, #100]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4916      	ldr	r1, [pc, #88]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c3e:	4b12      	ldr	r3, [pc, #72]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	490e      	ldr	r1, [pc, #56]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c52:	f000 f841 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c56:	4602      	mov	r2, r0
 8003c58:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	490a      	ldr	r1, [pc, #40]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	5ccb      	ldrb	r3, [r1, r3]
 8003c66:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6a:	4a09      	ldr	r2, [pc, #36]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c6e:	4b09      	ldr	r3, [pc, #36]	@ (8003c94 <HAL_RCC_ClockConfig+0x1c8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fa8c 	bl	8002190 <HAL_InitTick>

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40023c00 	.word	0x40023c00
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	08005c50 	.word	0x08005c50
 8003c90:	20000010 	.word	0x20000010
 8003c94:	20000014 	.word	0x20000014

08003c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c9c:	4b03      	ldr	r3, [pc, #12]	@ (8003cac <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000010 	.word	0x20000010

08003cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cb4:	f7ff fff0 	bl	8003c98 <HAL_RCC_GetHCLKFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	0a9b      	lsrs	r3, r3, #10
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	4903      	ldr	r1, [pc, #12]	@ (8003cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	08005c60 	.word	0x08005c60

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b0a6      	sub	sp, #152	@ 0x98
 8003cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfe:	4bc8      	ldr	r3, [pc, #800]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	f200 817e 	bhi.w	8004008 <HAL_RCC_GetSysClockFreq+0x330>
 8003d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d14 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d12:	bf00      	nop
 8003d14:	08003d49 	.word	0x08003d49
 8003d18:	08004009 	.word	0x08004009
 8003d1c:	08004009 	.word	0x08004009
 8003d20:	08004009 	.word	0x08004009
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08004009 	.word	0x08004009
 8003d2c:	08004009 	.word	0x08004009
 8003d30:	08004009 	.word	0x08004009
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08004009 	.word	0x08004009
 8003d3c:	08004009 	.word	0x08004009
 8003d40:	08004009 	.word	0x08004009
 8003d44:	08003ec3 	.word	0x08003ec3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d48:	4bb6      	ldr	r3, [pc, #728]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8003d4e:	e15f      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d50:	4bb5      	ldr	r3, [pc, #724]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003d56:	e15b      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d58:	4bb1      	ldr	r3, [pc, #708]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d64:	4bae      	ldr	r3, [pc, #696]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d031      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d70:	4bab      	ldr	r3, [pc, #684]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	2200      	movs	r2, #0
 8003d78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d82:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d84:	2300      	movs	r3, #0
 8003d86:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d88:	4ba7      	ldr	r3, [pc, #668]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d8a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003d8e:	462a      	mov	r2, r5
 8003d90:	fb03 f202 	mul.w	r2, r3, r2
 8003d94:	2300      	movs	r3, #0
 8003d96:	4621      	mov	r1, r4
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	4aa2      	ldr	r2, [pc, #648]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x350>)
 8003da0:	4621      	mov	r1, r4
 8003da2:	fba1 1202 	umull	r1, r2, r1, r2
 8003da6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003da8:	460a      	mov	r2, r1
 8003daa:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003dac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003dae:	4413      	add	r3, r2
 8003db0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db6:	2200      	movs	r2, #0
 8003db8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003dbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dc0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003dc4:	f7fc fefc 	bl	8000bc0 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4613      	mov	r3, r2
 8003dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003dd2:	e064      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd4:	4b92      	ldr	r3, [pc, #584]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	099b      	lsrs	r3, r3, #6
 8003dda:	2200      	movs	r2, #0
 8003ddc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dde:	657a      	str	r2, [r7, #84]	@ 0x54
 8003de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003de8:	2300      	movs	r3, #0
 8003dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003df0:	4622      	mov	r2, r4
 8003df2:	462b      	mov	r3, r5
 8003df4:	f04f 0000 	mov.w	r0, #0
 8003df8:	f04f 0100 	mov.w	r1, #0
 8003dfc:	0159      	lsls	r1, r3, #5
 8003dfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e02:	0150      	lsls	r0, r2, #5
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4621      	mov	r1, r4
 8003e0a:	1a51      	subs	r1, r2, r1
 8003e0c:	6139      	str	r1, [r7, #16]
 8003e0e:	4629      	mov	r1, r5
 8003e10:	eb63 0301 	sbc.w	r3, r3, r1
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e22:	4659      	mov	r1, fp
 8003e24:	018b      	lsls	r3, r1, #6
 8003e26:	4651      	mov	r1, sl
 8003e28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	018a      	lsls	r2, r1, #6
 8003e30:	4651      	mov	r1, sl
 8003e32:	ebb2 0801 	subs.w	r8, r2, r1
 8003e36:	4659      	mov	r1, fp
 8003e38:	eb63 0901 	sbc.w	r9, r3, r1
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e50:	4690      	mov	r8, r2
 8003e52:	4699      	mov	r9, r3
 8003e54:	4623      	mov	r3, r4
 8003e56:	eb18 0303 	adds.w	r3, r8, r3
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	462b      	mov	r3, r5
 8003e5e:	eb49 0303 	adc.w	r3, r9, r3
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e70:	4629      	mov	r1, r5
 8003e72:	028b      	lsls	r3, r1, #10
 8003e74:	4621      	mov	r1, r4
 8003e76:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	028a      	lsls	r2, r1, #10
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e86:	2200      	movs	r2, #0
 8003e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e90:	f7fc fe96 	bl	8000bc0 <__aeabi_uldivmod>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4613      	mov	r3, r2
 8003e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e9e:	4b60      	ldr	r3, [pc, #384]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	0c1b      	lsrs	r3, r3, #16
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8003eb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003ec0:	e0a6      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec2:	4b57      	ldr	r3, [pc, #348]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ece:	4b54      	ldr	r3, [pc, #336]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d02a      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eda:	4b51      	ldr	r3, [pc, #324]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x348>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ee4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003eec:	2100      	movs	r1, #0
 8003eee:	4b4e      	ldr	r3, [pc, #312]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x350>)
 8003ef0:	fb03 f201 	mul.w	r2, r3, r1
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	fb00 f303 	mul.w	r3, r0, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	4a4a      	ldr	r2, [pc, #296]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x350>)
 8003efe:	fba0 1202 	umull	r1, r2, r0, r2
 8003f02:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f04:	460a      	mov	r2, r1
 8003f06:	673a      	str	r2, [r7, #112]	@ 0x70
 8003f08:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003f0a:	4413      	add	r3, r2
 8003f0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f12:	2200      	movs	r2, #0
 8003f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f16:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003f1c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003f20:	f7fc fe4e 	bl	8000bc0 <__aeabi_uldivmod>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4613      	mov	r3, r2
 8003f2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f2e:	e05b      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f30:	4b3b      	ldr	r3, [pc, #236]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	2200      	movs	r2, #0
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	623b      	str	r3, [r7, #32]
 8003f44:	2300      	movs	r3, #0
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	f04f 0000 	mov.w	r0, #0
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	0159      	lsls	r1, r3, #5
 8003f5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f5e:	0150      	lsls	r0, r2, #5
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4641      	mov	r1, r8
 8003f66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f84:	ebb2 040a 	subs.w	r4, r2, sl
 8003f88:	eb63 050b 	sbc.w	r5, r3, fp
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	00eb      	lsls	r3, r5, #3
 8003f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f9a:	00e2      	lsls	r2, r4, #3
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	461d      	mov	r5, r3
 8003fa0:	4643      	mov	r3, r8
 8003fa2:	18e3      	adds	r3, r4, r3
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	eb45 0303 	adc.w	r3, r5, r3
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fba:	4629      	mov	r1, r5
 8003fbc:	028b      	lsls	r3, r1, #10
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	028a      	lsls	r2, r1, #10
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	61fa      	str	r2, [r7, #28]
 8003fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fda:	f7fc fdf1 	bl	8000bc0 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x348>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	0f1b      	lsrs	r3, r3, #28
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8003ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004006:	e003      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004008:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x34c>)
 800400a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800400e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004010:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004014:	4618      	mov	r0, r3
 8004016:	3798      	adds	r7, #152	@ 0x98
 8004018:	46bd      	mov	sp, r7
 800401a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
 8004024:	00f42400 	.word	0x00f42400
 8004028:	017d7840 	.word	0x017d7840

0800402c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e28d      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8083 	beq.w	8004152 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800404c:	4b94      	ldr	r3, [pc, #592]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b04      	cmp	r3, #4
 8004056:	d019      	beq.n	800408c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004058:	4b91      	ldr	r3, [pc, #580]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004060:	2b08      	cmp	r3, #8
 8004062:	d106      	bne.n	8004072 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004064:	4b8e      	ldr	r3, [pc, #568]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004070:	d00c      	beq.n	800408c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004072:	4b8b      	ldr	r3, [pc, #556]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d112      	bne.n	80040a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407e:	4b88      	ldr	r3, [pc, #544]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004086:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800408a:	d10b      	bne.n	80040a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	4b84      	ldr	r3, [pc, #528]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d05b      	beq.n	8004150 <HAL_RCC_OscConfig+0x124>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d157      	bne.n	8004150 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e25a      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ac:	d106      	bne.n	80040bc <HAL_RCC_OscConfig+0x90>
 80040ae:	4b7c      	ldr	r3, [pc, #496]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a7b      	ldr	r2, [pc, #492]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e01d      	b.n	80040f8 <HAL_RCC_OscConfig+0xcc>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCC_OscConfig+0xb4>
 80040c6:	4b76      	ldr	r3, [pc, #472]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a75      	ldr	r2, [pc, #468]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80040cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b73      	ldr	r3, [pc, #460]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a72      	ldr	r2, [pc, #456]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e00b      	b.n	80040f8 <HAL_RCC_OscConfig+0xcc>
 80040e0:	4b6f      	ldr	r3, [pc, #444]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a6e      	ldr	r2, [pc, #440]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	4b6c      	ldr	r3, [pc, #432]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a6b      	ldr	r2, [pc, #428]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80040f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d013      	beq.n	8004128 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe f88a 	bl	8002218 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004108:	f7fe f886 	bl	8002218 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	@ 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e21f      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4b61      	ldr	r3, [pc, #388]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0xdc>
 8004126:	e014      	b.n	8004152 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fe f876 	bl	8002218 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004130:	f7fe f872 	bl	8002218 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	@ 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e20b      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	4b57      	ldr	r3, [pc, #348]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x104>
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d06f      	beq.n	800423e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800415e:	4b50      	ldr	r3, [pc, #320]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b00      	cmp	r3, #0
 8004168:	d017      	beq.n	800419a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800416a:	4b4d      	ldr	r3, [pc, #308]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004172:	2b08      	cmp	r3, #8
 8004174:	d105      	bne.n	8004182 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004176:	4b4a      	ldr	r3, [pc, #296]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004182:	4b47      	ldr	r3, [pc, #284]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800418a:	2b0c      	cmp	r3, #12
 800418c:	d11c      	bne.n	80041c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418e:	4b44      	ldr	r3, [pc, #272]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d116      	bne.n	80041c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419a:	4b41      	ldr	r3, [pc, #260]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <HAL_RCC_OscConfig+0x186>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d001      	beq.n	80041b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e1d3      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b2:	4b3b      	ldr	r3, [pc, #236]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4937      	ldr	r1, [pc, #220]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c6:	e03a      	b.n	800423e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d020      	beq.n	8004212 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d0:	4b34      	ldr	r3, [pc, #208]	@ (80042a4 <HAL_RCC_OscConfig+0x278>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d6:	f7fe f81f 	bl	8002218 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041de:	f7fe f81b 	bl	8002218 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e1b4      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f0:	4b2b      	ldr	r3, [pc, #172]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fc:	4b28      	ldr	r3, [pc, #160]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4925      	ldr	r1, [pc, #148]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]
 8004210:	e015      	b.n	800423e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004212:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <HAL_RCC_OscConfig+0x278>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd fffe 	bl	8002218 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004220:	f7fd fffa 	bl	8002218 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e193      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004232:	4b1b      	ldr	r3, [pc, #108]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d036      	beq.n	80042b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004252:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fd ffde 	bl	8002218 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004260:	f7fd ffda 	bl	8002218 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e173      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004272:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <HAL_RCC_OscConfig+0x274>)
 8004274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x234>
 800427e:	e01b      	b.n	80042b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004280:	4b09      	ldr	r3, [pc, #36]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fd ffc7 	bl	8002218 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428c:	e00e      	b.n	80042ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800428e:	f7fd ffc3 	bl	8002218 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d907      	bls.n	80042ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e15c      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
 80042a0:	40023800 	.word	0x40023800
 80042a4:	42470000 	.word	0x42470000
 80042a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	4b8a      	ldr	r3, [pc, #552]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 80042ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1ea      	bne.n	800428e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8097 	beq.w	80043f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c6:	2300      	movs	r3, #0
 80042c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ca:	4b83      	ldr	r3, [pc, #524]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10f      	bne.n	80042f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	4b7f      	ldr	r3, [pc, #508]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	4a7e      	ldr	r2, [pc, #504]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042e6:	4b7c      	ldr	r3, [pc, #496]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f6:	4b79      	ldr	r3, [pc, #484]	@ (80044dc <HAL_RCC_OscConfig+0x4b0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d118      	bne.n	8004334 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004302:	4b76      	ldr	r3, [pc, #472]	@ (80044dc <HAL_RCC_OscConfig+0x4b0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a75      	ldr	r2, [pc, #468]	@ (80044dc <HAL_RCC_OscConfig+0x4b0>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800430c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430e:	f7fd ff83 	bl	8002218 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004316:	f7fd ff7f 	bl	8002218 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e118      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	4b6c      	ldr	r3, [pc, #432]	@ (80044dc <HAL_RCC_OscConfig+0x4b0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d106      	bne.n	800434a <HAL_RCC_OscConfig+0x31e>
 800433c:	4b66      	ldr	r3, [pc, #408]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004340:	4a65      	ldr	r2, [pc, #404]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	6713      	str	r3, [r2, #112]	@ 0x70
 8004348:	e01c      	b.n	8004384 <HAL_RCC_OscConfig+0x358>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b05      	cmp	r3, #5
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0x340>
 8004352:	4b61      	ldr	r3, [pc, #388]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004356:	4a60      	ldr	r2, [pc, #384]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 8004358:	f043 0304 	orr.w	r3, r3, #4
 800435c:	6713      	str	r3, [r2, #112]	@ 0x70
 800435e:	4b5e      	ldr	r3, [pc, #376]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004362:	4a5d      	ldr	r2, [pc, #372]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6713      	str	r3, [r2, #112]	@ 0x70
 800436a:	e00b      	b.n	8004384 <HAL_RCC_OscConfig+0x358>
 800436c:	4b5a      	ldr	r3, [pc, #360]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004370:	4a59      	ldr	r2, [pc, #356]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	6713      	str	r3, [r2, #112]	@ 0x70
 8004378:	4b57      	ldr	r3, [pc, #348]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437c:	4a56      	ldr	r2, [pc, #344]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 800437e:	f023 0304 	bic.w	r3, r3, #4
 8004382:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d015      	beq.n	80043b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fd ff44 	bl	8002218 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fd ff40 	bl	8002218 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0d7      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043aa:	4b4b      	ldr	r3, [pc, #300]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0ee      	beq.n	8004394 <HAL_RCC_OscConfig+0x368>
 80043b6:	e014      	b.n	80043e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fd ff2e 	bl	8002218 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c0:	f7fd ff2a 	bl	8002218 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e0c1      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d6:	4b40      	ldr	r3, [pc, #256]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1ee      	bne.n	80043c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d105      	bne.n	80043f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e8:	4b3b      	ldr	r3, [pc, #236]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	4a3a      	ldr	r2, [pc, #232]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 80043ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80ad 	beq.w	8004558 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043fe:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b08      	cmp	r3, #8
 8004408:	d060      	beq.n	80044cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d145      	bne.n	800449e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004412:	4b33      	ldr	r3, [pc, #204]	@ (80044e0 <HAL_RCC_OscConfig+0x4b4>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fd fefe 	bl	8002218 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004420:	f7fd fefa 	bl	8002218 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e093      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004432:	4b29      	ldr	r3, [pc, #164]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	019b      	lsls	r3, r3, #6
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	3b01      	subs	r3, #1
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	061b      	lsls	r3, r3, #24
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004468:	071b      	lsls	r3, r3, #28
 800446a:	491b      	ldr	r1, [pc, #108]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 800446c:	4313      	orrs	r3, r2
 800446e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004470:	4b1b      	ldr	r3, [pc, #108]	@ (80044e0 <HAL_RCC_OscConfig+0x4b4>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fd fecf 	bl	8002218 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447e:	f7fd fecb 	bl	8002218 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e064      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004490:	4b11      	ldr	r3, [pc, #68]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x452>
 800449c:	e05c      	b.n	8004558 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449e:	4b10      	ldr	r3, [pc, #64]	@ (80044e0 <HAL_RCC_OscConfig+0x4b4>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fd feb8 	bl	8002218 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ac:	f7fd feb4 	bl	8002218 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e04d      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <HAL_RCC_OscConfig+0x4ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x480>
 80044ca:	e045      	b.n	8004558 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e040      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40007000 	.word	0x40007000
 80044e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004564 <HAL_RCC_OscConfig+0x538>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d030      	beq.n	8004554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d129      	bne.n	8004554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d122      	bne.n	8004554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004514:	4013      	ands	r3, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800451a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800451c:	4293      	cmp	r3, r2
 800451e:	d119      	bne.n	8004554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452a:	085b      	lsrs	r3, r3, #1
 800452c:	3b01      	subs	r3, #1
 800452e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d10f      	bne.n	8004554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d107      	bne.n	8004554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800

08004568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e041      	b.n	80045fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd fd2e 	bl	8001ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f000 fcc0 	bl	8004f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d001      	beq.n	8004620 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e046      	b.n	80046ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a23      	ldr	r2, [pc, #140]	@ (80046bc <HAL_TIM_Base_Start+0xb4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d022      	beq.n	8004678 <HAL_TIM_Base_Start+0x70>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463a:	d01d      	beq.n	8004678 <HAL_TIM_Base_Start+0x70>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1f      	ldr	r2, [pc, #124]	@ (80046c0 <HAL_TIM_Base_Start+0xb8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d018      	beq.n	8004678 <HAL_TIM_Base_Start+0x70>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1e      	ldr	r2, [pc, #120]	@ (80046c4 <HAL_TIM_Base_Start+0xbc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <HAL_TIM_Base_Start+0x70>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1c      	ldr	r2, [pc, #112]	@ (80046c8 <HAL_TIM_Base_Start+0xc0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00e      	beq.n	8004678 <HAL_TIM_Base_Start+0x70>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1b      	ldr	r2, [pc, #108]	@ (80046cc <HAL_TIM_Base_Start+0xc4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d009      	beq.n	8004678 <HAL_TIM_Base_Start+0x70>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a19      	ldr	r2, [pc, #100]	@ (80046d0 <HAL_TIM_Base_Start+0xc8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d004      	beq.n	8004678 <HAL_TIM_Base_Start+0x70>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a18      	ldr	r2, [pc, #96]	@ (80046d4 <HAL_TIM_Base_Start+0xcc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d111      	bne.n	800469c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b06      	cmp	r3, #6
 8004688:	d010      	beq.n	80046ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469a:	e007      	b.n	80046ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40010000 	.word	0x40010000
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800
 80046c8:	40000c00 	.word	0x40000c00
 80046cc:	40010400 	.word	0x40010400
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40001800 	.word	0x40001800

080046d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d001      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e04e      	b.n	800478e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a23      	ldr	r2, [pc, #140]	@ (800479c <HAL_TIM_Base_Start_IT+0xc4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d022      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471a:	d01d      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1f      	ldr	r2, [pc, #124]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d018      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1e      	ldr	r2, [pc, #120]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d013      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1c      	ldr	r2, [pc, #112]	@ (80047a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00e      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1b      	ldr	r2, [pc, #108]	@ (80047ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a19      	ldr	r2, [pc, #100]	@ (80047b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d111      	bne.n	800477c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b06      	cmp	r3, #6
 8004768:	d010      	beq.n	800478c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477a:	e007      	b.n	800478c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40010000 	.word	0x40010000
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	40000c00 	.word	0x40000c00
 80047ac:	40010400 	.word	0x40010400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40001800 	.word	0x40001800

080047b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e041      	b.n	800484e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fd fc2e 	bl	8002040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f000 fb98 	bl	8004f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <HAL_TIM_PWM_Start+0x24>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	bf14      	ite	ne
 8004874:	2301      	movne	r3, #1
 8004876:	2300      	moveq	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	e022      	b.n	80048c2 <HAL_TIM_PWM_Start+0x6a>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b04      	cmp	r3, #4
 8004880:	d109      	bne.n	8004896 <HAL_TIM_PWM_Start+0x3e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	bf14      	ite	ne
 800488e:	2301      	movne	r3, #1
 8004890:	2300      	moveq	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	e015      	b.n	80048c2 <HAL_TIM_PWM_Start+0x6a>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d109      	bne.n	80048b0 <HAL_TIM_PWM_Start+0x58>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	e008      	b.n	80048c2 <HAL_TIM_PWM_Start+0x6a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e07c      	b.n	80049c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <HAL_TIM_PWM_Start+0x82>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d8:	e013      	b.n	8004902 <HAL_TIM_PWM_Start+0xaa>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0x92>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048e8:	e00b      	b.n	8004902 <HAL_TIM_PWM_Start+0xaa>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0xa2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048f8:	e003      	b.n	8004902 <HAL_TIM_PWM_Start+0xaa>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2201      	movs	r2, #1
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fe04 	bl	8005518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2d      	ldr	r2, [pc, #180]	@ (80049cc <HAL_TIM_PWM_Start+0x174>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_TIM_PWM_Start+0xcc>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a2c      	ldr	r2, [pc, #176]	@ (80049d0 <HAL_TIM_PWM_Start+0x178>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d101      	bne.n	8004928 <HAL_TIM_PWM_Start+0xd0>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <HAL_TIM_PWM_Start+0xd2>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800493c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a22      	ldr	r2, [pc, #136]	@ (80049cc <HAL_TIM_PWM_Start+0x174>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d022      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004950:	d01d      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1f      	ldr	r2, [pc, #124]	@ (80049d4 <HAL_TIM_PWM_Start+0x17c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d018      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1d      	ldr	r2, [pc, #116]	@ (80049d8 <HAL_TIM_PWM_Start+0x180>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <HAL_TIM_PWM_Start+0x184>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a16      	ldr	r2, [pc, #88]	@ (80049d0 <HAL_TIM_PWM_Start+0x178>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a18      	ldr	r2, [pc, #96]	@ (80049e0 <HAL_TIM_PWM_Start+0x188>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a16      	ldr	r2, [pc, #88]	@ (80049e4 <HAL_TIM_PWM_Start+0x18c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d111      	bne.n	80049b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b06      	cmp	r3, #6
 800499e:	d010      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b0:	e007      	b.n	80049c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40010400 	.word	0x40010400
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40001800 	.word	0x40001800

080049e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d020      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01b      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0202 	mvn.w	r2, #2
 8004a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fa5b 	bl	8004eee <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa4d 	bl	8004eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fa5e 	bl	8004f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d020      	beq.n	8004a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01b      	beq.n	8004a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0204 	mvn.w	r2, #4
 8004a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fa35 	bl	8004eee <HAL_TIM_IC_CaptureCallback>
 8004a84:	e005      	b.n	8004a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa27 	bl	8004eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fa38 	bl	8004f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d020      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01b      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0208 	mvn.w	r2, #8
 8004ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2204      	movs	r2, #4
 8004aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fa0f 	bl	8004eee <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa01 	bl	8004eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fa12 	bl	8004f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d020      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01b      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0210 	mvn.w	r2, #16
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2208      	movs	r2, #8
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f9e9 	bl	8004eee <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f9db 	bl	8004eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f9ec 	bl	8004f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00c      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d007      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0201 	mvn.w	r2, #1
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fc fcf6 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fd7c 	bl	8005670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f9bd 	bl	8004f16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00c      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0220 	mvn.w	r2, #32
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fd4e 	bl	800565c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e0ae      	b.n	8004d44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	f200 809f 	bhi.w	8004d34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004d35 	.word	0x08004d35
 8004c04:	08004d35 	.word	0x08004d35
 8004c08:	08004d35 	.word	0x08004d35
 8004c0c:	08004c71 	.word	0x08004c71
 8004c10:	08004d35 	.word	0x08004d35
 8004c14:	08004d35 	.word	0x08004d35
 8004c18:	08004d35 	.word	0x08004d35
 8004c1c:	08004cb3 	.word	0x08004cb3
 8004c20:	08004d35 	.word	0x08004d35
 8004c24:	08004d35 	.word	0x08004d35
 8004c28:	08004d35 	.word	0x08004d35
 8004c2c:	08004cf3 	.word	0x08004cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fa24 	bl	8005084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0208 	orr.w	r2, r2, #8
 8004c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0204 	bic.w	r2, r2, #4
 8004c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6999      	ldr	r1, [r3, #24]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	619a      	str	r2, [r3, #24]
      break;
 8004c6e:	e064      	b.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fa74 	bl	8005164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6999      	ldr	r1, [r3, #24]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	021a      	lsls	r2, r3, #8
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	619a      	str	r2, [r3, #24]
      break;
 8004cb0:	e043      	b.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fac9 	bl	8005250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0208 	orr.w	r2, r2, #8
 8004ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0204 	bic.w	r2, r2, #4
 8004cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69d9      	ldr	r1, [r3, #28]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	61da      	str	r2, [r3, #28]
      break;
 8004cf0:	e023      	b.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fb1d 	bl	8005338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69d9      	ldr	r1, [r3, #28]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	021a      	lsls	r2, r3, #8
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	61da      	str	r2, [r3, #28]
      break;
 8004d32:	e002      	b.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75fb      	strb	r3, [r7, #23]
      break;
 8004d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_TIM_ConfigClockSource+0x1c>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e0b4      	b.n	8004ed2 <HAL_TIM_ConfigClockSource+0x186>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da0:	d03e      	beq.n	8004e20 <HAL_TIM_ConfigClockSource+0xd4>
 8004da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da6:	f200 8087 	bhi.w	8004eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dae:	f000 8086 	beq.w	8004ebe <HAL_TIM_ConfigClockSource+0x172>
 8004db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db6:	d87f      	bhi.n	8004eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b70      	cmp	r3, #112	@ 0x70
 8004dba:	d01a      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0xa6>
 8004dbc:	2b70      	cmp	r3, #112	@ 0x70
 8004dbe:	d87b      	bhi.n	8004eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b60      	cmp	r3, #96	@ 0x60
 8004dc2:	d050      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x11a>
 8004dc4:	2b60      	cmp	r3, #96	@ 0x60
 8004dc6:	d877      	bhi.n	8004eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b50      	cmp	r3, #80	@ 0x50
 8004dca:	d03c      	beq.n	8004e46 <HAL_TIM_ConfigClockSource+0xfa>
 8004dcc:	2b50      	cmp	r3, #80	@ 0x50
 8004dce:	d873      	bhi.n	8004eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd0:	2b40      	cmp	r3, #64	@ 0x40
 8004dd2:	d058      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x13a>
 8004dd4:	2b40      	cmp	r3, #64	@ 0x40
 8004dd6:	d86f      	bhi.n	8004eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	2b30      	cmp	r3, #48	@ 0x30
 8004dda:	d064      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ddc:	2b30      	cmp	r3, #48	@ 0x30
 8004dde:	d86b      	bhi.n	8004eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d060      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d867      	bhi.n	8004eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d05c      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8004dec:	2b10      	cmp	r3, #16
 8004dee:	d05a      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8004df0:	e062      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e02:	f000 fb69 	bl	80054d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	609a      	str	r2, [r3, #8]
      break;
 8004e1e:	e04f      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e30:	f000 fb52 	bl	80054d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e42:	609a      	str	r2, [r3, #8]
      break;
 8004e44:	e03c      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e52:	461a      	mov	r2, r3
 8004e54:	f000 fac6 	bl	80053e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2150      	movs	r1, #80	@ 0x50
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fb1f 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004e64:	e02c      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e72:	461a      	mov	r2, r3
 8004e74:	f000 fae5 	bl	8005442 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2160      	movs	r1, #96	@ 0x60
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fb0f 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004e84:	e01c      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e92:	461a      	mov	r2, r3
 8004e94:	f000 faa6 	bl	80053e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2140      	movs	r1, #64	@ 0x40
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 faff 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004ea4:	e00c      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	f000 faf6 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004eb6:	e003      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]
      break;
 8004ebc:	e000      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
	...

08004f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a46      	ldr	r2, [pc, #280]	@ (8005058 <TIM_Base_SetConfig+0x12c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f4a:	d00f      	beq.n	8004f6c <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a43      	ldr	r2, [pc, #268]	@ (800505c <TIM_Base_SetConfig+0x130>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a42      	ldr	r2, [pc, #264]	@ (8005060 <TIM_Base_SetConfig+0x134>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d007      	beq.n	8004f6c <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a41      	ldr	r2, [pc, #260]	@ (8005064 <TIM_Base_SetConfig+0x138>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a40      	ldr	r2, [pc, #256]	@ (8005068 <TIM_Base_SetConfig+0x13c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d108      	bne.n	8004f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a35      	ldr	r2, [pc, #212]	@ (8005058 <TIM_Base_SetConfig+0x12c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d02b      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8c:	d027      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a32      	ldr	r2, [pc, #200]	@ (800505c <TIM_Base_SetConfig+0x130>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d023      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a31      	ldr	r2, [pc, #196]	@ (8005060 <TIM_Base_SetConfig+0x134>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01f      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a30      	ldr	r2, [pc, #192]	@ (8005064 <TIM_Base_SetConfig+0x138>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01b      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8005068 <TIM_Base_SetConfig+0x13c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d017      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800506c <TIM_Base_SetConfig+0x140>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8005070 <TIM_Base_SetConfig+0x144>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00f      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8005074 <TIM_Base_SetConfig+0x148>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00b      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8005078 <TIM_Base_SetConfig+0x14c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800507c <TIM_Base_SetConfig+0x150>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a29      	ldr	r2, [pc, #164]	@ (8005080 <TIM_Base_SetConfig+0x154>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d108      	bne.n	8004ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a10      	ldr	r2, [pc, #64]	@ (8005058 <TIM_Base_SetConfig+0x12c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0xf8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a12      	ldr	r2, [pc, #72]	@ (8005068 <TIM_Base_SetConfig+0x13c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d103      	bne.n	800502c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d105      	bne.n	800504a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f023 0201 	bic.w	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]
  }
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40010000 	.word	0x40010000
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40010400 	.word	0x40010400
 800506c:	40014000 	.word	0x40014000
 8005070:	40014400 	.word	0x40014400
 8005074:	40014800 	.word	0x40014800
 8005078:	40001800 	.word	0x40001800
 800507c:	40001c00 	.word	0x40001c00
 8005080:	40002000 	.word	0x40002000

08005084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f023 0201 	bic.w	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f023 0302 	bic.w	r3, r3, #2
 80050cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a20      	ldr	r2, [pc, #128]	@ (800515c <TIM_OC1_SetConfig+0xd8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_OC1_SetConfig+0x64>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005160 <TIM_OC1_SetConfig+0xdc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d10c      	bne.n	8005102 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 0308 	bic.w	r3, r3, #8
 80050ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f023 0304 	bic.w	r3, r3, #4
 8005100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a15      	ldr	r2, [pc, #84]	@ (800515c <TIM_OC1_SetConfig+0xd8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <TIM_OC1_SetConfig+0x8e>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a14      	ldr	r2, [pc, #80]	@ (8005160 <TIM_OC1_SetConfig+0xdc>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d111      	bne.n	8005136 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40010000 	.word	0x40010000
 8005160:	40010400 	.word	0x40010400

08005164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f023 0210 	bic.w	r2, r3, #16
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800519a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0320 	bic.w	r3, r3, #32
 80051ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a22      	ldr	r2, [pc, #136]	@ (8005248 <TIM_OC2_SetConfig+0xe4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_OC2_SetConfig+0x68>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a21      	ldr	r2, [pc, #132]	@ (800524c <TIM_OC2_SetConfig+0xe8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d10d      	bne.n	80051e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a17      	ldr	r2, [pc, #92]	@ (8005248 <TIM_OC2_SetConfig+0xe4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_OC2_SetConfig+0x94>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a16      	ldr	r2, [pc, #88]	@ (800524c <TIM_OC2_SetConfig+0xe8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d113      	bne.n	8005220 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40010400 	.word	0x40010400

08005250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a21      	ldr	r2, [pc, #132]	@ (8005330 <TIM_OC3_SetConfig+0xe0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_OC3_SetConfig+0x66>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a20      	ldr	r2, [pc, #128]	@ (8005334 <TIM_OC3_SetConfig+0xe4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d10d      	bne.n	80052d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a16      	ldr	r2, [pc, #88]	@ (8005330 <TIM_OC3_SetConfig+0xe0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_OC3_SetConfig+0x92>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a15      	ldr	r2, [pc, #84]	@ (8005334 <TIM_OC3_SetConfig+0xe4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d113      	bne.n	800530a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40010000 	.word	0x40010000
 8005334:	40010400 	.word	0x40010400

08005338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800536e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	031b      	lsls	r3, r3, #12
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a12      	ldr	r2, [pc, #72]	@ (80053dc <TIM_OC4_SetConfig+0xa4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_OC4_SetConfig+0x68>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a11      	ldr	r2, [pc, #68]	@ (80053e0 <TIM_OC4_SetConfig+0xa8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d109      	bne.n	80053b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	019b      	lsls	r3, r3, #6
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400

080053e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0201 	bic.w	r2, r3, #1
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800540e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f023 030a 	bic.w	r3, r3, #10
 8005420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005442:	b480      	push	{r7}
 8005444:	b087      	sub	sp, #28
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f023 0210 	bic.w	r2, r3, #16
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800546c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	031b      	lsls	r3, r3, #12
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800547e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	f043 0307 	orr.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4313      	orrs	r3, r2
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	609a      	str	r2, [r3, #8]
}
 800550c:	bf00      	nop
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	2201      	movs	r2, #1
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1a      	ldr	r2, [r3, #32]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	43db      	mvns	r3, r3
 800553a:	401a      	ands	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a1a      	ldr	r2, [r3, #32]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	fa01 f303 	lsl.w	r3, r1, r3
 8005550:	431a      	orrs	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005578:	2302      	movs	r3, #2
 800557a:	e05a      	b.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a21      	ldr	r2, [pc, #132]	@ (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d022      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c8:	d01d      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1a      	ldr	r2, [pc, #104]	@ (800564c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a18      	ldr	r2, [pc, #96]	@ (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a17      	ldr	r2, [pc, #92]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a15      	ldr	r2, [pc, #84]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d10c      	bne.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800560c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	4313      	orrs	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40010000 	.word	0x40010000
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800
 800564c:	40000c00 	.word	0x40000c00
 8005650:	40010400 	.word	0x40010400
 8005654:	40014000 	.word	0x40014000
 8005658:	40001800 	.word	0x40001800

0800565c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <memset>:
 8005684:	4402      	add	r2, r0
 8005686:	4603      	mov	r3, r0
 8005688:	4293      	cmp	r3, r2
 800568a:	d100      	bne.n	800568e <memset+0xa>
 800568c:	4770      	bx	lr
 800568e:	f803 1b01 	strb.w	r1, [r3], #1
 8005692:	e7f9      	b.n	8005688 <memset+0x4>

08005694 <__errno>:
 8005694:	4b01      	ldr	r3, [pc, #4]	@ (800569c <__errno+0x8>)
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	2000001c 	.word	0x2000001c

080056a0 <__libc_init_array>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	4d0d      	ldr	r5, [pc, #52]	@ (80056d8 <__libc_init_array+0x38>)
 80056a4:	4c0d      	ldr	r4, [pc, #52]	@ (80056dc <__libc_init_array+0x3c>)
 80056a6:	1b64      	subs	r4, r4, r5
 80056a8:	10a4      	asrs	r4, r4, #2
 80056aa:	2600      	movs	r6, #0
 80056ac:	42a6      	cmp	r6, r4
 80056ae:	d109      	bne.n	80056c4 <__libc_init_array+0x24>
 80056b0:	4d0b      	ldr	r5, [pc, #44]	@ (80056e0 <__libc_init_array+0x40>)
 80056b2:	4c0c      	ldr	r4, [pc, #48]	@ (80056e4 <__libc_init_array+0x44>)
 80056b4:	f000 fabe 	bl	8005c34 <_init>
 80056b8:	1b64      	subs	r4, r4, r5
 80056ba:	10a4      	asrs	r4, r4, #2
 80056bc:	2600      	movs	r6, #0
 80056be:	42a6      	cmp	r6, r4
 80056c0:	d105      	bne.n	80056ce <__libc_init_array+0x2e>
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c8:	4798      	blx	r3
 80056ca:	3601      	adds	r6, #1
 80056cc:	e7ee      	b.n	80056ac <__libc_init_array+0xc>
 80056ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d2:	4798      	blx	r3
 80056d4:	3601      	adds	r6, #1
 80056d6:	e7f2      	b.n	80056be <__libc_init_array+0x1e>
 80056d8:	08005cb0 	.word	0x08005cb0
 80056dc:	08005cb0 	.word	0x08005cb0
 80056e0:	08005cb0 	.word	0x08005cb0
 80056e4:	08005cb4 	.word	0x08005cb4

080056e8 <sqrt>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	ed2d 8b02 	vpush	{d8}
 80056ee:	ec55 4b10 	vmov	r4, r5, d0
 80056f2:	f000 f9c5 	bl	8005a80 <__ieee754_sqrt>
 80056f6:	4622      	mov	r2, r4
 80056f8:	462b      	mov	r3, r5
 80056fa:	4620      	mov	r0, r4
 80056fc:	4629      	mov	r1, r5
 80056fe:	eeb0 8a40 	vmov.f32	s16, s0
 8005702:	eef0 8a60 	vmov.f32	s17, s1
 8005706:	f7fb f9d5 	bl	8000ab4 <__aeabi_dcmpun>
 800570a:	b990      	cbnz	r0, 8005732 <sqrt+0x4a>
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	4620      	mov	r0, r4
 8005712:	4629      	mov	r1, r5
 8005714:	f7fb f9a6 	bl	8000a64 <__aeabi_dcmplt>
 8005718:	b158      	cbz	r0, 8005732 <sqrt+0x4a>
 800571a:	f7ff ffbb 	bl	8005694 <__errno>
 800571e:	2321      	movs	r3, #33	@ 0x21
 8005720:	6003      	str	r3, [r0, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	2300      	movs	r3, #0
 8005726:	4610      	mov	r0, r2
 8005728:	4619      	mov	r1, r3
 800572a:	f7fb f853 	bl	80007d4 <__aeabi_ddiv>
 800572e:	ec41 0b18 	vmov	d8, r0, r1
 8005732:	eeb0 0a48 	vmov.f32	s0, s16
 8005736:	eef0 0a68 	vmov.f32	s1, s17
 800573a:	ecbd 8b02 	vpop	{d8}
 800573e:	bd38      	pop	{r3, r4, r5, pc}

08005740 <atan>:
 8005740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005744:	ec55 4b10 	vmov	r4, r5, d0
 8005748:	4bbf      	ldr	r3, [pc, #764]	@ (8005a48 <atan+0x308>)
 800574a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800574e:	429e      	cmp	r6, r3
 8005750:	46ab      	mov	fp, r5
 8005752:	d918      	bls.n	8005786 <atan+0x46>
 8005754:	4bbd      	ldr	r3, [pc, #756]	@ (8005a4c <atan+0x30c>)
 8005756:	429e      	cmp	r6, r3
 8005758:	d801      	bhi.n	800575e <atan+0x1e>
 800575a:	d109      	bne.n	8005770 <atan+0x30>
 800575c:	b144      	cbz	r4, 8005770 <atan+0x30>
 800575e:	4622      	mov	r2, r4
 8005760:	462b      	mov	r3, r5
 8005762:	4620      	mov	r0, r4
 8005764:	4629      	mov	r1, r5
 8005766:	f7fa fd55 	bl	8000214 <__adddf3>
 800576a:	4604      	mov	r4, r0
 800576c:	460d      	mov	r5, r1
 800576e:	e006      	b.n	800577e <atan+0x3e>
 8005770:	f1bb 0f00 	cmp.w	fp, #0
 8005774:	f340 812b 	ble.w	80059ce <atan+0x28e>
 8005778:	a597      	add	r5, pc, #604	@ (adr r5, 80059d8 <atan+0x298>)
 800577a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800577e:	ec45 4b10 	vmov	d0, r4, r5
 8005782:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005786:	4bb2      	ldr	r3, [pc, #712]	@ (8005a50 <atan+0x310>)
 8005788:	429e      	cmp	r6, r3
 800578a:	d813      	bhi.n	80057b4 <atan+0x74>
 800578c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005790:	429e      	cmp	r6, r3
 8005792:	d80c      	bhi.n	80057ae <atan+0x6e>
 8005794:	a392      	add	r3, pc, #584	@ (adr r3, 80059e0 <atan+0x2a0>)
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	4620      	mov	r0, r4
 800579c:	4629      	mov	r1, r5
 800579e:	f7fa fd39 	bl	8000214 <__adddf3>
 80057a2:	4bac      	ldr	r3, [pc, #688]	@ (8005a54 <atan+0x314>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	f7fb f97b 	bl	8000aa0 <__aeabi_dcmpgt>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d1e7      	bne.n	800577e <atan+0x3e>
 80057ae:	f04f 3aff 	mov.w	sl, #4294967295
 80057b2:	e029      	b.n	8005808 <atan+0xc8>
 80057b4:	f000 f95c 	bl	8005a70 <fabs>
 80057b8:	4ba7      	ldr	r3, [pc, #668]	@ (8005a58 <atan+0x318>)
 80057ba:	429e      	cmp	r6, r3
 80057bc:	ec55 4b10 	vmov	r4, r5, d0
 80057c0:	f200 80bc 	bhi.w	800593c <atan+0x1fc>
 80057c4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80057c8:	429e      	cmp	r6, r3
 80057ca:	f200 809e 	bhi.w	800590a <atan+0x1ca>
 80057ce:	4622      	mov	r2, r4
 80057d0:	462b      	mov	r3, r5
 80057d2:	4620      	mov	r0, r4
 80057d4:	4629      	mov	r1, r5
 80057d6:	f7fa fd1d 	bl	8000214 <__adddf3>
 80057da:	4b9e      	ldr	r3, [pc, #632]	@ (8005a54 <atan+0x314>)
 80057dc:	2200      	movs	r2, #0
 80057de:	f7fa fd17 	bl	8000210 <__aeabi_dsub>
 80057e2:	2200      	movs	r2, #0
 80057e4:	4606      	mov	r6, r0
 80057e6:	460f      	mov	r7, r1
 80057e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fa fd10 	bl	8000214 <__adddf3>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4630      	mov	r0, r6
 80057fa:	4639      	mov	r1, r7
 80057fc:	f7fa ffea 	bl	80007d4 <__aeabi_ddiv>
 8005800:	f04f 0a00 	mov.w	sl, #0
 8005804:	4604      	mov	r4, r0
 8005806:	460d      	mov	r5, r1
 8005808:	4622      	mov	r2, r4
 800580a:	462b      	mov	r3, r5
 800580c:	4620      	mov	r0, r4
 800580e:	4629      	mov	r1, r5
 8005810:	f7fa feb6 	bl	8000580 <__aeabi_dmul>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4680      	mov	r8, r0
 800581a:	4689      	mov	r9, r1
 800581c:	f7fa feb0 	bl	8000580 <__aeabi_dmul>
 8005820:	a371      	add	r3, pc, #452	@ (adr r3, 80059e8 <atan+0x2a8>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	4606      	mov	r6, r0
 8005828:	460f      	mov	r7, r1
 800582a:	f7fa fea9 	bl	8000580 <__aeabi_dmul>
 800582e:	a370      	add	r3, pc, #448	@ (adr r3, 80059f0 <atan+0x2b0>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f7fa fcee 	bl	8000214 <__adddf3>
 8005838:	4632      	mov	r2, r6
 800583a:	463b      	mov	r3, r7
 800583c:	f7fa fea0 	bl	8000580 <__aeabi_dmul>
 8005840:	a36d      	add	r3, pc, #436	@ (adr r3, 80059f8 <atan+0x2b8>)
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	f7fa fce5 	bl	8000214 <__adddf3>
 800584a:	4632      	mov	r2, r6
 800584c:	463b      	mov	r3, r7
 800584e:	f7fa fe97 	bl	8000580 <__aeabi_dmul>
 8005852:	a36b      	add	r3, pc, #428	@ (adr r3, 8005a00 <atan+0x2c0>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f7fa fcdc 	bl	8000214 <__adddf3>
 800585c:	4632      	mov	r2, r6
 800585e:	463b      	mov	r3, r7
 8005860:	f7fa fe8e 	bl	8000580 <__aeabi_dmul>
 8005864:	a368      	add	r3, pc, #416	@ (adr r3, 8005a08 <atan+0x2c8>)
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f7fa fcd3 	bl	8000214 <__adddf3>
 800586e:	4632      	mov	r2, r6
 8005870:	463b      	mov	r3, r7
 8005872:	f7fa fe85 	bl	8000580 <__aeabi_dmul>
 8005876:	a366      	add	r3, pc, #408	@ (adr r3, 8005a10 <atan+0x2d0>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f7fa fcca 	bl	8000214 <__adddf3>
 8005880:	4642      	mov	r2, r8
 8005882:	464b      	mov	r3, r9
 8005884:	f7fa fe7c 	bl	8000580 <__aeabi_dmul>
 8005888:	a363      	add	r3, pc, #396	@ (adr r3, 8005a18 <atan+0x2d8>)
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	4680      	mov	r8, r0
 8005890:	4689      	mov	r9, r1
 8005892:	4630      	mov	r0, r6
 8005894:	4639      	mov	r1, r7
 8005896:	f7fa fe73 	bl	8000580 <__aeabi_dmul>
 800589a:	a361      	add	r3, pc, #388	@ (adr r3, 8005a20 <atan+0x2e0>)
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f7fa fcb6 	bl	8000210 <__aeabi_dsub>
 80058a4:	4632      	mov	r2, r6
 80058a6:	463b      	mov	r3, r7
 80058a8:	f7fa fe6a 	bl	8000580 <__aeabi_dmul>
 80058ac:	a35e      	add	r3, pc, #376	@ (adr r3, 8005a28 <atan+0x2e8>)
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	f7fa fcad 	bl	8000210 <__aeabi_dsub>
 80058b6:	4632      	mov	r2, r6
 80058b8:	463b      	mov	r3, r7
 80058ba:	f7fa fe61 	bl	8000580 <__aeabi_dmul>
 80058be:	a35c      	add	r3, pc, #368	@ (adr r3, 8005a30 <atan+0x2f0>)
 80058c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c4:	f7fa fca4 	bl	8000210 <__aeabi_dsub>
 80058c8:	4632      	mov	r2, r6
 80058ca:	463b      	mov	r3, r7
 80058cc:	f7fa fe58 	bl	8000580 <__aeabi_dmul>
 80058d0:	a359      	add	r3, pc, #356	@ (adr r3, 8005a38 <atan+0x2f8>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa fc9b 	bl	8000210 <__aeabi_dsub>
 80058da:	4632      	mov	r2, r6
 80058dc:	463b      	mov	r3, r7
 80058de:	f7fa fe4f 	bl	8000580 <__aeabi_dmul>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4640      	mov	r0, r8
 80058e8:	4649      	mov	r1, r9
 80058ea:	f7fa fc93 	bl	8000214 <__adddf3>
 80058ee:	4622      	mov	r2, r4
 80058f0:	462b      	mov	r3, r5
 80058f2:	f7fa fe45 	bl	8000580 <__aeabi_dmul>
 80058f6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	d148      	bne.n	8005992 <atan+0x252>
 8005900:	4620      	mov	r0, r4
 8005902:	4629      	mov	r1, r5
 8005904:	f7fa fc84 	bl	8000210 <__aeabi_dsub>
 8005908:	e72f      	b.n	800576a <atan+0x2a>
 800590a:	4b52      	ldr	r3, [pc, #328]	@ (8005a54 <atan+0x314>)
 800590c:	2200      	movs	r2, #0
 800590e:	4620      	mov	r0, r4
 8005910:	4629      	mov	r1, r5
 8005912:	f7fa fc7d 	bl	8000210 <__aeabi_dsub>
 8005916:	4b4f      	ldr	r3, [pc, #316]	@ (8005a54 <atan+0x314>)
 8005918:	4606      	mov	r6, r0
 800591a:	460f      	mov	r7, r1
 800591c:	2200      	movs	r2, #0
 800591e:	4620      	mov	r0, r4
 8005920:	4629      	mov	r1, r5
 8005922:	f7fa fc77 	bl	8000214 <__adddf3>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4630      	mov	r0, r6
 800592c:	4639      	mov	r1, r7
 800592e:	f7fa ff51 	bl	80007d4 <__aeabi_ddiv>
 8005932:	f04f 0a01 	mov.w	sl, #1
 8005936:	4604      	mov	r4, r0
 8005938:	460d      	mov	r5, r1
 800593a:	e765      	b.n	8005808 <atan+0xc8>
 800593c:	4b47      	ldr	r3, [pc, #284]	@ (8005a5c <atan+0x31c>)
 800593e:	429e      	cmp	r6, r3
 8005940:	d21c      	bcs.n	800597c <atan+0x23c>
 8005942:	4b47      	ldr	r3, [pc, #284]	@ (8005a60 <atan+0x320>)
 8005944:	2200      	movs	r2, #0
 8005946:	4620      	mov	r0, r4
 8005948:	4629      	mov	r1, r5
 800594a:	f7fa fc61 	bl	8000210 <__aeabi_dsub>
 800594e:	4b44      	ldr	r3, [pc, #272]	@ (8005a60 <atan+0x320>)
 8005950:	4606      	mov	r6, r0
 8005952:	460f      	mov	r7, r1
 8005954:	2200      	movs	r2, #0
 8005956:	4620      	mov	r0, r4
 8005958:	4629      	mov	r1, r5
 800595a:	f7fa fe11 	bl	8000580 <__aeabi_dmul>
 800595e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a54 <atan+0x314>)
 8005960:	2200      	movs	r2, #0
 8005962:	f7fa fc57 	bl	8000214 <__adddf3>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4630      	mov	r0, r6
 800596c:	4639      	mov	r1, r7
 800596e:	f7fa ff31 	bl	80007d4 <__aeabi_ddiv>
 8005972:	f04f 0a02 	mov.w	sl, #2
 8005976:	4604      	mov	r4, r0
 8005978:	460d      	mov	r5, r1
 800597a:	e745      	b.n	8005808 <atan+0xc8>
 800597c:	4622      	mov	r2, r4
 800597e:	462b      	mov	r3, r5
 8005980:	4938      	ldr	r1, [pc, #224]	@ (8005a64 <atan+0x324>)
 8005982:	2000      	movs	r0, #0
 8005984:	f7fa ff26 	bl	80007d4 <__aeabi_ddiv>
 8005988:	f04f 0a03 	mov.w	sl, #3
 800598c:	4604      	mov	r4, r0
 800598e:	460d      	mov	r5, r1
 8005990:	e73a      	b.n	8005808 <atan+0xc8>
 8005992:	4b35      	ldr	r3, [pc, #212]	@ (8005a68 <atan+0x328>)
 8005994:	4e35      	ldr	r6, [pc, #212]	@ (8005a6c <atan+0x32c>)
 8005996:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f7fa fc37 	bl	8000210 <__aeabi_dsub>
 80059a2:	4622      	mov	r2, r4
 80059a4:	462b      	mov	r3, r5
 80059a6:	f7fa fc33 	bl	8000210 <__aeabi_dsub>
 80059aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80059b6:	f7fa fc2b 	bl	8000210 <__aeabi_dsub>
 80059ba:	f1bb 0f00 	cmp.w	fp, #0
 80059be:	4604      	mov	r4, r0
 80059c0:	460d      	mov	r5, r1
 80059c2:	f6bf aedc 	bge.w	800577e <atan+0x3e>
 80059c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80059ca:	461d      	mov	r5, r3
 80059cc:	e6d7      	b.n	800577e <atan+0x3e>
 80059ce:	a51c      	add	r5, pc, #112	@ (adr r5, 8005a40 <atan+0x300>)
 80059d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80059d4:	e6d3      	b.n	800577e <atan+0x3e>
 80059d6:	bf00      	nop
 80059d8:	54442d18 	.word	0x54442d18
 80059dc:	3ff921fb 	.word	0x3ff921fb
 80059e0:	8800759c 	.word	0x8800759c
 80059e4:	7e37e43c 	.word	0x7e37e43c
 80059e8:	e322da11 	.word	0xe322da11
 80059ec:	3f90ad3a 	.word	0x3f90ad3a
 80059f0:	24760deb 	.word	0x24760deb
 80059f4:	3fa97b4b 	.word	0x3fa97b4b
 80059f8:	a0d03d51 	.word	0xa0d03d51
 80059fc:	3fb10d66 	.word	0x3fb10d66
 8005a00:	c54c206e 	.word	0xc54c206e
 8005a04:	3fb745cd 	.word	0x3fb745cd
 8005a08:	920083ff 	.word	0x920083ff
 8005a0c:	3fc24924 	.word	0x3fc24924
 8005a10:	5555550d 	.word	0x5555550d
 8005a14:	3fd55555 	.word	0x3fd55555
 8005a18:	2c6a6c2f 	.word	0x2c6a6c2f
 8005a1c:	bfa2b444 	.word	0xbfa2b444
 8005a20:	52defd9a 	.word	0x52defd9a
 8005a24:	3fadde2d 	.word	0x3fadde2d
 8005a28:	af749a6d 	.word	0xaf749a6d
 8005a2c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005a30:	fe231671 	.word	0xfe231671
 8005a34:	3fbc71c6 	.word	0x3fbc71c6
 8005a38:	9998ebc4 	.word	0x9998ebc4
 8005a3c:	3fc99999 	.word	0x3fc99999
 8005a40:	54442d18 	.word	0x54442d18
 8005a44:	bff921fb 	.word	0xbff921fb
 8005a48:	440fffff 	.word	0x440fffff
 8005a4c:	7ff00000 	.word	0x7ff00000
 8005a50:	3fdbffff 	.word	0x3fdbffff
 8005a54:	3ff00000 	.word	0x3ff00000
 8005a58:	3ff2ffff 	.word	0x3ff2ffff
 8005a5c:	40038000 	.word	0x40038000
 8005a60:	3ff80000 	.word	0x3ff80000
 8005a64:	bff00000 	.word	0xbff00000
 8005a68:	08005c68 	.word	0x08005c68
 8005a6c:	08005c88 	.word	0x08005c88

08005a70 <fabs>:
 8005a70:	ec51 0b10 	vmov	r0, r1, d0
 8005a74:	4602      	mov	r2, r0
 8005a76:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005a7a:	ec43 2b10 	vmov	d0, r2, r3
 8005a7e:	4770      	bx	lr

08005a80 <__ieee754_sqrt>:
 8005a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	4a68      	ldr	r2, [pc, #416]	@ (8005c28 <__ieee754_sqrt+0x1a8>)
 8005a86:	ec55 4b10 	vmov	r4, r5, d0
 8005a8a:	43aa      	bics	r2, r5
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	4621      	mov	r1, r4
 8005a90:	d110      	bne.n	8005ab4 <__ieee754_sqrt+0x34>
 8005a92:	4622      	mov	r2, r4
 8005a94:	4620      	mov	r0, r4
 8005a96:	4629      	mov	r1, r5
 8005a98:	f7fa fd72 	bl	8000580 <__aeabi_dmul>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	f7fa fbb6 	bl	8000214 <__adddf3>
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	460d      	mov	r5, r1
 8005aac:	ec45 4b10 	vmov	d0, r4, r5
 8005ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab4:	2d00      	cmp	r5, #0
 8005ab6:	dc0e      	bgt.n	8005ad6 <__ieee754_sqrt+0x56>
 8005ab8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005abc:	4322      	orrs	r2, r4
 8005abe:	d0f5      	beq.n	8005aac <__ieee754_sqrt+0x2c>
 8005ac0:	b19d      	cbz	r5, 8005aea <__ieee754_sqrt+0x6a>
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	f7fa fba2 	bl	8000210 <__aeabi_dsub>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	f7fa fe80 	bl	80007d4 <__aeabi_ddiv>
 8005ad4:	e7e8      	b.n	8005aa8 <__ieee754_sqrt+0x28>
 8005ad6:	152a      	asrs	r2, r5, #20
 8005ad8:	d115      	bne.n	8005b06 <__ieee754_sqrt+0x86>
 8005ada:	2000      	movs	r0, #0
 8005adc:	e009      	b.n	8005af2 <__ieee754_sqrt+0x72>
 8005ade:	0acb      	lsrs	r3, r1, #11
 8005ae0:	3a15      	subs	r2, #21
 8005ae2:	0549      	lsls	r1, r1, #21
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0fa      	beq.n	8005ade <__ieee754_sqrt+0x5e>
 8005ae8:	e7f7      	b.n	8005ada <__ieee754_sqrt+0x5a>
 8005aea:	462a      	mov	r2, r5
 8005aec:	e7fa      	b.n	8005ae4 <__ieee754_sqrt+0x64>
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	3001      	adds	r0, #1
 8005af2:	02dc      	lsls	r4, r3, #11
 8005af4:	d5fb      	bpl.n	8005aee <__ieee754_sqrt+0x6e>
 8005af6:	1e44      	subs	r4, r0, #1
 8005af8:	1b12      	subs	r2, r2, r4
 8005afa:	f1c0 0420 	rsb	r4, r0, #32
 8005afe:	fa21 f404 	lsr.w	r4, r1, r4
 8005b02:	4323      	orrs	r3, r4
 8005b04:	4081      	lsls	r1, r0
 8005b06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b0a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8005b0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b12:	07d2      	lsls	r2, r2, #31
 8005b14:	bf5c      	itt	pl
 8005b16:	005b      	lslpl	r3, r3, #1
 8005b18:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b20:	bf58      	it	pl
 8005b22:	0049      	lslpl	r1, r1, #1
 8005b24:	2600      	movs	r6, #0
 8005b26:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005b2a:	106d      	asrs	r5, r5, #1
 8005b2c:	0049      	lsls	r1, r1, #1
 8005b2e:	2016      	movs	r0, #22
 8005b30:	4632      	mov	r2, r6
 8005b32:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005b36:	1917      	adds	r7, r2, r4
 8005b38:	429f      	cmp	r7, r3
 8005b3a:	bfde      	ittt	le
 8005b3c:	193a      	addle	r2, r7, r4
 8005b3e:	1bdb      	suble	r3, r3, r7
 8005b40:	1936      	addle	r6, r6, r4
 8005b42:	0fcf      	lsrs	r7, r1, #31
 8005b44:	3801      	subs	r0, #1
 8005b46:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8005b4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005b4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005b52:	d1f0      	bne.n	8005b36 <__ieee754_sqrt+0xb6>
 8005b54:	4604      	mov	r4, r0
 8005b56:	2720      	movs	r7, #32
 8005b58:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	eb00 0e0c 	add.w	lr, r0, ip
 8005b62:	db02      	blt.n	8005b6a <__ieee754_sqrt+0xea>
 8005b64:	d113      	bne.n	8005b8e <__ieee754_sqrt+0x10e>
 8005b66:	458e      	cmp	lr, r1
 8005b68:	d811      	bhi.n	8005b8e <__ieee754_sqrt+0x10e>
 8005b6a:	f1be 0f00 	cmp.w	lr, #0
 8005b6e:	eb0e 000c 	add.w	r0, lr, ip
 8005b72:	da42      	bge.n	8005bfa <__ieee754_sqrt+0x17a>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	db40      	blt.n	8005bfa <__ieee754_sqrt+0x17a>
 8005b78:	f102 0801 	add.w	r8, r2, #1
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	458e      	cmp	lr, r1
 8005b80:	bf88      	it	hi
 8005b82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005b86:	eba1 010e 	sub.w	r1, r1, lr
 8005b8a:	4464      	add	r4, ip
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005b92:	3f01      	subs	r7, #1
 8005b94:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005b98:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005b9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005ba0:	d1dc      	bne.n	8005b5c <__ieee754_sqrt+0xdc>
 8005ba2:	4319      	orrs	r1, r3
 8005ba4:	d01b      	beq.n	8005bde <__ieee754_sqrt+0x15e>
 8005ba6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8005c2c <__ieee754_sqrt+0x1ac>
 8005baa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005c30 <__ieee754_sqrt+0x1b0>
 8005bae:	e9da 0100 	ldrd	r0, r1, [sl]
 8005bb2:	e9db 2300 	ldrd	r2, r3, [fp]
 8005bb6:	f7fa fb2b 	bl	8000210 <__aeabi_dsub>
 8005bba:	e9da 8900 	ldrd	r8, r9, [sl]
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	f7fa ff57 	bl	8000a78 <__aeabi_dcmple>
 8005bca:	b140      	cbz	r0, 8005bde <__ieee754_sqrt+0x15e>
 8005bcc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005bd0:	e9da 0100 	ldrd	r0, r1, [sl]
 8005bd4:	e9db 2300 	ldrd	r2, r3, [fp]
 8005bd8:	d111      	bne.n	8005bfe <__ieee754_sqrt+0x17e>
 8005bda:	3601      	adds	r6, #1
 8005bdc:	463c      	mov	r4, r7
 8005bde:	1072      	asrs	r2, r6, #1
 8005be0:	0863      	lsrs	r3, r4, #1
 8005be2:	07f1      	lsls	r1, r6, #31
 8005be4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005be8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005bec:	bf48      	it	mi
 8005bee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005bf2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	e756      	b.n	8005aa8 <__ieee754_sqrt+0x28>
 8005bfa:	4690      	mov	r8, r2
 8005bfc:	e7be      	b.n	8005b7c <__ieee754_sqrt+0xfc>
 8005bfe:	f7fa fb09 	bl	8000214 <__adddf3>
 8005c02:	e9da 8900 	ldrd	r8, r9, [sl]
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	f7fa ff29 	bl	8000a64 <__aeabi_dcmplt>
 8005c12:	b120      	cbz	r0, 8005c1e <__ieee754_sqrt+0x19e>
 8005c14:	1ca0      	adds	r0, r4, #2
 8005c16:	bf08      	it	eq
 8005c18:	3601      	addeq	r6, #1
 8005c1a:	3402      	adds	r4, #2
 8005c1c:	e7df      	b.n	8005bde <__ieee754_sqrt+0x15e>
 8005c1e:	1c63      	adds	r3, r4, #1
 8005c20:	f023 0401 	bic.w	r4, r3, #1
 8005c24:	e7db      	b.n	8005bde <__ieee754_sqrt+0x15e>
 8005c26:	bf00      	nop
 8005c28:	7ff00000 	.word	0x7ff00000
 8005c2c:	20000078 	.word	0x20000078
 8005c30:	20000070 	.word	0x20000070

08005c34 <_init>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr

08005c40 <_fini>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr
