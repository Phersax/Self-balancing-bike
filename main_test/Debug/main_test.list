
main_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006384  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006550  08006550  00007550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a8  080065a8  00008090  2**0
                  CONTENTS
  4 .ARM          00000008  080065a8  080065a8  000075a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b0  080065b0  00008090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b0  080065b0  000075b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065b4  080065b4  000075b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080065b8  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000090  08006648  00008090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08006648  000083e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f792  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e6  00000000  00000000  00017852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  0001a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8e  00000000  00000000  0001b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219e8  00000000  00000000  0001bbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bbe  00000000  00000000  0003d596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d197b  00000000  00000000  00051154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122acf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004228  00000000  00000000  00122b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00126d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000090 	.word	0x20000090
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006534 	.word	0x08006534

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000094 	.word	0x20000094
 8000204:	08006534 	.word	0x08006534

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <encoder_init>:
#include "encoder.h"
#include "main.h"
#include <math.h>

HAL_StatusTypeDef encoder_init(encoder_t *e, channel ch,
		TIM_HandleTypeDef *htim, uint32_t ppr) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	ret = HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	75fb      	strb	r3, [r7, #23]
	if (htim == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <encoder_init+0x1e>
		return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e02c      	b.n	8000f38 <encoder_init+0x78>

	e->tim = htim;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	625a      	str	r2, [r3, #36]	@ 0x24
	ret = HAL_TIM_Encoder_Start(htim, ch);
 8000eec:	7afb      	ldrb	r3, [r7, #11]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f004 f969 	bl	80051c8 <HAL_TIM_Encoder_Start>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <encoder_init+0x44>
		return ret;
 8000f00:	7dfb      	ldrb	r3, [r7, #23]
 8000f02:	e019      	b.n	8000f38 <encoder_init+0x78>

	if (ch == A || ch == B)
 8000f04:	7afb      	ldrb	r3, [r7, #11]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <encoder_init+0x50>
 8000f0a:	7afb      	ldrb	r3, [r7, #11]
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d103      	bne.n	8000f18 <encoder_init+0x58>
		e->resolution = 2;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2202      	movs	r2, #2
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	e002      	b.n	8000f1e <encoder_init+0x5e>
	else
		e->resolution = 4;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	60da      	str	r2, [r3, #12]

	e->velocity_pps = 0.0;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
	e->last_count = htim->Instance->CNT;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	605a      	str	r2, [r3, #4]
	e->ppr = ppr;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	811a      	strh	r2, [r3, #8]

	return ret;
 8000f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <__encoder_update>:

inline static void __encoder_update(encoder_t *e) {
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	uint32_t cur_cnt;
	int32_t diff, cur_velocity;

	cur_cnt = e->tim->Instance->CNT;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f50:	613b      	str	r3, [r7, #16]

	// Handle overflow and underflow
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(e->tim)) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	2b10      	cmp	r3, #16
 8000f60:	d115      	bne.n	8000f8e <__encoder_update+0x4e>
		if (cur_cnt < e->last_count) // underflow
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d205      	bcs.n	8000f78 <__encoder_update+0x38>
			diff = e->last_count - cur_cnt;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e01f      	b.n	8000fb8 <__encoder_update+0x78>
		else
			diff = (e->tim->Instance->ARR - cur_cnt) + e->last_count;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad2      	subs	r2, r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e014      	b.n	8000fb8 <__encoder_update+0x78>
	} else {
		if (cur_cnt > e->last_count) // overflow
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d905      	bls.n	8000fa4 <__encoder_update+0x64>
			diff = e->last_count - cur_cnt;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e009      	b.n	8000fb8 <__encoder_update+0x78>
		else
			diff = (e->tim->Instance->ARR - e->last_count) + cur_cnt;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	1ad2      	subs	r2, r2, r3
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]
	}

	// velocity in pulses per second
	if (e->last_count == cur_cnt)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d101      	bne.n	8000fc6 <__encoder_update+0x86>
		diff = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]

	cur_velocity = (float) diff / DT_enc / (float) e->resolution;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd0:	ee17 0a90 	vmov	r0, s15
 8000fd4:	f7ff fa7c 	bl	80004d0 <__aeabi_f2d>
 8000fd8:	a319      	add	r3, pc, #100	@ (adr r3, 8001040 <__encoder_update+0x100>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fbf9 	bl	80007d4 <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4614      	mov	r4, r2
 8000fe8:	461d      	mov	r5, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff6:	ee17 0a90 	vmov	r0, s15
 8000ffa:	f7ff fa69 	bl	80004d0 <__aeabi_f2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4620      	mov	r0, r4
 8001004:	4629      	mov	r1, r5
 8001006:	f7ff fbe5 	bl	80007d4 <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fd65 	bl	8000ae0 <__aeabi_d2iz>
 8001016:	4603      	mov	r3, r0
 8001018:	60fb      	str	r3, [r7, #12]

	// Filtering velocity
	e->velocity_pps = BETA * e->velocity_pps + (1.0 - BETA) * cur_velocity;
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f7ff fa46 	bl	80004ac <__aeabi_i2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fd5a 	bl	8000ae0 <__aeabi_d2iz>
 800102c:	4602      	mov	r2, r0
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	611a      	str	r2, [r3, #16]
	e->last_count = cur_cnt;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	605a      	str	r2, [r3, #4]
}
 8001038:	bf00      	nop
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bdb0      	pop	{r4, r5, r7, pc}
 8001040:	d2f1a9fc 	.word	0xd2f1a9fc
 8001044:	3f70624d 	.word	0x3f70624d

08001048 <encoder_get_pps>:

float encoder_get_velocity_rpm(encoder_t *e) {
	return encoder_get_velocity_rps(e) * 60.0;
}

float encoder_get_pps(encoder_t *e) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	__encoder_update(e);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff75 	bl	8000f40 <__encoder_update>
	return e->velocity_pps;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <MX_GPIO_Init+0x9c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a1f      	ldr	r2, [pc, #124]	@ (8001108 <MX_GPIO_Init+0x9c>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <MX_GPIO_Init+0x9c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a11      	ldr	r2, [pc, #68]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010dc:	480b      	ldr	r0, [pc, #44]	@ (800110c <MX_GPIO_Init+0xa0>)
 80010de:	f001 fed3 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Direction_Pin;
 80010e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ec:	2302      	movs	r3, #2
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Direction_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	4619      	mov	r1, r3
 80010fa:	4804      	ldr	r0, [pc, #16]	@ (800110c <MX_GPIO_Init+0xa0>)
 80010fc:	f001 fd18 	bl	8002b30 <HAL_GPIO_Init>

}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40020400 	.word	0x40020400

08001110 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
 //To reset a previously used I2C channel
  I2C_ClearBusyBus();
 8001114:	f000 f874 	bl	8001200 <I2C_ClearBusyBus>
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <MX_I2C1_Init+0x54>)
 800111a:	4a13      	ldr	r2, [pc, #76]	@ (8001168 <MX_I2C1_Init+0x58>)
 800111c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <MX_I2C1_Init+0x54>)
 8001120:	4a12      	ldr	r2, [pc, #72]	@ (800116c <MX_I2C1_Init+0x5c>)
 8001122:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_I2C1_Init+0x54>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_I2C1_Init+0x54>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_I2C1_Init+0x54>)
 8001132:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001136:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <MX_I2C1_Init+0x54>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_I2C1_Init+0x54>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <MX_I2C1_Init+0x54>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_I2C1_Init+0x54>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001150:	4804      	ldr	r0, [pc, #16]	@ (8001164 <MX_I2C1_Init+0x54>)
 8001152:	f001 feb3 	bl	8002ebc <HAL_I2C_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C1_Init+0x50>
  {
    Error_Handler();
 800115c:	f000 fcd2 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200000ac 	.word	0x200000ac
 8001168:	40005400 	.word	0x40005400
 800116c:	00061a80 	.word	0x00061a80

08001170 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a19      	ldr	r2, [pc, #100]	@ (80011f4 <HAL_I2C_MspInit+0x84>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d12c      	bne.n	80011ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <HAL_I2C_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a17      	ldr	r2, [pc, #92]	@ (80011f8 <HAL_I2C_MspInit+0x88>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <HAL_I2C_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b4:	2312      	movs	r3, #18
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c0:	2304      	movs	r3, #4
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	480c      	ldr	r0, [pc, #48]	@ (80011fc <HAL_I2C_MspInit+0x8c>)
 80011cc:	f001 fcb0 	bl	8002b30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_I2C_MspInit+0x88>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <HAL_I2C_MspInit+0x88>)
 80011da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011de:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <HAL_I2C_MspInit+0x88>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	@ 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40005400 	.word	0x40005400
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020400 	.word	0x40020400

08001200 <I2C_ClearBusyBus>:
}

/* USER CODE BEGIN 1 */
/* To reset a previously used I2C channel  */
void I2C_ClearBusyBus(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

    // Configure SCL and SDA as output for manual control
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001214:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001218:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121a:	2304      	movs	r3, #4
 800121c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  // Open-drain mode
 800121e:	2311      	movs	r3, #17
 8001220:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001226:	2302      	movs	r3, #2
 8001228:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	463b      	mov	r3, r7
 800122c:	4619      	mov	r1, r3
 800122e:	4825      	ldr	r0, [pc, #148]	@ (80012c4 <I2C_ClearBusyBus+0xc4>)
 8001230:	f001 fc7e 	bl	8002b30 <HAL_GPIO_Init>

    // Set both SCL and SDA to high initially
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800123a:	4822      	ldr	r0, [pc, #136]	@ (80012c4 <I2C_ClearBusyBus+0xc4>)
 800123c:	f001 fe24 	bl	8002e88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001246:	481f      	ldr	r0, [pc, #124]	@ (80012c4 <I2C_ClearBusyBus+0xc4>)
 8001248:	f001 fe1e 	bl	8002e88 <HAL_GPIO_WritePin>

    // Ensure SDA is high (released)
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET)
 800124c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001250:	481c      	ldr	r0, [pc, #112]	@ (80012c4 <I2C_ClearBusyBus+0xc4>)
 8001252:	f001 fe01 	bl	8002e58 <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d11a      	bne.n	8001292 <I2C_ClearBusyBus+0x92>
    {
        // SDA is stuck low, so generate 9 clock pulses
        for (int i = 0; i < 9; i++)
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e014      	b.n	800128c <I2C_ClearBusyBus+0x8c>
        {
            // Toggle the SCL pin to generate a clock pulse
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001268:	4816      	ldr	r0, [pc, #88]	@ (80012c4 <I2C_ClearBusyBus+0xc4>)
 800126a:	f001 fe0d 	bl	8002e88 <HAL_GPIO_WritePin>
            HAL_Delay(1); // Small delay to simulate clock cycle
 800126e:	2001      	movs	r0, #1
 8001270:	f001 fb28 	bl	80028c4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800127a:	4812      	ldr	r0, [pc, #72]	@ (80012c4 <I2C_ClearBusyBus+0xc4>)
 800127c:	f001 fe04 	bl	8002e88 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f001 fb1f 	bl	80028c4 <HAL_Delay>
        for (int i = 0; i < 9; i++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b08      	cmp	r3, #8
 8001290:	dde7      	ble.n	8001262 <I2C_ClearBusyBus+0x62>
        }
    }

    // After the clock cycles, set SDA and SCL back to high
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001298:	480a      	ldr	r0, [pc, #40]	@ (80012c4 <I2C_ClearBusyBus+0xc4>)
 800129a:	f001 fdf5 	bl	8002e88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a4:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <I2C_ClearBusyBus+0xc4>)
 80012a6:	f001 fdef 	bl	8002e88 <HAL_GPIO_WritePin>

    // Reconfigure the pins back to I2C mode
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;  // Alternate function open-drain for I2C
 80012aa:	2312      	movs	r3, #18
 80012ac:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // Adjust according to your I2C peripheral
 80012ae:	2304      	movs	r3, #4
 80012b0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	463b      	mov	r3, r7
 80012b4:	4619      	mov	r1, r3
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <I2C_ClearBusyBus+0xc4>)
 80012b8:	f001 fc3a 	bl	8002b30 <HAL_GPIO_Init>
}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40020400 	.word	0x40020400

080012c8 <Kalman_init>:
#include "kalman_filter.h"

Kalman filter;

void Kalman_init(Kalman* k) {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    /* We will set the variables like so, these can also be tuned by the user */
    k->Q_angle = 0.001f;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a13      	ldr	r2, [pc, #76]	@ (8001320 <Kalman_init+0x58>)
 80012d4:	601a      	str	r2, [r3, #0]
    k->Q_bias = 0.003f;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <Kalman_init+0x5c>)
 80012da:	605a      	str	r2, [r3, #4]
    k->R_measure = 0.03f;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <Kalman_init+0x60>)
 80012e0:	609a      	str	r2, [r3, #8]

    k->angle = 0.0f; // Reset the angle
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
    k->bias = 0.0f;  // Reset bias
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]

    k->P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle, the error covariance matrix is set like so
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
    k->P[0][1] = 0.0f;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
    k->P[1][0] = 0.0f;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
    k->P[1][1] = 0.0f;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	3a83126f 	.word	0x3a83126f
 8001324:	3b449ba6 	.word	0x3b449ba6
 8001328:	3cf5c28f 	.word	0x3cf5c28f
 800132c:	00000000 	.word	0x00000000

08001330 <Kalman_getAngle>:

// The angle should be in degrees and the rate should be in degrees per second
float Kalman_getAngle(Kalman* k, float newAngle, float newRate) {
 8001330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001334:	b08a      	sub	sp, #40	@ 0x28
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	ed87 0a02 	vstr	s0, [r7, #8]
 800133e:	edc7 0a01 	vstr	s1, [r7, #4]
    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    k->rate = newRate - k->bias;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	edd3 7a04 	vldr	s15, [r3, #16]
 8001348:	ed97 7a01 	vldr	s14, [r7, #4]
 800134c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	edc3 7a05 	vstr	s15, [r3, #20]
    k->angle += DT_k * k->rate;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f8b8 	bl	80004d0 <__aeabi_f2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8b1 	bl	80004d0 <__aeabi_f2d>
 800136e:	a3aa      	add	r3, pc, #680	@ (adr r3, 8001618 <Kalman_getAngle+0x2e8>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f904 	bl	8000580 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7fe ff48 	bl	8000214 <__adddf3>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fbd0 	bl	8000b30 <__aeabi_d2f>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	60da      	str	r2, [r3, #12]

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    k->P[0][0] += DT_k * (DT_k * k->P[1][1] - k->P[0][1] - k->P[1][0] + k->Q_angle);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f898 	bl	80004d0 <__aeabi_f2d>
 80013a0:	4604      	mov	r4, r0
 80013a2:	460d      	mov	r5, r1
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f891 	bl	80004d0 <__aeabi_f2d>
 80013ae:	a39a      	add	r3, pc, #616	@ (adr r3, 8001618 <Kalman_getAngle+0x2e8>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff f8e4 	bl	8000580 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4690      	mov	r8, r2
 80013be:	4699      	mov	r9, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f883 	bl	80004d0 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4640      	mov	r0, r8
 80013d0:	4649      	mov	r1, r9
 80013d2:	f7fe ff1d 	bl	8000210 <__aeabi_dsub>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4690      	mov	r8, r2
 80013dc:	4699      	mov	r9, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f874 	bl	80004d0 <__aeabi_f2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4640      	mov	r0, r8
 80013ee:	4649      	mov	r1, r9
 80013f0:	f7fe ff0e 	bl	8000210 <__aeabi_dsub>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4690      	mov	r8, r2
 80013fa:	4699      	mov	r9, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f865 	bl	80004d0 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4640      	mov	r0, r8
 800140c:	4649      	mov	r1, r9
 800140e:	f7fe ff01 	bl	8000214 <__adddf3>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	a37f      	add	r3, pc, #508	@ (adr r3, 8001618 <Kalman_getAngle+0x2e8>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f8ae 	bl	8000580 <__aeabi_dmul>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7fe fef2 	bl	8000214 <__adddf3>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fb7a 	bl	8000b30 <__aeabi_d2f>
 800143c:	4602      	mov	r2, r0
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	619a      	str	r2, [r3, #24]
    k->P[0][1] -= DT_k * k->P[1][1];
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f842 	bl	80004d0 <__aeabi_f2d>
 800144c:	4604      	mov	r4, r0
 800144e:	460d      	mov	r5, r1
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f83b 	bl	80004d0 <__aeabi_f2d>
 800145a:	a36f      	add	r3, pc, #444	@ (adr r3, 8001618 <Kalman_getAngle+0x2e8>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f88e 	bl	8000580 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4620      	mov	r0, r4
 800146a:	4629      	mov	r1, r5
 800146c:	f7fe fed0 	bl	8000210 <__aeabi_dsub>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fb5a 	bl	8000b30 <__aeabi_d2f>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	61da      	str	r2, [r3, #28]
    k->P[1][0] -= DT_k * k->P[1][1];
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f822 	bl	80004d0 <__aeabi_f2d>
 800148c:	4604      	mov	r4, r0
 800148e:	460d      	mov	r5, r1
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f81b 	bl	80004d0 <__aeabi_f2d>
 800149a:	a35f      	add	r3, pc, #380	@ (adr r3, 8001618 <Kalman_getAngle+0x2e8>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7ff f86e 	bl	8000580 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4620      	mov	r0, r4
 80014aa:	4629      	mov	r1, r5
 80014ac:	f7fe feb0 	bl	8000210 <__aeabi_dsub>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fb3a 	bl	8000b30 <__aeabi_d2f>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	621a      	str	r2, [r3, #32]
    k->P[1][1] += k->Q_bias * DT_k;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f802 	bl	80004d0 <__aeabi_f2d>
 80014cc:	4604      	mov	r4, r0
 80014ce:	460d      	mov	r5, r1
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe fffb 	bl	80004d0 <__aeabi_f2d>
 80014da:	a34f      	add	r3, pc, #316	@ (adr r3, 8001618 <Kalman_getAngle+0x2e8>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f84e 	bl	8000580 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fe92 	bl	8000214 <__adddf3>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb1a 	bl	8000b30 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = k->P[0][0] + k->R_measure; // Estimate error
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	ed93 7a06 	vldr	s14, [r3, #24]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	edd3 7a02 	vldr	s15, [r3, #8]
 800150e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001512:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = k->P[0][0] / S;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	edd3 6a06 	vldr	s13, [r3, #24]
 800151c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001524:	edc7 7a04 	vstr	s15, [r7, #16]
    K[1] = k->P[1][0] / S;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	edd3 6a08 	vldr	s13, [r3, #32]
 800152e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001536:	edc7 7a05 	vstr	s15, [r7, #20]

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - k->angle; // Angle difference
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001540:	ed97 7a02 	vldr	s14, [r7, #8]
 8001544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001548:	edc7 7a08 	vstr	s15, [r7, #32]
    /* Step 6 */
    k->angle += K[0] * y;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001552:	edd7 6a04 	vldr	s13, [r7, #16]
 8001556:	edd7 7a08 	vldr	s15, [r7, #32]
 800155a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	edc3 7a03 	vstr	s15, [r3, #12]
    k->bias += K[1] * y;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	ed93 7a04 	vldr	s14, [r3, #16]
 800156e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001572:	edd7 7a08 	vldr	s15, [r7, #32]
 8001576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	edc3 7a04 	vstr	s15, [r3, #16]

    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = k->P[0][0];
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	61fb      	str	r3, [r7, #28]
    float P01_temp = k->P[0][1];
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	61bb      	str	r3, [r7, #24]

    k->P[0][0] -= K[0] * P00_temp;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	ed93 7a06 	vldr	s14, [r3, #24]
 8001596:	edd7 6a04 	vldr	s13, [r7, #16]
 800159a:	edd7 7a07 	vldr	s15, [r7, #28]
 800159e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	edc3 7a06 	vstr	s15, [r3, #24]
    k->P[0][1] -= K[0] * P01_temp;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	ed93 7a07 	vldr	s14, [r3, #28]
 80015b2:	edd7 6a04 	vldr	s13, [r7, #16]
 80015b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	edc3 7a07 	vstr	s15, [r3, #28]
    k->P[1][0] -= K[1] * P00_temp;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80015ce:	edd7 6a05 	vldr	s13, [r7, #20]
 80015d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80015d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	edc3 7a08 	vstr	s15, [r3, #32]
    k->P[1][1] -= K[1] * P01_temp;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80015ea:	edd7 6a05 	vldr	s13, [r7, #20]
 80015ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80015f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return k->angle;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	ee07 3a90 	vmov	s15, r3
}
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	3728      	adds	r7, #40	@ 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001614:	f3af 8000 	nop.w
 8001618:	d2f1a9fc 	.word	0xd2f1a9fc
 800161c:	3f70624d 	.word	0x3f70624d

08001620 <Kalman_setAngle>:

void Kalman_setAngle(Kalman* k, float angle) { k->angle = angle; }
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	ed87 0a00 	vstr	s0, [r7]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001644:	f001 f8cc 	bl	80027e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001648:	f000 f870 	bl	800172c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800164c:	f7ff fd0e 	bl	800106c <MX_GPIO_Init>
	MX_TIM5_Init();
 8001650:	f000 ff78 	bl	8002544 <MX_TIM5_Init>
	MX_I2C1_Init();
 8001654:	f7ff fd5c 	bl	8001110 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001658:	f000 fece 	bl	80023f8 <MX_TIM1_Init>
	MX_TIM2_Init();
 800165c:	f000 ff24 	bl	80024a8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	pid_init(&pid, Kp, Ki, Kd, -max_pid, max_pid);
 8001660:	4b24      	ldr	r3, [pc, #144]	@ (80016f4 <main+0xb4>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <main+0xb8>)
 8001668:	edd3 6a00 	vldr	s13, [r3]
 800166c:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <main+0xbc>)
 800166e:	ed93 6a00 	vldr	s12, [r3]
 8001672:	4b23      	ldr	r3, [pc, #140]	@ (8001700 <main+0xc0>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	eef1 7a67 	vneg.f32	s15, s15
 800167c:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <main+0xc0>)
 800167e:	edd3 5a00 	vldr	s11, [r3]
 8001682:	eeb0 2a65 	vmov.f32	s4, s11
 8001686:	eef0 1a67 	vmov.f32	s3, s15
 800168a:	eeb0 1a46 	vmov.f32	s2, s12
 800168e:	eef0 0a66 	vmov.f32	s1, s13
 8001692:	eeb0 0a47 	vmov.f32	s0, s14
 8001696:	481b      	ldr	r0, [pc, #108]	@ (8001704 <main+0xc4>)
 8001698:	f000 fcce 	bl	8002038 <pid_init>
	pid.pos_deadzone = 150;
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <main+0xc4>)
 800169e:	4a1a      	ldr	r2, [pc, #104]	@ (8001708 <main+0xc8>)
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28
	pid.neg_deadzone = -150;
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <main+0xc4>)
 80016a4:	4a19      	ldr	r2, [pc, #100]	@ (800170c <main+0xcc>)
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24
	pid_set_setpoint(&pid, set_point);
 80016a8:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <main+0xd0>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	4814      	ldr	r0, [pc, #80]	@ (8001704 <main+0xc4>)
 80016b4:	f000 fcee 	bl	8002094 <pid_set_setpoint>
	status = mpu6050_init();
 80016b8:	f000 fa2a 	bl	8001b10 <mpu6050_init>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <main+0xd4>)
 80016c2:	701a      	strb	r2, [r3, #0]

	// Kalman filter
	Kalman_init(&filter);
 80016c4:	4814      	ldr	r0, [pc, #80]	@ (8001718 <main+0xd8>)
 80016c6:	f7ff fdff 	bl	80012c8 <Kalman_init>
	Kalman_setAngle(&filter, 0);
 80016ca:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800171c <main+0xdc>
 80016ce:	4812      	ldr	r0, [pc, #72]	@ (8001718 <main+0xd8>)
 80016d0:	f7ff ffa6 	bl	8001620 <Kalman_setAngle>

	nidec_h24_init();
 80016d4:	f000 fbba 	bl	8001e4c <nidec_h24_init>
	encoder_init(&enc, AB, &htim1, 100);
 80016d8:	2364      	movs	r3, #100	@ 0x64
 80016da:	4a11      	ldr	r2, [pc, #68]	@ (8001720 <main+0xe0>)
 80016dc:	213c      	movs	r1, #60	@ 0x3c
 80016de:	4811      	ldr	r0, [pc, #68]	@ (8001724 <main+0xe4>)
 80016e0:	f7ff fbee 	bl	8000ec0 <encoder_init>
	HAL_TIM_Base_Start_IT(&htim2);
 80016e4:	4810      	ldr	r0, [pc, #64]	@ (8001728 <main+0xe8>)
 80016e6:	f003 fb41 	bl	8004d6c <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(1);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f001 f8ea 	bl	80028c4 <HAL_Delay>
 80016f0:	e7fb      	b.n	80016ea <main+0xaa>
 80016f2:	bf00      	nop
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000004 	.word	0x20000004
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000014 	.word	0x20000014
 8001704:	2000016c 	.word	0x2000016c
 8001708:	43160000 	.word	0x43160000
 800170c:	c3160000 	.word	0xc3160000
 8001710:	200001a8 	.word	0x200001a8
 8001714:	20000168 	.word	0x20000168
 8001718:	20000100 	.word	0x20000100
 800171c:	00000000 	.word	0x00000000
 8001720:	200001d0 	.word	0x200001d0
 8001724:	20000128 	.word	0x20000128
 8001728:	20000218 	.word	0x20000218

0800172c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b094      	sub	sp, #80	@ 0x50
 8001730:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	2234      	movs	r2, #52	@ 0x34
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fc20 	bl	8005f80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <SystemClock_Config+0xd0>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	4a28      	ldr	r2, [pc, #160]	@ (80017fc <SystemClock_Config+0xd0>)
 800175a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001760:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <SystemClock_Config+0xd0>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800176c:	2300      	movs	r3, #0
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <SystemClock_Config+0xd4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001778:	4a21      	ldr	r2, [pc, #132]	@ (8001800 <SystemClock_Config+0xd4>)
 800177a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <SystemClock_Config+0xd4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800178c:	2302      	movs	r3, #2
 800178e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001790:	2301      	movs	r3, #1
 8001792:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001794:	2310      	movs	r3, #16
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001798:	2302      	movs	r3, #2
 800179a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800179c:	2300      	movs	r3, #0
 800179e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80017a0:	2308      	movs	r3, #8
 80017a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 84;
 80017a4:	2354      	movs	r3, #84	@ 0x54
 80017a6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 ff81 	bl	80046c0 <HAL_RCC_OscConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0x9c>
		Error_Handler();
 80017c4:	f000 f99e 	bl	8001b04 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017c8:	230f      	movs	r3, #15
 80017ca:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017cc:	2302      	movs	r3, #2
 80017ce:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	2102      	movs	r1, #2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 fcbb 	bl	8004160 <HAL_RCC_ClockConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0xc8>
		Error_Handler();
 80017f0:	f000 f988 	bl	8001b04 <Error_Handler>
	}
}
 80017f4:	bf00      	nop
 80017f6:	3750      	adds	r7, #80	@ 0x50
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40007000 	.word	0x40007000
 8001804:	00000000 	.word	0x00000000

08001808 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800180c:	b088      	sub	sp, #32
 800180e:	af00      	add	r7, sp, #0
 8001810:	61f8      	str	r0, [r7, #28]
	if (htim->Instance == TIM2) {
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800181a:	f040 8144 	bne.w	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x29e>
		data = mpu6050_data();
 800181e:	4ca6      	ldr	r4, [pc, #664]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001820:	463b      	mov	r3, r7
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fa5c 	bl	8001ce0 <mpu6050_data>
 8001828:	4625      	mov	r5, r4
 800182a:	463c      	mov	r4, r7
 800182c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001830:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001834:	e885 0003 	stmia.w	r5, {r0, r1}
		new_angle = -atan(data.ax / sqrt(data.ay * data.ay + data.az * data.az))
 8001838:	4b9f      	ldr	r3, [pc, #636]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe47 	bl	80004d0 <__aeabi_f2d>
 8001842:	4604      	mov	r4, r0
 8001844:	460d      	mov	r5, r1
 8001846:	4b9c      	ldr	r3, [pc, #624]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001848:	ed93 7a01 	vldr	s14, [r3, #4]
 800184c:	4b9a      	ldr	r3, [pc, #616]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800184e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001856:	4b98      	ldr	r3, [pc, #608]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001858:	edd3 6a02 	vldr	s13, [r3, #8]
 800185c:	4b96      	ldr	r3, [pc, #600]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800185e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186a:	ee17 0a90 	vmov	r0, s15
 800186e:	f7fe fe2f 	bl	80004d0 <__aeabi_f2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	ec43 2b10 	vmov	d0, r2, r3
 800187a:	f004 fbb3 	bl	8005fe4 <sqrt>
 800187e:	ec53 2b10 	vmov	r2, r3, d0
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe ffa5 	bl	80007d4 <__aeabi_ddiv>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	ec43 2b17 	vmov	d7, r2, r3
 8001892:	eeb0 0a47 	vmov.f32	s0, s14
 8001896:	eef0 0a67 	vmov.f32	s1, s15
 800189a:	f004 fbd1 	bl	8006040 <atan>
 800189e:	ec53 2b10 	vmov	r2, r3, d0
 80018a2:	4690      	mov	r8, r2
 80018a4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
				* 180 / M_PI;
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b83      	ldr	r3, [pc, #524]	@ (8001abc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80018ae:	4640      	mov	r0, r8
 80018b0:	4649      	mov	r1, r9
 80018b2:	f7fe fe65 	bl	8000580 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	a37c      	add	r3, pc, #496	@ (adr r3, 8001ab0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe ff86 	bl	80007d4 <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f7ff f92e 	bl	8000b30 <__aeabi_d2f>
 80018d4:	4603      	mov	r3, r0
		new_angle = -atan(data.ax / sqrt(data.ay * data.ay + data.az * data.az))
 80018d6:	4a7a      	ldr	r2, [pc, #488]	@ (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80018d8:	6013      	str	r3, [r2, #0]
		pitch_angle = -Kalman_getAngle(&filter, new_angle, data.gy);
 80018da:	4b79      	ldr	r3, [pc, #484]	@ (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	4b75      	ldr	r3, [pc, #468]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80018e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80018e6:	eef0 0a47 	vmov.f32	s1, s14
 80018ea:	eeb0 0a67 	vmov.f32	s0, s15
 80018ee:	4875      	ldr	r0, [pc, #468]	@ (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80018f0:	f7ff fd1e 	bl	8001330 <Kalman_getAngle>
 80018f4:	eef0 7a40 	vmov.f32	s15, s0
 80018f8:	eef1 7a67 	vneg.f32	s15, s15
 80018fc:	4b72      	ldr	r3, [pc, #456]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]

		pitch_angle = pitch_angle - angle_offset;
 8001902:	4b71      	ldr	r3, [pc, #452]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001904:	ed93 7a00 	vldr	s14, [r3]
 8001908:	4b70      	ldr	r3, [pc, #448]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001912:	4b6d      	ldr	r3, [pc, #436]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001914:	edc3 7a00 	vstr	s15, [r3]

		distance = -10 * pitch_angle;
 8001918:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001926:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001928:	edc3 7a00 	vstr	s15, [r3]
		distance_error = distance_setpoint - distance;
 800192c:	4b69      	ldr	r3, [pc, #420]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	4b67      	ldr	r3, [pc, #412]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193c:	4b66      	ldr	r3, [pc, #408]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800193e:	edc3 7a00 	vstr	s15, [r3]

		if (distance_error < distance_setpoint) {
 8001942:	4b65      	ldr	r3, [pc, #404]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001944:	ed93 7a00 	vldr	s14, [r3]
 8001948:	4b62      	ldr	r3, [pc, #392]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001956:	d510      	bpl.n	800197a <HAL_TIM_PeriodElapsedCallback+0x172>
			distance_setpoint -= weight_balance * dt_callback;
 8001958:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800195a:	ed93 7a00 	vldr	s14, [r3]
 800195e:	4b5f      	ldr	r3, [pc, #380]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001960:	edd3 6a00 	vldr	s13, [r3]
 8001964:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001972:	4b58      	ldr	r3, [pc, #352]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001974:	edc3 7a00 	vstr	s15, [r3]
 8001978:	e00f      	b.n	800199a <HAL_TIM_PeriodElapsedCallback+0x192>
		} else {
			distance_setpoint += weight_balance * dt_callback;
 800197a:	4b58      	ldr	r3, [pc, #352]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800197c:	ed93 7a00 	vldr	s14, [r3]
 8001980:	4b57      	ldr	r3, [pc, #348]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198a:	4b52      	ldr	r3, [pc, #328]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001996:	edc3 7a00 	vstr	s15, [r3]
		}

		pps = fabs(encoder_get_pps(&enc));
 800199a:	4852      	ldr	r0, [pc, #328]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800199c:	f7ff fb54 	bl	8001048 <encoder_get_pps>
 80019a0:	eef0 7a40 	vmov.f32	s15, s0
 80019a4:	eef0 7ae7 	vabs.f32	s15, s15
 80019a8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80019aa:	edc3 7a00 	vstr	s15, [r3]

		if (pid_out < 0) {
 80019ae:	4b4f      	ldr	r3, [pc, #316]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d514      	bpl.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e0>
			if (pps > 700) {
 80019be:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001af0 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 80019c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	dd0a      	ble.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e0>
				distance_setpoint -= rpm_limit;
 80019d2:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019d4:	ed93 7a00 	vldr	s14, [r3]
 80019d8:	4b46      	ldr	r3, [pc, #280]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019e4:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		if (pid_out > 0) {
 80019e8:	4b40      	ldr	r3, [pc, #256]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	dd14      	ble.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0x21a>
			if (pps > 700) {
 80019f8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001af0 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8001a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	dd0a      	ble.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0x21a>
				distance_setpoint += rpm_limit;
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a1e:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		pid_set_setpoint(&pid, distance_setpoint);
 8001a22:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2c:	4832      	ldr	r0, [pc, #200]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a2e:	f000 fb31 	bl	8002094 <pid_set_setpoint>

		if (pitch_angle < -30 || pitch_angle > 30) {
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a44:	d409      	bmi.n	8001a5a <HAL_TIM_PeriodElapsedCallback+0x252>
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a58:	dd0e      	ble.n	8001a78 <HAL_TIM_PeriodElapsedCallback+0x270>
			distance_setpoint = 0;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
			nidec_h24_Move(0, 0, 0);
 8001a62:	2000      	movs	r0, #0
 8001a64:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001afc <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8001a68:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001afc <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8001a6c:	f000 fa68 	bl	8001f40 <nidec_h24_Move>
			pid_reset(&pid);
 8001a70:	4821      	ldr	r0, [pc, #132]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a72:	f000 fc28 	bl	80022c6 <pid_reset>
		} else {
			pid_out = pid_compute_control_action(&pid, distance);
			nidec_h24_Move(pid_out, 450, 1);
		}
	}
}
 8001a76:	e016      	b.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x29e>
			pid_out = pid_compute_control_action(&pid, distance);
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a82:	481d      	ldr	r0, [pc, #116]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a84:	f000 fb16 	bl	80020b4 <pid_compute_control_action>
 8001a88:	eef0 7a40 	vmov.f32	s15, s0
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a8e:	edc3 7a00 	vstr	s15, [r3]
			nidec_h24_Move(pid_out, 450, 1);
 8001a92:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	2001      	movs	r0, #1
 8001a9a:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001b00 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8001a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa2:	f000 fa4d 	bl	8001f40 <nidec_h24_Move>
}
 8001aa6:	bf00      	nop
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab0:	54442d18 	.word	0x54442d18
 8001ab4:	400921fb 	.word	0x400921fb
 8001ab8:	20000150 	.word	0x20000150
 8001abc:	40668000 	.word	0x40668000
 8001ac0:	20000148 	.word	0x20000148
 8001ac4:	20000100 	.word	0x20000100
 8001ac8:	200001ac 	.word	0x200001ac
 8001acc:	2000001c 	.word	0x2000001c
 8001ad0:	2000013c 	.word	0x2000013c
 8001ad4:	20000144 	.word	0x20000144
 8001ad8:	20000140 	.word	0x20000140
 8001adc:	20000010 	.word	0x20000010
 8001ae0:	20000018 	.word	0x20000018
 8001ae4:	20000128 	.word	0x20000128
 8001ae8:	200001a4 	.word	0x200001a4
 8001aec:	2000014c 	.word	0x2000014c
 8001af0:	442f0000 	.word	0x442f0000
 8001af4:	2000000c 	.word	0x2000000c
 8001af8:	2000016c 	.word	0x2000016c
 8001afc:	00000000 	.word	0x00000000
 8001b00:	43e10000 	.word	0x43e10000

08001b04 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <Error_Handler+0x8>

08001b10 <mpu6050_init>:
int16_t gy_bias = 0;
int16_t gz_bias = 0;


/*mpu6050 initialization*/
HAL_StatusTypeDef mpu6050_init(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDR, 1, 100);
 8001b16:	2364      	movs	r3, #100	@ 0x64
 8001b18:	2201      	movs	r2, #1
 8001b1a:	21d0      	movs	r1, #208	@ 0xd0
 8001b1c:	4823      	ldr	r0, [pc, #140]	@ (8001bac <mpu6050_init+0x9c>)
 8001b1e:	f001 fe3d 	bl	800379c <HAL_I2C_IsDeviceReady>
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK) {
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d139      	bne.n	8001ba0 <mpu6050_init+0x90>
			uint8_t data;

			/* power management register 0X6B must be all 0s to wake the sensor up */
			data = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 100);
 8001b30:	2364      	movs	r3, #100	@ 0x64
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	2301      	movs	r3, #1
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	1dbb      	adds	r3, r7, #6
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	226b      	movs	r2, #107	@ 0x6b
 8001b40:	21d0      	movs	r1, #208	@ 0xd0
 8001b42:	481a      	ldr	r0, [pc, #104]	@ (8001bac <mpu6050_init+0x9c>)
 8001b44:	f001 fafe 	bl	8003144 <HAL_I2C_Mem_Write>

			/* Set DATA RATE of 1KHz by writing SMPLRT_DIV register */
			data = 0x07;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 100);
 8001b4c:	2364      	movs	r3, #100	@ 0x64
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	2301      	movs	r3, #1
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	1dbb      	adds	r3, r7, #6
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	2219      	movs	r2, #25
 8001b5c:	21d0      	movs	r1, #208	@ 0xd0
 8001b5e:	4813      	ldr	r0, [pc, #76]	@ (8001bac <mpu6050_init+0x9c>)
 8001b60:	f001 faf0 	bl	8003144 <HAL_I2C_Mem_Write>

			/*  Set accelerometer configuration in ACCEL_CONFIG Register */
			/* XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g */
			data = 0x10; //
 8001b64:	2310      	movs	r3, #16
 8001b66:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 100);
 8001b68:	2364      	movs	r3, #100	@ 0x64
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	1dbb      	adds	r3, r7, #6
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2301      	movs	r3, #1
 8001b76:	221c      	movs	r2, #28
 8001b78:	21d0      	movs	r1, #208	@ 0xd0
 8001b7a:	480c      	ldr	r0, [pc, #48]	@ (8001bac <mpu6050_init+0x9c>)
 8001b7c:	f001 fae2 	bl	8003144 <HAL_I2C_Mem_Write>

			/* Set Gyroscope configuration in GYRO_CONFIG Register */
			/* XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 deg/s */
			data = 0x08; //
 8001b80:	2308      	movs	r3, #8
 8001b82:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 100);
 8001b84:	2364      	movs	r3, #100	@ 0x64
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	1dbb      	adds	r3, r7, #6
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2301      	movs	r3, #1
 8001b92:	221b      	movs	r2, #27
 8001b94:	21d0      	movs	r1, #208	@ 0xd0
 8001b96:	4805      	ldr	r0, [pc, #20]	@ (8001bac <mpu6050_init+0x9c>)
 8001b98:	f001 fad4 	bl	8003144 <HAL_I2C_Mem_Write>

			calculate_gyroscope_bias();
 8001b9c:	f000 f808 	bl	8001bb0 <calculate_gyroscope_bias>
			//calculate_accelerometer_bias();
		}
		return status;
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200000ac 	.word	0x200000ac

08001bb0 <calculate_gyroscope_bias>:

/*Gyroscope bias calculate*/
void calculate_gyroscope_bias() {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08e      	sub	sp, #56	@ 0x38
 8001bb4:	af04      	add	r7, sp, #16
	// Number of samples to average
    int num_samples = 2000;
 8001bb6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001bba:	617b      	str	r3, [r7, #20]
    float gx_sum = 0;
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    float gy_sum = 0;
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
    float gz_sum = 0;
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < num_samples; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	e044      	b.n	8001c5e <calculate_gyroscope_bias+0xae>
    	uint8_t buffer[14];
    	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 100);
 8001bd4:	2364      	movs	r3, #100	@ 0x64
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	230e      	movs	r3, #14
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2301      	movs	r3, #1
 8001be2:	223b      	movs	r2, #59	@ 0x3b
 8001be4:	21d0      	movs	r1, #208	@ 0xd0
 8001be6:	483a      	ldr	r0, [pc, #232]	@ (8001cd0 <calculate_gyroscope_bias+0x120>)
 8001be8:	f001 fba6 	bl	8003338 <HAL_I2C_Mem_Read>
    	gx_sum += (int16_t)(buffer[8] << 8 | buffer[9]);
 8001bec:	7b3b      	ldrb	r3, [r7, #12]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	7b7b      	ldrb	r3, [r7, #13]
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c02:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    	gy_sum += (int16_t)(buffer[10] << 8 | buffer[11]);
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c24:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2c:	edc7 7a08 	vstr	s15, [r7, #32]
    	gz_sum += (int16_t)(buffer[12] << 8 | buffer[13]);
 8001c30:	7c3b      	ldrb	r3, [r7, #16]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	7c7b      	ldrb	r3, [r7, #17]
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c46:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4e:	edc7 7a07 	vstr	s15, [r7, #28]
    	HAL_Delay(1);
 8001c52:	2001      	movs	r0, #1
 8001c54:	f000 fe36 	bl	80028c4 <HAL_Delay>
    for (int i = 0; i < num_samples; i++) {
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	dbb6      	blt.n	8001bd4 <calculate_gyroscope_bias+0x24>
    }

    gx_bias = gx_sum / num_samples;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c70:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c7c:	ee17 3a90 	vmov	r3, s15
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <calculate_gyroscope_bias+0x124>)
 8001c84:	801a      	strh	r2, [r3, #0]
    gy_bias = gy_sum / num_samples;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c90:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9c:	ee17 3a90 	vmov	r3, s15
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <calculate_gyroscope_bias+0x128>)
 8001ca4:	801a      	strh	r2, [r3, #0]
    gz_bias = gz_sum / num_samples;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cbc:	ee17 3a90 	vmov	r3, s15
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <calculate_gyroscope_bias+0x12c>)
 8001cc4:	801a      	strh	r2, [r3, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	@ 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200000ac 	.word	0x200000ac
 8001cd4:	200001b0 	.word	0x200001b0
 8001cd8:	200001b2 	.word	0x200001b2
 8001cdc:	200001b4 	.word	0x200001b4

08001ce0 <mpu6050_data>:
	res.data = imu_data / GYRO_SCALE;
	return res;
}

/* All data reading MPU6050 */
mpu_data mpu6050_data() {
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b090      	sub	sp, #64	@ 0x40
 8001ce4:	af04      	add	r7, sp, #16
 8001ce6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[14];
	 HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 100);
 8001ce8:	2364      	movs	r3, #100	@ 0x64
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	230e      	movs	r3, #14
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	f107 0320 	add.w	r3, r7, #32
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	223b      	movs	r2, #59	@ 0x3b
 8001cfa:	21d0      	movs	r1, #208	@ 0xd0
 8001cfc:	484d      	ldr	r0, [pc, #308]	@ (8001e34 <mpu6050_data+0x154>)
 8001cfe:	f001 fb1b 	bl	8003338 <HAL_I2C_Mem_Read>
	 mpu_data data;
	 data.ax = (float)(int16_t)(buffer[0] << 8 | buffer[1]) / ACC_SCALE;
 8001d02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001e38 <mpu6050_data+0x158>
 8001d20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d24:	edc7 7a02 	vstr	s15, [r7, #8]
	 data.ay = (float)(int16_t)(buffer[2] << 8 | buffer[3]) / ACC_SCALE;
 8001d28:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001e38 <mpu6050_data+0x158>
 8001d46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4a:	edc7 7a03 	vstr	s15, [r7, #12]
	 data.az = (float)(int16_t)(buffer[4] << 8 | buffer[5]) / ACC_SCALE;
 8001d4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d68:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001e38 <mpu6050_data+0x158>
 8001d6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d70:	edc7 7a04 	vstr	s15, [r7, #16]
	 data.gx = (float)(int16_t)((buffer[8] << 8 | buffer[9])- gx_bias) / GYRO_SCALE ;
 8001d74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001d80:	b21b      	sxth	r3, r3
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b2c      	ldr	r3, [pc, #176]	@ (8001e3c <mpu6050_data+0x15c>)
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d9e:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001e40 <mpu6050_data+0x160>
 8001da2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001da6:	edc7 7a05 	vstr	s15, [r7, #20]
	 data.gy = (float)(int16_t)((buffer[10] << 8 | buffer[11])- gy_bias) / GYRO_SCALE;
 8001daa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b21b      	sxth	r3, r3
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <mpu6050_data+0x164>)
 8001dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dd4:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001e40 <mpu6050_data+0x160>
 8001dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ddc:	edc7 7a06 	vstr	s15, [r7, #24]
	 data.gz = (float)(int16_t)((buffer[12] << 8 | buffer[13])- gz_bias) / GYRO_SCALE;
 8001de0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <mpu6050_data+0x168>)
 8001df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0a:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001e40 <mpu6050_data+0x160>
 8001e0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e12:	edc7 7a07 	vstr	s15, [r7, #28]
	 return data;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	461d      	mov	r5, r3
 8001e1a:	f107 0408 	add.w	r4, r7, #8
 8001e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e26:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	3730      	adds	r7, #48	@ 0x30
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bdb0      	pop	{r4, r5, r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200000ac 	.word	0x200000ac
 8001e38:	45800000 	.word	0x45800000
 8001e3c:	200001b0 	.word	0x200001b0
 8001e40:	42830000 	.word	0x42830000
 8001e44:	200001b2 	.word	0x200001b2
 8001e48:	200001b4 	.word	0x200001b4

08001e4c <nidec_h24_init>:
extern TIM_HandleTypeDef htim5;

int32_t out_ccr;

/* To initialize the PWM and direction pins of the motor */
void nidec_h24_init() {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };  // Declare the GPIO init struct
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <nidec_h24_init+0xa8>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e68:	4a22      	ldr	r2, [pc, #136]	@ (8001ef4 <nidec_h24_init+0xa8>)
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e70:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <nidec_h24_init+0xa8>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : Direction_Pin */
	GPIO_InitStruct.Pin = DIRECTION_PIN;
 8001e7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e80:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e86:	2302      	movs	r3, #2
 8001e88:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DIRECTION_PORT, &GPIO_InitStruct);
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	4619      	mov	r1, r3
 8001e92:	4819      	ldr	r0, [pc, #100]	@ (8001ef8 <nidec_h24_init+0xac>)
 8001e94:	f000 fe4c 	bl	8002b30 <HAL_GPIO_Init>

	/*Configure GPIO pin : Brake_Pin */
	GPIO_InitStruct.Pin = BRAKE_PIN;
 8001e98:	2310      	movs	r3, #16
 8001e9a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(BRAKE_PORT, &GPIO_InitStruct);
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4812      	ldr	r0, [pc, #72]	@ (8001ef8 <nidec_h24_init+0xac>)
 8001eae:	f000 fe3f 	bl	8002b30 <HAL_GPIO_Init>

	// Set the direction pin to low initially
	HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001eb8:	480f      	ldr	r0, [pc, #60]	@ (8001ef8 <nidec_h24_init+0xac>)
 8001eba:	f000 ffe5 	bl	8002e88 <HAL_GPIO_WritePin>

	// Set the brake pin to low initially
	HAL_GPIO_WritePin(BRAKE_PORT, BRAKE_PIN, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2110      	movs	r1, #16
 8001ec2:	480d      	ldr	r0, [pc, #52]	@ (8001ef8 <nidec_h24_init+0xac>)
 8001ec4:	f000 ffe0 	bl	8002e88 <HAL_GPIO_WritePin>

	// Start PWM on the specified timer and channel
	TIM5->CCR1 = 0;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <nidec_h24_init+0xb0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_Base_Start(&htim5);
 8001ece:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <nidec_h24_init+0xb4>)
 8001ed0:	f002 fee4 	bl	8004c9c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim5, CHANNEL);
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	480a      	ldr	r0, [pc, #40]	@ (8001f00 <nidec_h24_init+0xb4>)
 8001ed8:	f003 f808 	bl	8004eec <HAL_TIM_PWM_Start>
	nidec_h24_Move(0, 0, 0);
 8001edc:	2000      	movs	r0, #0
 8001ede:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001f04 <nidec_h24_init+0xb8>
 8001ee2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001f04 <nidec_h24_init+0xb8>
 8001ee6:	f000 f82b 	bl	8001f40 <nidec_h24_Move>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40000c00 	.word	0x40000c00
 8001f00:	20000260 	.word	0x20000260
 8001f04:	00000000 	.word	0x00000000

08001f08 <map>:

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	69b9      	ldr	r1, [r7, #24]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	1a8a      	subs	r2, r1, r2
 8001f22:	fb03 f202 	mul.w	r2, r3, r2
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1acb      	subs	r3, r1, r3
 8001f2c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4413      	add	r3, r2
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <nidec_h24_Move>:

/* To make the motor turn based on the input */
void nidec_h24_Move(float modv, float max_modv, uint8_t brk) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]

	if (brk == 0) {
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d108      	bne.n	8001f6a <nidec_h24_Move+0x2a>
		// brk -> 0: brakes
		HAL_GPIO_WritePin(BRAKE_PORT, BRAKE_PIN, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2110      	movs	r1, #16
 8001f5c:	4832      	ldr	r0, [pc, #200]	@ (8002028 <nidec_h24_Move+0xe8>)
 8001f5e:	f000 ff93 	bl	8002e88 <HAL_GPIO_WritePin>
		TIM5->CCR1 = 0;
 8001f62:	4b32      	ldr	r3, [pc, #200]	@ (800202c <nidec_h24_Move+0xec>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM5->CCR1 = 0;

		// Generate an update event to reload the value immediately
	}

}
 8001f68:	e059      	b.n	800201e <nidec_h24_Move+0xde>
		HAL_GPIO_WritePin(BRAKE_PORT, BRAKE_PIN, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	482e      	ldr	r0, [pc, #184]	@ (8002028 <nidec_h24_Move+0xe8>)
 8001f70:	f000 ff8a 	bl	8002e88 <HAL_GPIO_WritePin>
		if (modv > 0) {
 8001f74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	dd1c      	ble.n	8001fbc <nidec_h24_Move+0x7c>
			HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f88:	4827      	ldr	r0, [pc, #156]	@ (8002028 <nidec_h24_Move+0xe8>)
 8001f8a:	f000 ff7d 	bl	8002e88 <HAL_GPIO_WritePin>
			out_ccr = map(modv, 0, max_modv, 3938, 0);
 8001f8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	f640 7362 	movw	r3, #3938	@ 0xf62
 8001fa6:	ee17 2a90 	vmov	r2, s15
 8001faa:	2100      	movs	r1, #0
 8001fac:	ee17 0a10 	vmov	r0, s14
 8001fb0:	f7ff ffaa 	bl	8001f08 <map>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002030 <nidec_h24_Move+0xf0>)
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e01d      	b.n	8001ff8 <nidec_h24_Move+0xb8>
			HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, GPIO_PIN_RESET);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fc2:	4819      	ldr	r0, [pc, #100]	@ (8002028 <nidec_h24_Move+0xe8>)
 8001fc4:	f000 ff60 	bl	8002e88 <HAL_GPIO_WritePin>
			out_ccr = map(modv, 0, -max_modv, 3938, 0);
 8001fc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fcc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fd4:	eef1 7a67 	vneg.f32	s15, s15
 8001fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fdc:	2300      	movs	r3, #0
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	f640 7362 	movw	r3, #3938	@ 0xf62
 8001fe4:	ee17 2a90 	vmov	r2, s15
 8001fe8:	2100      	movs	r1, #0
 8001fea:	ee17 0a10 	vmov	r0, s14
 8001fee:	f7ff ff8b 	bl	8001f08 <map>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4a0e      	ldr	r2, [pc, #56]	@ (8002030 <nidec_h24_Move+0xf0>)
 8001ff6:	6013      	str	r3, [r2, #0]
		if (out_ccr > 0 && out_ccr < htim5.Instance->ARR)
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <nidec_h24_Move+0xf0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	dd0b      	ble.n	8002018 <nidec_h24_Move+0xd8>
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <nidec_h24_Move+0xf4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <nidec_h24_Move+0xf0>)
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	4293      	cmp	r3, r2
 800200c:	d904      	bls.n	8002018 <nidec_h24_Move+0xd8>
			TIM5->CCR1 = out_ccr;
 800200e:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <nidec_h24_Move+0xf0>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <nidec_h24_Move+0xec>)
 8002014:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002016:	e002      	b.n	800201e <nidec_h24_Move+0xde>
			TIM5->CCR1 = 0;
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <nidec_h24_Move+0xec>)
 800201a:	2200      	movs	r2, #0
 800201c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40020400 	.word	0x40020400
 800202c:	40000c00 	.word	0x40000c00
 8002030:	200001b8 	.word	0x200001b8
 8002034:	20000260 	.word	0x20000260

08002038 <pid_init>:

float p_action, i_action, d_action, error_debug;
static float last_u;

void pid_init(PID_t *p, float k_p, float k_i, float k_d, float min_out,
		float max_out) {
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6178      	str	r0, [r7, #20]
 8002040:	ed87 0a04 	vstr	s0, [r7, #16]
 8002044:	edc7 0a03 	vstr	s1, [r7, #12]
 8002048:	ed87 1a02 	vstr	s2, [r7, #8]
 800204c:	edc7 1a01 	vstr	s3, [r7, #4]
 8002050:	ed87 2a00 	vstr	s4, [r7]
	p->k_p = k_p;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	611a      	str	r2, [r3, #16]
	p->k_i = k_i;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	615a      	str	r2, [r3, #20]
	p->k_d = k_d;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	619a      	str	r2, [r3, #24]
	p->integral_error = 0;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
	p->last_error = 0;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
	p->last_updated_ts = 0;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
	p->min_output = min_out;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	621a      	str	r2, [r3, #32]
	p->max_output = max_out;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	61da      	str	r2, [r3, #28]
}
 8002088:	bf00      	nop
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <pid_set_setpoint>:

void pid_set_setpoint(PID_t *p, float set_point) {
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	ed87 0a00 	vstr	s0, [r7]
	p->set_point = set_point;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	605a      	str	r2, [r3, #4]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <pid_compute_control_action>:

float pid_compute_control_action(PID_t *p, float est_output) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	ed87 0a00 	vstr	s0, [r7]
	float error, integral_error, u, derivative, delta_T;
	float k_p = p->k_p;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	617b      	str	r3, [r7, #20]

	error = pid_get_setpoint(p) - est_output;
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8b8 	bl	800223c <pid_get_setpoint>
 80020cc:	eeb0 7a40 	vmov.f32	s14, s0
 80020d0:	edd7 7a00 	vldr	s15, [r7]
 80020d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d8:	edc7 7a04 	vstr	s15, [r7, #16]

	delta_T = pid_get_current_sampling_time(p);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8bd 	bl	800225c <pid_get_current_sampling_time>
 80020e2:	ed87 0a03 	vstr	s0, [r7, #12]

	if (delta_T > 0.0 && p->k_d != 0.0) {
 80020e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	dd15      	ble.n	8002120 <pid_compute_control_action+0x6c>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80020fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	d00d      	beq.n	8002120 <pid_compute_control_action+0x6c>
		// Apply the low-pass filter to the derivative
		derivative = (error - p->last_error) / delta_T;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	edd3 7a03 	vldr	s15, [r3, #12]
 800210a:	ed97 7a04 	vldr	s14, [r7, #16]
 800210e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002112:	ed97 7a03 	vldr	s14, [r7, #12]
 8002116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800211a:	edc7 7a06 	vstr	s15, [r7, #24]
 800211e:	e002      	b.n	8002126 <pid_compute_control_action+0x72>

	} else {
		derivative = 0;
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
	}

	if (p->neg_deadzone < error && error < p->pos_deadzone) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800212c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002138:	dd17      	ble.n	800216a <pid_compute_control_action+0xb6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002140:	ed97 7a04 	vldr	s14, [r7, #16]
 8002144:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	d50d      	bpl.n	800216a <pid_compute_control_action+0xb6>
		integral_error = p->integral_error + error *delta_T;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	ed93 7a02 	vldr	s14, [r3, #8]
 8002154:	edd7 6a04 	vldr	s13, [r7, #16]
 8002158:	edd7 7a03 	vldr	s15, [r7, #12]
 800215c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002164:	edc7 7a07 	vstr	s15, [r7, #28]
 8002168:	e006      	b.n	8002178 <pid_compute_control_action+0xc4>
	} else {
		p->integral_error = 0;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
		integral_error = 0;
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
	}

	u = k_p * error + p->k_i * integral_error + p->k_d * derivative;
 8002178:	ed97 7a05 	vldr	s14, [r7, #20]
 800217c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	edd3 6a05 	vldr	s13, [r3, #20]
 800218a:	edd7 7a07 	vldr	s15, [r7, #28]
 800218e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002192:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	edd3 6a06 	vldr	s13, [r3, #24]
 800219c:	edd7 7a06 	vldr	s15, [r7, #24]
 80021a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a8:	edc7 7a02 	vstr	s15, [r7, #8]
	p->p_term = k_p * error;
 80021ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80021b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80021b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	p->i_term = p->k_i * integral_error;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80021c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80021c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	p->d_term = p->k_d * derivative;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80021d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	p_action = p->p_term;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002228 <pid_compute_control_action+0x174>)
 80021ec:	6013      	str	r3, [r2, #0]
	i_action = p->i_term;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	4a0e      	ldr	r2, [pc, #56]	@ (800222c <pid_compute_control_action+0x178>)
 80021f4:	6013      	str	r3, [r2, #0]
	d_action = p->d_term;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002230 <pid_compute_control_action+0x17c>)
 80021fc:	6013      	str	r3, [r2, #0]
	} else {
		p->integral_error = integral_error;
	}
	*/

	last_u = u;
 80021fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <pid_compute_control_action+0x180>)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	6013      	str	r3, [r2, #0]

	p->last_error = error;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	60da      	str	r2, [r3, #12]
	error_debug = error;
 800220a:	4a0b      	ldr	r2, [pc, #44]	@ (8002238 <pid_compute_control_action+0x184>)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	6013      	str	r3, [r2, #0]
	pid_update_ts(p);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f84b 	bl	80022ac <pid_update_ts>
	return u;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	ee07 3a90 	vmov	s15, r3
}
 800221c:	eeb0 0a67 	vmov.f32	s0, s15
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200001bc 	.word	0x200001bc
 800222c:	200001c0 	.word	0x200001c0
 8002230:	200001c4 	.word	0x200001c4
 8002234:	200001cc 	.word	0x200001cc
 8002238:	200001c8 	.word	0x200001c8

0800223c <pid_get_setpoint>:

float pid_get_error(PID_t *p) {
	return p->last_error;
}

float pid_get_setpoint(PID_t *p) {
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	return p->set_point;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	ee07 3a90 	vmov	s15, r3
}
 800224c:	eeb0 0a67 	vmov.f32	s0, s15
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <pid_get_current_sampling_time>:

static float pid_get_current_sampling_time(PID_t *p) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	return (float) (HAL_GetTick() - p->last_updated_ts) / 1000.0;
 8002264:	f000 fb22 	bl	80028ac <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002278:	ee17 0a90 	vmov	r0, s15
 800227c:	f7fe f928 	bl	80004d0 <__aeabi_f2d>
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <pid_get_current_sampling_time+0x4c>)
 8002286:	f7fe faa5 	bl	80007d4 <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	f7fe fc4d 	bl	8000b30 <__aeabi_d2f>
 8002296:	4603      	mov	r3, r0
 8002298:	ee07 3a90 	vmov	s15, r3
}
 800229c:	eeb0 0a67 	vmov.f32	s0, s15
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	408f4000 	.word	0x408f4000

080022ac <pid_update_ts>:

void pid_update_ts(PID_t *p) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	p->last_updated_ts = HAL_GetTick();
 80022b4:	f000 fafa 	bl	80028ac <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	601a      	str	r2, [r3, #0]
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <pid_reset>:

void pid_reset(PID_t *p) {
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
	p->set_point = 0;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	605a      	str	r2, [r3, #4]
	p->integral_error = 0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
	p->last_error = 0;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
	p->last_updated_ts = 0;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
	p->p_term = 0;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	p->i_term = 0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
	p->d_term = 0;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <HAL_MspInit+0x4c>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	4a0f      	ldr	r2, [pc, #60]	@ (800235c <HAL_MspInit+0x4c>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002324:	6453      	str	r3, [r2, #68]	@ 0x44
 8002326:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <HAL_MspInit+0x4c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_MspInit+0x4c>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	4a08      	ldr	r2, [pc, #32]	@ (800235c <HAL_MspInit+0x4c>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002340:	6413      	str	r3, [r2, #64]	@ 0x40
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_MspInit+0x4c>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <NMI_Handler+0x4>

08002368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <HardFault_Handler+0x4>

08002370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <MemManage_Handler+0x4>

08002378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <BusFault_Handler+0x4>

08002380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <UsageFault_Handler+0x4>

08002388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b6:	f000 fa65 	bl	8002884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023c4:	4802      	ldr	r0, [pc, #8]	@ (80023d0 <TIM2_IRQHandler+0x10>)
 80023c6:	f002 ff8d 	bl	80052e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000218 	.word	0x20000218

080023d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d8:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <SystemInit+0x20>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	4a05      	ldr	r2, [pc, #20]	@ (80023f4 <SystemInit+0x20>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08c      	sub	sp, #48	@ 0x30
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	2224      	movs	r2, #36	@ 0x24
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f003 fdba 	bl	8005f80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002414:	4b22      	ldr	r3, [pc, #136]	@ (80024a0 <MX_TIM1_Init+0xa8>)
 8002416:	4a23      	ldr	r2, [pc, #140]	@ (80024a4 <MX_TIM1_Init+0xac>)
 8002418:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800241a:	4b21      	ldr	r3, [pc, #132]	@ (80024a0 <MX_TIM1_Init+0xa8>)
 800241c:	2200      	movs	r2, #0
 800241e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002420:	4b1f      	ldr	r3, [pc, #124]	@ (80024a0 <MX_TIM1_Init+0xa8>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <MX_TIM1_Init+0xa8>)
 8002428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800242c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242e:	4b1c      	ldr	r3, [pc, #112]	@ (80024a0 <MX_TIM1_Init+0xa8>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <MX_TIM1_Init+0xa8>)
 8002436:	2200      	movs	r2, #0
 8002438:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243a:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <MX_TIM1_Init+0xa8>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002440:	2303      	movs	r3, #3
 8002442:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002448:	2301      	movs	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002458:	2301      	movs	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800245c:	2300      	movs	r3, #0
 800245e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	4619      	mov	r1, r3
 800246a:	480d      	ldr	r0, [pc, #52]	@ (80024a0 <MX_TIM1_Init+0xa8>)
 800246c:	f002 fe06 	bl	800507c <HAL_TIM_Encoder_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002476:	f7ff fb45 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	4619      	mov	r1, r3
 8002486:	4806      	ldr	r0, [pc, #24]	@ (80024a0 <MX_TIM1_Init+0xa8>)
 8002488:	f003 fcea 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002492:	f7ff fb37 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	3730      	adds	r7, #48	@ 0x30
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200001d0 	.word	0x200001d0
 80024a4:	40010000 	.word	0x40010000

080024a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024bc:	463b      	mov	r3, r7
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024c4:	4b1d      	ldr	r3, [pc, #116]	@ (800253c <MX_TIM2_Init+0x94>)
 80024c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <MX_TIM2_Init+0x94>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d2:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <MX_TIM2_Init+0x94>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 336000-1;
 80024d8:	4b18      	ldr	r3, [pc, #96]	@ (800253c <MX_TIM2_Init+0x94>)
 80024da:	4a19      	ldr	r2, [pc, #100]	@ (8002540 <MX_TIM2_Init+0x98>)
 80024dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024de:	4b17      	ldr	r3, [pc, #92]	@ (800253c <MX_TIM2_Init+0x94>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	4b15      	ldr	r3, [pc, #84]	@ (800253c <MX_TIM2_Init+0x94>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ea:	4814      	ldr	r0, [pc, #80]	@ (800253c <MX_TIM2_Init+0x94>)
 80024ec:	f002 fb86 	bl	8004bfc <HAL_TIM_Base_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80024f6:	f7ff fb05 	bl	8001b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002500:	f107 0308 	add.w	r3, r7, #8
 8002504:	4619      	mov	r1, r3
 8002506:	480d      	ldr	r0, [pc, #52]	@ (800253c <MX_TIM2_Init+0x94>)
 8002508:	f003 f89e 	bl	8005648 <HAL_TIM_ConfigClockSource>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002512:	f7ff faf7 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800251e:	463b      	mov	r3, r7
 8002520:	4619      	mov	r1, r3
 8002522:	4806      	ldr	r0, [pc, #24]	@ (800253c <MX_TIM2_Init+0x94>)
 8002524:	f003 fc9c 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800252e:	f7ff fae9 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000218 	.word	0x20000218
 8002540:	0005207f 	.word	0x0005207f

08002544 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	@ 0x28
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254a:	f107 0320 	add.w	r3, r7, #32
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	611a      	str	r2, [r3, #16]
 8002562:	615a      	str	r2, [r3, #20]
 8002564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002566:	4b22      	ldr	r3, [pc, #136]	@ (80025f0 <MX_TIM5_Init+0xac>)
 8002568:	4a22      	ldr	r2, [pc, #136]	@ (80025f4 <MX_TIM5_Init+0xb0>)
 800256a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800256c:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <MX_TIM5_Init+0xac>)
 800256e:	2200      	movs	r2, #0
 8002570:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b1f      	ldr	r3, [pc, #124]	@ (80025f0 <MX_TIM5_Init+0xac>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4199;
 8002578:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <MX_TIM5_Init+0xac>)
 800257a:	f241 0267 	movw	r2, #4199	@ 0x1067
 800257e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002580:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <MX_TIM5_Init+0xac>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002586:	4b1a      	ldr	r3, [pc, #104]	@ (80025f0 <MX_TIM5_Init+0xac>)
 8002588:	2280      	movs	r2, #128	@ 0x80
 800258a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800258c:	4818      	ldr	r0, [pc, #96]	@ (80025f0 <MX_TIM5_Init+0xac>)
 800258e:	f002 fc5d 	bl	8004e4c <HAL_TIM_PWM_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002598:	f7ff fab4 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025a4:	f107 0320 	add.w	r3, r7, #32
 80025a8:	4619      	mov	r1, r3
 80025aa:	4811      	ldr	r0, [pc, #68]	@ (80025f0 <MX_TIM5_Init+0xac>)
 80025ac:	f003 fc58 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80025b6:	f7ff faa5 	bl	8001b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ba:	2360      	movs	r3, #96	@ 0x60
 80025bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2200      	movs	r2, #0
 80025ce:	4619      	mov	r1, r3
 80025d0:	4807      	ldr	r0, [pc, #28]	@ (80025f0 <MX_TIM5_Init+0xac>)
 80025d2:	f002 ff77 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80025dc:	f7ff fa92 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80025e0:	4803      	ldr	r0, [pc, #12]	@ (80025f0 <MX_TIM5_Init+0xac>)
 80025e2:	f000 f899 	bl	8002718 <HAL_TIM_MspPostInit>

}
 80025e6:	bf00      	nop
 80025e8:	3728      	adds	r7, #40	@ 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000260 	.word	0x20000260
 80025f4:	40000c00 	.word	0x40000c00

080025f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a19      	ldr	r2, [pc, #100]	@ (800267c <HAL_TIM_Encoder_MspInit+0x84>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d12c      	bne.n	8002674 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <HAL_TIM_Encoder_MspInit+0x88>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	4a17      	ldr	r2, [pc, #92]	@ (8002680 <HAL_TIM_Encoder_MspInit+0x88>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6453      	str	r3, [r2, #68]	@ 0x44
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <HAL_TIM_Encoder_MspInit+0x88>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <HAL_TIM_Encoder_MspInit+0x88>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	4a10      	ldr	r2, [pc, #64]	@ (8002680 <HAL_TIM_Encoder_MspInit+0x88>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6313      	str	r3, [r2, #48]	@ 0x30
 8002646:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <HAL_TIM_Encoder_MspInit+0x88>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002652:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800265c:	2301      	movs	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002664:	2301      	movs	r3, #1
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	4805      	ldr	r0, [pc, #20]	@ (8002684 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002670:	f000 fa5e 	bl	8002b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002674:	bf00      	nop
 8002676:	3728      	adds	r7, #40	@ 0x28
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40010000 	.word	0x40010000
 8002680:	40023800 	.word	0x40023800
 8002684:	40020000 	.word	0x40020000

08002688 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002698:	d115      	bne.n	80026c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <HAL_TIM_Base_MspInit+0x48>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	4a0b      	ldr	r2, [pc, #44]	@ (80026d0 <HAL_TIM_Base_MspInit+0x48>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <HAL_TIM_Base_MspInit+0x48>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	201c      	movs	r0, #28
 80026bc:	f000 fa01 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026c0:	201c      	movs	r0, #28
 80026c2:	f000 fa1a 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002710 <HAL_TIM_PWM_MspInit+0x3c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10d      	bne.n	8002702 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <HAL_TIM_PWM_MspInit+0x40>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	4a09      	ldr	r2, [pc, #36]	@ (8002714 <HAL_TIM_PWM_MspInit+0x40>)
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f6:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <HAL_TIM_PWM_MspInit+0x40>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40000c00 	.word	0x40000c00
 8002714:	40023800 	.word	0x40023800

08002718 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a12      	ldr	r2, [pc, #72]	@ (8002780 <HAL_TIM_MspPostInit+0x68>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d11d      	bne.n	8002776 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <HAL_TIM_MspPostInit+0x6c>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	4a10      	ldr	r2, [pc, #64]	@ (8002784 <HAL_TIM_MspPostInit+0x6c>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6313      	str	r3, [r2, #48]	@ 0x30
 800274a:	4b0e      	ldr	r3, [pc, #56]	@ (8002784 <HAL_TIM_MspPostInit+0x6c>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002756:	2301      	movs	r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002766:	2302      	movs	r3, #2
 8002768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	4619      	mov	r1, r3
 8002770:	4805      	ldr	r0, [pc, #20]	@ (8002788 <HAL_TIM_MspPostInit+0x70>)
 8002772:	f000 f9dd 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002776:	bf00      	nop
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40000c00 	.word	0x40000c00
 8002784:	40023800 	.word	0x40023800
 8002788:	40020000 	.word	0x40020000

0800278c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002790:	f7ff fe20 	bl	80023d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002794:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002796:	490d      	ldr	r1, [pc, #52]	@ (80027cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002798:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027aa:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027ac:	4c0a      	ldr	r4, [pc, #40]	@ (80027d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027ba:	f003 fbef 	bl	8005f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027be:	f7fe ff3f 	bl	8001640 <main>
  bx  lr    
 80027c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80027d0:	080065b8 	.word	0x080065b8
  ldr r2, =_sbss
 80027d4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80027d8:	200003e4 	.word	0x200003e4

080027dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002820 <HAL_Init+0x40>)
 80027ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <HAL_Init+0x40>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	@ (8002820 <HAL_Init+0x40>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 f94f 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	200f      	movs	r0, #15
 8002810:	f000 f808 	bl	8002824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7ff fd7c 	bl	8002310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_InitTick+0x54>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_InitTick+0x58>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800283a:	fbb3 f3f1 	udiv	r3, r3, r1
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f967 	bl	8002b16 <HAL_SYSTICK_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00e      	b.n	8002870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d80a      	bhi.n	800286e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f000 f92f 	bl	8002ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002864:	4a06      	ldr	r2, [pc, #24]	@ (8002880 <HAL_InitTick+0x5c>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000020 	.word	0x20000020
 800287c:	20000028 	.word	0x20000028
 8002880:	20000024 	.word	0x20000024

08002884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_IncTick+0x20>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_IncTick+0x24>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <HAL_IncTick+0x24>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000028 	.word	0x20000028
 80028a8:	200002a8 	.word	0x200002a8

080028ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_GetTick+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	200002a8 	.word	0x200002a8

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff ffee 	bl	80028ac <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d005      	beq.n	80028ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028de:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <HAL_Delay+0x44>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ea:	bf00      	nop
 80028ec:	f7ff ffde 	bl	80028ac <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d8f7      	bhi.n	80028ec <HAL_Delay+0x28>
  {
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000028 	.word	0x20000028

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	@ (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4907      	ldr	r1, [pc, #28]	@ (80029a8 <__NVIC_EnableIRQ+0x38>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	@ (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	@ (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	@ 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	@ 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a78:	d301      	bcc.n	8002a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00f      	b.n	8002a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa8 <SysTick_Config+0x40>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a86:	210f      	movs	r1, #15
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	f7ff ff8e 	bl	80029ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a90:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <SysTick_Config+0x40>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a96:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <SysTick_Config+0x40>)
 8002a98:	2207      	movs	r2, #7
 8002a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff29 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad4:	f7ff ff3e 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f7ff ff8e 	bl	8002a00 <NVIC_EncodePriority>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff5d 	bl	80029ac <__NVIC_SetPriority>
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff31 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffa2 	bl	8002a68 <SysTick_Config>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	@ 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e165      	b.n	8002e18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f040 8154 	bne.w	8002e12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d005      	beq.n	8002b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d130      	bne.n	8002be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb8:	2201      	movs	r2, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 0201 	and.w	r2, r3, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d017      	beq.n	8002c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d123      	bne.n	8002c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	08da      	lsrs	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3208      	adds	r2, #8
 8002c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	69b9      	ldr	r1, [r7, #24]
 8002c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0203 	and.w	r2, r3, #3
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80ae 	beq.w	8002e12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b5d      	ldr	r3, [pc, #372]	@ (8002e30 <HAL_GPIO_Init+0x300>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	4a5c      	ldr	r2, [pc, #368]	@ (8002e30 <HAL_GPIO_Init+0x300>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc6:	4b5a      	ldr	r3, [pc, #360]	@ (8002e30 <HAL_GPIO_Init+0x300>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cd2:	4a58      	ldr	r2, [pc, #352]	@ (8002e34 <HAL_GPIO_Init+0x304>)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3302      	adds	r3, #2
 8002cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	220f      	movs	r2, #15
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a4f      	ldr	r2, [pc, #316]	@ (8002e38 <HAL_GPIO_Init+0x308>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d025      	beq.n	8002d4a <HAL_GPIO_Init+0x21a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4e      	ldr	r2, [pc, #312]	@ (8002e3c <HAL_GPIO_Init+0x30c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01f      	beq.n	8002d46 <HAL_GPIO_Init+0x216>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4d      	ldr	r2, [pc, #308]	@ (8002e40 <HAL_GPIO_Init+0x310>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d019      	beq.n	8002d42 <HAL_GPIO_Init+0x212>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4c      	ldr	r2, [pc, #304]	@ (8002e44 <HAL_GPIO_Init+0x314>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <HAL_GPIO_Init+0x20e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4b      	ldr	r2, [pc, #300]	@ (8002e48 <HAL_GPIO_Init+0x318>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00d      	beq.n	8002d3a <HAL_GPIO_Init+0x20a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a4a      	ldr	r2, [pc, #296]	@ (8002e4c <HAL_GPIO_Init+0x31c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d007      	beq.n	8002d36 <HAL_GPIO_Init+0x206>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a49      	ldr	r2, [pc, #292]	@ (8002e50 <HAL_GPIO_Init+0x320>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d101      	bne.n	8002d32 <HAL_GPIO_Init+0x202>
 8002d2e:	2306      	movs	r3, #6
 8002d30:	e00c      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d32:	2307      	movs	r3, #7
 8002d34:	e00a      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d36:	2305      	movs	r3, #5
 8002d38:	e008      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e004      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e002      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_GPIO_Init+0x21c>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	f002 0203 	and.w	r2, r2, #3
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	4093      	lsls	r3, r2
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d5c:	4935      	ldr	r1, [pc, #212]	@ (8002e34 <HAL_GPIO_Init+0x304>)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	3302      	adds	r3, #2
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8e:	4a31      	ldr	r2, [pc, #196]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d94:	4b2f      	ldr	r3, [pc, #188]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db8:	4a26      	ldr	r2, [pc, #152]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dbe:	4b25      	ldr	r3, [pc, #148]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002de2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e0c:	4a11      	ldr	r2, [pc, #68]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	f67f ae96 	bls.w	8002b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3724      	adds	r7, #36	@ 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	40020400 	.word	0x40020400
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	40021800 	.word	0x40021800
 8002e54:	40013c00 	.word	0x40013c00

08002e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
 8002e74:	e001      	b.n	8002e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
 8002e94:	4613      	mov	r3, r2
 8002e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e98:	787b      	ldrb	r3, [r7, #1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea4:	e003      	b.n	8002eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e12b      	b.n	8003126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe f944 	bl	8001170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	@ 0x24
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f20:	f001 fa10 	bl	8004344 <HAL_RCC_GetPCLK1Freq>
 8002f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4a81      	ldr	r2, [pc, #516]	@ (8003130 <HAL_I2C_Init+0x274>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d807      	bhi.n	8002f40 <HAL_I2C_Init+0x84>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a80      	ldr	r2, [pc, #512]	@ (8003134 <HAL_I2C_Init+0x278>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bf94      	ite	ls
 8002f38:	2301      	movls	r3, #1
 8002f3a:	2300      	movhi	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e006      	b.n	8002f4e <HAL_I2C_Init+0x92>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a7d      	ldr	r2, [pc, #500]	@ (8003138 <HAL_I2C_Init+0x27c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	bf94      	ite	ls
 8002f48:	2301      	movls	r3, #1
 8002f4a:	2300      	movhi	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0e7      	b.n	8003126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a78      	ldr	r2, [pc, #480]	@ (800313c <HAL_I2C_Init+0x280>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0c9b      	lsrs	r3, r3, #18
 8002f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a6a      	ldr	r2, [pc, #424]	@ (8003130 <HAL_I2C_Init+0x274>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d802      	bhi.n	8002f90 <HAL_I2C_Init+0xd4>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	e009      	b.n	8002fa4 <HAL_I2C_Init+0xe8>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	4a69      	ldr	r2, [pc, #420]	@ (8003140 <HAL_I2C_Init+0x284>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fb6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	495c      	ldr	r1, [pc, #368]	@ (8003130 <HAL_I2C_Init+0x274>)
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	d819      	bhi.n	8002ff8 <HAL_I2C_Init+0x13c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1e59      	subs	r1, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd2:	1c59      	adds	r1, r3, #1
 8002fd4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fd8:	400b      	ands	r3, r1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_I2C_Init+0x138>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e59      	subs	r1, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff2:	e051      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	e04f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d111      	bne.n	8003024 <HAL_I2C_Init+0x168>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e012      	b.n	800304a <HAL_I2C_Init+0x18e>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e58      	subs	r0, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	0099      	lsls	r1, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	fbb0 f3f3 	udiv	r3, r0, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Init+0x196>
 800304e:	2301      	movs	r3, #1
 8003050:	e022      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10e      	bne.n	8003078 <HAL_I2C_Init+0x1bc>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1e58      	subs	r0, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	440b      	add	r3, r1
 8003068:	fbb0 f3f3 	udiv	r3, r0, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003076:	e00f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1e58      	subs	r0, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	6809      	ldr	r1, [r1, #0]
 800309c:	4313      	orrs	r3, r2
 800309e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6911      	ldr	r1, [r2, #16]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68d2      	ldr	r2, [r2, #12]
 80030d2:	4311      	orrs	r1, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	000186a0 	.word	0x000186a0
 8003134:	001e847f 	.word	0x001e847f
 8003138:	003d08ff 	.word	0x003d08ff
 800313c:	431bde83 	.word	0x431bde83
 8003140:	10624dd3 	.word	0x10624dd3

08003144 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4603      	mov	r3, r0
 8003154:	817b      	strh	r3, [r7, #10]
 8003156:	460b      	mov	r3, r1
 8003158:	813b      	strh	r3, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800315e:	f7ff fba5 	bl	80028ac <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b20      	cmp	r3, #32
 800316e:	f040 80d9 	bne.w	8003324 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2319      	movs	r3, #25
 8003178:	2201      	movs	r2, #1
 800317a:	496d      	ldr	r1, [pc, #436]	@ (8003330 <HAL_I2C_Mem_Write+0x1ec>)
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fdb9 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
 800318a:	e0cc      	b.n	8003326 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_I2C_Mem_Write+0x56>
 8003196:	2302      	movs	r3, #2
 8003198:	e0c5      	b.n	8003326 <HAL_I2C_Mem_Write+0x1e2>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d007      	beq.n	80031c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2221      	movs	r2, #33	@ 0x21
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2240      	movs	r2, #64	@ 0x40
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a3a      	ldr	r2, [r7, #32]
 80031ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4a4d      	ldr	r2, [pc, #308]	@ (8003334 <HAL_I2C_Mem_Write+0x1f0>)
 8003200:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003202:	88f8      	ldrh	r0, [r7, #6]
 8003204:	893a      	ldrh	r2, [r7, #8]
 8003206:	8979      	ldrh	r1, [r7, #10]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	4603      	mov	r3, r0
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fbf0 	bl	80039f8 <I2C_RequestMemoryWrite>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d052      	beq.n	80032c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e081      	b.n	8003326 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fe7e 	bl	8003f28 <I2C_WaitOnTXEFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	2b04      	cmp	r3, #4
 8003238:	d107      	bne.n	800324a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003248:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e06b      	b.n	8003326 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	781a      	ldrb	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b04      	cmp	r3, #4
 800328a:	d11b      	bne.n	80032c4 <HAL_I2C_Mem_Write+0x180>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1aa      	bne.n	8003222 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fe71 	bl	8003fb8 <I2C_WaitOnBTFFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d107      	bne.n	80032f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e016      	b.n	8003326 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	00100002 	.word	0x00100002
 8003334:	ffff0000 	.word	0xffff0000

08003338 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08c      	sub	sp, #48	@ 0x30
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	461a      	mov	r2, r3
 8003346:	4603      	mov	r3, r0
 8003348:	817b      	strh	r3, [r7, #10]
 800334a:	460b      	mov	r3, r1
 800334c:	813b      	strh	r3, [r7, #8]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003352:	f7ff faab 	bl	80028ac <HAL_GetTick>
 8003356:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b20      	cmp	r3, #32
 8003362:	f040 8214 	bne.w	800378e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2319      	movs	r3, #25
 800336c:	2201      	movs	r2, #1
 800336e:	497b      	ldr	r1, [pc, #492]	@ (800355c <HAL_I2C_Mem_Read+0x224>)
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fcbf 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800337c:	2302      	movs	r3, #2
 800337e:	e207      	b.n	8003790 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_I2C_Mem_Read+0x56>
 800338a:	2302      	movs	r3, #2
 800338c:	e200      	b.n	8003790 <HAL_I2C_Mem_Read+0x458>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d007      	beq.n	80033b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2222      	movs	r2, #34	@ 0x22
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2240      	movs	r2, #64	@ 0x40
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80033e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003560 <HAL_I2C_Mem_Read+0x228>)
 80033f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033f6:	88f8      	ldrh	r0, [r7, #6]
 80033f8:	893a      	ldrh	r2, [r7, #8]
 80033fa:	8979      	ldrh	r1, [r7, #10]
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	4603      	mov	r3, r0
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 fb8c 	bl	8003b24 <I2C_RequestMemoryRead>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1bc      	b.n	8003790 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	d113      	bne.n	8003446 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	623b      	str	r3, [r7, #32]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e190      	b.n	8003768 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344a:	2b01      	cmp	r3, #1
 800344c:	d11b      	bne.n	8003486 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800345c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e170      	b.n	8003768 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348a:	2b02      	cmp	r3, #2
 800348c:	d11b      	bne.n	80034c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800349c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	e150      	b.n	8003768 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034dc:	e144      	b.n	8003768 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	f200 80f1 	bhi.w	80036ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d123      	bne.n	8003538 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fda7 	bl	8004048 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e145      	b.n	8003790 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003536:	e117      	b.n	8003768 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353c:	2b02      	cmp	r3, #2
 800353e:	d14e      	bne.n	80035de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003546:	2200      	movs	r2, #0
 8003548:	4906      	ldr	r1, [pc, #24]	@ (8003564 <HAL_I2C_Mem_Read+0x22c>)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fbd2 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e11a      	b.n	8003790 <HAL_I2C_Mem_Read+0x458>
 800355a:	bf00      	nop
 800355c:	00100002 	.word	0x00100002
 8003560:	ffff0000 	.word	0xffff0000
 8003564:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035dc:	e0c4      	b.n	8003768 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e4:	2200      	movs	r2, #0
 80035e6:	496c      	ldr	r1, [pc, #432]	@ (8003798 <HAL_I2C_Mem_Read+0x460>)
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fb83 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0cb      	b.n	8003790 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003640:	2200      	movs	r2, #0
 8003642:	4955      	ldr	r1, [pc, #340]	@ (8003798 <HAL_I2C_Mem_Read+0x460>)
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fb55 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e09d      	b.n	8003790 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003662:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036c8:	e04e      	b.n	8003768 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fcba 	bl	8004048 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e058      	b.n	8003790 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d124      	bne.n	8003768 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003722:	2b03      	cmp	r3, #3
 8003724:	d107      	bne.n	8003736 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003734:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376c:	2b00      	cmp	r3, #0
 800376e:	f47f aeb6 	bne.w	80034de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	e000      	b.n	8003790 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
  }
}
 8003790:	4618      	mov	r0, r3
 8003792:	3728      	adds	r7, #40	@ 0x28
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	00010004 	.word	0x00010004

0800379c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	@ 0x28
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	460b      	mov	r3, r1
 80037aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7ff f87e 	bl	80028ac <HAL_GetTick>
 80037b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b20      	cmp	r3, #32
 80037c0:	f040 8111 	bne.w	80039e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	2319      	movs	r3, #25
 80037ca:	2201      	movs	r2, #1
 80037cc:	4988      	ldr	r1, [pc, #544]	@ (80039f0 <HAL_I2C_IsDeviceReady+0x254>)
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fa90 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
 80037dc:	e104      	b.n	80039e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_I2C_IsDeviceReady+0x50>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e0fd      	b.n	80039e8 <HAL_I2C_IsDeviceReady+0x24c>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d007      	beq.n	8003812 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003820:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2224      	movs	r2, #36	@ 0x24
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a70      	ldr	r2, [pc, #448]	@ (80039f4 <HAL_I2C_IsDeviceReady+0x258>)
 8003834:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003844:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2200      	movs	r2, #0
 800384e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fa4e 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800386c:	d103      	bne.n	8003876 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003874:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0b6      	b.n	80039e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800387a:	897b      	ldrh	r3, [r7, #10]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003888:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800388a:	f7ff f80f 	bl	80028ac <HAL_GetTick>
 800388e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b02      	cmp	r3, #2
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b4:	bf0c      	ite	eq
 80038b6:	2301      	moveq	r3, #1
 80038b8:	2300      	movne	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038be:	e025      	b.n	800390c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038c0:	f7fe fff4 	bl	80028ac <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d302      	bcc.n	80038d6 <HAL_I2C_IsDeviceReady+0x13a>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	22a0      	movs	r2, #160	@ 0xa0
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2ba0      	cmp	r3, #160	@ 0xa0
 8003916:	d005      	beq.n	8003924 <HAL_I2C_IsDeviceReady+0x188>
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <HAL_I2C_IsDeviceReady+0x188>
 800391e:	7dbb      	ldrb	r3, [r7, #22]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0cd      	beq.n	80038c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d129      	bne.n	800398e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003948:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	2319      	movs	r3, #25
 8003966:	2201      	movs	r2, #1
 8003968:	4921      	ldr	r1, [pc, #132]	@ (80039f0 <HAL_I2C_IsDeviceReady+0x254>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f9c2 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e036      	b.n	80039e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e02c      	b.n	80039e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2319      	movs	r3, #25
 80039ae:	2201      	movs	r2, #1
 80039b0:	490f      	ldr	r1, [pc, #60]	@ (80039f0 <HAL_I2C_IsDeviceReady+0x254>)
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f99e 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e012      	b.n	80039e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	3301      	adds	r3, #1
 80039c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	f4ff af32 	bcc.w	8003836 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80039e6:	2302      	movs	r3, #2
  }
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3720      	adds	r7, #32
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	00100002 	.word	0x00100002
 80039f4:	ffff0000 	.word	0xffff0000

080039f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	4608      	mov	r0, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	461a      	mov	r2, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	817b      	strh	r3, [r7, #10]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	813b      	strh	r3, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f960 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a48:	d103      	bne.n	8003a52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e05f      	b.n	8003b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a56:	897b      	ldrh	r3, [r7, #10]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	6a3a      	ldr	r2, [r7, #32]
 8003a6a:	492d      	ldr	r1, [pc, #180]	@ (8003b20 <I2C_RequestMemoryWrite+0x128>)
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f9bb 	bl	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e04c      	b.n	8003b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a94:	6a39      	ldr	r1, [r7, #32]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fa46 	bl	8003f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00d      	beq.n	8003abe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d107      	bne.n	8003aba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e02b      	b.n	8003b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac4:	893b      	ldrh	r3, [r7, #8]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	611a      	str	r2, [r3, #16]
 8003ace:	e021      	b.n	8003b14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad0:	893b      	ldrh	r3, [r7, #8]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae0:	6a39      	ldr	r1, [r7, #32]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fa20 	bl	8003f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d107      	bne.n	8003b06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e005      	b.n	8003b16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0a:	893b      	ldrh	r3, [r7, #8]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	00010002 	.word	0x00010002

08003b24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	4611      	mov	r1, r2
 8003b30:	461a      	mov	r2, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	817b      	strh	r3, [r7, #10]
 8003b36:	460b      	mov	r3, r1
 8003b38:	813b      	strh	r3, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f8c2 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b84:	d103      	bne.n	8003b8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0aa      	b.n	8003ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b92:	897b      	ldrh	r3, [r7, #10]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ba0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	6a3a      	ldr	r2, [r7, #32]
 8003ba6:	4952      	ldr	r1, [pc, #328]	@ (8003cf0 <I2C_RequestMemoryRead+0x1cc>)
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f91d 	bl	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e097      	b.n	8003ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd0:	6a39      	ldr	r1, [r7, #32]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f9a8 	bl	8003f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d107      	bne.n	8003bf6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e076      	b.n	8003ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c00:	893b      	ldrh	r3, [r7, #8]
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	611a      	str	r2, [r3, #16]
 8003c0a:	e021      	b.n	8003c50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c0c:	893b      	ldrh	r3, [r7, #8]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1c:	6a39      	ldr	r1, [r7, #32]
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f982 	bl	8003f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d107      	bne.n	8003c42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e050      	b.n	8003ce8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c46:	893b      	ldrh	r3, [r7, #8]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c52:	6a39      	ldr	r1, [r7, #32]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f967 	bl	8003f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00d      	beq.n	8003c7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d107      	bne.n	8003c78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e035      	b.n	8003ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f82b 	bl	8003cf4 <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00d      	beq.n	8003cc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cb2:	d103      	bne.n	8003cbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e013      	b.n	8003ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cc0:	897b      	ldrh	r3, [r7, #10]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	4906      	ldr	r1, [pc, #24]	@ (8003cf0 <I2C_RequestMemoryRead+0x1cc>)
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f886 	bl	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	00010002 	.word	0x00010002

08003cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d04:	e048      	b.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d044      	beq.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0e:	f7fe fdcd 	bl	80028ac <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d302      	bcc.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d139      	bne.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d10d      	bne.n	8003d4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	43da      	mvns	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	e00c      	b.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	43da      	mvns	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d116      	bne.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e023      	b.n	8003de0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	0c1b      	lsrs	r3, r3, #16
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d10d      	bne.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	43da      	mvns	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4013      	ands	r3, r2
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf0c      	ite	eq
 8003db4:	2301      	moveq	r3, #1
 8003db6:	2300      	movne	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	e00c      	b.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	43da      	mvns	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d093      	beq.n	8003d06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003df6:	e071      	b.n	8003edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e06:	d123      	bne.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e067      	b.n	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d041      	beq.n	8003edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e58:	f7fe fd28 	bl	80028ac <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d302      	bcc.n	8003e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d136      	bne.n	8003edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d10c      	bne.n	8003e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4013      	ands	r3, r2
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bf14      	ite	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	2300      	moveq	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	e00b      	b.n	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf14      	ite	ne
 8003ea4:	2301      	movne	r3, #1
 8003ea6:	2300      	moveq	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d016      	beq.n	8003edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	f043 0220 	orr.w	r2, r3, #32
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e021      	b.n	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d10c      	bne.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	43da      	mvns	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf14      	ite	ne
 8003ef8:	2301      	movne	r3, #1
 8003efa:	2300      	moveq	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	e00b      	b.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	43da      	mvns	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bf14      	ite	ne
 8003f12:	2301      	movne	r3, #1
 8003f14:	2300      	moveq	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f47f af6d 	bne.w	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f34:	e034      	b.n	8003fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f8e3 	bl	8004102 <I2C_IsAcknowledgeFailed>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e034      	b.n	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d028      	beq.n	8003fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4e:	f7fe fcad 	bl	80028ac <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d302      	bcc.n	8003f64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d11d      	bne.n	8003fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6e:	2b80      	cmp	r3, #128	@ 0x80
 8003f70:	d016      	beq.n	8003fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8c:	f043 0220 	orr.w	r2, r3, #32
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e007      	b.n	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003faa:	2b80      	cmp	r3, #128	@ 0x80
 8003fac:	d1c3      	bne.n	8003f36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fc4:	e034      	b.n	8004030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f89b 	bl	8004102 <I2C_IsAcknowledgeFailed>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e034      	b.n	8004040 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d028      	beq.n	8004030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fde:	f7fe fc65 	bl	80028ac <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d302      	bcc.n	8003ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d11d      	bne.n	8004030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d016      	beq.n	8004030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401c:	f043 0220 	orr.w	r2, r3, #32
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e007      	b.n	8004040 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b04      	cmp	r3, #4
 800403c:	d1c3      	bne.n	8003fc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004054:	e049      	b.n	80040ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b10      	cmp	r3, #16
 8004062:	d119      	bne.n	8004098 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0210 	mvn.w	r2, #16
 800406c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e030      	b.n	80040fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004098:	f7fe fc08 	bl	80028ac <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d302      	bcc.n	80040ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11d      	bne.n	80040ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b8:	2b40      	cmp	r3, #64	@ 0x40
 80040ba:	d016      	beq.n	80040ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	f043 0220 	orr.w	r2, r3, #32
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e007      	b.n	80040fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f4:	2b40      	cmp	r3, #64	@ 0x40
 80040f6:	d1ae      	bne.n	8004056 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004118:	d11b      	bne.n	8004152 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004122:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f043 0204 	orr.w	r2, r3, #4
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0cc      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004174:	4b68      	ldr	r3, [pc, #416]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d90c      	bls.n	800419c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b65      	ldr	r3, [pc, #404]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b63      	ldr	r3, [pc, #396]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0b8      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b4:	4b59      	ldr	r3, [pc, #356]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4a58      	ldr	r2, [pc, #352]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041cc:	4b53      	ldr	r3, [pc, #332]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4a52      	ldr	r2, [pc, #328]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b50      	ldr	r3, [pc, #320]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	494d      	ldr	r1, [pc, #308]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d044      	beq.n	8004280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	4b47      	ldr	r3, [pc, #284]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d119      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e07f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d003      	beq.n	800421e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421a:	2b03      	cmp	r3, #3
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	4b3f      	ldr	r3, [pc, #252]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e06f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	4b3b      	ldr	r3, [pc, #236]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e067      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800423e:	4b37      	ldr	r3, [pc, #220]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4934      	ldr	r1, [pc, #208]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004250:	f7fe fb2c 	bl	80028ac <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	e00a      	b.n	800426e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fe fb28 	bl	80028ac <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e04f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	4b2b      	ldr	r3, [pc, #172]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 020c 	and.w	r2, r3, #12
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d1eb      	bne.n	8004258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004280:	4b25      	ldr	r3, [pc, #148]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d20c      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b22      	ldr	r3, [pc, #136]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b20      	ldr	r3, [pc, #128]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e032      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	4b19      	ldr	r3, [pc, #100]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4916      	ldr	r1, [pc, #88]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d2:	4b12      	ldr	r3, [pc, #72]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	490e      	ldr	r1, [pc, #56]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042e6:	f000 f841 	bl	800436c <HAL_RCC_GetSysClockFreq>
 80042ea:	4602      	mov	r2, r0
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	490a      	ldr	r1, [pc, #40]	@ (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 80042f8:	5ccb      	ldrb	r3, [r1, r3]
 80042fa:	fa22 f303 	lsr.w	r3, r2, r3
 80042fe:	4a09      	ldr	r2, [pc, #36]	@ (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004302:	4b09      	ldr	r3, [pc, #36]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fe fa8c 	bl	8002824 <HAL_InitTick>

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40023c00 	.word	0x40023c00
 800431c:	40023800 	.word	0x40023800
 8004320:	08006550 	.word	0x08006550
 8004324:	20000020 	.word	0x20000020
 8004328:	20000024 	.word	0x20000024

0800432c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004330:	4b03      	ldr	r3, [pc, #12]	@ (8004340 <HAL_RCC_GetHCLKFreq+0x14>)
 8004332:	681b      	ldr	r3, [r3, #0]
}
 8004334:	4618      	mov	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	20000020 	.word	0x20000020

08004344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004348:	f7ff fff0 	bl	800432c <HAL_RCC_GetHCLKFreq>
 800434c:	4602      	mov	r2, r0
 800434e:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	0a9b      	lsrs	r3, r3, #10
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	4903      	ldr	r1, [pc, #12]	@ (8004368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800435a:	5ccb      	ldrb	r3, [r1, r3]
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004360:	4618      	mov	r0, r3
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40023800 	.word	0x40023800
 8004368:	08006560 	.word	0x08006560

0800436c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800436c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004370:	b0a6      	sub	sp, #152	@ 0x98
 8004372:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004392:	4bc8      	ldr	r3, [pc, #800]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b0c      	cmp	r3, #12
 800439c:	f200 817e 	bhi.w	800469c <HAL_RCC_GetSysClockFreq+0x330>
 80043a0:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043dd 	.word	0x080043dd
 80043ac:	0800469d 	.word	0x0800469d
 80043b0:	0800469d 	.word	0x0800469d
 80043b4:	0800469d 	.word	0x0800469d
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	0800469d 	.word	0x0800469d
 80043c0:	0800469d 	.word	0x0800469d
 80043c4:	0800469d 	.word	0x0800469d
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	0800469d 	.word	0x0800469d
 80043d0:	0800469d 	.word	0x0800469d
 80043d4:	0800469d 	.word	0x0800469d
 80043d8:	08004557 	.word	0x08004557
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043dc:	4bb6      	ldr	r3, [pc, #728]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80043de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80043e2:	e15f      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043e4:	4bb5      	ldr	r3, [pc, #724]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x350>)
 80043e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80043ea:	e15b      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ec:	4bb1      	ldr	r3, [pc, #708]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x348>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043f8:	4bae      	ldr	r3, [pc, #696]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x348>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d031      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004404:	4bab      	ldr	r3, [pc, #684]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	2200      	movs	r2, #0
 800440c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800440e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004410:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004416:	663b      	str	r3, [r7, #96]	@ 0x60
 8004418:	2300      	movs	r3, #0
 800441a:	667b      	str	r3, [r7, #100]	@ 0x64
 800441c:	4ba7      	ldr	r3, [pc, #668]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x350>)
 800441e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004422:	462a      	mov	r2, r5
 8004424:	fb03 f202 	mul.w	r2, r3, r2
 8004428:	2300      	movs	r3, #0
 800442a:	4621      	mov	r1, r4
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	4aa2      	ldr	r2, [pc, #648]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x350>)
 8004434:	4621      	mov	r1, r4
 8004436:	fba1 1202 	umull	r1, r2, r1, r2
 800443a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800443c:	460a      	mov	r2, r1
 800443e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004440:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004442:	4413      	add	r3, r2
 8004444:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800444a:	2200      	movs	r2, #0
 800444c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800444e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004450:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004454:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004458:	f7fc fbba 	bl	8000bd0 <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4613      	mov	r3, r2
 8004462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004466:	e064      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004468:	4b92      	ldr	r3, [pc, #584]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x348>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	099b      	lsrs	r3, r3, #6
 800446e:	2200      	movs	r2, #0
 8004470:	653b      	str	r3, [r7, #80]	@ 0x50
 8004472:	657a      	str	r2, [r7, #84]	@ 0x54
 8004474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800447c:	2300      	movs	r3, #0
 800447e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004480:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004484:	4622      	mov	r2, r4
 8004486:	462b      	mov	r3, r5
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	0159      	lsls	r1, r3, #5
 8004492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004496:	0150      	lsls	r0, r2, #5
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4621      	mov	r1, r4
 800449e:	1a51      	subs	r1, r2, r1
 80044a0:	6139      	str	r1, [r7, #16]
 80044a2:	4629      	mov	r1, r5
 80044a4:	eb63 0301 	sbc.w	r3, r3, r1
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044b6:	4659      	mov	r1, fp
 80044b8:	018b      	lsls	r3, r1, #6
 80044ba:	4651      	mov	r1, sl
 80044bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044c0:	4651      	mov	r1, sl
 80044c2:	018a      	lsls	r2, r1, #6
 80044c4:	4651      	mov	r1, sl
 80044c6:	ebb2 0801 	subs.w	r8, r2, r1
 80044ca:	4659      	mov	r1, fp
 80044cc:	eb63 0901 	sbc.w	r9, r3, r1
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044e4:	4690      	mov	r8, r2
 80044e6:	4699      	mov	r9, r3
 80044e8:	4623      	mov	r3, r4
 80044ea:	eb18 0303 	adds.w	r3, r8, r3
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	462b      	mov	r3, r5
 80044f2:	eb49 0303 	adc.w	r3, r9, r3
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004504:	4629      	mov	r1, r5
 8004506:	028b      	lsls	r3, r1, #10
 8004508:	4621      	mov	r1, r4
 800450a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800450e:	4621      	mov	r1, r4
 8004510:	028a      	lsls	r2, r1, #10
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800451a:	2200      	movs	r2, #0
 800451c:	643b      	str	r3, [r7, #64]	@ 0x40
 800451e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004520:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004524:	f7fc fb54 	bl	8000bd0 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4613      	mov	r3, r2
 800452e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004532:	4b60      	ldr	r3, [pc, #384]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	0c1b      	lsrs	r3, r3, #16
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	3301      	adds	r3, #1
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004544:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004548:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004554:	e0a6      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004556:	4b57      	ldr	r3, [pc, #348]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800455e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004562:	4b54      	ldr	r3, [pc, #336]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d02a      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800456e:	4b51      	ldr	r3, [pc, #324]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	2200      	movs	r2, #0
 8004576:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004578:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800457a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004580:	2100      	movs	r1, #0
 8004582:	4b4e      	ldr	r3, [pc, #312]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x350>)
 8004584:	fb03 f201 	mul.w	r2, r3, r1
 8004588:	2300      	movs	r3, #0
 800458a:	fb00 f303 	mul.w	r3, r0, r3
 800458e:	4413      	add	r3, r2
 8004590:	4a4a      	ldr	r2, [pc, #296]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x350>)
 8004592:	fba0 1202 	umull	r1, r2, r0, r2
 8004596:	677a      	str	r2, [r7, #116]	@ 0x74
 8004598:	460a      	mov	r2, r1
 800459a:	673a      	str	r2, [r7, #112]	@ 0x70
 800459c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800459e:	4413      	add	r3, r2
 80045a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80045a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045a6:	2200      	movs	r2, #0
 80045a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80045aa:	637a      	str	r2, [r7, #52]	@ 0x34
 80045ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80045b0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80045b4:	f7fc fb0c 	bl	8000bd0 <__aeabi_uldivmod>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4613      	mov	r3, r2
 80045be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045c2:	e05b      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c4:	4b3b      	ldr	r3, [pc, #236]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x348>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	099b      	lsrs	r3, r3, #6
 80045ca:	2200      	movs	r2, #0
 80045cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	2300      	movs	r3, #0
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
 80045dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	f04f 0000 	mov.w	r0, #0
 80045e8:	f04f 0100 	mov.w	r1, #0
 80045ec:	0159      	lsls	r1, r3, #5
 80045ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045f2:	0150      	lsls	r0, r2, #5
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4641      	mov	r1, r8
 80045fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80045fe:	4649      	mov	r1, r9
 8004600:	eb63 0b01 	sbc.w	fp, r3, r1
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004610:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004614:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004618:	ebb2 040a 	subs.w	r4, r2, sl
 800461c:	eb63 050b 	sbc.w	r5, r3, fp
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	00eb      	lsls	r3, r5, #3
 800462a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800462e:	00e2      	lsls	r2, r4, #3
 8004630:	4614      	mov	r4, r2
 8004632:	461d      	mov	r5, r3
 8004634:	4643      	mov	r3, r8
 8004636:	18e3      	adds	r3, r4, r3
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	464b      	mov	r3, r9
 800463c:	eb45 0303 	adc.w	r3, r5, r3
 8004640:	607b      	str	r3, [r7, #4]
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800464e:	4629      	mov	r1, r5
 8004650:	028b      	lsls	r3, r1, #10
 8004652:	4621      	mov	r1, r4
 8004654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004658:	4621      	mov	r1, r4
 800465a:	028a      	lsls	r2, r1, #10
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004664:	2200      	movs	r2, #0
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	61fa      	str	r2, [r7, #28]
 800466a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800466e:	f7fc faaf 	bl	8000bd0 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4613      	mov	r3, r2
 8004678:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800467c:	4b0d      	ldr	r3, [pc, #52]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x348>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	0f1b      	lsrs	r3, r3, #28
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800468a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800468e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004692:	fbb2 f3f3 	udiv	r3, r2, r3
 8004696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800469a:	e003      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800469c:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800469e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80046a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3798      	adds	r7, #152	@ 0x98
 80046ac:	46bd      	mov	sp, r7
 80046ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b2:	bf00      	nop
 80046b4:	40023800 	.word	0x40023800
 80046b8:	00f42400 	.word	0x00f42400
 80046bc:	017d7840 	.word	0x017d7840

080046c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e28d      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8083 	beq.w	80047e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046e0:	4b94      	ldr	r3, [pc, #592]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d019      	beq.n	8004720 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80046ec:	4b91      	ldr	r3, [pc, #580]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
        || \
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80046f8:	4b8e      	ldr	r3, [pc, #568]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004700:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004704:	d00c      	beq.n	8004720 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4b8b      	ldr	r3, [pc, #556]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d112      	bne.n	8004738 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b88      	ldr	r3, [pc, #544]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800471e:	d10b      	bne.n	8004738 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	4b84      	ldr	r3, [pc, #528]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x124>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d157      	bne.n	80047e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e25a      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x90>
 8004742:	4b7c      	ldr	r3, [pc, #496]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7b      	ldr	r2, [pc, #492]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xcc>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0xb4>
 800475a:	4b76      	ldr	r3, [pc, #472]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a75      	ldr	r2, [pc, #468]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b73      	ldr	r3, [pc, #460]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a72      	ldr	r2, [pc, #456]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xcc>
 8004774:	4b6f      	ldr	r3, [pc, #444]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6e      	ldr	r2, [pc, #440]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b6c      	ldr	r3, [pc, #432]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6b      	ldr	r2, [pc, #428]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fe f88a 	bl	80028ac <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479c:	f7fe f886 	bl	80028ac <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e21f      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b61      	ldr	r3, [pc, #388]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xdc>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fe f876 	bl	80028ac <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fe f872 	bl	80028ac <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e20b      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b57      	ldr	r3, [pc, #348]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x104>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d06f      	beq.n	80048d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047f2:	4b50      	ldr	r3, [pc, #320]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d017      	beq.n	800482e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80047fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
        || \
 8004806:	2b08      	cmp	r3, #8
 8004808:	d105      	bne.n	8004816 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800480a:	4b4a      	ldr	r3, [pc, #296]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004816:	4b47      	ldr	r3, [pc, #284]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d11c      	bne.n	800485c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004822:	4b44      	ldr	r3, [pc, #272]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d116      	bne.n	800485c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	4b41      	ldr	r3, [pc, #260]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCC_OscConfig+0x186>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e1d3      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004846:	4b3b      	ldr	r3, [pc, #236]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4937      	ldr	r1, [pc, #220]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485a:	e03a      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004864:	4b34      	ldr	r3, [pc, #208]	@ (8004938 <HAL_RCC_OscConfig+0x278>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fe f81f 	bl	80028ac <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004872:	f7fe f81b 	bl	80028ac <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e1b4      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004884:	4b2b      	ldr	r3, [pc, #172]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	4b28      	ldr	r3, [pc, #160]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4925      	ldr	r1, [pc, #148]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]
 80048a4:	e015      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a6:	4b24      	ldr	r3, [pc, #144]	@ (8004938 <HAL_RCC_OscConfig+0x278>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fd fffe 	bl	80028ac <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b4:	f7fd fffa 	bl	80028ac <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e193      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d036      	beq.n	800494c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e6:	4b15      	ldr	r3, [pc, #84]	@ (800493c <HAL_RCC_OscConfig+0x27c>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ec:	f7fd ffde 	bl	80028ac <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f4:	f7fd ffda 	bl	80028ac <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e173      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004906:	4b0b      	ldr	r3, [pc, #44]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x234>
 8004912:	e01b      	b.n	800494c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004914:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_RCC_OscConfig+0x27c>)
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fd ffc7 	bl	80028ac <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004920:	e00e      	b.n	8004940 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004922:	f7fd ffc3 	bl	80028ac <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d907      	bls.n	8004940 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e15c      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
 8004934:	40023800 	.word	0x40023800
 8004938:	42470000 	.word	0x42470000
 800493c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004940:	4b8a      	ldr	r3, [pc, #552]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ea      	bne.n	8004922 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8097 	beq.w	8004a88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495e:	4b83      	ldr	r3, [pc, #524]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	4a7e      	ldr	r2, [pc, #504]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004978:	6413      	str	r3, [r2, #64]	@ 0x40
 800497a:	4b7c      	ldr	r3, [pc, #496]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498a:	4b79      	ldr	r3, [pc, #484]	@ (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d118      	bne.n	80049c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004996:	4b76      	ldr	r3, [pc, #472]	@ (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a75      	ldr	r2, [pc, #468]	@ (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a2:	f7fd ff83 	bl	80028ac <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049aa:	f7fd ff7f 	bl	80028ac <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e118      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d106      	bne.n	80049de <HAL_RCC_OscConfig+0x31e>
 80049d0:	4b66      	ldr	r3, [pc, #408]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d4:	4a65      	ldr	r2, [pc, #404]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6713      	str	r3, [r2, #112]	@ 0x70
 80049dc:	e01c      	b.n	8004a18 <HAL_RCC_OscConfig+0x358>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x340>
 80049e6:	4b61      	ldr	r3, [pc, #388]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ea:	4a60      	ldr	r2, [pc, #384]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f2:	4b5e      	ldr	r3, [pc, #376]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f6:	4a5d      	ldr	r2, [pc, #372]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80049fe:	e00b      	b.n	8004a18 <HAL_RCC_OscConfig+0x358>
 8004a00:	4b5a      	ldr	r3, [pc, #360]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a04:	4a59      	ldr	r2, [pc, #356]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a0c:	4b57      	ldr	r3, [pc, #348]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a10:	4a56      	ldr	r2, [pc, #344]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a12:	f023 0304 	bic.w	r3, r3, #4
 8004a16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d015      	beq.n	8004a4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fd ff44 	bl	80028ac <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a28:	f7fd ff40 	bl	80028ac <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e0d7      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ee      	beq.n	8004a28 <HAL_RCC_OscConfig+0x368>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fd ff2e 	bl	80028ac <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a54:	f7fd ff2a 	bl	80028ac <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e0c1      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6a:	4b40      	ldr	r3, [pc, #256]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1ee      	bne.n	8004a54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	4a3a      	ldr	r2, [pc, #232]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80ad 	beq.w	8004bec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a92:	4b36      	ldr	r3, [pc, #216]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d060      	beq.n	8004b60 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d145      	bne.n	8004b32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa6:	4b33      	ldr	r3, [pc, #204]	@ (8004b74 <HAL_RCC_OscConfig+0x4b4>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fd fefe 	bl	80028ac <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fd fefa 	bl	80028ac <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e093      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	4b29      	ldr	r3, [pc, #164]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	019b      	lsls	r3, r3, #6
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	3b01      	subs	r3, #1
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	061b      	lsls	r3, r3, #24
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afc:	071b      	lsls	r3, r3, #28
 8004afe:	491b      	ldr	r1, [pc, #108]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b04:	4b1b      	ldr	r3, [pc, #108]	@ (8004b74 <HAL_RCC_OscConfig+0x4b4>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0a:	f7fd fecf 	bl	80028ac <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b12:	f7fd fecb 	bl	80028ac <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e064      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b24:	4b11      	ldr	r3, [pc, #68]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x452>
 8004b30:	e05c      	b.n	8004bec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	4b10      	ldr	r3, [pc, #64]	@ (8004b74 <HAL_RCC_OscConfig+0x4b4>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fd feb8 	bl	80028ac <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fd feb4 	bl	80028ac <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e04d      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x480>
 8004b5e:	e045      	b.n	8004bec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e040      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40007000 	.word	0x40007000
 8004b74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b78:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf8 <HAL_RCC_OscConfig+0x538>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d030      	beq.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d129      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d122      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ba8:	4013      	ands	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d119      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d10f      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d107      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023800 	.word	0x40023800

08004bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e041      	b.n	8004c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fd fd30 	bl	8002688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3304      	adds	r3, #4
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	f000 fdf4 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d001      	beq.n	8004cb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e046      	b.n	8004d42 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a23      	ldr	r2, [pc, #140]	@ (8004d50 <HAL_TIM_Base_Start+0xb4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <HAL_TIM_Base_Start+0x70>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cce:	d01d      	beq.n	8004d0c <HAL_TIM_Base_Start+0x70>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d54 <HAL_TIM_Base_Start+0xb8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_TIM_Base_Start+0x70>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1e      	ldr	r2, [pc, #120]	@ (8004d58 <HAL_TIM_Base_Start+0xbc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <HAL_TIM_Base_Start+0x70>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d5c <HAL_TIM_Base_Start+0xc0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_TIM_Base_Start+0x70>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d60 <HAL_TIM_Base_Start+0xc4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_TIM_Base_Start+0x70>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a19      	ldr	r2, [pc, #100]	@ (8004d64 <HAL_TIM_Base_Start+0xc8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_TIM_Base_Start+0x70>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a18      	ldr	r2, [pc, #96]	@ (8004d68 <HAL_TIM_Base_Start+0xcc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d111      	bne.n	8004d30 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d010      	beq.n	8004d40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2e:	e007      	b.n	8004d40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40001800 	.word	0x40001800

08004d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d001      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e04e      	b.n	8004e22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a23      	ldr	r2, [pc, #140]	@ (8004e30 <HAL_TIM_Base_Start_IT+0xc4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d022      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dae:	d01d      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e34 <HAL_TIM_Base_Start_IT+0xc8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d018      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004e38 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00e      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d009      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a19      	ldr	r2, [pc, #100]	@ (8004e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a18      	ldr	r2, [pc, #96]	@ (8004e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d111      	bne.n	8004e10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d010      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0201 	orr.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	e007      	b.n	8004e20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40010400 	.word	0x40010400
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40001800 	.word	0x40001800

08004e4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e041      	b.n	8004ee2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fd fc2e 	bl	80026d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f000 fccc 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d109      	bne.n	8004f10 <HAL_TIM_PWM_Start+0x24>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	e022      	b.n	8004f56 <HAL_TIM_PWM_Start+0x6a>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d109      	bne.n	8004f2a <HAL_TIM_PWM_Start+0x3e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	bf14      	ite	ne
 8004f22:	2301      	movne	r3, #1
 8004f24:	2300      	moveq	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	e015      	b.n	8004f56 <HAL_TIM_PWM_Start+0x6a>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d109      	bne.n	8004f44 <HAL_TIM_PWM_Start+0x58>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	bf14      	ite	ne
 8004f3c:	2301      	movne	r3, #1
 8004f3e:	2300      	moveq	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	e008      	b.n	8004f56 <HAL_TIM_PWM_Start+0x6a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	bf14      	ite	ne
 8004f50:	2301      	movne	r3, #1
 8004f52:	2300      	moveq	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e07c      	b.n	8005058 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_PWM_Start+0x82>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f6c:	e013      	b.n	8004f96 <HAL_TIM_PWM_Start+0xaa>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_PWM_Start+0x92>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f7c:	e00b      	b.n	8004f96 <HAL_TIM_PWM_Start+0xaa>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_PWM_Start+0xa2>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f8c:	e003      	b.n	8004f96 <HAL_TIM_PWM_Start+0xaa>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2202      	movs	r2, #2
 8004f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 ff38 	bl	8005e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8005060 <HAL_TIM_PWM_Start+0x174>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_TIM_PWM_Start+0xcc>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005064 <HAL_TIM_PWM_Start+0x178>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <HAL_TIM_PWM_Start+0xd0>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_TIM_PWM_Start+0xd2>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a22      	ldr	r2, [pc, #136]	@ (8005060 <HAL_TIM_PWM_Start+0x174>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d022      	beq.n	8005022 <HAL_TIM_PWM_Start+0x136>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe4:	d01d      	beq.n	8005022 <HAL_TIM_PWM_Start+0x136>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1f      	ldr	r2, [pc, #124]	@ (8005068 <HAL_TIM_PWM_Start+0x17c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d018      	beq.n	8005022 <HAL_TIM_PWM_Start+0x136>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800506c <HAL_TIM_PWM_Start+0x180>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <HAL_TIM_PWM_Start+0x136>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8005070 <HAL_TIM_PWM_Start+0x184>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00e      	beq.n	8005022 <HAL_TIM_PWM_Start+0x136>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a16      	ldr	r2, [pc, #88]	@ (8005064 <HAL_TIM_PWM_Start+0x178>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d009      	beq.n	8005022 <HAL_TIM_PWM_Start+0x136>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a18      	ldr	r2, [pc, #96]	@ (8005074 <HAL_TIM_PWM_Start+0x188>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_TIM_PWM_Start+0x136>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a16      	ldr	r2, [pc, #88]	@ (8005078 <HAL_TIM_PWM_Start+0x18c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d111      	bne.n	8005046 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b06      	cmp	r3, #6
 8005032:	d010      	beq.n	8005056 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005044:	e007      	b.n	8005056 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40010000 	.word	0x40010000
 8005064:	40010400 	.word	0x40010400
 8005068:	40000400 	.word	0x40000400
 800506c:	40000800 	.word	0x40000800
 8005070:	40000c00 	.word	0x40000c00
 8005074:	40014000 	.word	0x40014000
 8005078:	40001800 	.word	0x40001800

0800507c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e097      	b.n	80051c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fd faa7 	bl	80025f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050c0:	f023 0307 	bic.w	r3, r3, #7
 80050c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f000 fba9 	bl	8005828 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050fe:	f023 0303 	bic.w	r3, r3, #3
 8005102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	4313      	orrs	r3, r2
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800511c:	f023 030c 	bic.w	r3, r3, #12
 8005120:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005128:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800512c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	4313      	orrs	r3, r2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	011a      	lsls	r2, r3, #4
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	031b      	lsls	r3, r3, #12
 800514c:	4313      	orrs	r3, r2
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	4313      	orrs	r3, r2
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d110      	bne.n	800521a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d102      	bne.n	8005204 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80051fe:	7b7b      	ldrb	r3, [r7, #13]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d001      	beq.n	8005208 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e069      	b.n	80052dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005218:	e031      	b.n	800527e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b04      	cmp	r3, #4
 800521e:	d110      	bne.n	8005242 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005220:	7bbb      	ldrb	r3, [r7, #14]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d102      	bne.n	800522c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005226:	7b3b      	ldrb	r3, [r7, #12]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d001      	beq.n	8005230 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e055      	b.n	80052dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005240:	e01d      	b.n	800527e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d108      	bne.n	800525a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005248:	7bbb      	ldrb	r3, [r7, #14]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d105      	bne.n	800525a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800524e:	7b7b      	ldrb	r3, [r7, #13]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d102      	bne.n	800525a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005254:	7b3b      	ldrb	r3, [r7, #12]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d001      	beq.n	800525e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e03e      	b.n	80052dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_TIM_Encoder_Start+0xc4>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b04      	cmp	r3, #4
 8005288:	d008      	beq.n	800529c <HAL_TIM_Encoder_Start+0xd4>
 800528a:	e00f      	b.n	80052ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2201      	movs	r2, #1
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fdbd 	bl	8005e14 <TIM_CCxChannelCmd>
      break;
 800529a:	e016      	b.n	80052ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2201      	movs	r2, #1
 80052a2:	2104      	movs	r1, #4
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fdb5 	bl	8005e14 <TIM_CCxChannelCmd>
      break;
 80052aa:	e00e      	b.n	80052ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2201      	movs	r2, #1
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fdad 	bl	8005e14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2201      	movs	r2, #1
 80052c0:	2104      	movs	r1, #4
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fda6 	bl	8005e14 <TIM_CCxChannelCmd>
      break;
 80052c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d020      	beq.n	8005348 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01b      	beq.n	8005348 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0202 	mvn.w	r2, #2
 8005318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa5b 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa4d 	bl	80057d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fa5e 	bl	80057fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d020      	beq.n	8005394 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01b      	beq.n	8005394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0204 	mvn.w	r2, #4
 8005364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fa35 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 8005380:	e005      	b.n	800538e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa27 	bl	80057d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fa38 	bl	80057fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d020      	beq.n	80053e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01b      	beq.n	80053e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0208 	mvn.w	r2, #8
 80053b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2204      	movs	r2, #4
 80053b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fa0f 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 80053cc:	e005      	b.n	80053da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fa01 	bl	80057d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fa12 	bl	80057fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d020      	beq.n	800542c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01b      	beq.n	800542c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0210 	mvn.w	r2, #16
 80053fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2208      	movs	r2, #8
 8005402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f9e9 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 8005418:	e005      	b.n	8005426 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f9db 	bl	80057d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f9ec 	bl	80057fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00c      	beq.n	8005450 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0201 	mvn.w	r2, #1
 8005448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fc f9dc 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00c      	beq.n	8005474 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800546c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fd7c 	bl	8005f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00c      	beq.n	8005498 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f9bd 	bl	8005812 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00c      	beq.n	80054bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0220 	mvn.w	r2, #32
 80054b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fd4e 	bl	8005f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054de:	2302      	movs	r3, #2
 80054e0:	e0ae      	b.n	8005640 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b0c      	cmp	r3, #12
 80054ee:	f200 809f 	bhi.w	8005630 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054f2:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800552d 	.word	0x0800552d
 80054fc:	08005631 	.word	0x08005631
 8005500:	08005631 	.word	0x08005631
 8005504:	08005631 	.word	0x08005631
 8005508:	0800556d 	.word	0x0800556d
 800550c:	08005631 	.word	0x08005631
 8005510:	08005631 	.word	0x08005631
 8005514:	08005631 	.word	0x08005631
 8005518:	080055af 	.word	0x080055af
 800551c:	08005631 	.word	0x08005631
 8005520:	08005631 	.word	0x08005631
 8005524:	08005631 	.word	0x08005631
 8005528:	080055ef 	.word	0x080055ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fa24 	bl	8005980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0204 	bic.w	r2, r2, #4
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	619a      	str	r2, [r3, #24]
      break;
 800556a:	e064      	b.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fa74 	bl	8005a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	021a      	lsls	r2, r3, #8
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	619a      	str	r2, [r3, #24]
      break;
 80055ac:	e043      	b.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fac9 	bl	8005b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0208 	orr.w	r2, r2, #8
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0204 	bic.w	r2, r2, #4
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	61da      	str	r2, [r3, #28]
      break;
 80055ec:	e023      	b.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fb1d 	bl	8005c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69d9      	ldr	r1, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	021a      	lsls	r2, r3, #8
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	61da      	str	r2, [r3, #28]
      break;
 800562e:	e002      	b.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
      break;
 8005634:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800563e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_TIM_ConfigClockSource+0x1c>
 8005660:	2302      	movs	r3, #2
 8005662:	e0b4      	b.n	80057ce <HAL_TIM_ConfigClockSource+0x186>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800568a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800569c:	d03e      	beq.n	800571c <HAL_TIM_ConfigClockSource+0xd4>
 800569e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056a2:	f200 8087 	bhi.w	80057b4 <HAL_TIM_ConfigClockSource+0x16c>
 80056a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056aa:	f000 8086 	beq.w	80057ba <HAL_TIM_ConfigClockSource+0x172>
 80056ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b2:	d87f      	bhi.n	80057b4 <HAL_TIM_ConfigClockSource+0x16c>
 80056b4:	2b70      	cmp	r3, #112	@ 0x70
 80056b6:	d01a      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0xa6>
 80056b8:	2b70      	cmp	r3, #112	@ 0x70
 80056ba:	d87b      	bhi.n	80057b4 <HAL_TIM_ConfigClockSource+0x16c>
 80056bc:	2b60      	cmp	r3, #96	@ 0x60
 80056be:	d050      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x11a>
 80056c0:	2b60      	cmp	r3, #96	@ 0x60
 80056c2:	d877      	bhi.n	80057b4 <HAL_TIM_ConfigClockSource+0x16c>
 80056c4:	2b50      	cmp	r3, #80	@ 0x50
 80056c6:	d03c      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0xfa>
 80056c8:	2b50      	cmp	r3, #80	@ 0x50
 80056ca:	d873      	bhi.n	80057b4 <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b40      	cmp	r3, #64	@ 0x40
 80056ce:	d058      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x13a>
 80056d0:	2b40      	cmp	r3, #64	@ 0x40
 80056d2:	d86f      	bhi.n	80057b4 <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b30      	cmp	r3, #48	@ 0x30
 80056d6:	d064      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x15a>
 80056d8:	2b30      	cmp	r3, #48	@ 0x30
 80056da:	d86b      	bhi.n	80057b4 <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d060      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x15a>
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d867      	bhi.n	80057b4 <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d05c      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x15a>
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d05a      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x15a>
 80056ec:	e062      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056fe:	f000 fb69 	bl	8005dd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005710:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	609a      	str	r2, [r3, #8]
      break;
 800571a:	e04f      	b.n	80057bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800572c:	f000 fb52 	bl	8005dd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800573e:	609a      	str	r2, [r3, #8]
      break;
 8005740:	e03c      	b.n	80057bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800574e:	461a      	mov	r2, r3
 8005750:	f000 fac6 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2150      	movs	r1, #80	@ 0x50
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fb1f 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005760:	e02c      	b.n	80057bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800576e:	461a      	mov	r2, r3
 8005770:	f000 fae5 	bl	8005d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2160      	movs	r1, #96	@ 0x60
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fb0f 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005780:	e01c      	b.n	80057bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800578e:	461a      	mov	r2, r3
 8005790:	f000 faa6 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2140      	movs	r1, #64	@ 0x40
 800579a:	4618      	mov	r0, r3
 800579c:	f000 faff 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 80057a0:	e00c      	b.n	80057bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f000 faf6 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 80057b2:	e003      	b.n	80057bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
      break;
 80057b8:	e000      	b.n	80057bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a46      	ldr	r2, [pc, #280]	@ (8005954 <TIM_Base_SetConfig+0x12c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005846:	d00f      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a43      	ldr	r2, [pc, #268]	@ (8005958 <TIM_Base_SetConfig+0x130>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00b      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a42      	ldr	r2, [pc, #264]	@ (800595c <TIM_Base_SetConfig+0x134>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d007      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a41      	ldr	r2, [pc, #260]	@ (8005960 <TIM_Base_SetConfig+0x138>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a40      	ldr	r2, [pc, #256]	@ (8005964 <TIM_Base_SetConfig+0x13c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d108      	bne.n	800587a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800586e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a35      	ldr	r2, [pc, #212]	@ (8005954 <TIM_Base_SetConfig+0x12c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d02b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005888:	d027      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a32      	ldr	r2, [pc, #200]	@ (8005958 <TIM_Base_SetConfig+0x130>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d023      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a31      	ldr	r2, [pc, #196]	@ (800595c <TIM_Base_SetConfig+0x134>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a30      	ldr	r2, [pc, #192]	@ (8005960 <TIM_Base_SetConfig+0x138>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005964 <TIM_Base_SetConfig+0x13c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d017      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005968 <TIM_Base_SetConfig+0x140>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2d      	ldr	r2, [pc, #180]	@ (800596c <TIM_Base_SetConfig+0x144>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005970 <TIM_Base_SetConfig+0x148>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005974 <TIM_Base_SetConfig+0x14c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005978 <TIM_Base_SetConfig+0x150>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a29      	ldr	r2, [pc, #164]	@ (800597c <TIM_Base_SetConfig+0x154>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d108      	bne.n	80058ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a10      	ldr	r2, [pc, #64]	@ (8005954 <TIM_Base_SetConfig+0x12c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_Base_SetConfig+0xf8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a12      	ldr	r2, [pc, #72]	@ (8005964 <TIM_Base_SetConfig+0x13c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	611a      	str	r2, [r3, #16]
  }
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40010000 	.word	0x40010000
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40010400 	.word	0x40010400
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800
 8005974:	40001800 	.word	0x40001800
 8005978:	40001c00 	.word	0x40001c00
 800597c:	40002000 	.word	0x40002000

08005980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 0201 	bic.w	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 0302 	bic.w	r3, r3, #2
 80059c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a20      	ldr	r2, [pc, #128]	@ (8005a58 <TIM_OC1_SetConfig+0xd8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_OC1_SetConfig+0x64>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1f      	ldr	r2, [pc, #124]	@ (8005a5c <TIM_OC1_SetConfig+0xdc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d10c      	bne.n	80059fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 0308 	bic.w	r3, r3, #8
 80059ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f023 0304 	bic.w	r3, r3, #4
 80059fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a15      	ldr	r2, [pc, #84]	@ (8005a58 <TIM_OC1_SetConfig+0xd8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC1_SetConfig+0x8e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a14      	ldr	r2, [pc, #80]	@ (8005a5c <TIM_OC1_SetConfig+0xdc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d111      	bne.n	8005a32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	621a      	str	r2, [r3, #32]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40010400 	.word	0x40010400

08005a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f023 0210 	bic.w	r2, r3, #16
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0320 	bic.w	r3, r3, #32
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a22      	ldr	r2, [pc, #136]	@ (8005b44 <TIM_OC2_SetConfig+0xe4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_OC2_SetConfig+0x68>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	@ (8005b48 <TIM_OC2_SetConfig+0xe8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d10d      	bne.n	8005ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a17      	ldr	r2, [pc, #92]	@ (8005b44 <TIM_OC2_SetConfig+0xe4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC2_SetConfig+0x94>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a16      	ldr	r2, [pc, #88]	@ (8005b48 <TIM_OC2_SetConfig+0xe8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d113      	bne.n	8005b1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40010400 	.word	0x40010400

08005b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a21      	ldr	r2, [pc, #132]	@ (8005c2c <TIM_OC3_SetConfig+0xe0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_OC3_SetConfig+0x66>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a20      	ldr	r2, [pc, #128]	@ (8005c30 <TIM_OC3_SetConfig+0xe4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10d      	bne.n	8005bce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a16      	ldr	r2, [pc, #88]	@ (8005c2c <TIM_OC3_SetConfig+0xe0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_OC3_SetConfig+0x92>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a15      	ldr	r2, [pc, #84]	@ (8005c30 <TIM_OC3_SetConfig+0xe4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d113      	bne.n	8005c06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	621a      	str	r2, [r3, #32]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010400 	.word	0x40010400

08005c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a12      	ldr	r2, [pc, #72]	@ (8005cd8 <TIM_OC4_SetConfig+0xa4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_OC4_SetConfig+0x68>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a11      	ldr	r2, [pc, #68]	@ (8005cdc <TIM_OC4_SetConfig+0xa8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d109      	bne.n	8005cb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	019b      	lsls	r3, r3, #6
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40010400 	.word	0x40010400

08005ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0201 	bic.w	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f023 030a 	bic.w	r3, r3, #10
 8005d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b087      	sub	sp, #28
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f023 0210 	bic.w	r2, r3, #16
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	031b      	lsls	r3, r3, #12
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f043 0307 	orr.w	r3, r3, #7
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	021a      	lsls	r2, r3, #8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	609a      	str	r2, [r3, #8]
}
 8005e08:	bf00      	nop
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	2201      	movs	r2, #1
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1a      	ldr	r2, [r3, #32]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	401a      	ands	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
	...

08005e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e05a      	b.n	8005f2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a21      	ldr	r2, [pc, #132]	@ (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d022      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec4:	d01d      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1d      	ldr	r2, [pc, #116]	@ (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d018      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d013      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1a      	ldr	r2, [pc, #104]	@ (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00e      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d009      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a17      	ldr	r2, [pc, #92]	@ (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a15      	ldr	r2, [pc, #84]	@ (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d10c      	bne.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40010400 	.word	0x40010400
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40001800 	.word	0x40001800

08005f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <memset>:
 8005f80:	4402      	add	r2, r0
 8005f82:	4603      	mov	r3, r0
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d100      	bne.n	8005f8a <memset+0xa>
 8005f88:	4770      	bx	lr
 8005f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8e:	e7f9      	b.n	8005f84 <memset+0x4>

08005f90 <__errno>:
 8005f90:	4b01      	ldr	r3, [pc, #4]	@ (8005f98 <__errno+0x8>)
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	2000002c 	.word	0x2000002c

08005f9c <__libc_init_array>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd4 <__libc_init_array+0x38>)
 8005fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8005fd8 <__libc_init_array+0x3c>)
 8005fa2:	1b64      	subs	r4, r4, r5
 8005fa4:	10a4      	asrs	r4, r4, #2
 8005fa6:	2600      	movs	r6, #0
 8005fa8:	42a6      	cmp	r6, r4
 8005faa:	d109      	bne.n	8005fc0 <__libc_init_array+0x24>
 8005fac:	4d0b      	ldr	r5, [pc, #44]	@ (8005fdc <__libc_init_array+0x40>)
 8005fae:	4c0c      	ldr	r4, [pc, #48]	@ (8005fe0 <__libc_init_array+0x44>)
 8005fb0:	f000 fac0 	bl	8006534 <_init>
 8005fb4:	1b64      	subs	r4, r4, r5
 8005fb6:	10a4      	asrs	r4, r4, #2
 8005fb8:	2600      	movs	r6, #0
 8005fba:	42a6      	cmp	r6, r4
 8005fbc:	d105      	bne.n	8005fca <__libc_init_array+0x2e>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc4:	4798      	blx	r3
 8005fc6:	3601      	adds	r6, #1
 8005fc8:	e7ee      	b.n	8005fa8 <__libc_init_array+0xc>
 8005fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fce:	4798      	blx	r3
 8005fd0:	3601      	adds	r6, #1
 8005fd2:	e7f2      	b.n	8005fba <__libc_init_array+0x1e>
 8005fd4:	080065b0 	.word	0x080065b0
 8005fd8:	080065b0 	.word	0x080065b0
 8005fdc:	080065b0 	.word	0x080065b0
 8005fe0:	080065b4 	.word	0x080065b4

08005fe4 <sqrt>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	ed2d 8b02 	vpush	{d8}
 8005fea:	ec55 4b10 	vmov	r4, r5, d0
 8005fee:	f000 f9c7 	bl	8006380 <__ieee754_sqrt>
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	eeb0 8a40 	vmov.f32	s16, s0
 8005ffe:	eef0 8a60 	vmov.f32	s17, s1
 8006002:	f7fa fd57 	bl	8000ab4 <__aeabi_dcmpun>
 8006006:	b990      	cbnz	r0, 800602e <sqrt+0x4a>
 8006008:	2200      	movs	r2, #0
 800600a:	2300      	movs	r3, #0
 800600c:	4620      	mov	r0, r4
 800600e:	4629      	mov	r1, r5
 8006010:	f7fa fd28 	bl	8000a64 <__aeabi_dcmplt>
 8006014:	b158      	cbz	r0, 800602e <sqrt+0x4a>
 8006016:	f7ff ffbb 	bl	8005f90 <__errno>
 800601a:	2321      	movs	r3, #33	@ 0x21
 800601c:	6003      	str	r3, [r0, #0]
 800601e:	2200      	movs	r2, #0
 8006020:	2300      	movs	r3, #0
 8006022:	4610      	mov	r0, r2
 8006024:	4619      	mov	r1, r3
 8006026:	f7fa fbd5 	bl	80007d4 <__aeabi_ddiv>
 800602a:	ec41 0b18 	vmov	d8, r0, r1
 800602e:	eeb0 0a48 	vmov.f32	s0, s16
 8006032:	eef0 0a68 	vmov.f32	s1, s17
 8006036:	ecbd 8b02 	vpop	{d8}
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	0000      	movs	r0, r0
	...

08006040 <atan>:
 8006040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	ec55 4b10 	vmov	r4, r5, d0
 8006048:	4bbf      	ldr	r3, [pc, #764]	@ (8006348 <atan+0x308>)
 800604a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800604e:	429e      	cmp	r6, r3
 8006050:	46ab      	mov	fp, r5
 8006052:	d918      	bls.n	8006086 <atan+0x46>
 8006054:	4bbd      	ldr	r3, [pc, #756]	@ (800634c <atan+0x30c>)
 8006056:	429e      	cmp	r6, r3
 8006058:	d801      	bhi.n	800605e <atan+0x1e>
 800605a:	d109      	bne.n	8006070 <atan+0x30>
 800605c:	b144      	cbz	r4, 8006070 <atan+0x30>
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	4620      	mov	r0, r4
 8006064:	4629      	mov	r1, r5
 8006066:	f7fa f8d5 	bl	8000214 <__adddf3>
 800606a:	4604      	mov	r4, r0
 800606c:	460d      	mov	r5, r1
 800606e:	e006      	b.n	800607e <atan+0x3e>
 8006070:	f1bb 0f00 	cmp.w	fp, #0
 8006074:	f340 812b 	ble.w	80062ce <atan+0x28e>
 8006078:	a597      	add	r5, pc, #604	@ (adr r5, 80062d8 <atan+0x298>)
 800607a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800607e:	ec45 4b10 	vmov	d0, r4, r5
 8006082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006086:	4bb2      	ldr	r3, [pc, #712]	@ (8006350 <atan+0x310>)
 8006088:	429e      	cmp	r6, r3
 800608a:	d813      	bhi.n	80060b4 <atan+0x74>
 800608c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006090:	429e      	cmp	r6, r3
 8006092:	d80c      	bhi.n	80060ae <atan+0x6e>
 8006094:	a392      	add	r3, pc, #584	@ (adr r3, 80062e0 <atan+0x2a0>)
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	4620      	mov	r0, r4
 800609c:	4629      	mov	r1, r5
 800609e:	f7fa f8b9 	bl	8000214 <__adddf3>
 80060a2:	4bac      	ldr	r3, [pc, #688]	@ (8006354 <atan+0x314>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	f7fa fcfb 	bl	8000aa0 <__aeabi_dcmpgt>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d1e7      	bne.n	800607e <atan+0x3e>
 80060ae:	f04f 3aff 	mov.w	sl, #4294967295
 80060b2:	e029      	b.n	8006108 <atan+0xc8>
 80060b4:	f000 f95c 	bl	8006370 <fabs>
 80060b8:	4ba7      	ldr	r3, [pc, #668]	@ (8006358 <atan+0x318>)
 80060ba:	429e      	cmp	r6, r3
 80060bc:	ec55 4b10 	vmov	r4, r5, d0
 80060c0:	f200 80bc 	bhi.w	800623c <atan+0x1fc>
 80060c4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80060c8:	429e      	cmp	r6, r3
 80060ca:	f200 809e 	bhi.w	800620a <atan+0x1ca>
 80060ce:	4622      	mov	r2, r4
 80060d0:	462b      	mov	r3, r5
 80060d2:	4620      	mov	r0, r4
 80060d4:	4629      	mov	r1, r5
 80060d6:	f7fa f89d 	bl	8000214 <__adddf3>
 80060da:	4b9e      	ldr	r3, [pc, #632]	@ (8006354 <atan+0x314>)
 80060dc:	2200      	movs	r2, #0
 80060de:	f7fa f897 	bl	8000210 <__aeabi_dsub>
 80060e2:	2200      	movs	r2, #0
 80060e4:	4606      	mov	r6, r0
 80060e6:	460f      	mov	r7, r1
 80060e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80060ec:	4620      	mov	r0, r4
 80060ee:	4629      	mov	r1, r5
 80060f0:	f7fa f890 	bl	8000214 <__adddf3>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4630      	mov	r0, r6
 80060fa:	4639      	mov	r1, r7
 80060fc:	f7fa fb6a 	bl	80007d4 <__aeabi_ddiv>
 8006100:	f04f 0a00 	mov.w	sl, #0
 8006104:	4604      	mov	r4, r0
 8006106:	460d      	mov	r5, r1
 8006108:	4622      	mov	r2, r4
 800610a:	462b      	mov	r3, r5
 800610c:	4620      	mov	r0, r4
 800610e:	4629      	mov	r1, r5
 8006110:	f7fa fa36 	bl	8000580 <__aeabi_dmul>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4680      	mov	r8, r0
 800611a:	4689      	mov	r9, r1
 800611c:	f7fa fa30 	bl	8000580 <__aeabi_dmul>
 8006120:	a371      	add	r3, pc, #452	@ (adr r3, 80062e8 <atan+0x2a8>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	4606      	mov	r6, r0
 8006128:	460f      	mov	r7, r1
 800612a:	f7fa fa29 	bl	8000580 <__aeabi_dmul>
 800612e:	a370      	add	r3, pc, #448	@ (adr r3, 80062f0 <atan+0x2b0>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f7fa f86e 	bl	8000214 <__adddf3>
 8006138:	4632      	mov	r2, r6
 800613a:	463b      	mov	r3, r7
 800613c:	f7fa fa20 	bl	8000580 <__aeabi_dmul>
 8006140:	a36d      	add	r3, pc, #436	@ (adr r3, 80062f8 <atan+0x2b8>)
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	f7fa f865 	bl	8000214 <__adddf3>
 800614a:	4632      	mov	r2, r6
 800614c:	463b      	mov	r3, r7
 800614e:	f7fa fa17 	bl	8000580 <__aeabi_dmul>
 8006152:	a36b      	add	r3, pc, #428	@ (adr r3, 8006300 <atan+0x2c0>)
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f7fa f85c 	bl	8000214 <__adddf3>
 800615c:	4632      	mov	r2, r6
 800615e:	463b      	mov	r3, r7
 8006160:	f7fa fa0e 	bl	8000580 <__aeabi_dmul>
 8006164:	a368      	add	r3, pc, #416	@ (adr r3, 8006308 <atan+0x2c8>)
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	f7fa f853 	bl	8000214 <__adddf3>
 800616e:	4632      	mov	r2, r6
 8006170:	463b      	mov	r3, r7
 8006172:	f7fa fa05 	bl	8000580 <__aeabi_dmul>
 8006176:	a366      	add	r3, pc, #408	@ (adr r3, 8006310 <atan+0x2d0>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f7fa f84a 	bl	8000214 <__adddf3>
 8006180:	4642      	mov	r2, r8
 8006182:	464b      	mov	r3, r9
 8006184:	f7fa f9fc 	bl	8000580 <__aeabi_dmul>
 8006188:	a363      	add	r3, pc, #396	@ (adr r3, 8006318 <atan+0x2d8>)
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	4680      	mov	r8, r0
 8006190:	4689      	mov	r9, r1
 8006192:	4630      	mov	r0, r6
 8006194:	4639      	mov	r1, r7
 8006196:	f7fa f9f3 	bl	8000580 <__aeabi_dmul>
 800619a:	a361      	add	r3, pc, #388	@ (adr r3, 8006320 <atan+0x2e0>)
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f7fa f836 	bl	8000210 <__aeabi_dsub>
 80061a4:	4632      	mov	r2, r6
 80061a6:	463b      	mov	r3, r7
 80061a8:	f7fa f9ea 	bl	8000580 <__aeabi_dmul>
 80061ac:	a35e      	add	r3, pc, #376	@ (adr r3, 8006328 <atan+0x2e8>)
 80061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b2:	f7fa f82d 	bl	8000210 <__aeabi_dsub>
 80061b6:	4632      	mov	r2, r6
 80061b8:	463b      	mov	r3, r7
 80061ba:	f7fa f9e1 	bl	8000580 <__aeabi_dmul>
 80061be:	a35c      	add	r3, pc, #368	@ (adr r3, 8006330 <atan+0x2f0>)
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f7fa f824 	bl	8000210 <__aeabi_dsub>
 80061c8:	4632      	mov	r2, r6
 80061ca:	463b      	mov	r3, r7
 80061cc:	f7fa f9d8 	bl	8000580 <__aeabi_dmul>
 80061d0:	a359      	add	r3, pc, #356	@ (adr r3, 8006338 <atan+0x2f8>)
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	f7fa f81b 	bl	8000210 <__aeabi_dsub>
 80061da:	4632      	mov	r2, r6
 80061dc:	463b      	mov	r3, r7
 80061de:	f7fa f9cf 	bl	8000580 <__aeabi_dmul>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4640      	mov	r0, r8
 80061e8:	4649      	mov	r1, r9
 80061ea:	f7fa f813 	bl	8000214 <__adddf3>
 80061ee:	4622      	mov	r2, r4
 80061f0:	462b      	mov	r3, r5
 80061f2:	f7fa f9c5 	bl	8000580 <__aeabi_dmul>
 80061f6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	d148      	bne.n	8006292 <atan+0x252>
 8006200:	4620      	mov	r0, r4
 8006202:	4629      	mov	r1, r5
 8006204:	f7fa f804 	bl	8000210 <__aeabi_dsub>
 8006208:	e72f      	b.n	800606a <atan+0x2a>
 800620a:	4b52      	ldr	r3, [pc, #328]	@ (8006354 <atan+0x314>)
 800620c:	2200      	movs	r2, #0
 800620e:	4620      	mov	r0, r4
 8006210:	4629      	mov	r1, r5
 8006212:	f7f9 fffd 	bl	8000210 <__aeabi_dsub>
 8006216:	4b4f      	ldr	r3, [pc, #316]	@ (8006354 <atan+0x314>)
 8006218:	4606      	mov	r6, r0
 800621a:	460f      	mov	r7, r1
 800621c:	2200      	movs	r2, #0
 800621e:	4620      	mov	r0, r4
 8006220:	4629      	mov	r1, r5
 8006222:	f7f9 fff7 	bl	8000214 <__adddf3>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4630      	mov	r0, r6
 800622c:	4639      	mov	r1, r7
 800622e:	f7fa fad1 	bl	80007d4 <__aeabi_ddiv>
 8006232:	f04f 0a01 	mov.w	sl, #1
 8006236:	4604      	mov	r4, r0
 8006238:	460d      	mov	r5, r1
 800623a:	e765      	b.n	8006108 <atan+0xc8>
 800623c:	4b47      	ldr	r3, [pc, #284]	@ (800635c <atan+0x31c>)
 800623e:	429e      	cmp	r6, r3
 8006240:	d21c      	bcs.n	800627c <atan+0x23c>
 8006242:	4b47      	ldr	r3, [pc, #284]	@ (8006360 <atan+0x320>)
 8006244:	2200      	movs	r2, #0
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7f9 ffe1 	bl	8000210 <__aeabi_dsub>
 800624e:	4b44      	ldr	r3, [pc, #272]	@ (8006360 <atan+0x320>)
 8006250:	4606      	mov	r6, r0
 8006252:	460f      	mov	r7, r1
 8006254:	2200      	movs	r2, #0
 8006256:	4620      	mov	r0, r4
 8006258:	4629      	mov	r1, r5
 800625a:	f7fa f991 	bl	8000580 <__aeabi_dmul>
 800625e:	4b3d      	ldr	r3, [pc, #244]	@ (8006354 <atan+0x314>)
 8006260:	2200      	movs	r2, #0
 8006262:	f7f9 ffd7 	bl	8000214 <__adddf3>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4630      	mov	r0, r6
 800626c:	4639      	mov	r1, r7
 800626e:	f7fa fab1 	bl	80007d4 <__aeabi_ddiv>
 8006272:	f04f 0a02 	mov.w	sl, #2
 8006276:	4604      	mov	r4, r0
 8006278:	460d      	mov	r5, r1
 800627a:	e745      	b.n	8006108 <atan+0xc8>
 800627c:	4622      	mov	r2, r4
 800627e:	462b      	mov	r3, r5
 8006280:	4938      	ldr	r1, [pc, #224]	@ (8006364 <atan+0x324>)
 8006282:	2000      	movs	r0, #0
 8006284:	f7fa faa6 	bl	80007d4 <__aeabi_ddiv>
 8006288:	f04f 0a03 	mov.w	sl, #3
 800628c:	4604      	mov	r4, r0
 800628e:	460d      	mov	r5, r1
 8006290:	e73a      	b.n	8006108 <atan+0xc8>
 8006292:	4b35      	ldr	r3, [pc, #212]	@ (8006368 <atan+0x328>)
 8006294:	4e35      	ldr	r6, [pc, #212]	@ (800636c <atan+0x32c>)
 8006296:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f7f9 ffb7 	bl	8000210 <__aeabi_dsub>
 80062a2:	4622      	mov	r2, r4
 80062a4:	462b      	mov	r3, r5
 80062a6:	f7f9 ffb3 	bl	8000210 <__aeabi_dsub>
 80062aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80062b6:	f7f9 ffab 	bl	8000210 <__aeabi_dsub>
 80062ba:	f1bb 0f00 	cmp.w	fp, #0
 80062be:	4604      	mov	r4, r0
 80062c0:	460d      	mov	r5, r1
 80062c2:	f6bf aedc 	bge.w	800607e <atan+0x3e>
 80062c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80062ca:	461d      	mov	r5, r3
 80062cc:	e6d7      	b.n	800607e <atan+0x3e>
 80062ce:	a51c      	add	r5, pc, #112	@ (adr r5, 8006340 <atan+0x300>)
 80062d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062d4:	e6d3      	b.n	800607e <atan+0x3e>
 80062d6:	bf00      	nop
 80062d8:	54442d18 	.word	0x54442d18
 80062dc:	3ff921fb 	.word	0x3ff921fb
 80062e0:	8800759c 	.word	0x8800759c
 80062e4:	7e37e43c 	.word	0x7e37e43c
 80062e8:	e322da11 	.word	0xe322da11
 80062ec:	3f90ad3a 	.word	0x3f90ad3a
 80062f0:	24760deb 	.word	0x24760deb
 80062f4:	3fa97b4b 	.word	0x3fa97b4b
 80062f8:	a0d03d51 	.word	0xa0d03d51
 80062fc:	3fb10d66 	.word	0x3fb10d66
 8006300:	c54c206e 	.word	0xc54c206e
 8006304:	3fb745cd 	.word	0x3fb745cd
 8006308:	920083ff 	.word	0x920083ff
 800630c:	3fc24924 	.word	0x3fc24924
 8006310:	5555550d 	.word	0x5555550d
 8006314:	3fd55555 	.word	0x3fd55555
 8006318:	2c6a6c2f 	.word	0x2c6a6c2f
 800631c:	bfa2b444 	.word	0xbfa2b444
 8006320:	52defd9a 	.word	0x52defd9a
 8006324:	3fadde2d 	.word	0x3fadde2d
 8006328:	af749a6d 	.word	0xaf749a6d
 800632c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006330:	fe231671 	.word	0xfe231671
 8006334:	3fbc71c6 	.word	0x3fbc71c6
 8006338:	9998ebc4 	.word	0x9998ebc4
 800633c:	3fc99999 	.word	0x3fc99999
 8006340:	54442d18 	.word	0x54442d18
 8006344:	bff921fb 	.word	0xbff921fb
 8006348:	440fffff 	.word	0x440fffff
 800634c:	7ff00000 	.word	0x7ff00000
 8006350:	3fdbffff 	.word	0x3fdbffff
 8006354:	3ff00000 	.word	0x3ff00000
 8006358:	3ff2ffff 	.word	0x3ff2ffff
 800635c:	40038000 	.word	0x40038000
 8006360:	3ff80000 	.word	0x3ff80000
 8006364:	bff00000 	.word	0xbff00000
 8006368:	08006568 	.word	0x08006568
 800636c:	08006588 	.word	0x08006588

08006370 <fabs>:
 8006370:	ec51 0b10 	vmov	r0, r1, d0
 8006374:	4602      	mov	r2, r0
 8006376:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800637a:	ec43 2b10 	vmov	d0, r2, r3
 800637e:	4770      	bx	lr

08006380 <__ieee754_sqrt>:
 8006380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	4a68      	ldr	r2, [pc, #416]	@ (8006528 <__ieee754_sqrt+0x1a8>)
 8006386:	ec55 4b10 	vmov	r4, r5, d0
 800638a:	43aa      	bics	r2, r5
 800638c:	462b      	mov	r3, r5
 800638e:	4621      	mov	r1, r4
 8006390:	d110      	bne.n	80063b4 <__ieee754_sqrt+0x34>
 8006392:	4622      	mov	r2, r4
 8006394:	4620      	mov	r0, r4
 8006396:	4629      	mov	r1, r5
 8006398:	f7fa f8f2 	bl	8000580 <__aeabi_dmul>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4620      	mov	r0, r4
 80063a2:	4629      	mov	r1, r5
 80063a4:	f7f9 ff36 	bl	8000214 <__adddf3>
 80063a8:	4604      	mov	r4, r0
 80063aa:	460d      	mov	r5, r1
 80063ac:	ec45 4b10 	vmov	d0, r4, r5
 80063b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b4:	2d00      	cmp	r5, #0
 80063b6:	dc0e      	bgt.n	80063d6 <__ieee754_sqrt+0x56>
 80063b8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80063bc:	4322      	orrs	r2, r4
 80063be:	d0f5      	beq.n	80063ac <__ieee754_sqrt+0x2c>
 80063c0:	b19d      	cbz	r5, 80063ea <__ieee754_sqrt+0x6a>
 80063c2:	4622      	mov	r2, r4
 80063c4:	4620      	mov	r0, r4
 80063c6:	4629      	mov	r1, r5
 80063c8:	f7f9 ff22 	bl	8000210 <__aeabi_dsub>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	f7fa fa00 	bl	80007d4 <__aeabi_ddiv>
 80063d4:	e7e8      	b.n	80063a8 <__ieee754_sqrt+0x28>
 80063d6:	152a      	asrs	r2, r5, #20
 80063d8:	d115      	bne.n	8006406 <__ieee754_sqrt+0x86>
 80063da:	2000      	movs	r0, #0
 80063dc:	e009      	b.n	80063f2 <__ieee754_sqrt+0x72>
 80063de:	0acb      	lsrs	r3, r1, #11
 80063e0:	3a15      	subs	r2, #21
 80063e2:	0549      	lsls	r1, r1, #21
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0fa      	beq.n	80063de <__ieee754_sqrt+0x5e>
 80063e8:	e7f7      	b.n	80063da <__ieee754_sqrt+0x5a>
 80063ea:	462a      	mov	r2, r5
 80063ec:	e7fa      	b.n	80063e4 <__ieee754_sqrt+0x64>
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	3001      	adds	r0, #1
 80063f2:	02dc      	lsls	r4, r3, #11
 80063f4:	d5fb      	bpl.n	80063ee <__ieee754_sqrt+0x6e>
 80063f6:	1e44      	subs	r4, r0, #1
 80063f8:	1b12      	subs	r2, r2, r4
 80063fa:	f1c0 0420 	rsb	r4, r0, #32
 80063fe:	fa21 f404 	lsr.w	r4, r1, r4
 8006402:	4323      	orrs	r3, r4
 8006404:	4081      	lsls	r1, r0
 8006406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800640a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800640e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006412:	07d2      	lsls	r2, r2, #31
 8006414:	bf5c      	itt	pl
 8006416:	005b      	lslpl	r3, r3, #1
 8006418:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800641c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006420:	bf58      	it	pl
 8006422:	0049      	lslpl	r1, r1, #1
 8006424:	2600      	movs	r6, #0
 8006426:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800642a:	106d      	asrs	r5, r5, #1
 800642c:	0049      	lsls	r1, r1, #1
 800642e:	2016      	movs	r0, #22
 8006430:	4632      	mov	r2, r6
 8006432:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006436:	1917      	adds	r7, r2, r4
 8006438:	429f      	cmp	r7, r3
 800643a:	bfde      	ittt	le
 800643c:	193a      	addle	r2, r7, r4
 800643e:	1bdb      	suble	r3, r3, r7
 8006440:	1936      	addle	r6, r6, r4
 8006442:	0fcf      	lsrs	r7, r1, #31
 8006444:	3801      	subs	r0, #1
 8006446:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800644a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800644e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006452:	d1f0      	bne.n	8006436 <__ieee754_sqrt+0xb6>
 8006454:	4604      	mov	r4, r0
 8006456:	2720      	movs	r7, #32
 8006458:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800645c:	429a      	cmp	r2, r3
 800645e:	eb00 0e0c 	add.w	lr, r0, ip
 8006462:	db02      	blt.n	800646a <__ieee754_sqrt+0xea>
 8006464:	d113      	bne.n	800648e <__ieee754_sqrt+0x10e>
 8006466:	458e      	cmp	lr, r1
 8006468:	d811      	bhi.n	800648e <__ieee754_sqrt+0x10e>
 800646a:	f1be 0f00 	cmp.w	lr, #0
 800646e:	eb0e 000c 	add.w	r0, lr, ip
 8006472:	da42      	bge.n	80064fa <__ieee754_sqrt+0x17a>
 8006474:	2800      	cmp	r0, #0
 8006476:	db40      	blt.n	80064fa <__ieee754_sqrt+0x17a>
 8006478:	f102 0801 	add.w	r8, r2, #1
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	458e      	cmp	lr, r1
 8006480:	bf88      	it	hi
 8006482:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006486:	eba1 010e 	sub.w	r1, r1, lr
 800648a:	4464      	add	r4, ip
 800648c:	4642      	mov	r2, r8
 800648e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006492:	3f01      	subs	r7, #1
 8006494:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006498:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800649c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80064a0:	d1dc      	bne.n	800645c <__ieee754_sqrt+0xdc>
 80064a2:	4319      	orrs	r1, r3
 80064a4:	d01b      	beq.n	80064de <__ieee754_sqrt+0x15e>
 80064a6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800652c <__ieee754_sqrt+0x1ac>
 80064aa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006530 <__ieee754_sqrt+0x1b0>
 80064ae:	e9da 0100 	ldrd	r0, r1, [sl]
 80064b2:	e9db 2300 	ldrd	r2, r3, [fp]
 80064b6:	f7f9 feab 	bl	8000210 <__aeabi_dsub>
 80064ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f7fa fad7 	bl	8000a78 <__aeabi_dcmple>
 80064ca:	b140      	cbz	r0, 80064de <__ieee754_sqrt+0x15e>
 80064cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80064d0:	e9da 0100 	ldrd	r0, r1, [sl]
 80064d4:	e9db 2300 	ldrd	r2, r3, [fp]
 80064d8:	d111      	bne.n	80064fe <__ieee754_sqrt+0x17e>
 80064da:	3601      	adds	r6, #1
 80064dc:	463c      	mov	r4, r7
 80064de:	1072      	asrs	r2, r6, #1
 80064e0:	0863      	lsrs	r3, r4, #1
 80064e2:	07f1      	lsls	r1, r6, #31
 80064e4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80064e8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80064ec:	bf48      	it	mi
 80064ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80064f2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80064f6:	4618      	mov	r0, r3
 80064f8:	e756      	b.n	80063a8 <__ieee754_sqrt+0x28>
 80064fa:	4690      	mov	r8, r2
 80064fc:	e7be      	b.n	800647c <__ieee754_sqrt+0xfc>
 80064fe:	f7f9 fe89 	bl	8000214 <__adddf3>
 8006502:	e9da 8900 	ldrd	r8, r9, [sl]
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4640      	mov	r0, r8
 800650c:	4649      	mov	r1, r9
 800650e:	f7fa faa9 	bl	8000a64 <__aeabi_dcmplt>
 8006512:	b120      	cbz	r0, 800651e <__ieee754_sqrt+0x19e>
 8006514:	1ca0      	adds	r0, r4, #2
 8006516:	bf08      	it	eq
 8006518:	3601      	addeq	r6, #1
 800651a:	3402      	adds	r4, #2
 800651c:	e7df      	b.n	80064de <__ieee754_sqrt+0x15e>
 800651e:	1c63      	adds	r3, r4, #1
 8006520:	f023 0401 	bic.w	r4, r3, #1
 8006524:	e7db      	b.n	80064de <__ieee754_sqrt+0x15e>
 8006526:	bf00      	nop
 8006528:	7ff00000 	.word	0x7ff00000
 800652c:	20000088 	.word	0x20000088
 8006530:	20000080 	.word	0x20000080

08006534 <_init>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	bf00      	nop
 8006538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653a:	bc08      	pop	{r3}
 800653c:	469e      	mov	lr, r3
 800653e:	4770      	bx	lr

08006540 <_fini>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr
