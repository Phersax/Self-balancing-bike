
main_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004d7c  08004d7c  00005d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df4  08004df4  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004df4  08004df4  00005df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dfc  08004dfc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dfc  08004dfc  00005dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e00  08004e00  00005e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000068  08004e6c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08004e6c  000062e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3ff  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a4  00000000  00000000  00014497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00016840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b56  00000000  00000000  000176d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002323e  00000000  00000000  00018226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001288a  00000000  00000000  0003b464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2df2  00000000  00000000  0004dcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120ae0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004368  00000000  00000000  00120b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00124e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004d64 	.word	0x08004d64

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08004d64 	.word	0x08004d64

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fdcf 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f833 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f943 	bl	800078c <MX_GPIO_Init>
  MX_DMA_Init();
 8000506:	f000 f921 	bl	800074c <MX_DMA_Init>
  MX_TIM5_Init();
 800050a:	f000 f8c7 	bl	800069c <MX_TIM5_Init>
  MX_I2C1_Init();
 800050e:	f000 f897 	bl	8000640 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  mpu6050_init();
 8000512:	f000 f993 	bl	800083c <mpu6050_init>
  nidec_h24_init(GPIO_PIN_10, GPIOB);
 8000516:	4913      	ldr	r1, [pc, #76]	@ (8000564 <main+0x70>)
 8000518:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800051c:	f000 fa9e 	bl	8000a5c <nidec_h24_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ax = mpu6050_accx();
 8000520:	f000 f9e8 	bl	80008f4 <mpu6050_accx>
 8000524:	4603      	mov	r3, r0
 8000526:	81fb      	strh	r3, [r7, #14]
	  ay = mpu6050_accy();
 8000528:	f000 fa02 	bl	8000930 <mpu6050_accy>
 800052c:	4603      	mov	r3, r0
 800052e:	81bb      	strh	r3, [r7, #12]
	  az = mpu6050_accz();
 8000530:	f000 fa1c 	bl	800096c <mpu6050_accz>
 8000534:	4603      	mov	r3, r0
 8000536:	817b      	strh	r3, [r7, #10]
	  gyro_x = mpu6050_gyrox();
 8000538:	f000 fa36 	bl	80009a8 <mpu6050_gyrox>
 800053c:	4603      	mov	r3, r0
 800053e:	813b      	strh	r3, [r7, #8]
	  gyro_y = mpu6050_gyroy();
 8000540:	f000 fa50 	bl	80009e4 <mpu6050_gyroy>
 8000544:	4603      	mov	r3, r0
 8000546:	80fb      	strh	r3, [r7, #6]
	  gyro_z = mpu6050_gyroz();
 8000548:	f000 fa6a 	bl	8000a20 <mpu6050_gyroz>
 800054c:	4603      	mov	r3, r0
 800054e:	80bb      	strh	r3, [r7, #4]
	  nidec_h24_Move(40, 0); //antiorario
 8000550:	2100      	movs	r1, #0
 8000552:	2028      	movs	r0, #40	@ 0x28
 8000554:	f000 fb6a 	bl	8000c2c <nidec_h24_Move>



	  HAL_Delay(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f000 fe11 	bl	8001180 <HAL_Delay>
	  ax = mpu6050_accx();
 800055e:	bf00      	nop
 8000560:	e7de      	b.n	8000520 <main+0x2c>
 8000562:	bf00      	nop
 8000564:	40020400 	.word	0x40020400

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2234      	movs	r2, #52	@ 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 f940 	bl	80047fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b29      	ldr	r3, [pc, #164]	@ (8000638 <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a28      	ldr	r2, [pc, #160]	@ (8000638 <SystemClock_Config+0xd0>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	4b26      	ldr	r3, [pc, #152]	@ (8000638 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a8:	2300      	movs	r3, #0
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	4b23      	ldr	r3, [pc, #140]	@ (800063c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <SystemClock_Config+0xd4>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005e0:	2354      	movs	r3, #84	@ 0x54
 80005e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 ff93 	bl	8003520 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000600:	f000 f916 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	2102      	movs	r1, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fccd 	bl	8002fc0 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800062c:	f000 f900 	bl	8000830 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	@ 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f001 fb4d 	bl	8001d1c <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 f8d2 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000084 	.word	0x20000084
 8000694:	40005400 	.word	0x40005400
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <MX_TIM5_Init+0xa8>)
 80006c0:	4a21      	ldr	r2, [pc, #132]	@ (8000748 <MX_TIM5_Init+0xac>)
 80006c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <MX_TIM5_Init+0xa8>)
 80006c6:	2253      	movs	r2, #83	@ 0x53
 80006c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <MX_TIM5_Init+0xa8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <MX_TIM5_Init+0xa8>)
 80006d2:	2263      	movs	r2, #99	@ 0x63
 80006d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_TIM5_Init+0xa8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006dc:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_TIM5_Init+0xa8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80006e2:	4818      	ldr	r0, [pc, #96]	@ (8000744 <MX_TIM5_Init+0xa8>)
 80006e4:	f003 f9ba 	bl	8003a5c <HAL_TIM_PWM_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80006ee:	f000 f89f 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	4619      	mov	r1, r3
 8000700:	4810      	ldr	r0, [pc, #64]	@ (8000744 <MX_TIM5_Init+0xa8>)
 8000702:	f003 fe07 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800070c:	f000 f890 	bl	8000830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000710:	2360      	movs	r3, #96	@ 0x60
 8000712:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	4619      	mov	r1, r3
 8000726:	4807      	ldr	r0, [pc, #28]	@ (8000744 <MX_TIM5_Init+0xa8>)
 8000728:	f003 fab0 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000732:	f000 f87d 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000736:	4803      	ldr	r0, [pc, #12]	@ (8000744 <MX_TIM5_Init+0xa8>)
 8000738:	f000 fb5c 	bl	8000df4 <HAL_TIM_MspPostInit>

}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	@ 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000d8 	.word	0x200000d8
 8000748:	40000c00 	.word	0x40000c00

0800074c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_DMA_Init+0x3c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a0b      	ldr	r2, [pc, #44]	@ (8000788 <MX_DMA_Init+0x3c>)
 800075c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_DMA_Init+0x3c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	200d      	movs	r0, #13
 8000774:	f000 fe03 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000778:	200d      	movs	r0, #13
 800077a:	f000 fe1c 	bl	80013b6 <HAL_NVIC_EnableIRQ>

}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <MX_GPIO_Init+0x9c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000828 <MX_GPIO_Init+0x9c>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <MX_GPIO_Init+0x9c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_GPIO_Init+0x9c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a18      	ldr	r2, [pc, #96]	@ (8000828 <MX_GPIO_Init+0x9c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_GPIO_Init+0x9c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_GPIO_Init+0x9c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a11      	ldr	r2, [pc, #68]	@ (8000828 <MX_GPIO_Init+0x9c>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_GPIO_Init+0x9c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007fc:	480b      	ldr	r0, [pc, #44]	@ (800082c <MX_GPIO_Init+0xa0>)
 80007fe:	f001 fa73 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Direction_Pin */
  GPIO_InitStruct.Pin = Direction_Pin;
 8000802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Direction_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_GPIO_Init+0xa0>)
 800081c:	f001 f8d0 	bl	80019c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40020400 	.word	0x40020400

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <mpu6050_init>:
#include <stdio.h>
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;

void mpu6050_init(){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDR, 1, 100);
 8000842:	2364      	movs	r3, #100	@ 0x64
 8000844:	2201      	movs	r2, #1
 8000846:	21d0      	movs	r1, #208	@ 0xd0
 8000848:	4826      	ldr	r0, [pc, #152]	@ (80008e4 <mpu6050_init+0xa8>)
 800084a:	f001 fed7 	bl	80025fc <HAL_I2C_IsDeviceReady>
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK) {
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d13e      	bne.n	80008d6 <mpu6050_init+0x9a>
			printf("mpu6050 is ready \n");
 8000858:	4823      	ldr	r0, [pc, #140]	@ (80008e8 <mpu6050_init+0xac>)
 800085a:	f003 feef 	bl	800463c <puts>
			printf("mpu6050 configuration... \n");
 800085e:	4823      	ldr	r0, [pc, #140]	@ (80008ec <mpu6050_init+0xb0>)
 8000860:	f003 feec 	bl	800463c <puts>

			uint8_t data;

			/* power management register 0X6B must be all 0s to wake the sensor up */
			data = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 100);
 8000868:	2364      	movs	r3, #100	@ 0x64
 800086a:	9302      	str	r3, [sp, #8]
 800086c:	2301      	movs	r3, #1
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	1dbb      	adds	r3, r7, #6
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2301      	movs	r3, #1
 8000876:	226b      	movs	r2, #107	@ 0x6b
 8000878:	21d0      	movs	r1, #208	@ 0xd0
 800087a:	481a      	ldr	r0, [pc, #104]	@ (80008e4 <mpu6050_init+0xa8>)
 800087c:	f001 fb92 	bl	8001fa4 <HAL_I2C_Mem_Write>

			/* Set DATA RATE of 1KHz by writing SMPLRT_DIV register */
			data = 0x07;
 8000880:	2307      	movs	r3, #7
 8000882:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 100);
 8000884:	2364      	movs	r3, #100	@ 0x64
 8000886:	9302      	str	r3, [sp, #8]
 8000888:	2301      	movs	r3, #1
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	1dbb      	adds	r3, r7, #6
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	2219      	movs	r2, #25
 8000894:	21d0      	movs	r1, #208	@ 0xd0
 8000896:	4813      	ldr	r0, [pc, #76]	@ (80008e4 <mpu6050_init+0xa8>)
 8000898:	f001 fb84 	bl	8001fa4 <HAL_I2C_Mem_Write>

			/*  Set accelerometer configuration in ACCEL_CONFIG Register */
			/* XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g */
			data = FS_ACC_2G;
 800089c:	2300      	movs	r3, #0
 800089e:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 100);
 80008a0:	2364      	movs	r3, #100	@ 0x64
 80008a2:	9302      	str	r3, [sp, #8]
 80008a4:	2301      	movs	r3, #1
 80008a6:	9301      	str	r3, [sp, #4]
 80008a8:	1dbb      	adds	r3, r7, #6
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2301      	movs	r3, #1
 80008ae:	221c      	movs	r2, #28
 80008b0:	21d0      	movs	r1, #208	@ 0xd0
 80008b2:	480c      	ldr	r0, [pc, #48]	@ (80008e4 <mpu6050_init+0xa8>)
 80008b4:	f001 fb76 	bl	8001fa4 <HAL_I2C_Mem_Write>

			/* Set Gyroscope configuration in GYRO_CONFIG Register */
			/* XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 deg/s */
			data = FS_GYRO_250;
 80008b8:	2300      	movs	r3, #0
 80008ba:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 100);
 80008bc:	2364      	movs	r3, #100	@ 0x64
 80008be:	9302      	str	r3, [sp, #8]
 80008c0:	2301      	movs	r3, #1
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	1dbb      	adds	r3, r7, #6
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2301      	movs	r3, #1
 80008ca:	221b      	movs	r2, #27
 80008cc:	21d0      	movs	r1, #208	@ 0xd0
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <mpu6050_init+0xa8>)
 80008d0:	f001 fb68 	bl	8001fa4 <HAL_I2C_Mem_Write>
			//return HAL_OK;
		} else {
			printf("mpu6050 error, check connection cables \n");
			//return HAL_ERROR;
		}
}
 80008d4:	e002      	b.n	80008dc <mpu6050_init+0xa0>
			printf("mpu6050 error, check connection cables \n");
 80008d6:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <mpu6050_init+0xb4>)
 80008d8:	f003 feb0 	bl	800463c <puts>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000084 	.word	0x20000084
 80008e8:	08004d7c 	.word	0x08004d7c
 80008ec:	08004d90 	.word	0x08004d90
 80008f0:	08004dac 	.word	0x08004dac

080008f4 <mpu6050_accx>:

/* Gyroscope reading MPU6050 */
short mpu6050_accx(){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af04      	add	r7, sp, #16
	uint8_t buffer[14];
	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 80008fa:	23c8      	movs	r3, #200	@ 0xc8
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	230e      	movs	r3, #14
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	463b      	mov	r3, r7
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2301      	movs	r3, #1
 8000908:	223b      	movs	r2, #59	@ 0x3b
 800090a:	21d0      	movs	r1, #208	@ 0xd0
 800090c:	4807      	ldr	r0, [pc, #28]	@ (800092c <mpu6050_accx+0x38>)
 800090e:	f001 fc43 	bl	8002198 <HAL_I2C_Mem_Read>
	short imu_data = buffer[0] << 8  | buffer[1];
 8000912:	783b      	ldrb	r3, [r7, #0]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21a      	sxth	r2, r3
 8000918:	787b      	ldrb	r3, [r7, #1]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	81fb      	strh	r3, [r7, #14]
	return imu_data;
 8000920:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000084 	.word	0x20000084

08000930 <mpu6050_accy>:

short mpu6050_accy(){
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af04      	add	r7, sp, #16
	uint8_t buffer[14];
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 8000936:	23c8      	movs	r3, #200	@ 0xc8
 8000938:	9302      	str	r3, [sp, #8]
 800093a:	230e      	movs	r3, #14
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	463b      	mov	r3, r7
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	223b      	movs	r2, #59	@ 0x3b
 8000946:	21d0      	movs	r1, #208	@ 0xd0
 8000948:	4807      	ldr	r0, [pc, #28]	@ (8000968 <mpu6050_accy+0x38>)
 800094a:	f001 fc25 	bl	8002198 <HAL_I2C_Mem_Read>
		short imu_data = buffer[2] << 8  | buffer[3];
 800094e:	78bb      	ldrb	r3, [r7, #2]
 8000950:	021b      	lsls	r3, r3, #8
 8000952:	b21a      	sxth	r2, r3
 8000954:	78fb      	ldrb	r3, [r7, #3]
 8000956:	b21b      	sxth	r3, r3
 8000958:	4313      	orrs	r3, r2
 800095a:	81fb      	strh	r3, [r7, #14]
		return imu_data;
 800095c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000084 	.word	0x20000084

0800096c <mpu6050_accz>:

short mpu6050_accz(){
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af04      	add	r7, sp, #16
	uint8_t buffer[14];
		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 8000972:	23c8      	movs	r3, #200	@ 0xc8
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	230e      	movs	r3, #14
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	463b      	mov	r3, r7
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	223b      	movs	r2, #59	@ 0x3b
 8000982:	21d0      	movs	r1, #208	@ 0xd0
 8000984:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <mpu6050_accz+0x38>)
 8000986:	f001 fc07 	bl	8002198 <HAL_I2C_Mem_Read>
		short imu_data = buffer[4] << 8  | buffer[5];
 800098a:	793b      	ldrb	r3, [r7, #4]
 800098c:	021b      	lsls	r3, r3, #8
 800098e:	b21a      	sxth	r2, r3
 8000990:	797b      	ldrb	r3, [r7, #5]
 8000992:	b21b      	sxth	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	81fb      	strh	r3, [r7, #14]
		return imu_data;
 8000998:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000084 	.word	0x20000084

080009a8 <mpu6050_gyrox>:

/* Accelerometer reading MPU6050 */
short mpu6050_gyrox(){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af04      	add	r7, sp, #16
	uint8_t buffer[14];
	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 80009ae:	23c8      	movs	r3, #200	@ 0xc8
 80009b0:	9302      	str	r3, [sp, #8]
 80009b2:	230e      	movs	r3, #14
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	463b      	mov	r3, r7
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2301      	movs	r3, #1
 80009bc:	223b      	movs	r2, #59	@ 0x3b
 80009be:	21d0      	movs	r1, #208	@ 0xd0
 80009c0:	4807      	ldr	r0, [pc, #28]	@ (80009e0 <mpu6050_gyrox+0x38>)
 80009c2:	f001 fbe9 	bl	8002198 <HAL_I2C_Mem_Read>
	short imu_data = buffer[6] << 8  | buffer[7];
 80009c6:	79bb      	ldrb	r3, [r7, #6]
 80009c8:	021b      	lsls	r3, r3, #8
 80009ca:	b21a      	sxth	r2, r3
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	81fb      	strh	r3, [r7, #14]
	return imu_data;
 80009d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000084 	.word	0x20000084

080009e4 <mpu6050_gyroy>:

short mpu6050_gyroy(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af04      	add	r7, sp, #16
	uint8_t buffer[14];
	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 80009ea:	23c8      	movs	r3, #200	@ 0xc8
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	230e      	movs	r3, #14
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	463b      	mov	r3, r7
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2301      	movs	r3, #1
 80009f8:	223b      	movs	r2, #59	@ 0x3b
 80009fa:	21d0      	movs	r1, #208	@ 0xd0
 80009fc:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <mpu6050_gyroy+0x38>)
 80009fe:	f001 fbcb 	bl	8002198 <HAL_I2C_Mem_Read>
	short imu_data = buffer[8] << 8  | buffer[9];
 8000a02:	7a3b      	ldrb	r3, [r7, #8]
 8000a04:	021b      	lsls	r3, r3, #8
 8000a06:	b21a      	sxth	r2, r3
 8000a08:	7a7b      	ldrb	r3, [r7, #9]
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	81fb      	strh	r3, [r7, #14]
	return imu_data;
 8000a10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000084 	.word	0x20000084

08000a20 <mpu6050_gyroz>:

short mpu6050_gyroz(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af04      	add	r7, sp, #16
	uint8_t buffer[14];
	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 8000a26:	23c8      	movs	r3, #200	@ 0xc8
 8000a28:	9302      	str	r3, [sp, #8]
 8000a2a:	230e      	movs	r3, #14
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	463b      	mov	r3, r7
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2301      	movs	r3, #1
 8000a34:	223b      	movs	r2, #59	@ 0x3b
 8000a36:	21d0      	movs	r1, #208	@ 0xd0
 8000a38:	4807      	ldr	r0, [pc, #28]	@ (8000a58 <mpu6050_gyroz+0x38>)
 8000a3a:	f001 fbad 	bl	8002198 <HAL_I2C_Mem_Read>
	short imu_data = buffer[10] << 8  | buffer[11];
 8000a3e:	7abb      	ldrb	r3, [r7, #10]
 8000a40:	021b      	lsls	r3, r3, #8
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	7afb      	ldrb	r3, [r7, #11]
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	81fb      	strh	r3, [r7, #14]
	return imu_data;
 8000a4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000084 	.word	0x20000084

08000a5c <nidec_h24_init>:
static  uint16_t direction_pin;
static  GPIO_TypeDef *direction_port;

/*Init the motor*/

void nidec_h24_init(uint16_t DIRECTION_Pin, GPIO_TypeDef *DIRECTION_GPIO_Port){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b090      	sub	sp, #64	@ 0x40
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	80fb      	strh	r3, [r7, #6]

    GPIO_InitTypeDef GPIO_InitStruct = {0};  // Declare the GPIO init struct
 8000a68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

    if (DIRECTION_GPIO_Port == GPIOA) {
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8000bf4 <nidec_h24_init+0x198>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d10e      	bne.n	8000a9e <nidec_h24_init+0x42>
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a84:	4b5c      	ldr	r3, [pc, #368]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a88:	4a5b      	ldr	r2, [pc, #364]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a90:	4b59      	ldr	r3, [pc, #356]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a9c:	e083      	b.n	8000ba6 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOB) {
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	4a56      	ldr	r2, [pc, #344]	@ (8000bfc <nidec_h24_init+0x1a0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d10e      	bne.n	8000ac4 <nidec_h24_init+0x68>
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aaa:	4b53      	ldr	r3, [pc, #332]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a52      	ldr	r2, [pc, #328]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b50      	ldr	r3, [pc, #320]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	e070      	b.n	8000ba6 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOC) {
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	4a4e      	ldr	r2, [pc, #312]	@ (8000c00 <nidec_h24_init+0x1a4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d10e      	bne.n	8000aea <nidec_h24_init+0x8e>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
 8000ad0:	4b49      	ldr	r3, [pc, #292]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad4:	4a48      	ldr	r2, [pc, #288]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8000adc:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	e05d      	b.n	8000ba6 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOD) {
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	4a45      	ldr	r2, [pc, #276]	@ (8000c04 <nidec_h24_init+0x1a8>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d10e      	bne.n	8000b10 <nidec_h24_init+0xb4>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
 8000af6:	4b40      	ldr	r3, [pc, #256]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a3f      	ldr	r2, [pc, #252]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b3d      	ldr	r3, [pc, #244]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	e04a      	b.n	8000ba6 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOE) {
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	4a3d      	ldr	r2, [pc, #244]	@ (8000c08 <nidec_h24_init+0x1ac>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d10e      	bne.n	8000b36 <nidec_h24_init+0xda>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
 8000b1c:	4b36      	ldr	r3, [pc, #216]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b20:	4a35      	ldr	r2, [pc, #212]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b28:	4b33      	ldr	r3, [pc, #204]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	e037      	b.n	8000ba6 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOF) {
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	4a34      	ldr	r2, [pc, #208]	@ (8000c0c <nidec_h24_init+0x1b0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d10e      	bne.n	8000b5c <nidec_h24_init+0x100>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a2c      	ldr	r2, [pc, #176]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	e024      	b.n	8000ba6 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOG) {
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c10 <nidec_h24_init+0x1b4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d10e      	bne.n	8000b82 <nidec_h24_init+0x126>
        __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	4a22      	ldr	r2, [pc, #136]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b74:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	e011      	b.n	8000ba6 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOH) {
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	4a23      	ldr	r2, [pc, #140]	@ (8000c14 <nidec_h24_init+0x1b8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d10d      	bne.n	8000ba6 <nidec_h24_init+0x14a>
        __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a19      	ldr	r2, [pc, #100]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <nidec_h24_init+0x19c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    }

    direction_pin = DIRECTION_Pin;
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c18 <nidec_h24_init+0x1bc>)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	8013      	strh	r3, [r2, #0]
    direction_port = DIRECTION_GPIO_Port;
 8000bac:	4a1b      	ldr	r2, [pc, #108]	@ (8000c1c <nidec_h24_init+0x1c0>)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	6013      	str	r3, [r2, #0]

	/*Configure GPIO pin : Direction_Pin */
	GPIO_InitStruct.Pin = DIRECTION_Pin;
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	6838      	ldr	r0, [r7, #0]
 8000bca:	f000 fef9 	bl	80019c0 <HAL_GPIO_Init>

	// Set the pin to low initially
	HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, GPIO_PIN_RESET);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	6838      	ldr	r0, [r7, #0]
 8000bd6:	f001 f887 	bl	8001ce8 <HAL_GPIO_WritePin>

	// Start PWM on the specified timer and channel
	TIM5->CCR1 = 0;
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <nidec_h24_init+0x1c4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim5, Channel);
 8000be0:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <nidec_h24_init+0x1c8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <nidec_h24_init+0x1cc>)
 8000be8:	f002 ff88 	bl	8003afc <HAL_TIM_PWM_Start>
}
 8000bec:	bf00      	nop
 8000bee:	3740      	adds	r7, #64	@ 0x40
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020c00 	.word	0x40020c00
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40021400 	.word	0x40021400
 8000c10:	40021800 	.word	0x40021800
 8000c14:	40021c00 	.word	0x40021c00
 8000c18:	20000184 	.word	0x20000184
 8000c1c:	20000188 	.word	0x20000188
 8000c20:	40000c00 	.word	0x40000c00
 8000c24:	20000180 	.word	0x20000180
 8000c28:	200000d8 	.word	0x200000d8

08000c2c <nidec_h24_Move>:

void nidec_h24_Move(uint32_t dutyCycle, uint8_t dir){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	70fb      	strb	r3, [r7, #3]
	// Validate dutyCycle to be within 0 - 100%
    if (dutyCycle > 100) dutyCycle = 100;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b64      	cmp	r3, #100	@ 0x64
 8000c3c:	d901      	bls.n	8000c42 <nidec_h24_Move+0x16>
 8000c3e:	2364      	movs	r3, #100	@ 0x64
 8000c40:	607b      	str	r3, [r7, #4]

    // Calculate the compare value
    //uint32_t ccr = (uint16_t)(dutyCycle * (float)(htim5.Instance->ARR + 1))/100;

    // Set the PWM duty cycle
    TIM5->CCR1 = dutyCycle;
 8000c42:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <nidec_h24_Move+0x34>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6353      	str	r3, [r2, #52]	@ 0x34

	// Set direction motor
	HAL_GPIO_WritePin(direction_port, direction_pin, dir);
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <nidec_h24_Move+0x38>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a06      	ldr	r2, [pc, #24]	@ (8000c68 <nidec_h24_Move+0x3c>)
 8000c4e:	8811      	ldrh	r1, [r2, #0]
 8000c50:	78fa      	ldrb	r2, [r7, #3]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 f848 	bl	8001ce8 <HAL_GPIO_WritePin>

    // Generate an update event to reload the value immediately
    //htim5.Instance->EGR = TIM_EGR_UG;
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40000c00 	.word	0x40000c00
 8000c64:	20000188 	.word	0x20000188
 8000c68:	20000184 	.word	0x20000184

08000c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	@ (8000d40 <HAL_I2C_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <HAL_I2C_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a17      	ldr	r2, [pc, #92]	@ (8000d44 <HAL_I2C_MspInit+0x88>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_I2C_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cfa:	23c0      	movs	r3, #192	@ 0xc0
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfe:	2312      	movs	r3, #18
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <HAL_I2C_MspInit+0x8c>)
 8000d16:	f000 fe53 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <HAL_I2C_MspInit+0x88>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	4a08      	ldr	r2, [pc, #32]	@ (8000d44 <HAL_I2C_MspInit+0x88>)
 8000d24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_I2C_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	@ 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40005400 	.word	0x40005400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020400 	.word	0x40020400

08000d4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a22      	ldr	r2, [pc, #136]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x98>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d13d      	bne.n	8000dda <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b21      	ldr	r3, [pc, #132]	@ (8000de8 <HAL_TIM_PWM_MspInit+0x9c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a20      	ldr	r2, [pc, #128]	@ (8000de8 <HAL_TIM_PWM_MspInit+0x9c>)
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <HAL_TIM_PWM_MspInit+0x9c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000df0 <HAL_TIM_PWM_MspInit+0xa4>)
 8000d7e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000d82:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000d86:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d88:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000d8a:	2240      	movs	r2, #64	@ 0x40
 8000d8c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000d96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d9a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000d9e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000da2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000da6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000daa:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8000dbe:	480b      	ldr	r0, [pc, #44]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000dc0:	f000 fb14 	bl	80013ec <HAL_DMA_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8000dca:	f7ff fd31 	bl	8000830 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000dd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8000dd4:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <HAL_TIM_PWM_MspInit+0xa0>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40000c00 	.word	0x40000c00
 8000de8:	40023800 	.word	0x40023800
 8000dec:	20000120 	.word	0x20000120
 8000df0:	40026040 	.word	0x40026040

08000df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <HAL_TIM_MspPostInit+0x68>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d11d      	bne.n	8000e52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <HAL_TIM_MspPostInit+0x6c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a10      	ldr	r2, [pc, #64]	@ (8000e60 <HAL_TIM_MspPostInit+0x6c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_TIM_MspPostInit+0x6c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e32:	2301      	movs	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <HAL_TIM_MspPostInit+0x70>)
 8000e4e:	f000 fdb7 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40000c00 	.word	0x40000c00
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebe:	f000 f93f 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <DMA1_Stream2_IRQHandler+0x10>)
 8000ece:	f000 fb3b 	bl	8001548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000120 	.word	0x20000120

08000edc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e00a      	b.n	8000f04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eee:	f3af 8000 	nop.w
 8000ef2:	4601      	mov	r1, r0
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	b2ca      	uxtb	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbf0      	blt.n	8000eee <_read+0x12>
  }

  return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	e009      	b.n	8000f3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf1      	blt.n	8000f28 <_write+0x12>
  }
  return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_close>:

int _close(int file)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f76:	605a      	str	r2, [r3, #4]
  return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_isatty>:

int _isatty(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	@ (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f003 fc56 	bl	8004898 <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	@ (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20020000 	.word	0x20020000
 8001018:	00000400 	.word	0x00000400
 800101c:	2000018c 	.word	0x2000018c
 8001020:	200002e0 	.word	0x200002e0

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001080 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800104c:	f7ff ffea 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	@ (8001088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	@ (800108c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	@ (8001094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001076:	f003 fc15 	bl	80048a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fa3b 	bl	80004f4 <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800108c:	08004e04 	.word	0x08004e04
  ldr r2, =_sbss
 8001090:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001094:	200002e0 	.word	0x200002e0

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f94f 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fdcc 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f967 	bl	80013d2 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f92f 	bl	800137e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000
 8001138:	20000008 	.word	0x20000008
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008
 8001164:	20000190 	.word	0x20000190

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000190 	.word	0x20000190

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	@ (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	@ 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff8e 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff29 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff3e 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff8e 	bl	80012bc <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5d 	bl	8001268 <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff31 	bl	800122c <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa2 	bl	8001324 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff feb6 	bl	8001168 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e099      	b.n	800153c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001428:	e00f      	b.n	800144a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800142a:	f7ff fe9d 	bl	8001168 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b05      	cmp	r3, #5
 8001436:	d908      	bls.n	800144a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2220      	movs	r2, #32
 800143c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e078      	b.n	800153c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1e8      	bne.n	800142a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	4b38      	ldr	r3, [pc, #224]	@ (8001544 <HAL_DMA_Init+0x158>)
 8001464:	4013      	ands	r3, r2
 8001466:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4313      	orrs	r3, r2
 800149a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d107      	bne.n	80014b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ac:	4313      	orrs	r3, r2
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f023 0307 	bic.w	r3, r3, #7
 80014ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d117      	bne.n	800150e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00e      	beq.n	800150e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f9e9 	bl	80018c8 <DMA_CheckFifoParam>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2240      	movs	r2, #64	@ 0x40
 8001500:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800150a:	2301      	movs	r3, #1
 800150c:	e016      	b.n	800153c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f9a0 	bl	800185c <DMA_CalcBaseAndBitshift>
 800151c:	4603      	mov	r3, r0
 800151e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001524:	223f      	movs	r2, #63	@ 0x3f
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	f010803f 	.word	0xf010803f

08001548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001554:	4b8e      	ldr	r3, [pc, #568]	@ (8001790 <HAL_DMA_IRQHandler+0x248>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a8e      	ldr	r2, [pc, #568]	@ (8001794 <HAL_DMA_IRQHandler+0x24c>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0a9b      	lsrs	r3, r3, #10
 8001560:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001566:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001572:	2208      	movs	r2, #8
 8001574:	409a      	lsls	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d01a      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0204 	bic.w	r2, r2, #4
 800159a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a0:	2208      	movs	r2, #8
 80015a2:	409a      	lsls	r2, r3
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ac:	f043 0201 	orr.w	r2, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b8:	2201      	movs	r2, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4013      	ands	r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d012      	beq.n	80015ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d6:	2201      	movs	r2, #1
 80015d8:	409a      	lsls	r2, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	f043 0202 	orr.w	r2, r3, #2
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ee:	2204      	movs	r2, #4
 80015f0:	409a      	lsls	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d012      	beq.n	8001620 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00b      	beq.n	8001620 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160c:	2204      	movs	r2, #4
 800160e:	409a      	lsls	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001618:	f043 0204 	orr.w	r2, r3, #4
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001624:	2210      	movs	r2, #16
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d043      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d03c      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001642:	2210      	movs	r2, #16
 8001644:	409a      	lsls	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d018      	beq.n	800168a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d108      	bne.n	8001678 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	2b00      	cmp	r3, #0
 800166c:	d024      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	4798      	blx	r3
 8001676:	e01f      	b.n	80016b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01b      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	4798      	blx	r3
 8001688:	e016      	b.n	80016b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d107      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0208 	bic.w	r2, r2, #8
 80016a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016bc:	2220      	movs	r2, #32
 80016be:	409a      	lsls	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 808f 	beq.w	80017e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8087 	beq.w	80017e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016de:	2220      	movs	r2, #32
 80016e0:	409a      	lsls	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d136      	bne.n	8001760 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0216 	bic.w	r2, r2, #22
 8001700:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001710:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	d103      	bne.n	8001722 <HAL_DMA_IRQHandler+0x1da>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0208 	bic.w	r2, r2, #8
 8001730:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001736:	223f      	movs	r2, #63	@ 0x3f
 8001738:	409a      	lsls	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001752:	2b00      	cmp	r3, #0
 8001754:	d07e      	beq.n	8001854 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
        }
        return;
 800175e:	e079      	b.n	8001854 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d01d      	beq.n	80017aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10d      	bne.n	8001798 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001780:	2b00      	cmp	r3, #0
 8001782:	d031      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	4798      	blx	r3
 800178c:	e02c      	b.n	80017e8 <HAL_DMA_IRQHandler+0x2a0>
 800178e:	bf00      	nop
 8001790:	20000000 	.word	0x20000000
 8001794:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800179c:	2b00      	cmp	r3, #0
 800179e:	d023      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
 80017a8:	e01e      	b.n	80017e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10f      	bne.n	80017d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0210 	bic.w	r2, r2, #16
 80017c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d032      	beq.n	8001856 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d022      	beq.n	8001842 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2205      	movs	r2, #5
 8001800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	3301      	adds	r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	429a      	cmp	r2, r3
 800181e:	d307      	bcc.n	8001830 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f2      	bne.n	8001814 <HAL_DMA_IRQHandler+0x2cc>
 800182e:	e000      	b.n	8001832 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001830:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
 8001852:	e000      	b.n	8001856 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001854:	bf00      	nop
    }
  }
}
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	3b10      	subs	r3, #16
 800186c:	4a14      	ldr	r2, [pc, #80]	@ (80018c0 <DMA_CalcBaseAndBitshift+0x64>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001876:	4a13      	ldr	r2, [pc, #76]	@ (80018c4 <DMA_CalcBaseAndBitshift+0x68>)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	d909      	bls.n	800189e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	1d1a      	adds	r2, r3, #4
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	659a      	str	r2, [r3, #88]	@ 0x58
 800189c:	e007      	b.n	80018ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018a6:	f023 0303 	bic.w	r3, r3, #3
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	aaaaaaab 	.word	0xaaaaaaab
 80018c4:	08004dec 	.word	0x08004dec

080018c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d11f      	bne.n	8001922 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d856      	bhi.n	8001996 <DMA_CheckFifoParam+0xce>
 80018e8:	a201      	add	r2, pc, #4	@ (adr r2, 80018f0 <DMA_CheckFifoParam+0x28>)
 80018ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ee:	bf00      	nop
 80018f0:	08001901 	.word	0x08001901
 80018f4:	08001913 	.word	0x08001913
 80018f8:	08001901 	.word	0x08001901
 80018fc:	08001997 	.word	0x08001997
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d046      	beq.n	800199a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001910:	e043      	b.n	800199a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001916:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800191a:	d140      	bne.n	800199e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001920:	e03d      	b.n	800199e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800192a:	d121      	bne.n	8001970 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d837      	bhi.n	80019a2 <DMA_CheckFifoParam+0xda>
 8001932:	a201      	add	r2, pc, #4	@ (adr r2, 8001938 <DMA_CheckFifoParam+0x70>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	08001949 	.word	0x08001949
 800193c:	0800194f 	.word	0x0800194f
 8001940:	08001949 	.word	0x08001949
 8001944:	08001961 	.word	0x08001961
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
      break;
 800194c:	e030      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001952:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d025      	beq.n	80019a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800195e:	e022      	b.n	80019a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001964:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001968:	d11f      	bne.n	80019aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800196e:	e01c      	b.n	80019aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d903      	bls.n	800197e <DMA_CheckFifoParam+0xb6>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d003      	beq.n	8001984 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800197c:	e018      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
      break;
 8001982:	e015      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001988:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00e      	beq.n	80019ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
      break;
 8001994:	e00b      	b.n	80019ae <DMA_CheckFifoParam+0xe6>
      break;
 8001996:	bf00      	nop
 8001998:	e00a      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;
 800199a:	bf00      	nop
 800199c:	e008      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;
 800199e:	bf00      	nop
 80019a0:	e006      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;
 80019a2:	bf00      	nop
 80019a4:	e004      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;
 80019a6:	bf00      	nop
 80019a8:	e002      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80019aa:	bf00      	nop
 80019ac:	e000      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ae:	bf00      	nop
    }
  } 
  
  return status; 
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	@ 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e165      	b.n	8001ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f040 8154 	bne.w	8001ca2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d005      	beq.n	8001a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d130      	bne.n	8001a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 0201 	and.w	r2, r3, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d017      	beq.n	8001ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d123      	bne.n	8001b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	69b9      	ldr	r1, [r7, #24]
 8001b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80ae 	beq.w	8001ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc0 <HAL_GPIO_Init+0x300>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	4a5c      	ldr	r2, [pc, #368]	@ (8001cc0 <HAL_GPIO_Init+0x300>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b56:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc0 <HAL_GPIO_Init+0x300>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b62:	4a58      	ldr	r2, [pc, #352]	@ (8001cc4 <HAL_GPIO_Init+0x304>)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4f      	ldr	r2, [pc, #316]	@ (8001cc8 <HAL_GPIO_Init+0x308>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d025      	beq.n	8001bda <HAL_GPIO_Init+0x21a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4e      	ldr	r2, [pc, #312]	@ (8001ccc <HAL_GPIO_Init+0x30c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01f      	beq.n	8001bd6 <HAL_GPIO_Init+0x216>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4d      	ldr	r2, [pc, #308]	@ (8001cd0 <HAL_GPIO_Init+0x310>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d019      	beq.n	8001bd2 <HAL_GPIO_Init+0x212>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd4 <HAL_GPIO_Init+0x314>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x20e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd8 <HAL_GPIO_Init+0x318>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x20a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4a      	ldr	r2, [pc, #296]	@ (8001cdc <HAL_GPIO_Init+0x31c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x206>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a49      	ldr	r2, [pc, #292]	@ (8001ce0 <HAL_GPIO_Init+0x320>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x202>
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	e00c      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	e00a      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4935      	ldr	r1, [pc, #212]	@ (8001cc4 <HAL_GPIO_Init+0x304>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce4 <HAL_GPIO_Init+0x324>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1e:	4a31      	ldr	r2, [pc, #196]	@ (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c24:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c48:	4a26      	ldr	r2, [pc, #152]	@ (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c72:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9c:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f ae96 	bls.w	80019dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3724      	adds	r7, #36	@ 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40021400 	.word	0x40021400
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d04:	e003      	b.n	8001d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	041a      	lsls	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	619a      	str	r2, [r3, #24]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e12b      	b.n	8001f86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe ffba 	bl	8000cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2224      	movs	r2, #36	@ 0x24
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d80:	f001 fa10 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 8001d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	4a81      	ldr	r2, [pc, #516]	@ (8001f90 <HAL_I2C_Init+0x274>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d807      	bhi.n	8001da0 <HAL_I2C_Init+0x84>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4a80      	ldr	r2, [pc, #512]	@ (8001f94 <HAL_I2C_Init+0x278>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	bf94      	ite	ls
 8001d98:	2301      	movls	r3, #1
 8001d9a:	2300      	movhi	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e006      	b.n	8001dae <HAL_I2C_Init+0x92>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a7d      	ldr	r2, [pc, #500]	@ (8001f98 <HAL_I2C_Init+0x27c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	bf94      	ite	ls
 8001da8:	2301      	movls	r3, #1
 8001daa:	2300      	movhi	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0e7      	b.n	8001f86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4a78      	ldr	r2, [pc, #480]	@ (8001f9c <HAL_I2C_Init+0x280>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0c9b      	lsrs	r3, r3, #18
 8001dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a6a      	ldr	r2, [pc, #424]	@ (8001f90 <HAL_I2C_Init+0x274>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d802      	bhi.n	8001df0 <HAL_I2C_Init+0xd4>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	3301      	adds	r3, #1
 8001dee:	e009      	b.n	8001e04 <HAL_I2C_Init+0xe8>
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	4a69      	ldr	r2, [pc, #420]	@ (8001fa0 <HAL_I2C_Init+0x284>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	099b      	lsrs	r3, r3, #6
 8001e02:	3301      	adds	r3, #1
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	495c      	ldr	r1, [pc, #368]	@ (8001f90 <HAL_I2C_Init+0x274>)
 8001e20:	428b      	cmp	r3, r1
 8001e22:	d819      	bhi.n	8001e58 <HAL_I2C_Init+0x13c>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e59      	subs	r1, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e32:	1c59      	adds	r1, r3, #1
 8001e34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e38:	400b      	ands	r3, r1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_I2C_Init+0x138>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1e59      	subs	r1, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e52:	e051      	b.n	8001ef8 <HAL_I2C_Init+0x1dc>
 8001e54:	2304      	movs	r3, #4
 8001e56:	e04f      	b.n	8001ef8 <HAL_I2C_Init+0x1dc>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d111      	bne.n	8001e84 <HAL_I2C_Init+0x168>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1e58      	subs	r0, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	440b      	add	r3, r1
 8001e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	e012      	b.n	8001eaa <HAL_I2C_Init+0x18e>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1e58      	subs	r0, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	0099      	lsls	r1, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Init+0x196>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e022      	b.n	8001ef8 <HAL_I2C_Init+0x1dc>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_I2C_Init+0x1bc>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1e58      	subs	r0, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	440b      	add	r3, r1
 8001ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ed6:	e00f      	b.n	8001ef8 <HAL_I2C_Init+0x1dc>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1e58      	subs	r0, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	0099      	lsls	r1, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	6809      	ldr	r1, [r1, #0]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6911      	ldr	r1, [r2, #16]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68d2      	ldr	r2, [r2, #12]
 8001f32:	4311      	orrs	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	000186a0 	.word	0x000186a0
 8001f94:	001e847f 	.word	0x001e847f
 8001f98:	003d08ff 	.word	0x003d08ff
 8001f9c:	431bde83 	.word	0x431bde83
 8001fa0:	10624dd3 	.word	0x10624dd3

08001fa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	4608      	mov	r0, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	817b      	strh	r3, [r7, #10]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	813b      	strh	r3, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fbe:	f7ff f8d3 	bl	8001168 <HAL_GetTick>
 8001fc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	f040 80d9 	bne.w	8002184 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2319      	movs	r3, #25
 8001fd8:	2201      	movs	r2, #1
 8001fda:	496d      	ldr	r1, [pc, #436]	@ (8002190 <HAL_I2C_Mem_Write+0x1ec>)
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fdb9 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e0cc      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2C_Mem_Write+0x56>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e0c5      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d007      	beq.n	8002020 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800202e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2221      	movs	r2, #33	@ 0x21
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2240      	movs	r2, #64	@ 0x40
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a3a      	ldr	r2, [r7, #32]
 800204a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002050:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a4d      	ldr	r2, [pc, #308]	@ (8002194 <HAL_I2C_Mem_Write+0x1f0>)
 8002060:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002062:	88f8      	ldrh	r0, [r7, #6]
 8002064:	893a      	ldrh	r2, [r7, #8]
 8002066:	8979      	ldrh	r1, [r7, #10]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	4603      	mov	r3, r0
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fbf0 	bl	8002858 <I2C_RequestMemoryWrite>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d052      	beq.n	8002124 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e081      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fe7e 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00d      	beq.n	80020ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	2b04      	cmp	r3, #4
 8002098:	d107      	bne.n	80020aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06b      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d11b      	bne.n	8002124 <HAL_I2C_Mem_Write+0x180>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d017      	beq.n	8002124 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1aa      	bne.n	8002082 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 fe71 	bl	8002e18 <I2C_WaitOnBTFFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00d      	beq.n	8002158 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	2b04      	cmp	r3, #4
 8002142:	d107      	bne.n	8002154 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002152:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e016      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	e000      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002184:	2302      	movs	r3, #2
  }
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	00100002 	.word	0x00100002
 8002194:	ffff0000 	.word	0xffff0000

08002198 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	@ 0x30
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	4608      	mov	r0, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	817b      	strh	r3, [r7, #10]
 80021aa:	460b      	mov	r3, r1
 80021ac:	813b      	strh	r3, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b2:	f7fe ffd9 	bl	8001168 <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	f040 8214 	bne.w	80025ee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2319      	movs	r3, #25
 80021cc:	2201      	movs	r2, #1
 80021ce:	497b      	ldr	r1, [pc, #492]	@ (80023bc <HAL_I2C_Mem_Read+0x224>)
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fcbf 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	e207      	b.n	80025f0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Mem_Read+0x56>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e200      	b.n	80025f0 <HAL_I2C_Mem_Read+0x458>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d007      	beq.n	8002214 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2222      	movs	r2, #34	@ 0x22
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2240      	movs	r2, #64	@ 0x40
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002244:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a5b      	ldr	r2, [pc, #364]	@ (80023c0 <HAL_I2C_Mem_Read+0x228>)
 8002254:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002256:	88f8      	ldrh	r0, [r7, #6]
 8002258:	893a      	ldrh	r2, [r7, #8]
 800225a:	8979      	ldrh	r1, [r7, #10]
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	4603      	mov	r3, r0
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fb8c 	bl	8002984 <I2C_RequestMemoryRead>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e1bc      	b.n	80025f0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800227a:	2b00      	cmp	r3, #0
 800227c:	d113      	bne.n	80022a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	623b      	str	r3, [r7, #32]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e190      	b.n	80025c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d11b      	bne.n	80022e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e170      	b.n	80025c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d11b      	bne.n	8002326 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800230c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	e150      	b.n	80025c8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800233c:	e144      	b.n	80025c8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002342:	2b03      	cmp	r3, #3
 8002344:	f200 80f1 	bhi.w	800252a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	2b01      	cmp	r3, #1
 800234e:	d123      	bne.n	8002398 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002352:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fda7 	bl	8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e145      	b.n	80025f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002396:	e117      	b.n	80025c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239c:	2b02      	cmp	r3, #2
 800239e:	d14e      	bne.n	800243e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a6:	2200      	movs	r2, #0
 80023a8:	4906      	ldr	r1, [pc, #24]	@ (80023c4 <HAL_I2C_Mem_Read+0x22c>)
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fbd2 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e11a      	b.n	80025f0 <HAL_I2C_Mem_Read+0x458>
 80023ba:	bf00      	nop
 80023bc:	00100002 	.word	0x00100002
 80023c0:	ffff0000 	.word	0xffff0000
 80023c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800243c:	e0c4      	b.n	80025c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002444:	2200      	movs	r2, #0
 8002446:	496c      	ldr	r1, [pc, #432]	@ (80025f8 <HAL_I2C_Mem_Read+0x460>)
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fb83 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0cb      	b.n	80025f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a0:	2200      	movs	r2, #0
 80024a2:	4955      	ldr	r1, [pc, #340]	@ (80025f8 <HAL_I2C_Mem_Read+0x460>)
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fb55 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e09d      	b.n	80025f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002528:	e04e      	b.n	80025c8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fcba 	bl	8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e058      	b.n	80025f0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b04      	cmp	r3, #4
 800257c:	d124      	bne.n	80025c8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002582:	2b03      	cmp	r3, #3
 8002584:	d107      	bne.n	8002596 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002594:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f47f aeb6 	bne.w	800233e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e000      	b.n	80025f0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
  }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3728      	adds	r7, #40	@ 0x28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	00010004 	.word	0x00010004

080025fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	@ 0x28
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	460b      	mov	r3, r1
 800260a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800260c:	f7fe fdac 	bl	8001168 <HAL_GetTick>
 8002610:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b20      	cmp	r3, #32
 8002620:	f040 8111 	bne.w	8002846 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2319      	movs	r3, #25
 800262a:	2201      	movs	r2, #1
 800262c:	4988      	ldr	r1, [pc, #544]	@ (8002850 <HAL_I2C_IsDeviceReady+0x254>)
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fa90 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800263a:	2302      	movs	r3, #2
 800263c:	e104      	b.n	8002848 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_I2C_IsDeviceReady+0x50>
 8002648:	2302      	movs	r3, #2
 800264a:	e0fd      	b.n	8002848 <HAL_I2C_IsDeviceReady+0x24c>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d007      	beq.n	8002672 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0201 	orr.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002680:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2224      	movs	r2, #36	@ 0x24
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a70      	ldr	r2, [pc, #448]	@ (8002854 <HAL_I2C_IsDeviceReady+0x258>)
 8002694:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa4e 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00d      	beq.n	80026da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026cc:	d103      	bne.n	80026d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0b6      	b.n	8002848 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026da:	897b      	ldrh	r3, [r7, #10]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026ea:	f7fe fd3d 	bl	8001168 <HAL_GetTick>
 80026ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002714:	bf0c      	ite	eq
 8002716:	2301      	moveq	r3, #1
 8002718:	2300      	movne	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800271e:	e025      	b.n	800276c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002720:	f7fe fd22 	bl	8001168 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d302      	bcc.n	8002736 <HAL_I2C_IsDeviceReady+0x13a>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d103      	bne.n	800273e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	22a0      	movs	r2, #160	@ 0xa0
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b02      	cmp	r3, #2
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2ba0      	cmp	r3, #160	@ 0xa0
 8002776:	d005      	beq.n	8002784 <HAL_I2C_IsDeviceReady+0x188>
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_I2C_IsDeviceReady+0x188>
 800277e:	7dbb      	ldrb	r3, [r7, #22]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0cd      	beq.n	8002720 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b02      	cmp	r3, #2
 8002798:	d129      	bne.n	80027ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2319      	movs	r3, #25
 80027c6:	2201      	movs	r2, #1
 80027c8:	4921      	ldr	r1, [pc, #132]	@ (8002850 <HAL_I2C_IsDeviceReady+0x254>)
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f9c2 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e036      	b.n	8002848 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e02c      	b.n	8002848 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002806:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2319      	movs	r3, #25
 800280e:	2201      	movs	r2, #1
 8002810:	490f      	ldr	r1, [pc, #60]	@ (8002850 <HAL_I2C_IsDeviceReady+0x254>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f99e 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e012      	b.n	8002848 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	3301      	adds	r3, #1
 8002826:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	f4ff af32 	bcc.w	8002696 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002846:	2302      	movs	r3, #2
  }
}
 8002848:	4618      	mov	r0, r3
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	00100002 	.word	0x00100002
 8002854:	ffff0000 	.word	0xffff0000

08002858 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	817b      	strh	r3, [r7, #10]
 800286a:	460b      	mov	r3, r1
 800286c:	813b      	strh	r3, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002880:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	2200      	movs	r2, #0
 800288a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f960 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a8:	d103      	bne.n	80028b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e05f      	b.n	8002976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028b6:	897b      	ldrh	r3, [r7, #10]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	6a3a      	ldr	r2, [r7, #32]
 80028ca:	492d      	ldr	r1, [pc, #180]	@ (8002980 <I2C_RequestMemoryWrite+0x128>)
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f9bb 	bl	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e04c      	b.n	8002976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f4:	6a39      	ldr	r1, [r7, #32]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fa46 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	2b04      	cmp	r3, #4
 8002908:	d107      	bne.n	800291a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002918:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e02b      	b.n	8002976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002924:	893b      	ldrh	r3, [r7, #8]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	611a      	str	r2, [r3, #16]
 800292e:	e021      	b.n	8002974 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002930:	893b      	ldrh	r3, [r7, #8]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	b29b      	uxth	r3, r3
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800293e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002940:	6a39      	ldr	r1, [r7, #32]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fa20 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00d      	beq.n	800296a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2b04      	cmp	r3, #4
 8002954:	d107      	bne.n	8002966 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002964:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e005      	b.n	8002976 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800296a:	893b      	ldrh	r3, [r7, #8]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	00010002 	.word	0x00010002

08002984 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	4608      	mov	r0, r1
 800298e:	4611      	mov	r1, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4603      	mov	r3, r0
 8002994:	817b      	strh	r3, [r7, #10]
 8002996:	460b      	mov	r3, r1
 8002998:	813b      	strh	r3, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f8c2 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e4:	d103      	bne.n	80029ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0aa      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	4952      	ldr	r1, [pc, #328]	@ (8002b50 <I2C_RequestMemoryRead+0x1cc>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f91d 	bl	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e097      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a30:	6a39      	ldr	r1, [r7, #32]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f9a8 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d107      	bne.n	8002a56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e076      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a60:	893b      	ldrh	r3, [r7, #8]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	e021      	b.n	8002ab0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7c:	6a39      	ldr	r1, [r7, #32]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f982 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d107      	bne.n	8002aa2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e050      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa6:	893b      	ldrh	r3, [r7, #8]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab2:	6a39      	ldr	r1, [r7, #32]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f967 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00d      	beq.n	8002adc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d107      	bne.n	8002ad8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e035      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f82b 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b12:	d103      	bne.n	8002b1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e013      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b20:	897b      	ldrh	r3, [r7, #10]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	6a3a      	ldr	r2, [r7, #32]
 8002b34:	4906      	ldr	r1, [pc, #24]	@ (8002b50 <I2C_RequestMemoryRead+0x1cc>)
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f886 	bl	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	00010002 	.word	0x00010002

08002b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b64:	e048      	b.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d044      	beq.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7fe fafb 	bl	8001168 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d139      	bne.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	0c1b      	lsrs	r3, r3, #16
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d10d      	bne.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	43da      	mvns	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	e00c      	b.n	8002bc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d116      	bne.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e023      	b.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10d      	bne.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	e00c      	b.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	43da      	mvns	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d093      	beq.n	8002b66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c56:	e071      	b.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c66:	d123      	bne.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e067      	b.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d041      	beq.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb8:	f7fe fa56 	bl	8001168 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d302      	bcc.n	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d136      	bne.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10c      	bne.n	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf14      	ite	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	2300      	moveq	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	e00b      	b.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e021      	b.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	0c1b      	lsrs	r3, r3, #16
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10c      	bne.n	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e00b      	b.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf14      	ite	ne
 8002d72:	2301      	movne	r3, #1
 8002d74:	2300      	moveq	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f47f af6d 	bne.w	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d94:	e034      	b.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f8e3 	bl	8002f62 <I2C_IsAcknowledgeFailed>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e034      	b.n	8002e10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d028      	beq.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7fe f9db 	bl	8001168 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d11d      	bne.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dce:	2b80      	cmp	r3, #128	@ 0x80
 8002dd0:	d016      	beq.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e007      	b.n	8002e10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0a:	2b80      	cmp	r3, #128	@ 0x80
 8002e0c:	d1c3      	bne.n	8002d96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e24:	e034      	b.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f89b 	bl	8002f62 <I2C_IsAcknowledgeFailed>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e034      	b.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d028      	beq.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3e:	f7fe f993 	bl	8001168 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d302      	bcc.n	8002e54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d11d      	bne.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d016      	beq.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e007      	b.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d1c3      	bne.n	8002e26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb4:	e049      	b.n	8002f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d119      	bne.n	8002ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0210 	mvn.w	r2, #16
 8002ecc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e030      	b.n	8002f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef8:	f7fe f936 	bl	8001168 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d302      	bcc.n	8002f0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d11d      	bne.n	8002f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b40      	cmp	r3, #64	@ 0x40
 8002f1a:	d016      	beq.n	8002f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f043 0220 	orr.w	r2, r3, #32
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e007      	b.n	8002f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f54:	2b40      	cmp	r3, #64	@ 0x40
 8002f56:	d1ae      	bne.n	8002eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f78:	d11b      	bne.n	8002fb2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	f043 0204 	orr.w	r2, r3, #4
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0cc      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b68      	ldr	r3, [pc, #416]	@ (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d90c      	bls.n	8002ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b65      	ldr	r3, [pc, #404]	@ (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b63      	ldr	r3, [pc, #396]	@ (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0b8      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d020      	beq.n	800304a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003014:	4b59      	ldr	r3, [pc, #356]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4a58      	ldr	r2, [pc, #352]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800301e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800302c:	4b53      	ldr	r3, [pc, #332]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4a52      	ldr	r2, [pc, #328]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003038:	4b50      	ldr	r3, [pc, #320]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	494d      	ldr	r1, [pc, #308]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d044      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b47      	ldr	r3, [pc, #284]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d119      	bne.n	800309e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e07f      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d003      	beq.n	800307e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307a:	2b03      	cmp	r3, #3
 800307c:	d107      	bne.n	800308e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307e:	4b3f      	ldr	r3, [pc, #252]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e06f      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308e:	4b3b      	ldr	r3, [pc, #236]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e067      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800309e:	4b37      	ldr	r3, [pc, #220]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f023 0203 	bic.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4934      	ldr	r1, [pc, #208]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b0:	f7fe f85a 	bl	8001168 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b8:	f7fe f856 	bl	8001168 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e04f      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ce:	4b2b      	ldr	r3, [pc, #172]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 020c 	and.w	r2, r3, #12
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	429a      	cmp	r2, r3
 80030de:	d1eb      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e0:	4b25      	ldr	r3, [pc, #148]	@ (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d20c      	bcs.n	8003108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b22      	ldr	r3, [pc, #136]	@ (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b20      	ldr	r3, [pc, #128]	@ (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e032      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003114:	4b19      	ldr	r3, [pc, #100]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4916      	ldr	r1, [pc, #88]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003132:	4b12      	ldr	r3, [pc, #72]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	490e      	ldr	r1, [pc, #56]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003146:	f000 f841 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800314a:	4602      	mov	r2, r0
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	490a      	ldr	r1, [pc, #40]	@ (8003180 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	5ccb      	ldrb	r3, [r1, r3]
 800315a:	fa22 f303 	lsr.w	r3, r2, r3
 800315e:	4a09      	ldr	r2, [pc, #36]	@ (8003184 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003162:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd ffba 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023c00 	.word	0x40023c00
 800317c:	40023800 	.word	0x40023800
 8003180:	08004dd4 	.word	0x08004dd4
 8003184:	20000000 	.word	0x20000000
 8003188:	20000004 	.word	0x20000004

0800318c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003190:	4b03      	ldr	r3, [pc, #12]	@ (80031a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000000 	.word	0x20000000

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031a8:	f7ff fff0 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0a9b      	lsrs	r3, r3, #10
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4903      	ldr	r1, [pc, #12]	@ (80031c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08004de4 	.word	0x08004de4

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d0:	b0a6      	sub	sp, #152	@ 0x98
 80031d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f2:	4bc8      	ldr	r3, [pc, #800]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x348>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	f200 817e 	bhi.w	80034fc <HAL_RCC_GetSysClockFreq+0x330>
 8003200:	a201      	add	r2, pc, #4	@ (adr r2, 8003208 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	0800323d 	.word	0x0800323d
 800320c:	080034fd 	.word	0x080034fd
 8003210:	080034fd 	.word	0x080034fd
 8003214:	080034fd 	.word	0x080034fd
 8003218:	08003245 	.word	0x08003245
 800321c:	080034fd 	.word	0x080034fd
 8003220:	080034fd 	.word	0x080034fd
 8003224:	080034fd 	.word	0x080034fd
 8003228:	0800324d 	.word	0x0800324d
 800322c:	080034fd 	.word	0x080034fd
 8003230:	080034fd 	.word	0x080034fd
 8003234:	080034fd 	.word	0x080034fd
 8003238:	080033b7 	.word	0x080033b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4bb6      	ldr	r3, [pc, #728]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x34c>)
 800323e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8003242:	e15f      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003244:	4bb5      	ldr	r3, [pc, #724]	@ (800351c <HAL_RCC_GetSysClockFreq+0x350>)
 8003246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800324a:	e15b      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800324c:	4bb1      	ldr	r3, [pc, #708]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x348>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003254:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003258:	4bae      	ldr	r3, [pc, #696]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x348>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d031      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003264:	4bab      	ldr	r3, [pc, #684]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x348>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	2200      	movs	r2, #0
 800326c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800326e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003270:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	663b      	str	r3, [r7, #96]	@ 0x60
 8003278:	2300      	movs	r3, #0
 800327a:	667b      	str	r3, [r7, #100]	@ 0x64
 800327c:	4ba7      	ldr	r3, [pc, #668]	@ (800351c <HAL_RCC_GetSysClockFreq+0x350>)
 800327e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003282:	462a      	mov	r2, r5
 8003284:	fb03 f202 	mul.w	r2, r3, r2
 8003288:	2300      	movs	r3, #0
 800328a:	4621      	mov	r1, r4
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	4aa2      	ldr	r2, [pc, #648]	@ (800351c <HAL_RCC_GetSysClockFreq+0x350>)
 8003294:	4621      	mov	r1, r4
 8003296:	fba1 1202 	umull	r1, r2, r1, r2
 800329a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800329c:	460a      	mov	r2, r1
 800329e:	67ba      	str	r2, [r7, #120]	@ 0x78
 80032a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80032a2:	4413      	add	r3, r2
 80032a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032aa:	2200      	movs	r2, #0
 80032ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80032b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80032b8:	f7fc ffa4 	bl	8000204 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4613      	mov	r3, r2
 80032c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032c6:	e064      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c8:	4b92      	ldr	r3, [pc, #584]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x348>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	2200      	movs	r2, #0
 80032d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80032d2:	657a      	str	r2, [r7, #84]	@ 0x54
 80032d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032dc:	2300      	movs	r3, #0
 80032de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032e0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80032e4:	4622      	mov	r2, r4
 80032e6:	462b      	mov	r3, r5
 80032e8:	f04f 0000 	mov.w	r0, #0
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	0159      	lsls	r1, r3, #5
 80032f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f6:	0150      	lsls	r0, r2, #5
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4621      	mov	r1, r4
 80032fe:	1a51      	subs	r1, r2, r1
 8003300:	6139      	str	r1, [r7, #16]
 8003302:	4629      	mov	r1, r5
 8003304:	eb63 0301 	sbc.w	r3, r3, r1
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003316:	4659      	mov	r1, fp
 8003318:	018b      	lsls	r3, r1, #6
 800331a:	4651      	mov	r1, sl
 800331c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003320:	4651      	mov	r1, sl
 8003322:	018a      	lsls	r2, r1, #6
 8003324:	4651      	mov	r1, sl
 8003326:	ebb2 0801 	subs.w	r8, r2, r1
 800332a:	4659      	mov	r1, fp
 800332c:	eb63 0901 	sbc.w	r9, r3, r1
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800333c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003340:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003344:	4690      	mov	r8, r2
 8003346:	4699      	mov	r9, r3
 8003348:	4623      	mov	r3, r4
 800334a:	eb18 0303 	adds.w	r3, r8, r3
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	462b      	mov	r3, r5
 8003352:	eb49 0303 	adc.w	r3, r9, r3
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003364:	4629      	mov	r1, r5
 8003366:	028b      	lsls	r3, r1, #10
 8003368:	4621      	mov	r1, r4
 800336a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800336e:	4621      	mov	r1, r4
 8003370:	028a      	lsls	r2, r1, #10
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800337a:	2200      	movs	r2, #0
 800337c:	643b      	str	r3, [r7, #64]	@ 0x40
 800337e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003380:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003384:	f7fc ff3e 	bl	8000204 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4613      	mov	r3, r2
 800338e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003392:	4b60      	ldr	r3, [pc, #384]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x348>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	3301      	adds	r3, #1
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80033a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80033b4:	e0a6      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b6:	4b57      	ldr	r3, [pc, #348]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x348>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c2:	4b54      	ldr	r3, [pc, #336]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x348>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d02a      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ce:	4b51      	ldr	r3, [pc, #324]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x348>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	2200      	movs	r2, #0
 80033d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033e0:	2100      	movs	r1, #0
 80033e2:	4b4e      	ldr	r3, [pc, #312]	@ (800351c <HAL_RCC_GetSysClockFreq+0x350>)
 80033e4:	fb03 f201 	mul.w	r2, r3, r1
 80033e8:	2300      	movs	r3, #0
 80033ea:	fb00 f303 	mul.w	r3, r0, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	4a4a      	ldr	r2, [pc, #296]	@ (800351c <HAL_RCC_GetSysClockFreq+0x350>)
 80033f2:	fba0 1202 	umull	r1, r2, r0, r2
 80033f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80033f8:	460a      	mov	r2, r1
 80033fa:	673a      	str	r2, [r7, #112]	@ 0x70
 80033fc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80033fe:	4413      	add	r3, r2
 8003400:	677b      	str	r3, [r7, #116]	@ 0x74
 8003402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003406:	2200      	movs	r2, #0
 8003408:	633b      	str	r3, [r7, #48]	@ 0x30
 800340a:	637a      	str	r2, [r7, #52]	@ 0x34
 800340c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003410:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003414:	f7fc fef6 	bl	8000204 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003422:	e05b      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003424:	4b3b      	ldr	r3, [pc, #236]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x348>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	2200      	movs	r2, #0
 800342c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800342e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	623b      	str	r3, [r7, #32]
 8003438:	2300      	movs	r3, #0
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
 800343c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003440:	4642      	mov	r2, r8
 8003442:	464b      	mov	r3, r9
 8003444:	f04f 0000 	mov.w	r0, #0
 8003448:	f04f 0100 	mov.w	r1, #0
 800344c:	0159      	lsls	r1, r3, #5
 800344e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003452:	0150      	lsls	r0, r2, #5
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4641      	mov	r1, r8
 800345a:	ebb2 0a01 	subs.w	sl, r2, r1
 800345e:	4649      	mov	r1, r9
 8003460:	eb63 0b01 	sbc.w	fp, r3, r1
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003470:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003474:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003478:	ebb2 040a 	subs.w	r4, r2, sl
 800347c:	eb63 050b 	sbc.w	r5, r3, fp
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	00eb      	lsls	r3, r5, #3
 800348a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800348e:	00e2      	lsls	r2, r4, #3
 8003490:	4614      	mov	r4, r2
 8003492:	461d      	mov	r5, r3
 8003494:	4643      	mov	r3, r8
 8003496:	18e3      	adds	r3, r4, r3
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	464b      	mov	r3, r9
 800349c:	eb45 0303 	adc.w	r3, r5, r3
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ae:	4629      	mov	r1, r5
 80034b0:	028b      	lsls	r3, r1, #10
 80034b2:	4621      	mov	r1, r4
 80034b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034b8:	4621      	mov	r1, r4
 80034ba:	028a      	lsls	r2, r1, #10
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034c4:	2200      	movs	r2, #0
 80034c6:	61bb      	str	r3, [r7, #24]
 80034c8:	61fa      	str	r2, [r7, #28]
 80034ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ce:	f7fc fe99 	bl	8000204 <__aeabi_uldivmod>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4613      	mov	r3, r2
 80034d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x348>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	0f1b      	lsrs	r3, r3, #28
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80034ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80034fa:	e003      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034fc:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x34c>)
 80034fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003502:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003504:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003508:	4618      	mov	r0, r3
 800350a:	3798      	adds	r7, #152	@ 0x98
 800350c:	46bd      	mov	sp, r7
 800350e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	00f42400 	.word	0x00f42400
 800351c:	017d7840 	.word	0x017d7840

08003520 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e28d      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8083 	beq.w	8003646 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003540:	4b94      	ldr	r3, [pc, #592]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b04      	cmp	r3, #4
 800354a:	d019      	beq.n	8003580 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800354c:	4b91      	ldr	r3, [pc, #580]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003554:	2b08      	cmp	r3, #8
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003558:	4b8e      	ldr	r3, [pc, #568]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003564:	d00c      	beq.n	8003580 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003566:	4b8b      	ldr	r3, [pc, #556]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d112      	bne.n	8003598 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003572:	4b88      	ldr	r3, [pc, #544]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800357e:	d10b      	bne.n	8003598 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	4b84      	ldr	r3, [pc, #528]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d05b      	beq.n	8003644 <HAL_RCC_OscConfig+0x124>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d157      	bne.n	8003644 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e25a      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a0:	d106      	bne.n	80035b0 <HAL_RCC_OscConfig+0x90>
 80035a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7b      	ldr	r2, [pc, #492]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e01d      	b.n	80035ec <HAL_RCC_OscConfig+0xcc>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0xb4>
 80035ba:	4b76      	ldr	r3, [pc, #472]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a75      	ldr	r2, [pc, #468]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80035c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b73      	ldr	r3, [pc, #460]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a72      	ldr	r2, [pc, #456]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e00b      	b.n	80035ec <HAL_RCC_OscConfig+0xcc>
 80035d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80035da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80035e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fd fdb8 	bl	8001168 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fd fdb4 	bl	8001168 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	@ 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e21f      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b61      	ldr	r3, [pc, #388]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0xdc>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fd fda4 	bl	8001168 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003624:	f7fd fda0 	bl	8001168 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	@ 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e20b      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	4b57      	ldr	r3, [pc, #348]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x104>
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d06f      	beq.n	8003732 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003652:	4b50      	ldr	r3, [pc, #320]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b00      	cmp	r3, #0
 800365c:	d017      	beq.n	800368e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800365e:	4b4d      	ldr	r3, [pc, #308]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003666:	2b08      	cmp	r3, #8
 8003668:	d105      	bne.n	8003676 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800366a:	4b4a      	ldr	r3, [pc, #296]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003676:	4b47      	ldr	r3, [pc, #284]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d11c      	bne.n	80036bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003682:	4b44      	ldr	r3, [pc, #272]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	4b41      	ldr	r3, [pc, #260]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x186>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1d3      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4937      	ldr	r1, [pc, #220]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	e03a      	b.n	8003732 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b34      	ldr	r3, [pc, #208]	@ (8003798 <HAL_RCC_OscConfig+0x278>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7fd fd4d 	bl	8001168 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d2:	f7fd fd49 	bl	8001168 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e1b4      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b28      	ldr	r3, [pc, #160]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4925      	ldr	r1, [pc, #148]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003706:	4b24      	ldr	r3, [pc, #144]	@ (8003798 <HAL_RCC_OscConfig+0x278>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fd fd2c 	bl	8001168 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003714:	f7fd fd28 	bl	8001168 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e193      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	4b1b      	ldr	r3, [pc, #108]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d036      	beq.n	80037ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d016      	beq.n	8003774 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003746:	4b15      	ldr	r3, [pc, #84]	@ (800379c <HAL_RCC_OscConfig+0x27c>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fd fd0c 	bl	8001168 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003754:	f7fd fd08 	bl	8001168 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e173      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	4b0b      	ldr	r3, [pc, #44]	@ (8003794 <HAL_RCC_OscConfig+0x274>)
 8003768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x234>
 8003772:	e01b      	b.n	80037ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003774:	4b09      	ldr	r3, [pc, #36]	@ (800379c <HAL_RCC_OscConfig+0x27c>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fd fcf5 	bl	8001168 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	e00e      	b.n	80037a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003782:	f7fd fcf1 	bl	8001168 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d907      	bls.n	80037a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e15c      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
 8003794:	40023800 	.word	0x40023800
 8003798:	42470000 	.word	0x42470000
 800379c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	4b8a      	ldr	r3, [pc, #552]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 80037a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ea      	bne.n	8003782 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8097 	beq.w	80038e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037be:	4b83      	ldr	r3, [pc, #524]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10f      	bne.n	80037ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	4b7f      	ldr	r3, [pc, #508]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	4a7e      	ldr	r2, [pc, #504]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 80037d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037da:	4b7c      	ldr	r3, [pc, #496]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e6:	2301      	movs	r3, #1
 80037e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b79      	ldr	r3, [pc, #484]	@ (80039d0 <HAL_RCC_OscConfig+0x4b0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d118      	bne.n	8003828 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f6:	4b76      	ldr	r3, [pc, #472]	@ (80039d0 <HAL_RCC_OscConfig+0x4b0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a75      	ldr	r2, [pc, #468]	@ (80039d0 <HAL_RCC_OscConfig+0x4b0>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003802:	f7fd fcb1 	bl	8001168 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fd fcad 	bl	8001168 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e118      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b6c      	ldr	r3, [pc, #432]	@ (80039d0 <HAL_RCC_OscConfig+0x4b0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x31e>
 8003830:	4b66      	ldr	r3, [pc, #408]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003834:	4a65      	ldr	r2, [pc, #404]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6713      	str	r3, [r2, #112]	@ 0x70
 800383c:	e01c      	b.n	8003878 <HAL_RCC_OscConfig+0x358>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b05      	cmp	r3, #5
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x340>
 8003846:	4b61      	ldr	r3, [pc, #388]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384a:	4a60      	ldr	r2, [pc, #384]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	6713      	str	r3, [r2, #112]	@ 0x70
 8003852:	4b5e      	ldr	r3, [pc, #376]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003856:	4a5d      	ldr	r2, [pc, #372]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6713      	str	r3, [r2, #112]	@ 0x70
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0x358>
 8003860:	4b5a      	ldr	r3, [pc, #360]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003864:	4a59      	ldr	r2, [pc, #356]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	6713      	str	r3, [r2, #112]	@ 0x70
 800386c:	4b57      	ldr	r3, [pc, #348]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003870:	4a56      	ldr	r2, [pc, #344]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 8003872:	f023 0304 	bic.w	r3, r3, #4
 8003876:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fd fc72 	bl	8001168 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003888:	f7fd fc6e 	bl	8001168 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e0d7      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389e:	4b4b      	ldr	r3, [pc, #300]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0ee      	beq.n	8003888 <HAL_RCC_OscConfig+0x368>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7fd fc5c 	bl	8001168 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fd fc58 	bl	8001168 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0c1      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ca:	4b40      	ldr	r3, [pc, #256]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1ee      	bne.n	80038b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d105      	bne.n	80038e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038dc:	4b3b      	ldr	r3, [pc, #236]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	4a3a      	ldr	r2, [pc, #232]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 80038e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80ad 	beq.w	8003a4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038f2:	4b36      	ldr	r3, [pc, #216]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d060      	beq.n	80039c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d145      	bne.n	8003992 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003906:	4b33      	ldr	r3, [pc, #204]	@ (80039d4 <HAL_RCC_OscConfig+0x4b4>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd fc2c 	bl	8001168 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd fc28 	bl	8001168 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e093      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	4b29      	ldr	r3, [pc, #164]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	019b      	lsls	r3, r3, #6
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	3b01      	subs	r3, #1
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	071b      	lsls	r3, r3, #28
 800395e:	491b      	ldr	r1, [pc, #108]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003964:	4b1b      	ldr	r3, [pc, #108]	@ (80039d4 <HAL_RCC_OscConfig+0x4b4>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396a:	f7fd fbfd 	bl	8001168 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003972:	f7fd fbf9 	bl	8001168 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e064      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x452>
 8003990:	e05c      	b.n	8003a4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b10      	ldr	r3, [pc, #64]	@ (80039d4 <HAL_RCC_OscConfig+0x4b4>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd fbe6 	bl	8001168 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fd fbe2 	bl	8001168 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e04d      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	4b06      	ldr	r3, [pc, #24]	@ (80039cc <HAL_RCC_OscConfig+0x4ac>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x480>
 80039be:	e045      	b.n	8003a4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e040      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000
 80039d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a58 <HAL_RCC_OscConfig+0x538>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d030      	beq.n	8003a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d129      	bne.n	8003a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d122      	bne.n	8003a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d119      	bne.n	8003a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	3b01      	subs	r3, #1
 8003a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d10f      	bne.n	8003a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d107      	bne.n	8003a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800

08003a5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e041      	b.n	8003af2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd f962 	bl	8000d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f000 f9b8 	bl	8003e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d109      	bne.n	8003b20 <HAL_TIM_PWM_Start+0x24>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e022      	b.n	8003b66 <HAL_TIM_PWM_Start+0x6a>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d109      	bne.n	8003b3a <HAL_TIM_PWM_Start+0x3e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	bf14      	ite	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	2300      	moveq	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	e015      	b.n	8003b66 <HAL_TIM_PWM_Start+0x6a>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d109      	bne.n	8003b54 <HAL_TIM_PWM_Start+0x58>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	e008      	b.n	8003b66 <HAL_TIM_PWM_Start+0x6a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e07c      	b.n	8003c68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_PWM_Start+0x82>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b7c:	e013      	b.n	8003ba6 <HAL_TIM_PWM_Start+0xaa>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d104      	bne.n	8003b8e <HAL_TIM_PWM_Start+0x92>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b8c:	e00b      	b.n	8003ba6 <HAL_TIM_PWM_Start+0xaa>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d104      	bne.n	8003b9e <HAL_TIM_PWM_Start+0xa2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b9c:	e003      	b.n	8003ba6 <HAL_TIM_PWM_Start+0xaa>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	6839      	ldr	r1, [r7, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fb8a 	bl	80042c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003c70 <HAL_TIM_PWM_Start+0x174>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0xcc>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c74 <HAL_TIM_PWM_Start+0x178>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_PWM_Start+0xd0>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_TIM_PWM_Start+0xd2>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a22      	ldr	r2, [pc, #136]	@ (8003c70 <HAL_TIM_PWM_Start+0x174>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d022      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf4:	d01d      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8003c78 <HAL_TIM_PWM_Start+0x17c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d018      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1d      	ldr	r2, [pc, #116]	@ (8003c7c <HAL_TIM_PWM_Start+0x180>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c80 <HAL_TIM_PWM_Start+0x184>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00e      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a16      	ldr	r2, [pc, #88]	@ (8003c74 <HAL_TIM_PWM_Start+0x178>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a18      	ldr	r2, [pc, #96]	@ (8003c84 <HAL_TIM_PWM_Start+0x188>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a16      	ldr	r2, [pc, #88]	@ (8003c88 <HAL_TIM_PWM_Start+0x18c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d111      	bne.n	8003c56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d010      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c54:	e007      	b.n	8003c66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40010400 	.word	0x40010400
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40014000 	.word	0x40014000
 8003c88:	40001800 	.word	0x40001800

08003c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0ae      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	f200 809f 	bhi.w	8003df8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cba:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003df9 	.word	0x08003df9
 8003cc8:	08003df9 	.word	0x08003df9
 8003ccc:	08003df9 	.word	0x08003df9
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003df9 	.word	0x08003df9
 8003cd8:	08003df9 	.word	0x08003df9
 8003cdc:	08003df9 	.word	0x08003df9
 8003ce0:	08003d77 	.word	0x08003d77
 8003ce4:	08003df9 	.word	0x08003df9
 8003ce8:	08003df9 	.word	0x08003df9
 8003cec:	08003df9 	.word	0x08003df9
 8003cf0:	08003db7 	.word	0x08003db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f934 	bl	8003f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
      break;
 8003d32:	e064      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f984 	bl	8004048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6999      	ldr	r1, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
      break;
 8003d74:	e043      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 f9d9 	bl	8004134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0208 	orr.w	r2, r2, #8
 8003d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0204 	bic.w	r2, r2, #4
 8003da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
      break;
 8003db4:	e023      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fa2d 	bl	800421c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69d9      	ldr	r1, [r3, #28]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	021a      	lsls	r2, r3, #8
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	61da      	str	r2, [r3, #28]
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a46      	ldr	r2, [pc, #280]	@ (8003f3c <TIM_Base_SetConfig+0x12c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2e:	d00f      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a43      	ldr	r2, [pc, #268]	@ (8003f40 <TIM_Base_SetConfig+0x130>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a42      	ldr	r2, [pc, #264]	@ (8003f44 <TIM_Base_SetConfig+0x134>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a41      	ldr	r2, [pc, #260]	@ (8003f48 <TIM_Base_SetConfig+0x138>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a40      	ldr	r2, [pc, #256]	@ (8003f4c <TIM_Base_SetConfig+0x13c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d108      	bne.n	8003e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a35      	ldr	r2, [pc, #212]	@ (8003f3c <TIM_Base_SetConfig+0x12c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d02b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e70:	d027      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a32      	ldr	r2, [pc, #200]	@ (8003f40 <TIM_Base_SetConfig+0x130>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d023      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a31      	ldr	r2, [pc, #196]	@ (8003f44 <TIM_Base_SetConfig+0x134>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01f      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a30      	ldr	r2, [pc, #192]	@ (8003f48 <TIM_Base_SetConfig+0x138>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8003f4c <TIM_Base_SetConfig+0x13c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d017      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2e      	ldr	r2, [pc, #184]	@ (8003f50 <TIM_Base_SetConfig+0x140>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f54 <TIM_Base_SetConfig+0x144>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00f      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8003f58 <TIM_Base_SetConfig+0x148>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	@ (8003f5c <TIM_Base_SetConfig+0x14c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f60 <TIM_Base_SetConfig+0x150>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	@ (8003f64 <TIM_Base_SetConfig+0x154>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d108      	bne.n	8003ed4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a10      	ldr	r2, [pc, #64]	@ (8003f3c <TIM_Base_SetConfig+0x12c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0xf8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a12      	ldr	r2, [pc, #72]	@ (8003f4c <TIM_Base_SetConfig+0x13c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d103      	bne.n	8003f10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f023 0201 	bic.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	611a      	str	r2, [r3, #16]
  }
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40010400 	.word	0x40010400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800
 8003f5c:	40001800 	.word	0x40001800
 8003f60:	40001c00 	.word	0x40001c00
 8003f64:	40002000 	.word	0x40002000

08003f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f023 0201 	bic.w	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 0302 	bic.w	r3, r3, #2
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a20      	ldr	r2, [pc, #128]	@ (8004040 <TIM_OC1_SetConfig+0xd8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d003      	beq.n	8003fcc <TIM_OC1_SetConfig+0x64>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <TIM_OC1_SetConfig+0xdc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d10c      	bne.n	8003fe6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f023 0308 	bic.w	r3, r3, #8
 8003fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a15      	ldr	r2, [pc, #84]	@ (8004040 <TIM_OC1_SetConfig+0xd8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_OC1_SetConfig+0x8e>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a14      	ldr	r2, [pc, #80]	@ (8004044 <TIM_OC1_SetConfig+0xdc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d111      	bne.n	800401a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40010000 	.word	0x40010000
 8004044:	40010400 	.word	0x40010400

08004048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f023 0210 	bic.w	r2, r3, #16
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 0320 	bic.w	r3, r3, #32
 8004092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a22      	ldr	r2, [pc, #136]	@ (800412c <TIM_OC2_SetConfig+0xe4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_OC2_SetConfig+0x68>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a21      	ldr	r2, [pc, #132]	@ (8004130 <TIM_OC2_SetConfig+0xe8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10d      	bne.n	80040cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a17      	ldr	r2, [pc, #92]	@ (800412c <TIM_OC2_SetConfig+0xe4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_OC2_SetConfig+0x94>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a16      	ldr	r2, [pc, #88]	@ (8004130 <TIM_OC2_SetConfig+0xe8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d113      	bne.n	8004104 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40010000 	.word	0x40010000
 8004130:	40010400 	.word	0x40010400

08004134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800417c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a21      	ldr	r2, [pc, #132]	@ (8004214 <TIM_OC3_SetConfig+0xe0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_OC3_SetConfig+0x66>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a20      	ldr	r2, [pc, #128]	@ (8004218 <TIM_OC3_SetConfig+0xe4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10d      	bne.n	80041b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a16      	ldr	r2, [pc, #88]	@ (8004214 <TIM_OC3_SetConfig+0xe0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_OC3_SetConfig+0x92>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a15      	ldr	r2, [pc, #84]	@ (8004218 <TIM_OC3_SetConfig+0xe4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d113      	bne.n	80041ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	621a      	str	r2, [r3, #32]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40010000 	.word	0x40010000
 8004218:	40010400 	.word	0x40010400

0800421c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a12      	ldr	r2, [pc, #72]	@ (80042c0 <TIM_OC4_SetConfig+0xa4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_OC4_SetConfig+0x68>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a11      	ldr	r2, [pc, #68]	@ (80042c4 <TIM_OC4_SetConfig+0xa8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d109      	bne.n	8004298 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800428a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40010400 	.word	0x40010400

080042c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2201      	movs	r2, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	401a      	ands	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e05a      	b.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a21      	ldr	r2, [pc, #132]	@ (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d022      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004378:	d01d      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d018      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1a      	ldr	r2, [pc, #104]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00e      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a18      	ldr	r2, [pc, #96]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d009      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10c      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40010400 	.word	0x40010400
 8004404:	40014000 	.word	0x40014000
 8004408:	40001800 	.word	0x40001800

0800440c <std>:
 800440c:	2300      	movs	r3, #0
 800440e:	b510      	push	{r4, lr}
 8004410:	4604      	mov	r4, r0
 8004412:	e9c0 3300 	strd	r3, r3, [r0]
 8004416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800441a:	6083      	str	r3, [r0, #8]
 800441c:	8181      	strh	r1, [r0, #12]
 800441e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004420:	81c2      	strh	r2, [r0, #14]
 8004422:	6183      	str	r3, [r0, #24]
 8004424:	4619      	mov	r1, r3
 8004426:	2208      	movs	r2, #8
 8004428:	305c      	adds	r0, #92	@ 0x5c
 800442a:	f000 f9e7 	bl	80047fc <memset>
 800442e:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <std+0x58>)
 8004430:	6263      	str	r3, [r4, #36]	@ 0x24
 8004432:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <std+0x5c>)
 8004434:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004436:	4b0d      	ldr	r3, [pc, #52]	@ (800446c <std+0x60>)
 8004438:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800443a:	4b0d      	ldr	r3, [pc, #52]	@ (8004470 <std+0x64>)
 800443c:	6323      	str	r3, [r4, #48]	@ 0x30
 800443e:	4b0d      	ldr	r3, [pc, #52]	@ (8004474 <std+0x68>)
 8004440:	6224      	str	r4, [r4, #32]
 8004442:	429c      	cmp	r4, r3
 8004444:	d006      	beq.n	8004454 <std+0x48>
 8004446:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800444a:	4294      	cmp	r4, r2
 800444c:	d002      	beq.n	8004454 <std+0x48>
 800444e:	33d0      	adds	r3, #208	@ 0xd0
 8004450:	429c      	cmp	r4, r3
 8004452:	d105      	bne.n	8004460 <std+0x54>
 8004454:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800445c:	f000 ba46 	b.w	80048ec <__retarget_lock_init_recursive>
 8004460:	bd10      	pop	{r4, pc}
 8004462:	bf00      	nop
 8004464:	0800464d 	.word	0x0800464d
 8004468:	0800466f 	.word	0x0800466f
 800446c:	080046a7 	.word	0x080046a7
 8004470:	080046cb 	.word	0x080046cb
 8004474:	20000194 	.word	0x20000194

08004478 <stdio_exit_handler>:
 8004478:	4a02      	ldr	r2, [pc, #8]	@ (8004484 <stdio_exit_handler+0xc>)
 800447a:	4903      	ldr	r1, [pc, #12]	@ (8004488 <stdio_exit_handler+0x10>)
 800447c:	4803      	ldr	r0, [pc, #12]	@ (800448c <stdio_exit_handler+0x14>)
 800447e:	f000 b869 	b.w	8004554 <_fwalk_sglue>
 8004482:	bf00      	nop
 8004484:	2000000c 	.word	0x2000000c
 8004488:	08004bed 	.word	0x08004bed
 800448c:	2000001c 	.word	0x2000001c

08004490 <cleanup_stdio>:
 8004490:	6841      	ldr	r1, [r0, #4]
 8004492:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <cleanup_stdio+0x34>)
 8004494:	4299      	cmp	r1, r3
 8004496:	b510      	push	{r4, lr}
 8004498:	4604      	mov	r4, r0
 800449a:	d001      	beq.n	80044a0 <cleanup_stdio+0x10>
 800449c:	f000 fba6 	bl	8004bec <_fflush_r>
 80044a0:	68a1      	ldr	r1, [r4, #8]
 80044a2:	4b09      	ldr	r3, [pc, #36]	@ (80044c8 <cleanup_stdio+0x38>)
 80044a4:	4299      	cmp	r1, r3
 80044a6:	d002      	beq.n	80044ae <cleanup_stdio+0x1e>
 80044a8:	4620      	mov	r0, r4
 80044aa:	f000 fb9f 	bl	8004bec <_fflush_r>
 80044ae:	68e1      	ldr	r1, [r4, #12]
 80044b0:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <cleanup_stdio+0x3c>)
 80044b2:	4299      	cmp	r1, r3
 80044b4:	d004      	beq.n	80044c0 <cleanup_stdio+0x30>
 80044b6:	4620      	mov	r0, r4
 80044b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044bc:	f000 bb96 	b.w	8004bec <_fflush_r>
 80044c0:	bd10      	pop	{r4, pc}
 80044c2:	bf00      	nop
 80044c4:	20000194 	.word	0x20000194
 80044c8:	200001fc 	.word	0x200001fc
 80044cc:	20000264 	.word	0x20000264

080044d0 <global_stdio_init.part.0>:
 80044d0:	b510      	push	{r4, lr}
 80044d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <global_stdio_init.part.0+0x30>)
 80044d4:	4c0b      	ldr	r4, [pc, #44]	@ (8004504 <global_stdio_init.part.0+0x34>)
 80044d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004508 <global_stdio_init.part.0+0x38>)
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	4620      	mov	r0, r4
 80044dc:	2200      	movs	r2, #0
 80044de:	2104      	movs	r1, #4
 80044e0:	f7ff ff94 	bl	800440c <std>
 80044e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044e8:	2201      	movs	r2, #1
 80044ea:	2109      	movs	r1, #9
 80044ec:	f7ff ff8e 	bl	800440c <std>
 80044f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044f4:	2202      	movs	r2, #2
 80044f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044fa:	2112      	movs	r1, #18
 80044fc:	f7ff bf86 	b.w	800440c <std>
 8004500:	200002cc 	.word	0x200002cc
 8004504:	20000194 	.word	0x20000194
 8004508:	08004479 	.word	0x08004479

0800450c <__sfp_lock_acquire>:
 800450c:	4801      	ldr	r0, [pc, #4]	@ (8004514 <__sfp_lock_acquire+0x8>)
 800450e:	f000 b9ee 	b.w	80048ee <__retarget_lock_acquire_recursive>
 8004512:	bf00      	nop
 8004514:	200002d5 	.word	0x200002d5

08004518 <__sfp_lock_release>:
 8004518:	4801      	ldr	r0, [pc, #4]	@ (8004520 <__sfp_lock_release+0x8>)
 800451a:	f000 b9e9 	b.w	80048f0 <__retarget_lock_release_recursive>
 800451e:	bf00      	nop
 8004520:	200002d5 	.word	0x200002d5

08004524 <__sinit>:
 8004524:	b510      	push	{r4, lr}
 8004526:	4604      	mov	r4, r0
 8004528:	f7ff fff0 	bl	800450c <__sfp_lock_acquire>
 800452c:	6a23      	ldr	r3, [r4, #32]
 800452e:	b11b      	cbz	r3, 8004538 <__sinit+0x14>
 8004530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004534:	f7ff bff0 	b.w	8004518 <__sfp_lock_release>
 8004538:	4b04      	ldr	r3, [pc, #16]	@ (800454c <__sinit+0x28>)
 800453a:	6223      	str	r3, [r4, #32]
 800453c:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <__sinit+0x2c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f5      	bne.n	8004530 <__sinit+0xc>
 8004544:	f7ff ffc4 	bl	80044d0 <global_stdio_init.part.0>
 8004548:	e7f2      	b.n	8004530 <__sinit+0xc>
 800454a:	bf00      	nop
 800454c:	08004491 	.word	0x08004491
 8004550:	200002cc 	.word	0x200002cc

08004554 <_fwalk_sglue>:
 8004554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004558:	4607      	mov	r7, r0
 800455a:	4688      	mov	r8, r1
 800455c:	4614      	mov	r4, r2
 800455e:	2600      	movs	r6, #0
 8004560:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004564:	f1b9 0901 	subs.w	r9, r9, #1
 8004568:	d505      	bpl.n	8004576 <_fwalk_sglue+0x22>
 800456a:	6824      	ldr	r4, [r4, #0]
 800456c:	2c00      	cmp	r4, #0
 800456e:	d1f7      	bne.n	8004560 <_fwalk_sglue+0xc>
 8004570:	4630      	mov	r0, r6
 8004572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004576:	89ab      	ldrh	r3, [r5, #12]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d907      	bls.n	800458c <_fwalk_sglue+0x38>
 800457c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004580:	3301      	adds	r3, #1
 8004582:	d003      	beq.n	800458c <_fwalk_sglue+0x38>
 8004584:	4629      	mov	r1, r5
 8004586:	4638      	mov	r0, r7
 8004588:	47c0      	blx	r8
 800458a:	4306      	orrs	r6, r0
 800458c:	3568      	adds	r5, #104	@ 0x68
 800458e:	e7e9      	b.n	8004564 <_fwalk_sglue+0x10>

08004590 <_puts_r>:
 8004590:	6a03      	ldr	r3, [r0, #32]
 8004592:	b570      	push	{r4, r5, r6, lr}
 8004594:	6884      	ldr	r4, [r0, #8]
 8004596:	4605      	mov	r5, r0
 8004598:	460e      	mov	r6, r1
 800459a:	b90b      	cbnz	r3, 80045a0 <_puts_r+0x10>
 800459c:	f7ff ffc2 	bl	8004524 <__sinit>
 80045a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045a2:	07db      	lsls	r3, r3, #31
 80045a4:	d405      	bmi.n	80045b2 <_puts_r+0x22>
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	0598      	lsls	r0, r3, #22
 80045aa:	d402      	bmi.n	80045b2 <_puts_r+0x22>
 80045ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045ae:	f000 f99e 	bl	80048ee <__retarget_lock_acquire_recursive>
 80045b2:	89a3      	ldrh	r3, [r4, #12]
 80045b4:	0719      	lsls	r1, r3, #28
 80045b6:	d502      	bpl.n	80045be <_puts_r+0x2e>
 80045b8:	6923      	ldr	r3, [r4, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d135      	bne.n	800462a <_puts_r+0x9a>
 80045be:	4621      	mov	r1, r4
 80045c0:	4628      	mov	r0, r5
 80045c2:	f000 f8c5 	bl	8004750 <__swsetup_r>
 80045c6:	b380      	cbz	r0, 800462a <_puts_r+0x9a>
 80045c8:	f04f 35ff 	mov.w	r5, #4294967295
 80045cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045ce:	07da      	lsls	r2, r3, #31
 80045d0:	d405      	bmi.n	80045de <_puts_r+0x4e>
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	059b      	lsls	r3, r3, #22
 80045d6:	d402      	bmi.n	80045de <_puts_r+0x4e>
 80045d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045da:	f000 f989 	bl	80048f0 <__retarget_lock_release_recursive>
 80045de:	4628      	mov	r0, r5
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	da04      	bge.n	80045f0 <_puts_r+0x60>
 80045e6:	69a2      	ldr	r2, [r4, #24]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	dc17      	bgt.n	800461c <_puts_r+0x8c>
 80045ec:	290a      	cmp	r1, #10
 80045ee:	d015      	beq.n	800461c <_puts_r+0x8c>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	6022      	str	r2, [r4, #0]
 80045f6:	7019      	strb	r1, [r3, #0]
 80045f8:	68a3      	ldr	r3, [r4, #8]
 80045fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045fe:	3b01      	subs	r3, #1
 8004600:	60a3      	str	r3, [r4, #8]
 8004602:	2900      	cmp	r1, #0
 8004604:	d1ed      	bne.n	80045e2 <_puts_r+0x52>
 8004606:	2b00      	cmp	r3, #0
 8004608:	da11      	bge.n	800462e <_puts_r+0x9e>
 800460a:	4622      	mov	r2, r4
 800460c:	210a      	movs	r1, #10
 800460e:	4628      	mov	r0, r5
 8004610:	f000 f85f 	bl	80046d2 <__swbuf_r>
 8004614:	3001      	adds	r0, #1
 8004616:	d0d7      	beq.n	80045c8 <_puts_r+0x38>
 8004618:	250a      	movs	r5, #10
 800461a:	e7d7      	b.n	80045cc <_puts_r+0x3c>
 800461c:	4622      	mov	r2, r4
 800461e:	4628      	mov	r0, r5
 8004620:	f000 f857 	bl	80046d2 <__swbuf_r>
 8004624:	3001      	adds	r0, #1
 8004626:	d1e7      	bne.n	80045f8 <_puts_r+0x68>
 8004628:	e7ce      	b.n	80045c8 <_puts_r+0x38>
 800462a:	3e01      	subs	r6, #1
 800462c:	e7e4      	b.n	80045f8 <_puts_r+0x68>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	6022      	str	r2, [r4, #0]
 8004634:	220a      	movs	r2, #10
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e7ee      	b.n	8004618 <_puts_r+0x88>
	...

0800463c <puts>:
 800463c:	4b02      	ldr	r3, [pc, #8]	@ (8004648 <puts+0xc>)
 800463e:	4601      	mov	r1, r0
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	f7ff bfa5 	b.w	8004590 <_puts_r>
 8004646:	bf00      	nop
 8004648:	20000018 	.word	0x20000018

0800464c <__sread>:
 800464c:	b510      	push	{r4, lr}
 800464e:	460c      	mov	r4, r1
 8004650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004654:	f000 f8fc 	bl	8004850 <_read_r>
 8004658:	2800      	cmp	r0, #0
 800465a:	bfab      	itete	ge
 800465c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800465e:	89a3      	ldrhlt	r3, [r4, #12]
 8004660:	181b      	addge	r3, r3, r0
 8004662:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004666:	bfac      	ite	ge
 8004668:	6563      	strge	r3, [r4, #84]	@ 0x54
 800466a:	81a3      	strhlt	r3, [r4, #12]
 800466c:	bd10      	pop	{r4, pc}

0800466e <__swrite>:
 800466e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004672:	461f      	mov	r7, r3
 8004674:	898b      	ldrh	r3, [r1, #12]
 8004676:	05db      	lsls	r3, r3, #23
 8004678:	4605      	mov	r5, r0
 800467a:	460c      	mov	r4, r1
 800467c:	4616      	mov	r6, r2
 800467e:	d505      	bpl.n	800468c <__swrite+0x1e>
 8004680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004684:	2302      	movs	r3, #2
 8004686:	2200      	movs	r2, #0
 8004688:	f000 f8d0 	bl	800482c <_lseek_r>
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004692:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004696:	81a3      	strh	r3, [r4, #12]
 8004698:	4632      	mov	r2, r6
 800469a:	463b      	mov	r3, r7
 800469c:	4628      	mov	r0, r5
 800469e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046a2:	f000 b8e7 	b.w	8004874 <_write_r>

080046a6 <__sseek>:
 80046a6:	b510      	push	{r4, lr}
 80046a8:	460c      	mov	r4, r1
 80046aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ae:	f000 f8bd 	bl	800482c <_lseek_r>
 80046b2:	1c43      	adds	r3, r0, #1
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	bf15      	itete	ne
 80046b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046c2:	81a3      	strheq	r3, [r4, #12]
 80046c4:	bf18      	it	ne
 80046c6:	81a3      	strhne	r3, [r4, #12]
 80046c8:	bd10      	pop	{r4, pc}

080046ca <__sclose>:
 80046ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ce:	f000 b89d 	b.w	800480c <_close_r>

080046d2 <__swbuf_r>:
 80046d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d4:	460e      	mov	r6, r1
 80046d6:	4614      	mov	r4, r2
 80046d8:	4605      	mov	r5, r0
 80046da:	b118      	cbz	r0, 80046e4 <__swbuf_r+0x12>
 80046dc:	6a03      	ldr	r3, [r0, #32]
 80046de:	b90b      	cbnz	r3, 80046e4 <__swbuf_r+0x12>
 80046e0:	f7ff ff20 	bl	8004524 <__sinit>
 80046e4:	69a3      	ldr	r3, [r4, #24]
 80046e6:	60a3      	str	r3, [r4, #8]
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	071a      	lsls	r2, r3, #28
 80046ec:	d501      	bpl.n	80046f2 <__swbuf_r+0x20>
 80046ee:	6923      	ldr	r3, [r4, #16]
 80046f0:	b943      	cbnz	r3, 8004704 <__swbuf_r+0x32>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4628      	mov	r0, r5
 80046f6:	f000 f82b 	bl	8004750 <__swsetup_r>
 80046fa:	b118      	cbz	r0, 8004704 <__swbuf_r+0x32>
 80046fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004700:	4638      	mov	r0, r7
 8004702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	6922      	ldr	r2, [r4, #16]
 8004708:	1a98      	subs	r0, r3, r2
 800470a:	6963      	ldr	r3, [r4, #20]
 800470c:	b2f6      	uxtb	r6, r6
 800470e:	4283      	cmp	r3, r0
 8004710:	4637      	mov	r7, r6
 8004712:	dc05      	bgt.n	8004720 <__swbuf_r+0x4e>
 8004714:	4621      	mov	r1, r4
 8004716:	4628      	mov	r0, r5
 8004718:	f000 fa68 	bl	8004bec <_fflush_r>
 800471c:	2800      	cmp	r0, #0
 800471e:	d1ed      	bne.n	80046fc <__swbuf_r+0x2a>
 8004720:	68a3      	ldr	r3, [r4, #8]
 8004722:	3b01      	subs	r3, #1
 8004724:	60a3      	str	r3, [r4, #8]
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	6022      	str	r2, [r4, #0]
 800472c:	701e      	strb	r6, [r3, #0]
 800472e:	6962      	ldr	r2, [r4, #20]
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	429a      	cmp	r2, r3
 8004734:	d004      	beq.n	8004740 <__swbuf_r+0x6e>
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	07db      	lsls	r3, r3, #31
 800473a:	d5e1      	bpl.n	8004700 <__swbuf_r+0x2e>
 800473c:	2e0a      	cmp	r6, #10
 800473e:	d1df      	bne.n	8004700 <__swbuf_r+0x2e>
 8004740:	4621      	mov	r1, r4
 8004742:	4628      	mov	r0, r5
 8004744:	f000 fa52 	bl	8004bec <_fflush_r>
 8004748:	2800      	cmp	r0, #0
 800474a:	d0d9      	beq.n	8004700 <__swbuf_r+0x2e>
 800474c:	e7d6      	b.n	80046fc <__swbuf_r+0x2a>
	...

08004750 <__swsetup_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4b29      	ldr	r3, [pc, #164]	@ (80047f8 <__swsetup_r+0xa8>)
 8004754:	4605      	mov	r5, r0
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	460c      	mov	r4, r1
 800475a:	b118      	cbz	r0, 8004764 <__swsetup_r+0x14>
 800475c:	6a03      	ldr	r3, [r0, #32]
 800475e:	b90b      	cbnz	r3, 8004764 <__swsetup_r+0x14>
 8004760:	f7ff fee0 	bl	8004524 <__sinit>
 8004764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004768:	0719      	lsls	r1, r3, #28
 800476a:	d422      	bmi.n	80047b2 <__swsetup_r+0x62>
 800476c:	06da      	lsls	r2, r3, #27
 800476e:	d407      	bmi.n	8004780 <__swsetup_r+0x30>
 8004770:	2209      	movs	r2, #9
 8004772:	602a      	str	r2, [r5, #0]
 8004774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004778:	81a3      	strh	r3, [r4, #12]
 800477a:	f04f 30ff 	mov.w	r0, #4294967295
 800477e:	e033      	b.n	80047e8 <__swsetup_r+0x98>
 8004780:	0758      	lsls	r0, r3, #29
 8004782:	d512      	bpl.n	80047aa <__swsetup_r+0x5a>
 8004784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004786:	b141      	cbz	r1, 800479a <__swsetup_r+0x4a>
 8004788:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800478c:	4299      	cmp	r1, r3
 800478e:	d002      	beq.n	8004796 <__swsetup_r+0x46>
 8004790:	4628      	mov	r0, r5
 8004792:	f000 f8af 	bl	80048f4 <_free_r>
 8004796:	2300      	movs	r3, #0
 8004798:	6363      	str	r3, [r4, #52]	@ 0x34
 800479a:	89a3      	ldrh	r3, [r4, #12]
 800479c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047a0:	81a3      	strh	r3, [r4, #12]
 80047a2:	2300      	movs	r3, #0
 80047a4:	6063      	str	r3, [r4, #4]
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	f043 0308 	orr.w	r3, r3, #8
 80047b0:	81a3      	strh	r3, [r4, #12]
 80047b2:	6923      	ldr	r3, [r4, #16]
 80047b4:	b94b      	cbnz	r3, 80047ca <__swsetup_r+0x7a>
 80047b6:	89a3      	ldrh	r3, [r4, #12]
 80047b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047c0:	d003      	beq.n	80047ca <__swsetup_r+0x7a>
 80047c2:	4621      	mov	r1, r4
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 fa5f 	bl	8004c88 <__smakebuf_r>
 80047ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ce:	f013 0201 	ands.w	r2, r3, #1
 80047d2:	d00a      	beq.n	80047ea <__swsetup_r+0x9a>
 80047d4:	2200      	movs	r2, #0
 80047d6:	60a2      	str	r2, [r4, #8]
 80047d8:	6962      	ldr	r2, [r4, #20]
 80047da:	4252      	negs	r2, r2
 80047dc:	61a2      	str	r2, [r4, #24]
 80047de:	6922      	ldr	r2, [r4, #16]
 80047e0:	b942      	cbnz	r2, 80047f4 <__swsetup_r+0xa4>
 80047e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80047e6:	d1c5      	bne.n	8004774 <__swsetup_r+0x24>
 80047e8:	bd38      	pop	{r3, r4, r5, pc}
 80047ea:	0799      	lsls	r1, r3, #30
 80047ec:	bf58      	it	pl
 80047ee:	6962      	ldrpl	r2, [r4, #20]
 80047f0:	60a2      	str	r2, [r4, #8]
 80047f2:	e7f4      	b.n	80047de <__swsetup_r+0x8e>
 80047f4:	2000      	movs	r0, #0
 80047f6:	e7f7      	b.n	80047e8 <__swsetup_r+0x98>
 80047f8:	20000018 	.word	0x20000018

080047fc <memset>:
 80047fc:	4402      	add	r2, r0
 80047fe:	4603      	mov	r3, r0
 8004800:	4293      	cmp	r3, r2
 8004802:	d100      	bne.n	8004806 <memset+0xa>
 8004804:	4770      	bx	lr
 8004806:	f803 1b01 	strb.w	r1, [r3], #1
 800480a:	e7f9      	b.n	8004800 <memset+0x4>

0800480c <_close_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4d06      	ldr	r5, [pc, #24]	@ (8004828 <_close_r+0x1c>)
 8004810:	2300      	movs	r3, #0
 8004812:	4604      	mov	r4, r0
 8004814:	4608      	mov	r0, r1
 8004816:	602b      	str	r3, [r5, #0]
 8004818:	f7fc fb99 	bl	8000f4e <_close>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_close_r+0x1a>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_close_r+0x1a>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	200002d0 	.word	0x200002d0

0800482c <_lseek_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4d07      	ldr	r5, [pc, #28]	@ (800484c <_lseek_r+0x20>)
 8004830:	4604      	mov	r4, r0
 8004832:	4608      	mov	r0, r1
 8004834:	4611      	mov	r1, r2
 8004836:	2200      	movs	r2, #0
 8004838:	602a      	str	r2, [r5, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f7fc fbae 	bl	8000f9c <_lseek>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_lseek_r+0x1e>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_lseek_r+0x1e>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	200002d0 	.word	0x200002d0

08004850 <_read_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4d07      	ldr	r5, [pc, #28]	@ (8004870 <_read_r+0x20>)
 8004854:	4604      	mov	r4, r0
 8004856:	4608      	mov	r0, r1
 8004858:	4611      	mov	r1, r2
 800485a:	2200      	movs	r2, #0
 800485c:	602a      	str	r2, [r5, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	f7fc fb3c 	bl	8000edc <_read>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_read_r+0x1e>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_read_r+0x1e>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	200002d0 	.word	0x200002d0

08004874 <_write_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4d07      	ldr	r5, [pc, #28]	@ (8004894 <_write_r+0x20>)
 8004878:	4604      	mov	r4, r0
 800487a:	4608      	mov	r0, r1
 800487c:	4611      	mov	r1, r2
 800487e:	2200      	movs	r2, #0
 8004880:	602a      	str	r2, [r5, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	f7fc fb47 	bl	8000f16 <_write>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_write_r+0x1e>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_write_r+0x1e>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	200002d0 	.word	0x200002d0

08004898 <__errno>:
 8004898:	4b01      	ldr	r3, [pc, #4]	@ (80048a0 <__errno+0x8>)
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000018 	.word	0x20000018

080048a4 <__libc_init_array>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	4d0d      	ldr	r5, [pc, #52]	@ (80048dc <__libc_init_array+0x38>)
 80048a8:	4c0d      	ldr	r4, [pc, #52]	@ (80048e0 <__libc_init_array+0x3c>)
 80048aa:	1b64      	subs	r4, r4, r5
 80048ac:	10a4      	asrs	r4, r4, #2
 80048ae:	2600      	movs	r6, #0
 80048b0:	42a6      	cmp	r6, r4
 80048b2:	d109      	bne.n	80048c8 <__libc_init_array+0x24>
 80048b4:	4d0b      	ldr	r5, [pc, #44]	@ (80048e4 <__libc_init_array+0x40>)
 80048b6:	4c0c      	ldr	r4, [pc, #48]	@ (80048e8 <__libc_init_array+0x44>)
 80048b8:	f000 fa54 	bl	8004d64 <_init>
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	2600      	movs	r6, #0
 80048c2:	42a6      	cmp	r6, r4
 80048c4:	d105      	bne.n	80048d2 <__libc_init_array+0x2e>
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 80048c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048cc:	4798      	blx	r3
 80048ce:	3601      	adds	r6, #1
 80048d0:	e7ee      	b.n	80048b0 <__libc_init_array+0xc>
 80048d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d6:	4798      	blx	r3
 80048d8:	3601      	adds	r6, #1
 80048da:	e7f2      	b.n	80048c2 <__libc_init_array+0x1e>
 80048dc:	08004dfc 	.word	0x08004dfc
 80048e0:	08004dfc 	.word	0x08004dfc
 80048e4:	08004dfc 	.word	0x08004dfc
 80048e8:	08004e00 	.word	0x08004e00

080048ec <__retarget_lock_init_recursive>:
 80048ec:	4770      	bx	lr

080048ee <__retarget_lock_acquire_recursive>:
 80048ee:	4770      	bx	lr

080048f0 <__retarget_lock_release_recursive>:
 80048f0:	4770      	bx	lr
	...

080048f4 <_free_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4605      	mov	r5, r0
 80048f8:	2900      	cmp	r1, #0
 80048fa:	d041      	beq.n	8004980 <_free_r+0x8c>
 80048fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004900:	1f0c      	subs	r4, r1, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	bfb8      	it	lt
 8004906:	18e4      	addlt	r4, r4, r3
 8004908:	f000 f8e0 	bl	8004acc <__malloc_lock>
 800490c:	4a1d      	ldr	r2, [pc, #116]	@ (8004984 <_free_r+0x90>)
 800490e:	6813      	ldr	r3, [r2, #0]
 8004910:	b933      	cbnz	r3, 8004920 <_free_r+0x2c>
 8004912:	6063      	str	r3, [r4, #4]
 8004914:	6014      	str	r4, [r2, #0]
 8004916:	4628      	mov	r0, r5
 8004918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800491c:	f000 b8dc 	b.w	8004ad8 <__malloc_unlock>
 8004920:	42a3      	cmp	r3, r4
 8004922:	d908      	bls.n	8004936 <_free_r+0x42>
 8004924:	6820      	ldr	r0, [r4, #0]
 8004926:	1821      	adds	r1, r4, r0
 8004928:	428b      	cmp	r3, r1
 800492a:	bf01      	itttt	eq
 800492c:	6819      	ldreq	r1, [r3, #0]
 800492e:	685b      	ldreq	r3, [r3, #4]
 8004930:	1809      	addeq	r1, r1, r0
 8004932:	6021      	streq	r1, [r4, #0]
 8004934:	e7ed      	b.n	8004912 <_free_r+0x1e>
 8004936:	461a      	mov	r2, r3
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	b10b      	cbz	r3, 8004940 <_free_r+0x4c>
 800493c:	42a3      	cmp	r3, r4
 800493e:	d9fa      	bls.n	8004936 <_free_r+0x42>
 8004940:	6811      	ldr	r1, [r2, #0]
 8004942:	1850      	adds	r0, r2, r1
 8004944:	42a0      	cmp	r0, r4
 8004946:	d10b      	bne.n	8004960 <_free_r+0x6c>
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	4401      	add	r1, r0
 800494c:	1850      	adds	r0, r2, r1
 800494e:	4283      	cmp	r3, r0
 8004950:	6011      	str	r1, [r2, #0]
 8004952:	d1e0      	bne.n	8004916 <_free_r+0x22>
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	6053      	str	r3, [r2, #4]
 800495a:	4408      	add	r0, r1
 800495c:	6010      	str	r0, [r2, #0]
 800495e:	e7da      	b.n	8004916 <_free_r+0x22>
 8004960:	d902      	bls.n	8004968 <_free_r+0x74>
 8004962:	230c      	movs	r3, #12
 8004964:	602b      	str	r3, [r5, #0]
 8004966:	e7d6      	b.n	8004916 <_free_r+0x22>
 8004968:	6820      	ldr	r0, [r4, #0]
 800496a:	1821      	adds	r1, r4, r0
 800496c:	428b      	cmp	r3, r1
 800496e:	bf04      	itt	eq
 8004970:	6819      	ldreq	r1, [r3, #0]
 8004972:	685b      	ldreq	r3, [r3, #4]
 8004974:	6063      	str	r3, [r4, #4]
 8004976:	bf04      	itt	eq
 8004978:	1809      	addeq	r1, r1, r0
 800497a:	6021      	streq	r1, [r4, #0]
 800497c:	6054      	str	r4, [r2, #4]
 800497e:	e7ca      	b.n	8004916 <_free_r+0x22>
 8004980:	bd38      	pop	{r3, r4, r5, pc}
 8004982:	bf00      	nop
 8004984:	200002dc 	.word	0x200002dc

08004988 <sbrk_aligned>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	4e0f      	ldr	r6, [pc, #60]	@ (80049c8 <sbrk_aligned+0x40>)
 800498c:	460c      	mov	r4, r1
 800498e:	6831      	ldr	r1, [r6, #0]
 8004990:	4605      	mov	r5, r0
 8004992:	b911      	cbnz	r1, 800499a <sbrk_aligned+0x12>
 8004994:	f000 f9d6 	bl	8004d44 <_sbrk_r>
 8004998:	6030      	str	r0, [r6, #0]
 800499a:	4621      	mov	r1, r4
 800499c:	4628      	mov	r0, r5
 800499e:	f000 f9d1 	bl	8004d44 <_sbrk_r>
 80049a2:	1c43      	adds	r3, r0, #1
 80049a4:	d103      	bne.n	80049ae <sbrk_aligned+0x26>
 80049a6:	f04f 34ff 	mov.w	r4, #4294967295
 80049aa:	4620      	mov	r0, r4
 80049ac:	bd70      	pop	{r4, r5, r6, pc}
 80049ae:	1cc4      	adds	r4, r0, #3
 80049b0:	f024 0403 	bic.w	r4, r4, #3
 80049b4:	42a0      	cmp	r0, r4
 80049b6:	d0f8      	beq.n	80049aa <sbrk_aligned+0x22>
 80049b8:	1a21      	subs	r1, r4, r0
 80049ba:	4628      	mov	r0, r5
 80049bc:	f000 f9c2 	bl	8004d44 <_sbrk_r>
 80049c0:	3001      	adds	r0, #1
 80049c2:	d1f2      	bne.n	80049aa <sbrk_aligned+0x22>
 80049c4:	e7ef      	b.n	80049a6 <sbrk_aligned+0x1e>
 80049c6:	bf00      	nop
 80049c8:	200002d8 	.word	0x200002d8

080049cc <_malloc_r>:
 80049cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049d0:	1ccd      	adds	r5, r1, #3
 80049d2:	f025 0503 	bic.w	r5, r5, #3
 80049d6:	3508      	adds	r5, #8
 80049d8:	2d0c      	cmp	r5, #12
 80049da:	bf38      	it	cc
 80049dc:	250c      	movcc	r5, #12
 80049de:	2d00      	cmp	r5, #0
 80049e0:	4606      	mov	r6, r0
 80049e2:	db01      	blt.n	80049e8 <_malloc_r+0x1c>
 80049e4:	42a9      	cmp	r1, r5
 80049e6:	d904      	bls.n	80049f2 <_malloc_r+0x26>
 80049e8:	230c      	movs	r3, #12
 80049ea:	6033      	str	r3, [r6, #0]
 80049ec:	2000      	movs	r0, #0
 80049ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ac8 <_malloc_r+0xfc>
 80049f6:	f000 f869 	bl	8004acc <__malloc_lock>
 80049fa:	f8d8 3000 	ldr.w	r3, [r8]
 80049fe:	461c      	mov	r4, r3
 8004a00:	bb44      	cbnz	r4, 8004a54 <_malloc_r+0x88>
 8004a02:	4629      	mov	r1, r5
 8004a04:	4630      	mov	r0, r6
 8004a06:	f7ff ffbf 	bl	8004988 <sbrk_aligned>
 8004a0a:	1c43      	adds	r3, r0, #1
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	d158      	bne.n	8004ac2 <_malloc_r+0xf6>
 8004a10:	f8d8 4000 	ldr.w	r4, [r8]
 8004a14:	4627      	mov	r7, r4
 8004a16:	2f00      	cmp	r7, #0
 8004a18:	d143      	bne.n	8004aa2 <_malloc_r+0xd6>
 8004a1a:	2c00      	cmp	r4, #0
 8004a1c:	d04b      	beq.n	8004ab6 <_malloc_r+0xea>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	4639      	mov	r1, r7
 8004a22:	4630      	mov	r0, r6
 8004a24:	eb04 0903 	add.w	r9, r4, r3
 8004a28:	f000 f98c 	bl	8004d44 <_sbrk_r>
 8004a2c:	4581      	cmp	r9, r0
 8004a2e:	d142      	bne.n	8004ab6 <_malloc_r+0xea>
 8004a30:	6821      	ldr	r1, [r4, #0]
 8004a32:	1a6d      	subs	r5, r5, r1
 8004a34:	4629      	mov	r1, r5
 8004a36:	4630      	mov	r0, r6
 8004a38:	f7ff ffa6 	bl	8004988 <sbrk_aligned>
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d03a      	beq.n	8004ab6 <_malloc_r+0xea>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	442b      	add	r3, r5
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	f8d8 3000 	ldr.w	r3, [r8]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	bb62      	cbnz	r2, 8004aa8 <_malloc_r+0xdc>
 8004a4e:	f8c8 7000 	str.w	r7, [r8]
 8004a52:	e00f      	b.n	8004a74 <_malloc_r+0xa8>
 8004a54:	6822      	ldr	r2, [r4, #0]
 8004a56:	1b52      	subs	r2, r2, r5
 8004a58:	d420      	bmi.n	8004a9c <_malloc_r+0xd0>
 8004a5a:	2a0b      	cmp	r2, #11
 8004a5c:	d917      	bls.n	8004a8e <_malloc_r+0xc2>
 8004a5e:	1961      	adds	r1, r4, r5
 8004a60:	42a3      	cmp	r3, r4
 8004a62:	6025      	str	r5, [r4, #0]
 8004a64:	bf18      	it	ne
 8004a66:	6059      	strne	r1, [r3, #4]
 8004a68:	6863      	ldr	r3, [r4, #4]
 8004a6a:	bf08      	it	eq
 8004a6c:	f8c8 1000 	streq.w	r1, [r8]
 8004a70:	5162      	str	r2, [r4, r5]
 8004a72:	604b      	str	r3, [r1, #4]
 8004a74:	4630      	mov	r0, r6
 8004a76:	f000 f82f 	bl	8004ad8 <__malloc_unlock>
 8004a7a:	f104 000b 	add.w	r0, r4, #11
 8004a7e:	1d23      	adds	r3, r4, #4
 8004a80:	f020 0007 	bic.w	r0, r0, #7
 8004a84:	1ac2      	subs	r2, r0, r3
 8004a86:	bf1c      	itt	ne
 8004a88:	1a1b      	subne	r3, r3, r0
 8004a8a:	50a3      	strne	r3, [r4, r2]
 8004a8c:	e7af      	b.n	80049ee <_malloc_r+0x22>
 8004a8e:	6862      	ldr	r2, [r4, #4]
 8004a90:	42a3      	cmp	r3, r4
 8004a92:	bf0c      	ite	eq
 8004a94:	f8c8 2000 	streq.w	r2, [r8]
 8004a98:	605a      	strne	r2, [r3, #4]
 8004a9a:	e7eb      	b.n	8004a74 <_malloc_r+0xa8>
 8004a9c:	4623      	mov	r3, r4
 8004a9e:	6864      	ldr	r4, [r4, #4]
 8004aa0:	e7ae      	b.n	8004a00 <_malloc_r+0x34>
 8004aa2:	463c      	mov	r4, r7
 8004aa4:	687f      	ldr	r7, [r7, #4]
 8004aa6:	e7b6      	b.n	8004a16 <_malloc_r+0x4a>
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	d1fb      	bne.n	8004aa8 <_malloc_r+0xdc>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6053      	str	r3, [r2, #4]
 8004ab4:	e7de      	b.n	8004a74 <_malloc_r+0xa8>
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	4630      	mov	r0, r6
 8004abc:	f000 f80c 	bl	8004ad8 <__malloc_unlock>
 8004ac0:	e794      	b.n	80049ec <_malloc_r+0x20>
 8004ac2:	6005      	str	r5, [r0, #0]
 8004ac4:	e7d6      	b.n	8004a74 <_malloc_r+0xa8>
 8004ac6:	bf00      	nop
 8004ac8:	200002dc 	.word	0x200002dc

08004acc <__malloc_lock>:
 8004acc:	4801      	ldr	r0, [pc, #4]	@ (8004ad4 <__malloc_lock+0x8>)
 8004ace:	f7ff bf0e 	b.w	80048ee <__retarget_lock_acquire_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	200002d4 	.word	0x200002d4

08004ad8 <__malloc_unlock>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	@ (8004ae0 <__malloc_unlock+0x8>)
 8004ada:	f7ff bf09 	b.w	80048f0 <__retarget_lock_release_recursive>
 8004ade:	bf00      	nop
 8004ae0:	200002d4 	.word	0x200002d4

08004ae4 <__sflush_r>:
 8004ae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aec:	0716      	lsls	r6, r2, #28
 8004aee:	4605      	mov	r5, r0
 8004af0:	460c      	mov	r4, r1
 8004af2:	d454      	bmi.n	8004b9e <__sflush_r+0xba>
 8004af4:	684b      	ldr	r3, [r1, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	dc02      	bgt.n	8004b00 <__sflush_r+0x1c>
 8004afa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	dd48      	ble.n	8004b92 <__sflush_r+0xae>
 8004b00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b02:	2e00      	cmp	r6, #0
 8004b04:	d045      	beq.n	8004b92 <__sflush_r+0xae>
 8004b06:	2300      	movs	r3, #0
 8004b08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b0c:	682f      	ldr	r7, [r5, #0]
 8004b0e:	6a21      	ldr	r1, [r4, #32]
 8004b10:	602b      	str	r3, [r5, #0]
 8004b12:	d030      	beq.n	8004b76 <__sflush_r+0x92>
 8004b14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	0759      	lsls	r1, r3, #29
 8004b1a:	d505      	bpl.n	8004b28 <__sflush_r+0x44>
 8004b1c:	6863      	ldr	r3, [r4, #4]
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b22:	b10b      	cbz	r3, 8004b28 <__sflush_r+0x44>
 8004b24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b26:	1ad2      	subs	r2, r2, r3
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b2c:	6a21      	ldr	r1, [r4, #32]
 8004b2e:	4628      	mov	r0, r5
 8004b30:	47b0      	blx	r6
 8004b32:	1c43      	adds	r3, r0, #1
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	d106      	bne.n	8004b46 <__sflush_r+0x62>
 8004b38:	6829      	ldr	r1, [r5, #0]
 8004b3a:	291d      	cmp	r1, #29
 8004b3c:	d82b      	bhi.n	8004b96 <__sflush_r+0xb2>
 8004b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004be8 <__sflush_r+0x104>)
 8004b40:	410a      	asrs	r2, r1
 8004b42:	07d6      	lsls	r6, r2, #31
 8004b44:	d427      	bmi.n	8004b96 <__sflush_r+0xb2>
 8004b46:	2200      	movs	r2, #0
 8004b48:	6062      	str	r2, [r4, #4]
 8004b4a:	04d9      	lsls	r1, r3, #19
 8004b4c:	6922      	ldr	r2, [r4, #16]
 8004b4e:	6022      	str	r2, [r4, #0]
 8004b50:	d504      	bpl.n	8004b5c <__sflush_r+0x78>
 8004b52:	1c42      	adds	r2, r0, #1
 8004b54:	d101      	bne.n	8004b5a <__sflush_r+0x76>
 8004b56:	682b      	ldr	r3, [r5, #0]
 8004b58:	b903      	cbnz	r3, 8004b5c <__sflush_r+0x78>
 8004b5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b5e:	602f      	str	r7, [r5, #0]
 8004b60:	b1b9      	cbz	r1, 8004b92 <__sflush_r+0xae>
 8004b62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b66:	4299      	cmp	r1, r3
 8004b68:	d002      	beq.n	8004b70 <__sflush_r+0x8c>
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f7ff fec2 	bl	80048f4 <_free_r>
 8004b70:	2300      	movs	r3, #0
 8004b72:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b74:	e00d      	b.n	8004b92 <__sflush_r+0xae>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b0      	blx	r6
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	1c50      	adds	r0, r2, #1
 8004b80:	d1c9      	bne.n	8004b16 <__sflush_r+0x32>
 8004b82:	682b      	ldr	r3, [r5, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0c6      	beq.n	8004b16 <__sflush_r+0x32>
 8004b88:	2b1d      	cmp	r3, #29
 8004b8a:	d001      	beq.n	8004b90 <__sflush_r+0xac>
 8004b8c:	2b16      	cmp	r3, #22
 8004b8e:	d11e      	bne.n	8004bce <__sflush_r+0xea>
 8004b90:	602f      	str	r7, [r5, #0]
 8004b92:	2000      	movs	r0, #0
 8004b94:	e022      	b.n	8004bdc <__sflush_r+0xf8>
 8004b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b9a:	b21b      	sxth	r3, r3
 8004b9c:	e01b      	b.n	8004bd6 <__sflush_r+0xf2>
 8004b9e:	690f      	ldr	r7, [r1, #16]
 8004ba0:	2f00      	cmp	r7, #0
 8004ba2:	d0f6      	beq.n	8004b92 <__sflush_r+0xae>
 8004ba4:	0793      	lsls	r3, r2, #30
 8004ba6:	680e      	ldr	r6, [r1, #0]
 8004ba8:	bf08      	it	eq
 8004baa:	694b      	ldreq	r3, [r1, #20]
 8004bac:	600f      	str	r7, [r1, #0]
 8004bae:	bf18      	it	ne
 8004bb0:	2300      	movne	r3, #0
 8004bb2:	eba6 0807 	sub.w	r8, r6, r7
 8004bb6:	608b      	str	r3, [r1, #8]
 8004bb8:	f1b8 0f00 	cmp.w	r8, #0
 8004bbc:	dde9      	ble.n	8004b92 <__sflush_r+0xae>
 8004bbe:	6a21      	ldr	r1, [r4, #32]
 8004bc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004bc2:	4643      	mov	r3, r8
 8004bc4:	463a      	mov	r2, r7
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	47b0      	blx	r6
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	dc08      	bgt.n	8004be0 <__sflush_r+0xfc>
 8004bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bd6:	81a3      	strh	r3, [r4, #12]
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be0:	4407      	add	r7, r0
 8004be2:	eba8 0800 	sub.w	r8, r8, r0
 8004be6:	e7e7      	b.n	8004bb8 <__sflush_r+0xd4>
 8004be8:	dfbffffe 	.word	0xdfbffffe

08004bec <_fflush_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	690b      	ldr	r3, [r1, #16]
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	b913      	cbnz	r3, 8004bfc <_fflush_r+0x10>
 8004bf6:	2500      	movs	r5, #0
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	b118      	cbz	r0, 8004c06 <_fflush_r+0x1a>
 8004bfe:	6a03      	ldr	r3, [r0, #32]
 8004c00:	b90b      	cbnz	r3, 8004c06 <_fflush_r+0x1a>
 8004c02:	f7ff fc8f 	bl	8004524 <__sinit>
 8004c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f3      	beq.n	8004bf6 <_fflush_r+0xa>
 8004c0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c10:	07d0      	lsls	r0, r2, #31
 8004c12:	d404      	bmi.n	8004c1e <_fflush_r+0x32>
 8004c14:	0599      	lsls	r1, r3, #22
 8004c16:	d402      	bmi.n	8004c1e <_fflush_r+0x32>
 8004c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c1a:	f7ff fe68 	bl	80048ee <__retarget_lock_acquire_recursive>
 8004c1e:	4628      	mov	r0, r5
 8004c20:	4621      	mov	r1, r4
 8004c22:	f7ff ff5f 	bl	8004ae4 <__sflush_r>
 8004c26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c28:	07da      	lsls	r2, r3, #31
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	d4e4      	bmi.n	8004bf8 <_fflush_r+0xc>
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	059b      	lsls	r3, r3, #22
 8004c32:	d4e1      	bmi.n	8004bf8 <_fflush_r+0xc>
 8004c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c36:	f7ff fe5b 	bl	80048f0 <__retarget_lock_release_recursive>
 8004c3a:	e7dd      	b.n	8004bf8 <_fflush_r+0xc>

08004c3c <__swhatbuf_r>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	460c      	mov	r4, r1
 8004c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c44:	2900      	cmp	r1, #0
 8004c46:	b096      	sub	sp, #88	@ 0x58
 8004c48:	4615      	mov	r5, r2
 8004c4a:	461e      	mov	r6, r3
 8004c4c:	da0d      	bge.n	8004c6a <__swhatbuf_r+0x2e>
 8004c4e:	89a3      	ldrh	r3, [r4, #12]
 8004c50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c54:	f04f 0100 	mov.w	r1, #0
 8004c58:	bf14      	ite	ne
 8004c5a:	2340      	movne	r3, #64	@ 0x40
 8004c5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c60:	2000      	movs	r0, #0
 8004c62:	6031      	str	r1, [r6, #0]
 8004c64:	602b      	str	r3, [r5, #0]
 8004c66:	b016      	add	sp, #88	@ 0x58
 8004c68:	bd70      	pop	{r4, r5, r6, pc}
 8004c6a:	466a      	mov	r2, sp
 8004c6c:	f000 f848 	bl	8004d00 <_fstat_r>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	dbec      	blt.n	8004c4e <__swhatbuf_r+0x12>
 8004c74:	9901      	ldr	r1, [sp, #4]
 8004c76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c7e:	4259      	negs	r1, r3
 8004c80:	4159      	adcs	r1, r3
 8004c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c86:	e7eb      	b.n	8004c60 <__swhatbuf_r+0x24>

08004c88 <__smakebuf_r>:
 8004c88:	898b      	ldrh	r3, [r1, #12]
 8004c8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c8c:	079d      	lsls	r5, r3, #30
 8004c8e:	4606      	mov	r6, r0
 8004c90:	460c      	mov	r4, r1
 8004c92:	d507      	bpl.n	8004ca4 <__smakebuf_r+0x1c>
 8004c94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	6123      	str	r3, [r4, #16]
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	6163      	str	r3, [r4, #20]
 8004ca0:	b003      	add	sp, #12
 8004ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca4:	ab01      	add	r3, sp, #4
 8004ca6:	466a      	mov	r2, sp
 8004ca8:	f7ff ffc8 	bl	8004c3c <__swhatbuf_r>
 8004cac:	9f00      	ldr	r7, [sp, #0]
 8004cae:	4605      	mov	r5, r0
 8004cb0:	4639      	mov	r1, r7
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	f7ff fe8a 	bl	80049cc <_malloc_r>
 8004cb8:	b948      	cbnz	r0, 8004cce <__smakebuf_r+0x46>
 8004cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cbe:	059a      	lsls	r2, r3, #22
 8004cc0:	d4ee      	bmi.n	8004ca0 <__smakebuf_r+0x18>
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	f043 0302 	orr.w	r3, r3, #2
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	e7e2      	b.n	8004c94 <__smakebuf_r+0xc>
 8004cce:	89a3      	ldrh	r3, [r4, #12]
 8004cd0:	6020      	str	r0, [r4, #0]
 8004cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd6:	81a3      	strh	r3, [r4, #12]
 8004cd8:	9b01      	ldr	r3, [sp, #4]
 8004cda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004cde:	b15b      	cbz	r3, 8004cf8 <__smakebuf_r+0x70>
 8004ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f000 f81d 	bl	8004d24 <_isatty_r>
 8004cea:	b128      	cbz	r0, 8004cf8 <__smakebuf_r+0x70>
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	81a3      	strh	r3, [r4, #12]
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	431d      	orrs	r5, r3
 8004cfc:	81a5      	strh	r5, [r4, #12]
 8004cfe:	e7cf      	b.n	8004ca0 <__smakebuf_r+0x18>

08004d00 <_fstat_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4d07      	ldr	r5, [pc, #28]	@ (8004d20 <_fstat_r+0x20>)
 8004d04:	2300      	movs	r3, #0
 8004d06:	4604      	mov	r4, r0
 8004d08:	4608      	mov	r0, r1
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	602b      	str	r3, [r5, #0]
 8004d0e:	f7fc f92a 	bl	8000f66 <_fstat>
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	d102      	bne.n	8004d1c <_fstat_r+0x1c>
 8004d16:	682b      	ldr	r3, [r5, #0]
 8004d18:	b103      	cbz	r3, 8004d1c <_fstat_r+0x1c>
 8004d1a:	6023      	str	r3, [r4, #0]
 8004d1c:	bd38      	pop	{r3, r4, r5, pc}
 8004d1e:	bf00      	nop
 8004d20:	200002d0 	.word	0x200002d0

08004d24 <_isatty_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4d06      	ldr	r5, [pc, #24]	@ (8004d40 <_isatty_r+0x1c>)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	602b      	str	r3, [r5, #0]
 8004d30:	f7fc f929 	bl	8000f86 <_isatty>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d102      	bne.n	8004d3e <_isatty_r+0x1a>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	b103      	cbz	r3, 8004d3e <_isatty_r+0x1a>
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	200002d0 	.word	0x200002d0

08004d44 <_sbrk_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4d06      	ldr	r5, [pc, #24]	@ (8004d60 <_sbrk_r+0x1c>)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	602b      	str	r3, [r5, #0]
 8004d50:	f7fc f932 	bl	8000fb8 <_sbrk>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_sbrk_r+0x1a>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_sbrk_r+0x1a>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	200002d0 	.word	0x200002d0

08004d64 <_init>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	bf00      	nop
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr

08004d70 <_fini>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	bf00      	nop
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr
