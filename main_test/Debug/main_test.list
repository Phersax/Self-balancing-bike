
main_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005914  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005adc  08005adc  00006adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b4c  08005b4c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005b4c  08005b4c  00006b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b54  08005b54  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b54  08005b54  00006b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b58  08005b58  00006b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005b5c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000068  08005bc4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005bc4  00007320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e79a  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c8  00000000  00000000  00015832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00017c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b43  00000000  00000000  00018a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002352d  00000000  00000000  000195bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012478  00000000  00000000  0003cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d35bd  00000000  00000000  0004ef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012251d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004438  00000000  00000000  00122560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00126998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000068 	.word	0x20000068
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005ac4 	.word	0x08005ac4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000006c 	.word	0x2000006c
 8000204:	08005ac4 	.word	0x08005ac4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d88:	f000 ff6c 	bl	8001c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8c:	f000 f83c 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d90:	f000 f97a 	bl	8001088 <MX_GPIO_Init>
  MX_TIM5_Init();
 8000d94:	f000 f920 	bl	8000fd8 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000d98:	f000 f8a2 	bl	8000ee0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000d9c:	f000 f8ce 	bl	8000f3c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000da0:	4811      	ldr	r0, [pc, #68]	@ (8000de8 <main+0x64>)
 8000da2:	f003 fa0d 	bl	80041c0 <HAL_TIM_Base_Start_IT>
  pid_init(&pid, 1, 1, 0.8, -100, 100);
 8000da6:	ed9f 2a11 	vldr	s4, [pc, #68]	@ 8000dec <main+0x68>
 8000daa:	eddf 1a11 	vldr	s3, [pc, #68]	@ 8000df0 <main+0x6c>
 8000dae:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8000df4 <main+0x70>
 8000db2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000db6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000dba:	480f      	ldr	r0, [pc, #60]	@ (8000df8 <main+0x74>)
 8000dbc:	f000 fba0 	bl	8001500 <pid_init>
  pid_set_setpoint(&pid, 0);
 8000dc0:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8000dfc <main+0x78>
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <main+0x74>)
 8000dc6:	f000 fbc9 	bl	800155c <pid_set_setpoint>
  //mpu6050_init();
  status = mpu6050_init();
 8000dca:	f000 f9e5 	bl	8001198 <mpu6050_init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <main+0x7c>)
 8000dd4:	701a      	strb	r2, [r3, #0]
  nidec_h24_init(GPIO_PIN_10, GPIOB);
 8000dd6:	490b      	ldr	r1, [pc, #44]	@ (8000e04 <main+0x80>)
 8000dd8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000ddc:	f000 fa7e 	bl	80012dc <nidec_h24_init>
	  gyro_z = res_gz.data;
	  status_gz = res_gz.status;

	  nidec_h24_Move(80); //antiorario
*/
	  HAL_Delay(10);
 8000de0:	200a      	movs	r0, #10
 8000de2:	f000 ffb1 	bl	8001d48 <HAL_Delay>
 8000de6:	e7fb      	b.n	8000de0 <main+0x5c>
 8000de8:	20000110 	.word	0x20000110
 8000dec:	42c80000 	.word	0x42c80000
 8000df0:	c2c80000 	.word	0xc2c80000
 8000df4:	3f4ccccd 	.word	0x3f4ccccd
 8000df8:	20000084 	.word	0x20000084
 8000dfc:	00000000 	.word	0x00000000
 8000e00:	200001a0 	.word	0x200001a0
 8000e04:	40020400 	.word	0x40020400

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b094      	sub	sp, #80	@ 0x50
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	2234      	movs	r2, #52	@ 0x34
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f004 fba0 	bl	800555c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	4b29      	ldr	r3, [pc, #164]	@ (8000ed8 <SystemClock_Config+0xd0>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	4a28      	ldr	r2, [pc, #160]	@ (8000ed8 <SystemClock_Config+0xd0>)
 8000e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3c:	4b26      	ldr	r3, [pc, #152]	@ (8000ed8 <SystemClock_Config+0xd0>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <SystemClock_Config+0xd4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e54:	4a21      	ldr	r2, [pc, #132]	@ (8000edc <SystemClock_Config+0xd4>)
 8000e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <SystemClock_Config+0xd4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e70:	2310      	movs	r3, #16
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e74:	2302      	movs	r3, #2
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000e80:	2354      	movs	r3, #84	@ 0x54
 8000e82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 fe3d 	bl	8003b14 <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ea0:	f000 f974 	bl	800118c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fb77 	bl	80035b4 <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ecc:	f000 f95e 	bl	800118c <Error_Handler>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3750      	adds	r7, #80	@ 0x50
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40007000 	.word	0x40007000

08000ee0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <MX_I2C1_Init+0x50>)
 8000ee6:	4a13      	ldr	r2, [pc, #76]	@ (8000f34 <MX_I2C1_Init+0x54>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_I2C1_Init+0x50>)
 8000eec:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <MX_I2C1_Init+0x58>)
 8000eee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <MX_I2C1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <MX_I2C1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <MX_I2C1_Init+0x50>)
 8000efe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <MX_I2C1_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <MX_I2C1_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <MX_I2C1_Init+0x50>)
 8000f1e:	f001 f9f7 	bl	8002310 <HAL_I2C_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f28:	f000 f930 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000bc 	.word	0x200000bc
 8000f34:	40005400 	.word	0x40005400
 8000f38:	000186a0 	.word	0x000186a0

08000f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <MX_TIM3_Init+0x94>)
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd4 <MX_TIM3_Init+0x98>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MX_TIM3_Init+0x94>)
 8000f60:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000f64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <MX_TIM3_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <MX_TIM3_Init+0x94>)
 8000f6e:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000f72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f74:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <MX_TIM3_Init+0x94>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <MX_TIM3_Init+0x94>)
 8000f7c:	2280      	movs	r2, #128	@ 0x80
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f80:	4813      	ldr	r0, [pc, #76]	@ (8000fd0 <MX_TIM3_Init+0x94>)
 8000f82:	f003 f865 	bl	8004050 <HAL_TIM_Base_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f8c:	f000 f8fe 	bl	800118c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <MX_TIM3_Init+0x94>)
 8000f9e:	f003 fc49 	bl	8004834 <HAL_TIM_ConfigClockSource>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000fa8:	f000 f8f0 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_TIM3_Init+0x94>)
 8000fba:	f004 f847 	bl	800504c <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000fc4:	f000 f8e2 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000110 	.word	0x20000110
 8000fd4:	40000400 	.word	0x40000400

08000fd8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	615a      	str	r2, [r3, #20]
 8000ff8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <MX_TIM5_Init+0xa8>)
 8000ffc:	4a21      	ldr	r2, [pc, #132]	@ (8001084 <MX_TIM5_Init+0xac>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 43;
 8001000:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <MX_TIM5_Init+0xa8>)
 8001002:	222b      	movs	r2, #43	@ 0x2b
 8001004:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <MX_TIM5_Init+0xa8>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 800100c:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <MX_TIM5_Init+0xa8>)
 800100e:	2263      	movs	r2, #99	@ 0x63
 8001010:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001012:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <MX_TIM5_Init+0xa8>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001018:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <MX_TIM5_Init+0xa8>)
 800101a:	2280      	movs	r2, #128	@ 0x80
 800101c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800101e:	4818      	ldr	r0, [pc, #96]	@ (8001080 <MX_TIM5_Init+0xa8>)
 8001020:	f003 f93e 	bl	80042a0 <HAL_TIM_PWM_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800102a:	f000 f8af 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	4619      	mov	r1, r3
 800103c:	4810      	ldr	r0, [pc, #64]	@ (8001080 <MX_TIM5_Init+0xa8>)
 800103e:	f004 f805 	bl	800504c <HAL_TIMEx_MasterConfigSynchronization>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001048:	f000 f8a0 	bl	800118c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104c:	2360      	movs	r3, #96	@ 0x60
 800104e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	4807      	ldr	r0, [pc, #28]	@ (8001080 <MX_TIM5_Init+0xa8>)
 8001064:	f003 fb24 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800106e:	f000 f88d 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001072:	4803      	ldr	r0, [pc, #12]	@ (8001080 <MX_TIM5_Init+0xa8>)
 8001074:	f000 fca2 	bl	80019bc <HAL_TIM_MspPostInit>

}
 8001078:	bf00      	nop
 800107a:	3728      	adds	r7, #40	@ 0x28
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000158 	.word	0x20000158
 8001084:	40000c00 	.word	0x40000c00

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <MX_GPIO_Init+0x9c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001124 <MX_GPIO_Init+0x9c>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <MX_GPIO_Init+0x9c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_GPIO_Init+0x9c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a18      	ldr	r2, [pc, #96]	@ (8001124 <MX_GPIO_Init+0x9c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_GPIO_Init+0x9c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <MX_GPIO_Init+0x9c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <MX_GPIO_Init+0x9c>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <MX_GPIO_Init+0x9c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f8:	480b      	ldr	r0, [pc, #44]	@ (8001128 <MX_GPIO_Init+0xa0>)
 80010fa:	f001 f8ef 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Direction_Pin */
  GPIO_InitStruct.Pin = Direction_Pin;
 80010fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001108:	2302      	movs	r3, #2
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Direction_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	4804      	ldr	r0, [pc, #16]	@ (8001128 <MX_GPIO_Init+0xa0>)
 8001118:	f000 ff4c 	bl	8001fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	40020400 	.word	0x40020400

0800112c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a10      	ldr	r2, [pc, #64]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d11a      	bne.n	8001174 <HAL_TIM_PeriodElapsedCallback+0x48>
		res_gx = mpu6050_gyrox();
 800113e:	f000 f88b 	bl	8001258 <mpu6050_gyrox>
 8001142:	4603      	mov	r3, r0
 8001144:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001146:	6013      	str	r3, [r2, #0]
		pwm = pid_compute_control_action(&pid, res_gx.data, 0);
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001156:	2100      	movs	r1, #0
 8001158:	eeb0 0a67 	vmov.f32	s0, s15
 800115c:	4809      	ldr	r0, [pc, #36]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800115e:	f000 fa1b 	bl	8001598 <pid_compute_control_action>
 8001162:	eef0 7a40 	vmov.f32	s15, s0
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001168:	edc3 7a00 	vstr	s15, [r3]
		nidec_h24_Move(-40);
 800116c:	f06f 0027 	mvn.w	r0, #39	@ 0x27
 8001170:	f000 f9a0 	bl	80014b4 <nidec_h24_Move>
	}
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40000400 	.word	0x40000400
 8001180:	200001a4 	.word	0x200001a4
 8001184:	20000084 	.word	0x20000084
 8001188:	200001a8 	.word	0x200001a8

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <Error_Handler+0x8>

08001198 <mpu6050_init>:
    gy_bias = gy_sum / num_samples;
    gz_bias = gz_sum / num_samples;
}
*/

HAL_StatusTypeDef mpu6050_init(){
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDR, 1, 100);
 800119e:	2364      	movs	r3, #100	@ 0x64
 80011a0:	2201      	movs	r2, #1
 80011a2:	21d0      	movs	r1, #208	@ 0xd0
 80011a4:	4827      	ldr	r0, [pc, #156]	@ (8001244 <mpu6050_init+0xac>)
 80011a6:	f001 fd23 	bl	8002bf0 <HAL_I2C_IsDeviceReady>
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK) {
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d13f      	bne.n	8001234 <mpu6050_init+0x9c>
			printf("mpu6050 is ready \n");
 80011b4:	4824      	ldr	r0, [pc, #144]	@ (8001248 <mpu6050_init+0xb0>)
 80011b6:	f004 f8f1 	bl	800539c <puts>
			printf("mpu6050 configuration... \n");
 80011ba:	4824      	ldr	r0, [pc, #144]	@ (800124c <mpu6050_init+0xb4>)
 80011bc:	f004 f8ee 	bl	800539c <puts>

			uint8_t data;

			/* power management register 0X6B must be all 0s to wake the sensor up */
			data = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 100);
 80011c4:	2364      	movs	r3, #100	@ 0x64
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	2301      	movs	r3, #1
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	1dbb      	adds	r3, r7, #6
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	226b      	movs	r2, #107	@ 0x6b
 80011d4:	21d0      	movs	r1, #208	@ 0xd0
 80011d6:	481b      	ldr	r0, [pc, #108]	@ (8001244 <mpu6050_init+0xac>)
 80011d8:	f001 f9de 	bl	8002598 <HAL_I2C_Mem_Write>

			/* Set DATA RATE of 1KHz by writing SMPLRT_DIV register */
			data = 0x07;
 80011dc:	2307      	movs	r3, #7
 80011de:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 100);
 80011e0:	2364      	movs	r3, #100	@ 0x64
 80011e2:	9302      	str	r3, [sp, #8]
 80011e4:	2301      	movs	r3, #1
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	1dbb      	adds	r3, r7, #6
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	2219      	movs	r2, #25
 80011f0:	21d0      	movs	r1, #208	@ 0xd0
 80011f2:	4814      	ldr	r0, [pc, #80]	@ (8001244 <mpu6050_init+0xac>)
 80011f4:	f001 f9d0 	bl	8002598 <HAL_I2C_Mem_Write>

			/*  Set accelerometer configuration in ACCEL_CONFIG Register */
			/* XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g */
			data = FS_ACC_2G;
 80011f8:	2300      	movs	r3, #0
 80011fa:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 100);
 80011fc:	2364      	movs	r3, #100	@ 0x64
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	2301      	movs	r3, #1
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	221c      	movs	r2, #28
 800120c:	21d0      	movs	r1, #208	@ 0xd0
 800120e:	480d      	ldr	r0, [pc, #52]	@ (8001244 <mpu6050_init+0xac>)
 8001210:	f001 f9c2 	bl	8002598 <HAL_I2C_Mem_Write>

			/* Set Gyroscope configuration in GYRO_CONFIG Register */
			/* XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 deg/s */
			data = FS_GYRO_250;
 8001214:	2300      	movs	r3, #0
 8001216:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 100);
 8001218:	2364      	movs	r3, #100	@ 0x64
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	1dbb      	adds	r3, r7, #6
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	221b      	movs	r2, #27
 8001228:	21d0      	movs	r1, #208	@ 0xd0
 800122a:	4806      	ldr	r0, [pc, #24]	@ (8001244 <mpu6050_init+0xac>)
 800122c:	f001 f9b4 	bl	8002598 <HAL_I2C_Mem_Write>
			return HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	e003      	b.n	800123c <mpu6050_init+0xa4>
		} else {
			printf("mpu6050 error, check connection cables \n");
 8001234:	4806      	ldr	r0, [pc, #24]	@ (8001250 <mpu6050_init+0xb8>)
 8001236:	f004 f8b1 	bl	800539c <puts>
			return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
		}
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000bc 	.word	0x200000bc
 8001248:	08005adc 	.word	0x08005adc
 800124c:	08005af0 	.word	0x08005af0
 8001250:	08005b0c 	.word	0x08005b0c
 8001254:	00000000 	.word	0x00000000

08001258 <mpu6050_gyrox>:
		res.data = imu_data / ACC_SCALE;
		return res;
}

/* Accelerometer reading MPU6050 */
result mpu6050_gyrox(){
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	@ 0x30
 800125c:	af04      	add	r7, sp, #16
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 800125e:	23c8      	movs	r3, #200	@ 0xc8
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	230e      	movs	r3, #14
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2301      	movs	r3, #1
 800126c:	223b      	movs	r2, #59	@ 0x3b
 800126e:	21d0      	movs	r1, #208	@ 0xd0
 8001270:	4819      	ldr	r0, [pc, #100]	@ (80012d8 <mpu6050_gyrox+0x80>)
 8001272:	f001 fa8b 	bl	800278c <HAL_I2C_Mem_Read>
 8001276:	4603      	mov	r3, r0
 8001278:	77fb      	strb	r3, [r7, #31]
	short imu_data = buffer[8] << 8  | buffer[9];
 800127a:	7b3b      	ldrb	r3, [r7, #12]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21a      	sxth	r2, r3
 8001280:	7b7b      	ldrb	r3, [r7, #13]
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	83bb      	strh	r3, [r7, #28]
	res.status = status;
 8001288:	7ffb      	ldrb	r3, [r7, #31]
 800128a:	75bb      	strb	r3, [r7, #22]
	res.data = imu_data / GYRO_SCALE;
 800128c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f90b 	bl	80004ac <__aeabi_i2d>
 8001296:	a30e      	add	r3, pc, #56	@ (adr r3, 80012d0 <mpu6050_gyrox+0x78>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff fa9a 	bl	80007d4 <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fb7c 	bl	80009a4 <__aeabi_d2iz>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	82bb      	strh	r3, [r7, #20]
	return res;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	2300      	movs	r3, #0
 80012b8:	8b3a      	ldrh	r2, [r7, #24]
 80012ba:	f362 030f 	bfi	r3, r2, #0, #16
 80012be:	8b7a      	ldrh	r2, [r7, #26]
 80012c0:	f362 431f 	bfi	r3, r2, #16, #16
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	f3af 8000 	nop.w
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40606000 	.word	0x40606000
 80012d8:	200000bc 	.word	0x200000bc

080012dc <nidec_h24_init>:
static  uint16_t direction_pin;
static  GPIO_TypeDef *direction_port;

/*Init the motor*/

void nidec_h24_init(uint16_t DIRECTION_Pin, GPIO_TypeDef *DIRECTION_GPIO_Port){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b090      	sub	sp, #64	@ 0x40
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	80fb      	strh	r3, [r7, #6]

    GPIO_InitTypeDef GPIO_InitStruct = {0};  // Declare the GPIO init struct
 80012e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]

    if (DIRECTION_GPIO_Port == GPIOA) {
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4a60      	ldr	r2, [pc, #384]	@ (800147c <nidec_h24_init+0x1a0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d10e      	bne.n	800131e <nidec_h24_init+0x42>
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001304:	4b5e      	ldr	r3, [pc, #376]	@ (8001480 <nidec_h24_init+0x1a4>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	4a5d      	ldr	r2, [pc, #372]	@ (8001480 <nidec_h24_init+0x1a4>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001310:	4b5b      	ldr	r3, [pc, #364]	@ (8001480 <nidec_h24_init+0x1a4>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800131a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800131c:	e083      	b.n	8001426 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOB) {
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	4a58      	ldr	r2, [pc, #352]	@ (8001484 <nidec_h24_init+0x1a8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10e      	bne.n	8001344 <nidec_h24_init+0x68>
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
 800132a:	4b55      	ldr	r3, [pc, #340]	@ (8001480 <nidec_h24_init+0x1a4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a54      	ldr	r2, [pc, #336]	@ (8001480 <nidec_h24_init+0x1a4>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b52      	ldr	r3, [pc, #328]	@ (8001480 <nidec_h24_init+0x1a4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	e070      	b.n	8001426 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOC) {
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	4a50      	ldr	r2, [pc, #320]	@ (8001488 <nidec_h24_init+0x1ac>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d10e      	bne.n	800136a <nidec_h24_init+0x8e>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	4b4b      	ldr	r3, [pc, #300]	@ (8001480 <nidec_h24_init+0x1a4>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	4a4a      	ldr	r2, [pc, #296]	@ (8001480 <nidec_h24_init+0x1a4>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6313      	str	r3, [r2, #48]	@ 0x30
 800135c:	4b48      	ldr	r3, [pc, #288]	@ (8001480 <nidec_h24_init+0x1a4>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	623b      	str	r3, [r7, #32]
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	e05d      	b.n	8001426 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOD) {
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	4a47      	ldr	r2, [pc, #284]	@ (800148c <nidec_h24_init+0x1b0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10e      	bne.n	8001390 <nidec_h24_init+0xb4>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	4b42      	ldr	r3, [pc, #264]	@ (8001480 <nidec_h24_init+0x1a4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a41      	ldr	r2, [pc, #260]	@ (8001480 <nidec_h24_init+0x1a4>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b3f      	ldr	r3, [pc, #252]	@ (8001480 <nidec_h24_init+0x1a4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	e04a      	b.n	8001426 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOE) {
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	4a3f      	ldr	r2, [pc, #252]	@ (8001490 <nidec_h24_init+0x1b4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d10e      	bne.n	80013b6 <nidec_h24_init+0xda>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	4b38      	ldr	r3, [pc, #224]	@ (8001480 <nidec_h24_init+0x1a4>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	4a37      	ldr	r2, [pc, #220]	@ (8001480 <nidec_h24_init+0x1a4>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a8:	4b35      	ldr	r3, [pc, #212]	@ (8001480 <nidec_h24_init+0x1a4>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	e037      	b.n	8001426 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOF) {
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	4a36      	ldr	r2, [pc, #216]	@ (8001494 <nidec_h24_init+0x1b8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10e      	bne.n	80013dc <nidec_h24_init+0x100>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001480 <nidec_h24_init+0x1a4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001480 <nidec_h24_init+0x1a4>)
 80013c8:	f043 0320 	orr.w	r3, r3, #32
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001480 <nidec_h24_init+0x1a4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0320 	and.w	r3, r3, #32
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	e024      	b.n	8001426 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOG) {
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	4a2e      	ldr	r2, [pc, #184]	@ (8001498 <nidec_h24_init+0x1bc>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d10e      	bne.n	8001402 <nidec_h24_init+0x126>
        __HAL_RCC_GPIOG_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <nidec_h24_init+0x1a4>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ec:	4a24      	ldr	r2, [pc, #144]	@ (8001480 <nidec_h24_init+0x1a4>)
 80013ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f4:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <nidec_h24_init+0x1a4>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	e011      	b.n	8001426 <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOH) {
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	4a25      	ldr	r2, [pc, #148]	@ (800149c <nidec_h24_init+0x1c0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10d      	bne.n	8001426 <nidec_h24_init+0x14a>
        __HAL_RCC_GPIOH_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <nidec_h24_init+0x1a4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <nidec_h24_init+0x1a4>)
 8001414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <nidec_h24_init+0x1a4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    }

    direction_pin = DIRECTION_Pin;
 8001426:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <nidec_h24_init+0x1c4>)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	8013      	strh	r3, [r2, #0]
    direction_port = DIRECTION_GPIO_Port;
 800142c:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <nidec_h24_init+0x1c8>)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	6013      	str	r3, [r2, #0]

	/*Configure GPIO pin : Direction_Pin */
	GPIO_InitStruct.Pin = DIRECTION_Pin;
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800143a:	2302      	movs	r3, #2
 800143c:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001446:	4619      	mov	r1, r3
 8001448:	6838      	ldr	r0, [r7, #0]
 800144a:	f000 fdb3 	bl	8001fb4 <HAL_GPIO_Init>

	// Set the pin to low initially
	HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, GPIO_PIN_RESET);
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	f000 ff41 	bl	80022dc <HAL_GPIO_WritePin>

	// Start PWM on the specified timer and channel
	TIM5->CCR1 = 0;
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <nidec_h24_init+0x1cc>)
 800145c:	2200      	movs	r2, #0
 800145e:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_Base_Start(&htim5);
 8001460:	4812      	ldr	r0, [pc, #72]	@ (80014ac <nidec_h24_init+0x1d0>)
 8001462:	f002 fe45 	bl	80040f0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim5, Channel);
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <nidec_h24_init+0x1d4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	480f      	ldr	r0, [pc, #60]	@ (80014ac <nidec_h24_init+0x1d0>)
 800146e:	f002 ff67 	bl	8004340 <HAL_TIM_PWM_Start>
}
 8001472:	bf00      	nop
 8001474:	3740      	adds	r7, #64	@ 0x40
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40020000 	.word	0x40020000
 8001480:	40023800 	.word	0x40023800
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40021400 	.word	0x40021400
 8001498:	40021800 	.word	0x40021800
 800149c:	40021c00 	.word	0x40021c00
 80014a0:	200001b0 	.word	0x200001b0
 80014a4:	200001b4 	.word	0x200001b4
 80014a8:	40000c00 	.word	0x40000c00
 80014ac:	20000158 	.word	0x20000158
 80014b0:	200001ac 	.word	0x200001ac

080014b4 <nidec_h24_Move>:

void nidec_h24_Move(int32_t dutyCycle){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

    // Calculate the compare value
    //uint32_t ccr = (uint16_t)(dutyCycle * (float)(htim5.Instance->ARR + 1))/100;

    // Set the PWM duty cycle
    TIM5->CCR1 = abs(dutyCycle);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014c2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <nidec_h24_Move+0x40>)
 80014c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (dutyCycle > 0) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dd02      	ble.n	80014d6 <nidec_h24_Move+0x22>
        dir = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e001      	b.n	80014da <nidec_h24_Move+0x26>
    }else{
        dir = 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
    }

	// Set direction motor
	HAL_GPIO_WritePin(direction_port, direction_pin, dir);
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <nidec_h24_Move+0x44>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a07      	ldr	r2, [pc, #28]	@ (80014fc <nidec_h24_Move+0x48>)
 80014e0:	8811      	ldrh	r1, [r2, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fef8 	bl	80022dc <HAL_GPIO_WritePin>

    // Generate an update event to reload the value immediately
    //htim5.Instance->EGR = TIM_EGR_UG;
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40000c00 	.word	0x40000c00
 80014f8:	200001b4 	.word	0x200001b4
 80014fc:	200001b0 	.word	0x200001b0

08001500 <pid_init>:
static float pid_get_current_sampling_time(PID_t *p);
void pid_update_ts(PID_t *p);

float p_action, i_action, d_action, error_debug;

void pid_init(PID_t *p, float k_p, float k_i, float k_d, float min_out, float max_out){
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6178      	str	r0, [r7, #20]
 8001508:	ed87 0a04 	vstr	s0, [r7, #16]
 800150c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001510:	ed87 1a02 	vstr	s2, [r7, #8]
 8001514:	edc7 1a01 	vstr	s3, [r7, #4]
 8001518:	ed87 2a00 	vstr	s4, [r7]
    p->k_p = k_p;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	611a      	str	r2, [r3, #16]
    p->k_i = k_i;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	615a      	str	r2, [r3, #20]
    p->k_d = k_d;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	619a      	str	r2, [r3, #24]
    p->integral_error = 0;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
    p->last_error = 0;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
    p->last_updated_ts = 0;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
    p->min_output = min_out;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	621a      	str	r2, [r3, #32]
    p->max_output = max_out;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	61da      	str	r2, [r3, #28]
}
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <pid_set_setpoint>:

void pid_set_setpoint(PID_t *p, float set_point){
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	ed87 0a00 	vstr	s0, [r7]
    p->set_point = set_point;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	605a      	str	r2, [r3, #4]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <pid_get_setpoint>:

float pid_get_setpoint(PID_t *p){
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
    return p->set_point;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	ee07 3a90 	vmov	s15, r3
}
 800158a:	eeb0 0a67 	vmov.f32	s0, s15
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <pid_compute_control_action>:

float pid_compute_control_action(PID_t *p, float est_output, float *est_out_derivative){
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	@ 0x30
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80015a4:	6079      	str	r1, [r7, #4]
    float delta_T;
    float error, integral_error;
    float u;
    static float last_u;
    float derivative;
    float alpha = 0.9;
 80015a6:	4b87      	ldr	r3, [pc, #540]	@ (80017c4 <pid_compute_control_action+0x22c>)
 80015a8:	623b      	str	r3, [r7, #32]
    float k_p = p->k_p;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	61fb      	str	r3, [r7, #28]

    error = pid_get_setpoint(p) - est_output;
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7ff ffe2 	bl	800157a <pid_get_setpoint>
 80015b6:	eeb0 7a40 	vmov.f32	s14, s0
 80015ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80015be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c2:	edc7 7a06 	vstr	s15, [r7, #24]

    delta_T = pid_get_current_sampling_time(p);
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f916 	bl	80017f8 <pid_get_current_sampling_time>
 80015cc:	ed87 0a05 	vstr	s0, [r7, #20]

    if (p->k_d != 0.0){
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80015d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	d04a      	beq.n	8001676 <pid_compute_control_action+0xde>
        if (est_out_derivative == NULL){
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d127      	bne.n	8001636 <pid_compute_control_action+0x9e>
            derivative = (1 - alpha) * (error - p->last_error)/delta_T + alpha * p->d_term/(p->k_d * k_p);
 80015e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80015ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80015f8:	edd7 6a06 	vldr	s13, [r7, #24]
 80015fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001600:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001604:	edd7 7a05 	vldr	s15, [r7, #20]
 8001608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001612:	edd7 7a08 	vldr	s15, [r7, #32]
 8001616:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001620:	edd7 7a07 	vldr	s15, [r7, #28]
 8001624:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001628:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800162c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001630:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001634:	e022      	b.n	800167c <pid_compute_control_action+0xe4>
        } else {
            derivative = (1 - alpha) * (*est_out_derivative) + alpha * p->d_term/(p->k_d * k_p);
 8001636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800163a:	edd7 7a08 	vldr	s15, [r7, #32]
 800163e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001652:	edd7 7a08 	vldr	s15, [r7, #32]
 8001656:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001660:	edd7 7a07 	vldr	s15, [r7, #28]
 8001664:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001668:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001674:	e002      	b.n	800167c <pid_compute_control_action+0xe4>
        }
    } else {
        derivative = 0;
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (error > p->pos_deadzone || error < p->neg_deadzone){
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001682:	ed97 7a06 	vldr	s14, [r7, #24]
 8001686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168e:	dc09      	bgt.n	80016a4 <pid_compute_control_action+0x10c>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001696:	ed97 7a06 	vldr	s14, [r7, #24]
 800169a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	d50d      	bpl.n	80016c0 <pid_compute_control_action+0x128>
        integral_error = p->integral_error + delta_T * error;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80016aa:	edd7 6a05 	vldr	s13, [r7, #20]
 80016ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80016b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ba:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80016be:	e002      	b.n	80016c6 <pid_compute_control_action+0x12e>
    } else {
        integral_error = p->integral_error;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    u = k_p * (error + p->k_i * integral_error + p->k_d * derivative);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	ed93 7a05 	vldr	s14, [r3, #20]
 80016cc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80016d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	edd3 6a06 	vldr	s13, [r3, #24]
 80016e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80016e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80016f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    p->p_term = k_p * error;
 80016fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80016fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    p->i_term = k_p * p->k_i * integral_error;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001712:	edd7 7a07 	vldr	s15, [r7, #28]
 8001716:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800171e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    p->d_term = k_p * p->k_d * derivative;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	ed93 7a06 	vldr	s14, [r3, #24]
 800172e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001736:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800173a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    p_action = p->p_term;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001748:	4a1f      	ldr	r2, [pc, #124]	@ (80017c8 <pid_compute_control_action+0x230>)
 800174a:	6013      	str	r3, [r2, #0]
    i_action = p->i_term;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001750:	4a1e      	ldr	r2, [pc, #120]	@ (80017cc <pid_compute_control_action+0x234>)
 8001752:	6013      	str	r3, [r2, #0]
    d_action = p->d_term;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001758:	4a1d      	ldr	r2, [pc, #116]	@ (80017d0 <pid_compute_control_action+0x238>)
 800175a:	6013      	str	r3, [r2, #0]

    // reset wind-up
    if (u < p->min_output) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001762:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d503      	bpl.n	8001778 <pid_compute_control_action+0x1e0>
	u = p->min_output;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001776:	e010      	b.n	800179a <pid_compute_control_action+0x202>
    } else if (u > p->max_output) {
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	edd3 7a07 	vldr	s15, [r3, #28]
 800177e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	dd03      	ble.n	8001794 <pid_compute_control_action+0x1fc>
	u = p->max_output;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001792:	e002      	b.n	800179a <pid_compute_control_action+0x202>
    } else {
	p->integral_error = integral_error;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001798:	609a      	str	r2, [r3, #8]
    }

    last_u = u;
 800179a:	4a0e      	ldr	r2, [pc, #56]	@ (80017d4 <pid_compute_control_action+0x23c>)
 800179c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179e:	6013      	str	r3, [r2, #0]

    p->last_error = error;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	60da      	str	r2, [r3, #12]
    error_debug = error;
 80017a6:	4a0c      	ldr	r2, [pc, #48]	@ (80017d8 <pid_compute_control_action+0x240>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6013      	str	r3, [r2, #0]
    pid_update_ts(p);
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f815 	bl	80017dc <pid_update_ts>
    return u;
 80017b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b4:	ee07 3a90 	vmov	s15, r3
}
 80017b8:	eeb0 0a67 	vmov.f32	s0, s15
 80017bc:	3730      	adds	r7, #48	@ 0x30
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	3f666666 	.word	0x3f666666
 80017c8:	200001b8 	.word	0x200001b8
 80017cc:	200001bc 	.word	0x200001bc
 80017d0:	200001c0 	.word	0x200001c0
 80017d4:	200001c8 	.word	0x200001c8
 80017d8:	200001c4 	.word	0x200001c4

080017dc <pid_update_ts>:

float pid_get_error(PID_t *p){
	return p->last_error;
}

void pid_update_ts(PID_t *p){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	p->last_updated_ts = HAL_GetTick();
 80017e4:	f000 faa4 	bl	8001d30 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	601a      	str	r2, [r3, #0]
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <pid_get_current_sampling_time>:

static float pid_get_current_sampling_time(PID_t *p){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	return (float) (HAL_GetTick() - p->last_updated_ts)/1000.0;
 8001800:	f000 fa96 	bl	8001d30 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001814:	ee17 0a90 	vmov	r0, s15
 8001818:	f7fe fe5a 	bl	80004d0 <__aeabi_f2d>
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <pid_get_current_sampling_time+0x4c>)
 8001822:	f7fe ffd7 	bl	80007d4 <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f8e1 	bl	80009f4 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
}
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	408f4000 	.word	0x408f4000

08001848 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <HAL_MspInit+0x4c>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a0f      	ldr	r2, [pc, #60]	@ (8001894 <HAL_MspInit+0x4c>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <HAL_MspInit+0x4c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_MspInit+0x4c>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <HAL_MspInit+0x4c>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_MspInit+0x4c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	@ (800191c <HAL_I2C_MspInit+0x84>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d12c      	bne.n	8001914 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a17      	ldr	r2, [pc, #92]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018dc:	2312      	movs	r3, #18
 80018de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e8:	2304      	movs	r3, #4
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	480c      	ldr	r0, [pc, #48]	@ (8001924 <HAL_I2C_MspInit+0x8c>)
 80018f4:	f000 fb5e 	bl	8001fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	4a07      	ldr	r2, [pc, #28]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 8001902:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001906:	6413      	str	r3, [r2, #64]	@ 0x40
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_I2C_MspInit+0x88>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001914:	bf00      	nop
 8001916:	3728      	adds	r7, #40	@ 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40005400 	.word	0x40005400
 8001920:	40023800 	.word	0x40023800
 8001924:	40020400 	.word	0x40020400

08001928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0e      	ldr	r2, [pc, #56]	@ (8001970 <HAL_TIM_Base_MspInit+0x48>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d115      	bne.n	8001966 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <HAL_TIM_Base_MspInit+0x4c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	4a0c      	ldr	r2, [pc, #48]	@ (8001974 <HAL_TIM_Base_MspInit+0x4c>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6413      	str	r3, [r2, #64]	@ 0x40
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <HAL_TIM_Base_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	201d      	movs	r0, #29
 800195c:	f000 faf3 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001960:	201d      	movs	r0, #29
 8001962:	f000 fb0c 	bl	8001f7e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40000400 	.word	0x40000400
 8001974:	40023800 	.word	0x40023800

08001978 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0b      	ldr	r2, [pc, #44]	@ (80019b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d10d      	bne.n	80019a6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_TIM_PWM_MspInit+0x40>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <HAL_TIM_PWM_MspInit+0x40>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6413      	str	r3, [r2, #64]	@ 0x40
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_TIM_PWM_MspInit+0x40>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40000c00 	.word	0x40000c00
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a12      	ldr	r2, [pc, #72]	@ (8001a24 <HAL_TIM_MspPostInit+0x68>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d11d      	bne.n	8001a1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_TIM_MspPostInit+0x6c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a10      	ldr	r2, [pc, #64]	@ (8001a28 <HAL_TIM_MspPostInit+0x6c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <HAL_TIM_MspPostInit+0x6c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019fa:	2301      	movs	r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <HAL_TIM_MspPostInit+0x70>)
 8001a16:	f000 facd 	bl	8001fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40000c00 	.word	0x40000c00
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <NMI_Handler+0x4>

08001a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <MemManage_Handler+0x4>

08001a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a86:	f000 f93f 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a94:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <TIM3_IRQHandler+0x10>)
 8001a96:	f002 fd1b 	bl	80044d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000110 	.word	0x20000110

08001aa4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e00a      	b.n	8001acc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab6:	f3af 8000 	nop.w
 8001aba:	4601      	mov	r1, r0
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60ba      	str	r2, [r7, #8]
 8001ac2:	b2ca      	uxtb	r2, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dbf0      	blt.n	8001ab6 <_read+0x12>
  }

  return len;
 8001ad4:	687b      	ldr	r3, [r7, #4]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e009      	b.n	8001b04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3301      	adds	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbf1      	blt.n	8001af0 <_write+0x12>
  }
  return len;
 8001b0c:	687b      	ldr	r3, [r7, #4]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_close>:

int _close(int file)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <_isatty>:

int _isatty(int file)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b88:	4a14      	ldr	r2, [pc, #80]	@ (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	@ (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb0:	f003 fd22 	bl	80055f8 <__errno>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a05      	ldr	r2, [pc, #20]	@ (8001be4 <_sbrk+0x64>)
 8001bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20020000 	.word	0x20020000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	200001cc 	.word	0x200001cc
 8001be8:	20000320 	.word	0x20000320

08001bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <SystemInit+0x20>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <SystemInit+0x20>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c14:	f7ff ffea 	bl	8001bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	@ (8001c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	@ (8001c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f003 fce1 	bl	8005604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c42:	f7ff f89f 	bl	8000d84 <main>
  bx  lr    
 8001c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c54:	08005b5c 	.word	0x08005b5c
  ldr r2, =_sbss
 8001c58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c5c:	20000320 	.word	0x20000320

08001c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca4 <HAL_Init+0x40>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_Init+0x40>)
 8001c7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <HAL_Init+0x40>)
 8001c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 f94f 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	200f      	movs	r0, #15
 8001c94:	f000 f808 	bl	8001ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c98:	f7ff fdd6 	bl	8001848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_InitTick+0x54>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_InitTick+0x58>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f967 	bl	8001f9a <HAL_SYSTICK_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00e      	b.n	8001cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b0f      	cmp	r3, #15
 8001cda:	d80a      	bhi.n	8001cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f000 f92f 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce8:	4a06      	ldr	r2, [pc, #24]	@ (8001d04 <HAL_InitTick+0x5c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	200001d0 	.word	0x200001d0

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	200001d0 	.word	0x200001d0

08001d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff ffee 	bl	8001d30 <HAL_GetTick>
 8001d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d005      	beq.n	8001d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d62:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <HAL_Delay+0x44>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d6e:	bf00      	nop
 8001d70:	f7ff ffde 	bl	8001d30 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d8f7      	bhi.n	8001d70 <HAL_Delay+0x28>
  {
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4907      	ldr	r1, [pc, #28]	@ (8001e2c <__NVIC_EnableIRQ+0x38>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	@ (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	@ (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	@ 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff29 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff3e 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff31 	bl	8001df4 <__NVIC_EnableIRQ>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffa2 	bl	8001eec <SysTick_Config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	e165      	b.n	800229c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f040 8154 	bne.w	8002296 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d005      	beq.n	8002006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002002:	2b02      	cmp	r3, #2
 8002004:	d130      	bne.n	8002068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 0201 	and.w	r2, r3, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b03      	cmp	r3, #3
 8002072:	d017      	beq.n	80020a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d123      	bne.n	80020f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	08da      	lsrs	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3208      	adds	r2, #8
 80020b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	220f      	movs	r2, #15
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	08da      	lsrs	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3208      	adds	r2, #8
 80020f2:	69b9      	ldr	r1, [r7, #24]
 80020f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0203 	and.w	r2, r3, #3
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80ae 	beq.w	8002296 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b5d      	ldr	r3, [pc, #372]	@ (80022b4 <HAL_GPIO_Init+0x300>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	4a5c      	ldr	r2, [pc, #368]	@ (80022b4 <HAL_GPIO_Init+0x300>)
 8002144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002148:	6453      	str	r3, [r2, #68]	@ 0x44
 800214a:	4b5a      	ldr	r3, [pc, #360]	@ (80022b4 <HAL_GPIO_Init+0x300>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002156:	4a58      	ldr	r2, [pc, #352]	@ (80022b8 <HAL_GPIO_Init+0x304>)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	220f      	movs	r2, #15
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4f      	ldr	r2, [pc, #316]	@ (80022bc <HAL_GPIO_Init+0x308>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d025      	beq.n	80021ce <HAL_GPIO_Init+0x21a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4e      	ldr	r2, [pc, #312]	@ (80022c0 <HAL_GPIO_Init+0x30c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <HAL_GPIO_Init+0x216>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4d      	ldr	r2, [pc, #308]	@ (80022c4 <HAL_GPIO_Init+0x310>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x212>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4c      	ldr	r2, [pc, #304]	@ (80022c8 <HAL_GPIO_Init+0x314>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x20e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4b      	ldr	r2, [pc, #300]	@ (80022cc <HAL_GPIO_Init+0x318>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x20a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4a      	ldr	r2, [pc, #296]	@ (80022d0 <HAL_GPIO_Init+0x31c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x206>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a49      	ldr	r2, [pc, #292]	@ (80022d4 <HAL_GPIO_Init+0x320>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x202>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e00c      	b.n	80021d0 <HAL_GPIO_Init+0x21c>
 80021b6:	2307      	movs	r3, #7
 80021b8:	e00a      	b.n	80021d0 <HAL_GPIO_Init+0x21c>
 80021ba:	2305      	movs	r3, #5
 80021bc:	e008      	b.n	80021d0 <HAL_GPIO_Init+0x21c>
 80021be:	2304      	movs	r3, #4
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x21c>
 80021c2:	2303      	movs	r3, #3
 80021c4:	e004      	b.n	80021d0 <HAL_GPIO_Init+0x21c>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e002      	b.n	80021d0 <HAL_GPIO_Init+0x21c>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_GPIO_Init+0x21c>
 80021ce:	2300      	movs	r3, #0
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	f002 0203 	and.w	r2, r2, #3
 80021d6:	0092      	lsls	r2, r2, #2
 80021d8:	4093      	lsls	r3, r2
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e0:	4935      	ldr	r1, [pc, #212]	@ (80022b8 <HAL_GPIO_Init+0x304>)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	3302      	adds	r3, #2
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ee:	4b3a      	ldr	r3, [pc, #232]	@ (80022d8 <HAL_GPIO_Init+0x324>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002212:	4a31      	ldr	r2, [pc, #196]	@ (80022d8 <HAL_GPIO_Init+0x324>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002218:	4b2f      	ldr	r3, [pc, #188]	@ (80022d8 <HAL_GPIO_Init+0x324>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800223c:	4a26      	ldr	r2, [pc, #152]	@ (80022d8 <HAL_GPIO_Init+0x324>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002242:	4b25      	ldr	r3, [pc, #148]	@ (80022d8 <HAL_GPIO_Init+0x324>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002266:	4a1c      	ldr	r2, [pc, #112]	@ (80022d8 <HAL_GPIO_Init+0x324>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800226c:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <HAL_GPIO_Init+0x324>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002290:	4a11      	ldr	r2, [pc, #68]	@ (80022d8 <HAL_GPIO_Init+0x324>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3301      	adds	r3, #1
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b0f      	cmp	r3, #15
 80022a0:	f67f ae96 	bls.w	8001fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3724      	adds	r7, #36	@ 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40013800 	.word	0x40013800
 80022bc:	40020000 	.word	0x40020000
 80022c0:	40020400 	.word	0x40020400
 80022c4:	40020800 	.word	0x40020800
 80022c8:	40020c00 	.word	0x40020c00
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40021400 	.word	0x40021400
 80022d4:	40021800 	.word	0x40021800
 80022d8:	40013c00 	.word	0x40013c00

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f8:	e003      	b.n	8002302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	041a      	lsls	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e12b      	b.n	800257a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff faae 	bl	8001898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2224      	movs	r2, #36	@ 0x24
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002362:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002372:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002374:	f001 fa10 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8002378:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4a81      	ldr	r2, [pc, #516]	@ (8002584 <HAL_I2C_Init+0x274>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d807      	bhi.n	8002394 <HAL_I2C_Init+0x84>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4a80      	ldr	r2, [pc, #512]	@ (8002588 <HAL_I2C_Init+0x278>)
 8002388:	4293      	cmp	r3, r2
 800238a:	bf94      	ite	ls
 800238c:	2301      	movls	r3, #1
 800238e:	2300      	movhi	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	e006      	b.n	80023a2 <HAL_I2C_Init+0x92>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4a7d      	ldr	r2, [pc, #500]	@ (800258c <HAL_I2C_Init+0x27c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	bf94      	ite	ls
 800239c:	2301      	movls	r3, #1
 800239e:	2300      	movhi	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0e7      	b.n	800257a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4a78      	ldr	r2, [pc, #480]	@ (8002590 <HAL_I2C_Init+0x280>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0c9b      	lsrs	r3, r3, #18
 80023b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002584 <HAL_I2C_Init+0x274>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d802      	bhi.n	80023e4 <HAL_I2C_Init+0xd4>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3301      	adds	r3, #1
 80023e2:	e009      	b.n	80023f8 <HAL_I2C_Init+0xe8>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	4a69      	ldr	r2, [pc, #420]	@ (8002594 <HAL_I2C_Init+0x284>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	099b      	lsrs	r3, r3, #6
 80023f6:	3301      	adds	r3, #1
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800240a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	495c      	ldr	r1, [pc, #368]	@ (8002584 <HAL_I2C_Init+0x274>)
 8002414:	428b      	cmp	r3, r1
 8002416:	d819      	bhi.n	800244c <HAL_I2C_Init+0x13c>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1e59      	subs	r1, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fbb1 f3f3 	udiv	r3, r1, r3
 8002426:	1c59      	adds	r1, r3, #1
 8002428:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800242c:	400b      	ands	r3, r1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_I2C_Init+0x138>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1e59      	subs	r1, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002440:	3301      	adds	r3, #1
 8002442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002446:	e051      	b.n	80024ec <HAL_I2C_Init+0x1dc>
 8002448:	2304      	movs	r3, #4
 800244a:	e04f      	b.n	80024ec <HAL_I2C_Init+0x1dc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d111      	bne.n	8002478 <HAL_I2C_Init+0x168>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e58      	subs	r0, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	440b      	add	r3, r1
 8002462:	fbb0 f3f3 	udiv	r3, r0, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	e012      	b.n	800249e <HAL_I2C_Init+0x18e>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1e58      	subs	r0, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	0099      	lsls	r1, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	fbb0 f3f3 	udiv	r3, r0, r3
 800248e:	3301      	adds	r3, #1
 8002490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Init+0x196>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e022      	b.n	80024ec <HAL_I2C_Init+0x1dc>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10e      	bne.n	80024cc <HAL_I2C_Init+0x1bc>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1e58      	subs	r0, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	440b      	add	r3, r1
 80024bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024ca:	e00f      	b.n	80024ec <HAL_I2C_Init+0x1dc>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1e58      	subs	r0, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	0099      	lsls	r1, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	6809      	ldr	r1, [r1, #0]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800251a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6911      	ldr	r1, [r2, #16]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68d2      	ldr	r2, [r2, #12]
 8002526:	4311      	orrs	r1, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	430b      	orrs	r3, r1
 800252e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	000186a0 	.word	0x000186a0
 8002588:	001e847f 	.word	0x001e847f
 800258c:	003d08ff 	.word	0x003d08ff
 8002590:	431bde83 	.word	0x431bde83
 8002594:	10624dd3 	.word	0x10624dd3

08002598 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	4608      	mov	r0, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	817b      	strh	r3, [r7, #10]
 80025aa:	460b      	mov	r3, r1
 80025ac:	813b      	strh	r3, [r7, #8]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025b2:	f7ff fbbd 	bl	8001d30 <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	f040 80d9 	bne.w	8002778 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2319      	movs	r3, #25
 80025cc:	2201      	movs	r2, #1
 80025ce:	496d      	ldr	r1, [pc, #436]	@ (8002784 <HAL_I2C_Mem_Write+0x1ec>)
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 fdb9 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
 80025de:	e0cc      	b.n	800277a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_I2C_Mem_Write+0x56>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e0c5      	b.n	800277a <HAL_I2C_Mem_Write+0x1e2>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d007      	beq.n	8002614 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002622:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2221      	movs	r2, #33	@ 0x21
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2240      	movs	r2, #64	@ 0x40
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a3a      	ldr	r2, [r7, #32]
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002644:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a4d      	ldr	r2, [pc, #308]	@ (8002788 <HAL_I2C_Mem_Write+0x1f0>)
 8002654:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002656:	88f8      	ldrh	r0, [r7, #6]
 8002658:	893a      	ldrh	r2, [r7, #8]
 800265a:	8979      	ldrh	r1, [r7, #10]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4603      	mov	r3, r0
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fbf0 	bl	8002e4c <I2C_RequestMemoryWrite>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d052      	beq.n	8002718 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e081      	b.n	800277a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fe7e 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00d      	beq.n	80026a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	2b04      	cmp	r3, #4
 800268c:	d107      	bne.n	800269e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800269c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e06b      	b.n	800277a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d11b      	bne.n	8002718 <HAL_I2C_Mem_Write+0x180>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d017      	beq.n	8002718 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1aa      	bne.n	8002676 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fe71 	bl	800340c <I2C_WaitOnBTFFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	2b04      	cmp	r3, #4
 8002736:	d107      	bne.n	8002748 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002746:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e016      	b.n	800277a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800275a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	00100002 	.word	0x00100002
 8002788:	ffff0000 	.word	0xffff0000

0800278c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	@ 0x30
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4603      	mov	r3, r0
 800279c:	817b      	strh	r3, [r7, #10]
 800279e:	460b      	mov	r3, r1
 80027a0:	813b      	strh	r3, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a6:	f7ff fac3 	bl	8001d30 <HAL_GetTick>
 80027aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	f040 8214 	bne.w	8002be2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2319      	movs	r3, #25
 80027c0:	2201      	movs	r2, #1
 80027c2:	497b      	ldr	r1, [pc, #492]	@ (80029b0 <HAL_I2C_Mem_Read+0x224>)
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fcbf 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
 80027d2:	e207      	b.n	8002be4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_I2C_Mem_Read+0x56>
 80027de:	2302      	movs	r3, #2
 80027e0:	e200      	b.n	8002be4 <HAL_I2C_Mem_Read+0x458>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d007      	beq.n	8002808 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002816:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2222      	movs	r2, #34	@ 0x22
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2240      	movs	r2, #64	@ 0x40
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002832:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002838:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a5b      	ldr	r2, [pc, #364]	@ (80029b4 <HAL_I2C_Mem_Read+0x228>)
 8002848:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800284a:	88f8      	ldrh	r0, [r7, #6]
 800284c:	893a      	ldrh	r2, [r7, #8]
 800284e:	8979      	ldrh	r1, [r7, #10]
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	4603      	mov	r3, r0
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fb8c 	bl	8002f78 <I2C_RequestMemoryRead>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e1bc      	b.n	8002be4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d113      	bne.n	800289a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	623b      	str	r3, [r7, #32]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	623b      	str	r3, [r7, #32]
 8002886:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e190      	b.n	8002bbc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d11b      	bne.n	80028da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	e170      	b.n	8002bbc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d11b      	bne.n	800291a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002900:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002902:	2300      	movs	r3, #0
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	e150      	b.n	8002bbc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002930:	e144      	b.n	8002bbc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	2b03      	cmp	r3, #3
 8002938:	f200 80f1 	bhi.w	8002b1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002940:	2b01      	cmp	r3, #1
 8002942:	d123      	bne.n	800298c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002946:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fda7 	bl	800349c <I2C_WaitOnRXNEFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e145      	b.n	8002be4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800298a:	e117      	b.n	8002bbc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002990:	2b02      	cmp	r3, #2
 8002992:	d14e      	bne.n	8002a32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800299a:	2200      	movs	r2, #0
 800299c:	4906      	ldr	r1, [pc, #24]	@ (80029b8 <HAL_I2C_Mem_Read+0x22c>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fbd2 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e11a      	b.n	8002be4 <HAL_I2C_Mem_Read+0x458>
 80029ae:	bf00      	nop
 80029b0:	00100002 	.word	0x00100002
 80029b4:	ffff0000 	.word	0xffff0000
 80029b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a30:	e0c4      	b.n	8002bbc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a38:	2200      	movs	r2, #0
 8002a3a:	496c      	ldr	r1, [pc, #432]	@ (8002bec <HAL_I2C_Mem_Read+0x460>)
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fb83 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0cb      	b.n	8002be4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a94:	2200      	movs	r2, #0
 8002a96:	4955      	ldr	r1, [pc, #340]	@ (8002bec <HAL_I2C_Mem_Read+0x460>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fb55 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e09d      	b.n	8002be4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b1c:	e04e      	b.n	8002bbc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fcba 	bl	800349c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e058      	b.n	8002be4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d124      	bne.n	8002bbc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d107      	bne.n	8002b8a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b88:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f47f aeb6 	bne.w	8002932 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3728      	adds	r7, #40	@ 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	00010004 	.word	0x00010004

08002bf0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	@ 0x28
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7ff f896 	bl	8001d30 <HAL_GetTick>
 8002c04:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f040 8111 	bne.w	8002e3a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2319      	movs	r3, #25
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4988      	ldr	r1, [pc, #544]	@ (8002e44 <HAL_I2C_IsDeviceReady+0x254>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fa90 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e104      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_I2C_IsDeviceReady+0x50>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e0fd      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d007      	beq.n	8002c66 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2224      	movs	r2, #36	@ 0x24
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a70      	ldr	r2, [pc, #448]	@ (8002e48 <HAL_I2C_IsDeviceReady+0x258>)
 8002c88:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c98:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fa4e 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cc0:	d103      	bne.n	8002cca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0b6      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cdc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cde:	f7ff f827 	bl	8001d30 <HAL_GetTick>
 8002ce2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d12:	e025      	b.n	8002d60 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d14:	f7ff f80c 	bl	8001d30 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d302      	bcc.n	8002d2a <HAL_I2C_IsDeviceReady+0x13a>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	22a0      	movs	r2, #160	@ 0xa0
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d6a:	d005      	beq.n	8002d78 <HAL_I2C_IsDeviceReady+0x188>
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_I2C_IsDeviceReady+0x188>
 8002d72:	7dbb      	ldrb	r3, [r7, #22]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0cd      	beq.n	8002d14 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d129      	bne.n	8002de2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2319      	movs	r3, #25
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4921      	ldr	r1, [pc, #132]	@ (8002e44 <HAL_I2C_IsDeviceReady+0x254>)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f9c2 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e036      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e02c      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dfa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2319      	movs	r3, #25
 8002e02:	2201      	movs	r2, #1
 8002e04:	490f      	ldr	r1, [pc, #60]	@ (8002e44 <HAL_I2C_IsDeviceReady+0x254>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f99e 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e012      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	f4ff af32 	bcc.w	8002c8a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	00100002 	.word	0x00100002
 8002e48:	ffff0000 	.word	0xffff0000

08002e4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	817b      	strh	r3, [r7, #10]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	813b      	strh	r3, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f960 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00d      	beq.n	8002eaa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e9c:	d103      	bne.n	8002ea6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e05f      	b.n	8002f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eaa:	897b      	ldrh	r3, [r7, #10]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002eb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	6a3a      	ldr	r2, [r7, #32]
 8002ebe:	492d      	ldr	r1, [pc, #180]	@ (8002f74 <I2C_RequestMemoryWrite+0x128>)
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f9bb 	bl	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e04c      	b.n	8002f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee8:	6a39      	ldr	r1, [r7, #32]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fa46 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d107      	bne.n	8002f0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e02b      	b.n	8002f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d105      	bne.n	8002f24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f18:	893b      	ldrh	r3, [r7, #8]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	611a      	str	r2, [r3, #16]
 8002f22:	e021      	b.n	8002f68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f24:	893b      	ldrh	r3, [r7, #8]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f34:	6a39      	ldr	r1, [r7, #32]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fa20 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d107      	bne.n	8002f5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e005      	b.n	8002f6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f5e:	893b      	ldrh	r3, [r7, #8]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	00010002 	.word	0x00010002

08002f78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	4608      	mov	r0, r1
 8002f82:	4611      	mov	r1, r2
 8002f84:	461a      	mov	r2, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	817b      	strh	r3, [r7, #10]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	813b      	strh	r3, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f8c2 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd8:	d103      	bne.n	8002fe2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0aa      	b.n	800313c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fe6:	897b      	ldrh	r3, [r7, #10]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ff4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	6a3a      	ldr	r2, [r7, #32]
 8002ffa:	4952      	ldr	r1, [pc, #328]	@ (8003144 <I2C_RequestMemoryRead+0x1cc>)
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f91d 	bl	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e097      	b.n	800313c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003024:	6a39      	ldr	r1, [r7, #32]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f9a8 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00d      	beq.n	800304e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	2b04      	cmp	r3, #4
 8003038:	d107      	bne.n	800304a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003048:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e076      	b.n	800313c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003054:	893b      	ldrh	r3, [r7, #8]
 8003056:	b2da      	uxtb	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	611a      	str	r2, [r3, #16]
 800305e:	e021      	b.n	80030a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003060:	893b      	ldrh	r3, [r7, #8]
 8003062:	0a1b      	lsrs	r3, r3, #8
 8003064:	b29b      	uxth	r3, r3
 8003066:	b2da      	uxtb	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800306e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003070:	6a39      	ldr	r1, [r7, #32]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f982 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00d      	beq.n	800309a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	2b04      	cmp	r3, #4
 8003084:	d107      	bne.n	8003096 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003094:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e050      	b.n	800313c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800309a:	893b      	ldrh	r3, [r7, #8]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a6:	6a39      	ldr	r1, [r7, #32]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f967 	bl	800337c <I2C_WaitOnTXEFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00d      	beq.n	80030d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d107      	bne.n	80030cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e035      	b.n	800313c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f82b 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003106:	d103      	bne.n	8003110 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e013      	b.n	800313c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003114:	897b      	ldrh	r3, [r7, #10]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	6a3a      	ldr	r2, [r7, #32]
 8003128:	4906      	ldr	r1, [pc, #24]	@ (8003144 <I2C_RequestMemoryRead+0x1cc>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f886 	bl	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	00010002 	.word	0x00010002

08003148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003158:	e048      	b.n	80031ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d044      	beq.n	80031ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fe fde5 	bl	8001d30 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d139      	bne.n	80031ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	0c1b      	lsrs	r3, r3, #16
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d10d      	bne.n	800319e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	43da      	mvns	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4013      	ands	r3, r2
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	e00c      	b.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d116      	bne.n	80031ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e023      	b.n	8003234 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d10d      	bne.n	8003212 <I2C_WaitOnFlagUntilTimeout+0xca>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	43da      	mvns	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	e00c      	b.n	800322c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	43da      	mvns	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4013      	ands	r3, r2
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	429a      	cmp	r2, r3
 8003230:	d093      	beq.n	800315a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800324a:	e071      	b.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325a:	d123      	bne.n	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800326a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003274:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	f043 0204 	orr.w	r2, r3, #4
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e067      	b.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d041      	beq.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ac:	f7fe fd40 	bl	8001d30 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d302      	bcc.n	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d136      	bne.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d10c      	bne.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4013      	ands	r3, r2
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	e00b      	b.n	80032fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	43da      	mvns	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e021      	b.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	0c1b      	lsrs	r3, r3, #16
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10c      	bne.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	43da      	mvns	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4013      	ands	r3, r2
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf14      	ite	ne
 800334c:	2301      	movne	r3, #1
 800334e:	2300      	moveq	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e00b      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf14      	ite	ne
 8003366:	2301      	movne	r3, #1
 8003368:	2300      	moveq	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	f47f af6d 	bne.w	800324c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003388:	e034      	b.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f8e3 	bl	8003556 <I2C_IsAcknowledgeFailed>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e034      	b.n	8003404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d028      	beq.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7fe fcc5 	bl	8001d30 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d11d      	bne.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c2:	2b80      	cmp	r3, #128	@ 0x80
 80033c4:	d016      	beq.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	f043 0220 	orr.w	r2, r3, #32
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e007      	b.n	8003404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fe:	2b80      	cmp	r3, #128	@ 0x80
 8003400:	d1c3      	bne.n	800338a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003418:	e034      	b.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f89b 	bl	8003556 <I2C_IsAcknowledgeFailed>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e034      	b.n	8003494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d028      	beq.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003432:	f7fe fc7d 	bl	8001d30 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d11d      	bne.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b04      	cmp	r3, #4
 8003454:	d016      	beq.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e007      	b.n	8003494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d1c3      	bne.n	800341a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034a8:	e049      	b.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d119      	bne.n	80034ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0210 	mvn.w	r2, #16
 80034c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e030      	b.n	800354e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ec:	f7fe fc20 	bl	8001d30 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d302      	bcc.n	8003502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11d      	bne.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350c:	2b40      	cmp	r3, #64	@ 0x40
 800350e:	d016      	beq.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e007      	b.n	800354e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003548:	2b40      	cmp	r3, #64	@ 0x40
 800354a:	d1ae      	bne.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800356c:	d11b      	bne.n	80035a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003576:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	f043 0204 	orr.w	r2, r3, #4
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0cc      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b68      	ldr	r3, [pc, #416]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d90c      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b65      	ldr	r3, [pc, #404]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b63      	ldr	r3, [pc, #396]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0b8      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4b59      	ldr	r3, [pc, #356]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a58      	ldr	r2, [pc, #352]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003620:	4b53      	ldr	r3, [pc, #332]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a52      	ldr	r2, [pc, #328]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800362a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b50      	ldr	r3, [pc, #320]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	494d      	ldr	r1, [pc, #308]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d044      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b47      	ldr	r3, [pc, #284]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d119      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d003      	beq.n	8003672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366e:	2b03      	cmp	r3, #3
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003672:	4b3f      	ldr	r3, [pc, #252]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	4b3b      	ldr	r3, [pc, #236]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e067      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003692:	4b37      	ldr	r3, [pc, #220]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 0203 	bic.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4934      	ldr	r1, [pc, #208]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a4:	f7fe fb44 	bl	8001d30 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fe fb40 	bl	8001d30 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e04f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 020c 	and.w	r2, r3, #12
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1eb      	bne.n	80036ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d4:	4b25      	ldr	r3, [pc, #148]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d20c      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b22      	ldr	r3, [pc, #136]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b20      	ldr	r3, [pc, #128]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e032      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4916      	ldr	r1, [pc, #88]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	490e      	ldr	r1, [pc, #56]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800373a:	f000 f841 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490a      	ldr	r1, [pc, #40]	@ (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a09      	ldr	r2, [pc, #36]	@ (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003756:	4b09      	ldr	r3, [pc, #36]	@ (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe faa4 	bl	8001ca8 <HAL_InitTick>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023c00 	.word	0x40023c00
 8003770:	40023800 	.word	0x40023800
 8003774:	08005b34 	.word	0x08005b34
 8003778:	20000000 	.word	0x20000000
 800377c:	20000004 	.word	0x20000004

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	@ (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000000 	.word	0x20000000

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	@ (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	08005b44 	.word	0x08005b44

080037c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c4:	b0a6      	sub	sp, #152	@ 0x98
 80037c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e6:	4bc8      	ldr	r3, [pc, #800]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x348>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	f200 817e 	bhi.w	8003af0 <HAL_RCC_GetSysClockFreq+0x330>
 80037f4:	a201      	add	r2, pc, #4	@ (adr r2, 80037fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003831 	.word	0x08003831
 8003800:	08003af1 	.word	0x08003af1
 8003804:	08003af1 	.word	0x08003af1
 8003808:	08003af1 	.word	0x08003af1
 800380c:	08003839 	.word	0x08003839
 8003810:	08003af1 	.word	0x08003af1
 8003814:	08003af1 	.word	0x08003af1
 8003818:	08003af1 	.word	0x08003af1
 800381c:	08003841 	.word	0x08003841
 8003820:	08003af1 	.word	0x08003af1
 8003824:	08003af1 	.word	0x08003af1
 8003828:	08003af1 	.word	0x08003af1
 800382c:	080039ab 	.word	0x080039ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4bb6      	ldr	r3, [pc, #728]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003832:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8003836:	e15f      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003838:	4bb5      	ldr	r3, [pc, #724]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x350>)
 800383a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800383e:	e15b      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003840:	4bb1      	ldr	r3, [pc, #708]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003848:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800384c:	4bae      	ldr	r3, [pc, #696]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x348>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d031      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003858:	4bab      	ldr	r3, [pc, #684]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x348>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	2200      	movs	r2, #0
 8003860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003862:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003864:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386a:	663b      	str	r3, [r7, #96]	@ 0x60
 800386c:	2300      	movs	r3, #0
 800386e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003870:	4ba7      	ldr	r3, [pc, #668]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003872:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003876:	462a      	mov	r2, r5
 8003878:	fb03 f202 	mul.w	r2, r3, r2
 800387c:	2300      	movs	r3, #0
 800387e:	4621      	mov	r1, r4
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	4aa2      	ldr	r2, [pc, #648]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003888:	4621      	mov	r1, r4
 800388a:	fba1 1202 	umull	r1, r2, r1, r2
 800388e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003890:	460a      	mov	r2, r1
 8003892:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003894:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003896:	4413      	add	r3, r2
 8003898:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800389a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800389e:	2200      	movs	r2, #0
 80038a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038a2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80038a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80038ac:	f7fd f8f2 	bl	8000a94 <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4613      	mov	r3, r2
 80038b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038ba:	e064      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038bc:	4b92      	ldr	r3, [pc, #584]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x348>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	2200      	movs	r2, #0
 80038c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c6:	657a      	str	r2, [r7, #84]	@ 0x54
 80038c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d0:	2300      	movs	r3, #0
 80038d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038d4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80038d8:	4622      	mov	r2, r4
 80038da:	462b      	mov	r3, r5
 80038dc:	f04f 0000 	mov.w	r0, #0
 80038e0:	f04f 0100 	mov.w	r1, #0
 80038e4:	0159      	lsls	r1, r3, #5
 80038e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ea:	0150      	lsls	r0, r2, #5
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4621      	mov	r1, r4
 80038f2:	1a51      	subs	r1, r2, r1
 80038f4:	6139      	str	r1, [r7, #16]
 80038f6:	4629      	mov	r1, r5
 80038f8:	eb63 0301 	sbc.w	r3, r3, r1
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800390a:	4659      	mov	r1, fp
 800390c:	018b      	lsls	r3, r1, #6
 800390e:	4651      	mov	r1, sl
 8003910:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003914:	4651      	mov	r1, sl
 8003916:	018a      	lsls	r2, r1, #6
 8003918:	4651      	mov	r1, sl
 800391a:	ebb2 0801 	subs.w	r8, r2, r1
 800391e:	4659      	mov	r1, fp
 8003920:	eb63 0901 	sbc.w	r9, r3, r1
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003930:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003934:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003938:	4690      	mov	r8, r2
 800393a:	4699      	mov	r9, r3
 800393c:	4623      	mov	r3, r4
 800393e:	eb18 0303 	adds.w	r3, r8, r3
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	462b      	mov	r3, r5
 8003946:	eb49 0303 	adc.w	r3, r9, r3
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003958:	4629      	mov	r1, r5
 800395a:	028b      	lsls	r3, r1, #10
 800395c:	4621      	mov	r1, r4
 800395e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003962:	4621      	mov	r1, r4
 8003964:	028a      	lsls	r2, r1, #10
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800396e:	2200      	movs	r2, #0
 8003970:	643b      	str	r3, [r7, #64]	@ 0x40
 8003972:	647a      	str	r2, [r7, #68]	@ 0x44
 8003974:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003978:	f7fd f88c 	bl	8000a94 <__aeabi_uldivmod>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4613      	mov	r3, r2
 8003982:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003986:	4b60      	ldr	r3, [pc, #384]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	0c1b      	lsrs	r3, r3, #16
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	3301      	adds	r3, #1
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8003998:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800399c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80039a8:	e0a6      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039aa:	4b57      	ldr	r3, [pc, #348]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x348>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b6:	4b54      	ldr	r3, [pc, #336]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x348>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02a      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b51      	ldr	r3, [pc, #324]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x348>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	2200      	movs	r2, #0
 80039ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039d4:	2100      	movs	r1, #0
 80039d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x350>)
 80039d8:	fb03 f201 	mul.w	r2, r3, r1
 80039dc:	2300      	movs	r3, #0
 80039de:	fb00 f303 	mul.w	r3, r0, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x350>)
 80039e6:	fba0 1202 	umull	r1, r2, r0, r2
 80039ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80039ec:	460a      	mov	r2, r1
 80039ee:	673a      	str	r2, [r7, #112]	@ 0x70
 80039f0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80039f2:	4413      	add	r3, r2
 80039f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80039f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039fa:	2200      	movs	r2, #0
 80039fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003a04:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003a08:	f7fd f844 	bl	8000a94 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4613      	mov	r3, r2
 8003a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a16:	e05b      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a18:	4b3b      	ldr	r3, [pc, #236]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	2200      	movs	r2, #0
 8003a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	f04f 0000 	mov.w	r0, #0
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	0159      	lsls	r1, r3, #5
 8003a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a46:	0150      	lsls	r0, r2, #5
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a6c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a70:	eb63 050b 	sbc.w	r5, r3, fp
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	00eb      	lsls	r3, r5, #3
 8003a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a82:	00e2      	lsls	r2, r4, #3
 8003a84:	4614      	mov	r4, r2
 8003a86:	461d      	mov	r5, r3
 8003a88:	4643      	mov	r3, r8
 8003a8a:	18e3      	adds	r3, r4, r3
 8003a8c:	603b      	str	r3, [r7, #0]
 8003a8e:	464b      	mov	r3, r9
 8003a90:	eb45 0303 	adc.w	r3, r5, r3
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	028b      	lsls	r3, r1, #10
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aac:	4621      	mov	r1, r4
 8003aae:	028a      	lsls	r2, r1, #10
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab8:	2200      	movs	r2, #0
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	61fa      	str	r2, [r7, #28]
 8003abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac2:	f7fc ffe7 	bl	8000a94 <__aeabi_uldivmod>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4613      	mov	r3, r2
 8003acc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	0f1b      	lsrs	r3, r3, #28
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8003ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003aee:	e003      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003af0:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003af6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3798      	adds	r7, #152	@ 0x98
 8003b00:	46bd      	mov	sp, r7
 8003b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	00f42400 	.word	0x00f42400
 8003b10:	017d7840 	.word	0x017d7840

08003b14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e28d      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 8083 	beq.w	8003c3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b34:	4b94      	ldr	r3, [pc, #592]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 030c 	and.w	r3, r3, #12
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d019      	beq.n	8003b74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b40:	4b91      	ldr	r3, [pc, #580]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d106      	bne.n	8003b5a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b4c:	4b8e      	ldr	r3, [pc, #568]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b58:	d00c      	beq.n	8003b74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d112      	bne.n	8003b8c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b66:	4b88      	ldr	r3, [pc, #544]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b72:	d10b      	bne.n	8003b8c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	4b84      	ldr	r3, [pc, #528]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d05b      	beq.n	8003c38 <HAL_RCC_OscConfig+0x124>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d157      	bne.n	8003c38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e25a      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b94:	d106      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x90>
 8003b96:	4b7c      	ldr	r3, [pc, #496]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a7b      	ldr	r2, [pc, #492]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e01d      	b.n	8003be0 <HAL_RCC_OscConfig+0xcc>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xb4>
 8003bae:	4b76      	ldr	r3, [pc, #472]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a75      	ldr	r2, [pc, #468]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b73      	ldr	r3, [pc, #460]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a72      	ldr	r2, [pc, #456]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0xcc>
 8003bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fe f8a2 	bl	8001d30 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fe f89e 	bl	8001d30 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	@ 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e21f      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b61      	ldr	r3, [pc, #388]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xdc>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe f88e 	bl	8001d30 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fe f88a 	bl	8001d30 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	@ 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e20b      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	4b57      	ldr	r3, [pc, #348]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x104>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d06f      	beq.n	8003d26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c46:	4b50      	ldr	r3, [pc, #320]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d017      	beq.n	8003c82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c52:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d105      	bne.n	8003c6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6a:	4b47      	ldr	r3, [pc, #284]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d11c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c76:	4b44      	ldr	r3, [pc, #272]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d116      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c82:	4b41      	ldr	r3, [pc, #260]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_RCC_OscConfig+0x186>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e1d3      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4937      	ldr	r1, [pc, #220]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	e03a      	b.n	8003d26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb8:	4b34      	ldr	r3, [pc, #208]	@ (8003d8c <HAL_RCC_OscConfig+0x278>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbe:	f7fe f837 	bl	8001d30 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc6:	f7fe f833 	bl	8001d30 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e1b4      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	4b28      	ldr	r3, [pc, #160]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4925      	ldr	r1, [pc, #148]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]
 8003cf8:	e015      	b.n	8003d26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfa:	4b24      	ldr	r3, [pc, #144]	@ (8003d8c <HAL_RCC_OscConfig+0x278>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fe f816 	bl	8001d30 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fe f812 	bl	8001d30 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e193      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d036      	beq.n	8003da0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d016      	beq.n	8003d68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3a:	4b15      	ldr	r3, [pc, #84]	@ (8003d90 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7fd fff6 	bl	8001d30 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d48:	f7fd fff2 	bl	8001d30 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e173      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCC_OscConfig+0x274>)
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x234>
 8003d66:	e01b      	b.n	8003da0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d68:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <HAL_RCC_OscConfig+0x27c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7fd ffdf 	bl	8001d30 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	e00e      	b.n	8003d94 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d76:	f7fd ffdb 	bl	8001d30 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d907      	bls.n	8003d94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e15c      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	42470000 	.word	0x42470000
 8003d90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d94:	4b8a      	ldr	r3, [pc, #552]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1ea      	bne.n	8003d76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 8097 	beq.w	8003edc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dae:	2300      	movs	r3, #0
 8003db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db2:	4b83      	ldr	r3, [pc, #524]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10f      	bne.n	8003dde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	4a7e      	ldr	r2, [pc, #504]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dce:	4b7c      	ldr	r3, [pc, #496]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dde:	4b79      	ldr	r3, [pc, #484]	@ (8003fc4 <HAL_RCC_OscConfig+0x4b0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d118      	bne.n	8003e1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dea:	4b76      	ldr	r3, [pc, #472]	@ (8003fc4 <HAL_RCC_OscConfig+0x4b0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a75      	ldr	r2, [pc, #468]	@ (8003fc4 <HAL_RCC_OscConfig+0x4b0>)
 8003df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df6:	f7fd ff9b 	bl	8001d30 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfe:	f7fd ff97 	bl	8001d30 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e118      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e10:	4b6c      	ldr	r3, [pc, #432]	@ (8003fc4 <HAL_RCC_OscConfig+0x4b0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d106      	bne.n	8003e32 <HAL_RCC_OscConfig+0x31e>
 8003e24:	4b66      	ldr	r3, [pc, #408]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e28:	4a65      	ldr	r2, [pc, #404]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e30:	e01c      	b.n	8003e6c <HAL_RCC_OscConfig+0x358>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b05      	cmp	r3, #5
 8003e38:	d10c      	bne.n	8003e54 <HAL_RCC_OscConfig+0x340>
 8003e3a:	4b61      	ldr	r3, [pc, #388]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	4a60      	ldr	r2, [pc, #384]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003e40:	f043 0304 	orr.w	r3, r3, #4
 8003e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e46:	4b5e      	ldr	r3, [pc, #376]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	4a5d      	ldr	r2, [pc, #372]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e52:	e00b      	b.n	8003e6c <HAL_RCC_OscConfig+0x358>
 8003e54:	4b5a      	ldr	r3, [pc, #360]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e58:	4a59      	ldr	r2, [pc, #356]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e60:	4b57      	ldr	r3, [pc, #348]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e64:	4a56      	ldr	r2, [pc, #344]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003e66:	f023 0304 	bic.w	r3, r3, #4
 8003e6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d015      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fd ff5c 	bl	8001d30 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fd ff58 	bl	8001d30 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e0d7      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e92:	4b4b      	ldr	r3, [pc, #300]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ee      	beq.n	8003e7c <HAL_RCC_OscConfig+0x368>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd ff46 	bl	8001d30 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fd ff42 	bl	8001d30 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e0c1      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ebe:	4b40      	ldr	r3, [pc, #256]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1ee      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d105      	bne.n	8003edc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80ad 	beq.w	8004040 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ee6:	4b36      	ldr	r3, [pc, #216]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d060      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d145      	bne.n	8003f86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4b33      	ldr	r3, [pc, #204]	@ (8003fc8 <HAL_RCC_OscConfig+0x4b4>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fd ff16 	bl	8001d30 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fd ff12 	bl	8001d30 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e093      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	4b29      	ldr	r3, [pc, #164]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	061b      	lsls	r3, r3, #24
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	071b      	lsls	r3, r3, #28
 8003f52:	491b      	ldr	r1, [pc, #108]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f58:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc8 <HAL_RCC_OscConfig+0x4b4>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fd fee7 	bl	8001d30 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f66:	f7fd fee3 	bl	8001d30 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e064      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f78:	4b11      	ldr	r3, [pc, #68]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x452>
 8003f84:	e05c      	b.n	8004040 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f86:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <HAL_RCC_OscConfig+0x4b4>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd fed0 	bl	8001d30 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f94:	f7fd fecc 	bl	8001d30 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e04d      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa6:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x480>
 8003fb2:	e045      	b.n	8004040 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e040      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800404c <HAL_RCC_OscConfig+0x538>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d030      	beq.n	800403c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d129      	bne.n	800403c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d122      	bne.n	800403c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004002:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004004:	4293      	cmp	r3, r2
 8004006:	d119      	bne.n	800403c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	3b01      	subs	r3, #1
 8004016:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d10f      	bne.n	800403c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004026:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d107      	bne.n	800403c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800

08004050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e041      	b.n	80040e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fd fc56 	bl	8001928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f000 fcc0 	bl	8004a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	d001      	beq.n	8004108 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e046      	b.n	8004196 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a23      	ldr	r2, [pc, #140]	@ (80041a4 <HAL_TIM_Base_Start+0xb4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d022      	beq.n	8004160 <HAL_TIM_Base_Start+0x70>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004122:	d01d      	beq.n	8004160 <HAL_TIM_Base_Start+0x70>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1f      	ldr	r2, [pc, #124]	@ (80041a8 <HAL_TIM_Base_Start+0xb8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d018      	beq.n	8004160 <HAL_TIM_Base_Start+0x70>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1e      	ldr	r2, [pc, #120]	@ (80041ac <HAL_TIM_Base_Start+0xbc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <HAL_TIM_Base_Start+0x70>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <HAL_TIM_Base_Start+0xc0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <HAL_TIM_Base_Start+0x70>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1b      	ldr	r2, [pc, #108]	@ (80041b4 <HAL_TIM_Base_Start+0xc4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d009      	beq.n	8004160 <HAL_TIM_Base_Start+0x70>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a19      	ldr	r2, [pc, #100]	@ (80041b8 <HAL_TIM_Base_Start+0xc8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIM_Base_Start+0x70>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a18      	ldr	r2, [pc, #96]	@ (80041bc <HAL_TIM_Base_Start+0xcc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d111      	bne.n	8004184 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b06      	cmp	r3, #6
 8004170:	d010      	beq.n	8004194 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004182:	e007      	b.n	8004194 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40010400 	.word	0x40010400
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40001800 	.word	0x40001800

080041c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e04e      	b.n	8004276 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a23      	ldr	r2, [pc, #140]	@ (8004284 <HAL_TIM_Base_Start_IT+0xc4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d022      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x80>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004202:	d01d      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x80>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1f      	ldr	r2, [pc, #124]	@ (8004288 <HAL_TIM_Base_Start_IT+0xc8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d018      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x80>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1e      	ldr	r2, [pc, #120]	@ (800428c <HAL_TIM_Base_Start_IT+0xcc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d013      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x80>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <HAL_TIM_Base_Start_IT+0xd0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00e      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x80>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1b      	ldr	r2, [pc, #108]	@ (8004294 <HAL_TIM_Base_Start_IT+0xd4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d009      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x80>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a19      	ldr	r2, [pc, #100]	@ (8004298 <HAL_TIM_Base_Start_IT+0xd8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x80>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a18      	ldr	r2, [pc, #96]	@ (800429c <HAL_TIM_Base_Start_IT+0xdc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d111      	bne.n	8004264 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b06      	cmp	r3, #6
 8004250:	d010      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	e007      	b.n	8004274 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40010000 	.word	0x40010000
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40010400 	.word	0x40010400
 8004298:	40014000 	.word	0x40014000
 800429c:	40001800 	.word	0x40001800

080042a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e041      	b.n	8004336 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd fb56 	bl	8001978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f000 fb98 	bl	8004a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_TIM_PWM_Start+0x24>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e022      	b.n	80043aa <HAL_TIM_PWM_Start+0x6a>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b04      	cmp	r3, #4
 8004368:	d109      	bne.n	800437e <HAL_TIM_PWM_Start+0x3e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	bf14      	ite	ne
 8004376:	2301      	movne	r3, #1
 8004378:	2300      	moveq	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	e015      	b.n	80043aa <HAL_TIM_PWM_Start+0x6a>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d109      	bne.n	8004398 <HAL_TIM_PWM_Start+0x58>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e008      	b.n	80043aa <HAL_TIM_PWM_Start+0x6a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e07c      	b.n	80044ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <HAL_TIM_PWM_Start+0x82>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043c0:	e013      	b.n	80043ea <HAL_TIM_PWM_Start+0xaa>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_PWM_Start+0x92>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043d0:	e00b      	b.n	80043ea <HAL_TIM_PWM_Start+0xaa>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_PWM_Start+0xa2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043e0:	e003      	b.n	80043ea <HAL_TIM_PWM_Start+0xaa>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2201      	movs	r2, #1
 80043f0:	6839      	ldr	r1, [r7, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fe04 	bl	8005000 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2d      	ldr	r2, [pc, #180]	@ (80044b4 <HAL_TIM_PWM_Start+0x174>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_TIM_PWM_Start+0xcc>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2c      	ldr	r2, [pc, #176]	@ (80044b8 <HAL_TIM_PWM_Start+0x178>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_TIM_PWM_Start+0xd0>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_TIM_PWM_Start+0xd2>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004424:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a22      	ldr	r2, [pc, #136]	@ (80044b4 <HAL_TIM_PWM_Start+0x174>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004438:	d01d      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1f      	ldr	r2, [pc, #124]	@ (80044bc <HAL_TIM_PWM_Start+0x17c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1d      	ldr	r2, [pc, #116]	@ (80044c0 <HAL_TIM_PWM_Start+0x180>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1c      	ldr	r2, [pc, #112]	@ (80044c4 <HAL_TIM_PWM_Start+0x184>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a16      	ldr	r2, [pc, #88]	@ (80044b8 <HAL_TIM_PWM_Start+0x178>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <HAL_TIM_PWM_Start+0x188>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <HAL_TIM_PWM_Start+0x18c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d111      	bne.n	800449a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b06      	cmp	r3, #6
 8004486:	d010      	beq.n	80044aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004498:	e007      	b.n	80044aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40010400 	.word	0x40010400
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40001800 	.word	0x40001800

080044d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d020      	beq.n	8004534 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01b      	beq.n	8004534 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0202 	mvn.w	r2, #2
 8004504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa5b 	bl	80049d6 <HAL_TIM_IC_CaptureCallback>
 8004520:	e005      	b.n	800452e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa4d 	bl	80049c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fa5e 	bl	80049ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01b      	beq.n	8004580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0204 	mvn.w	r2, #4
 8004550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2202      	movs	r2, #2
 8004556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fa35 	bl	80049d6 <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa27 	bl	80049c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fa38 	bl	80049ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d020      	beq.n	80045cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01b      	beq.n	80045cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0208 	mvn.w	r2, #8
 800459c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2204      	movs	r2, #4
 80045a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fa0f 	bl	80049d6 <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa01 	bl	80049c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fa12 	bl	80049ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d020      	beq.n	8004618 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01b      	beq.n	8004618 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0210 	mvn.w	r2, #16
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2208      	movs	r2, #8
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f9e9 	bl	80049d6 <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f9db 	bl	80049c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f9ec 	bl	80049ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00c      	beq.n	800463c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0201 	mvn.w	r2, #1
 8004634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fd78 	bl	800112c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fd7c 	bl	8005158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800467c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f9bd 	bl	80049fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0220 	mvn.w	r2, #32
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fd4e 	bl	8005144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e0ae      	b.n	800482c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	f200 809f 	bhi.w	800481c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046de:	a201      	add	r2, pc, #4	@ (adr r2, 80046e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004719 	.word	0x08004719
 80046e8:	0800481d 	.word	0x0800481d
 80046ec:	0800481d 	.word	0x0800481d
 80046f0:	0800481d 	.word	0x0800481d
 80046f4:	08004759 	.word	0x08004759
 80046f8:	0800481d 	.word	0x0800481d
 80046fc:	0800481d 	.word	0x0800481d
 8004700:	0800481d 	.word	0x0800481d
 8004704:	0800479b 	.word	0x0800479b
 8004708:	0800481d 	.word	0x0800481d
 800470c:	0800481d 	.word	0x0800481d
 8004710:	0800481d 	.word	0x0800481d
 8004714:	080047db 	.word	0x080047db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fa24 	bl	8004b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0208 	orr.w	r2, r2, #8
 8004732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0204 	bic.w	r2, r2, #4
 8004742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6999      	ldr	r1, [r3, #24]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	619a      	str	r2, [r3, #24]
      break;
 8004756:	e064      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fa74 	bl	8004c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6999      	ldr	r1, [r3, #24]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	021a      	lsls	r2, r3, #8
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	619a      	str	r2, [r3, #24]
      break;
 8004798:	e043      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fac9 	bl	8004d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0208 	orr.w	r2, r2, #8
 80047b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0204 	bic.w	r2, r2, #4
 80047c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69d9      	ldr	r1, [r3, #28]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	61da      	str	r2, [r3, #28]
      break;
 80047d8:	e023      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fb1d 	bl	8004e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69d9      	ldr	r1, [r3, #28]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	021a      	lsls	r2, r3, #8
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	61da      	str	r2, [r3, #28]
      break;
 800481a:	e002      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	75fb      	strb	r3, [r7, #23]
      break;
 8004820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800482a:	7dfb      	ldrb	r3, [r7, #23]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIM_ConfigClockSource+0x1c>
 800484c:	2302      	movs	r3, #2
 800484e:	e0b4      	b.n	80049ba <HAL_TIM_ConfigClockSource+0x186>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800486e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004888:	d03e      	beq.n	8004908 <HAL_TIM_ConfigClockSource+0xd4>
 800488a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800488e:	f200 8087 	bhi.w	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004896:	f000 8086 	beq.w	80049a6 <HAL_TIM_ConfigClockSource+0x172>
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800489e:	d87f      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048a0:	2b70      	cmp	r3, #112	@ 0x70
 80048a2:	d01a      	beq.n	80048da <HAL_TIM_ConfigClockSource+0xa6>
 80048a4:	2b70      	cmp	r3, #112	@ 0x70
 80048a6:	d87b      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048a8:	2b60      	cmp	r3, #96	@ 0x60
 80048aa:	d050      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x11a>
 80048ac:	2b60      	cmp	r3, #96	@ 0x60
 80048ae:	d877      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b0:	2b50      	cmp	r3, #80	@ 0x50
 80048b2:	d03c      	beq.n	800492e <HAL_TIM_ConfigClockSource+0xfa>
 80048b4:	2b50      	cmp	r3, #80	@ 0x50
 80048b6:	d873      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b8:	2b40      	cmp	r3, #64	@ 0x40
 80048ba:	d058      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x13a>
 80048bc:	2b40      	cmp	r3, #64	@ 0x40
 80048be:	d86f      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b30      	cmp	r3, #48	@ 0x30
 80048c2:	d064      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048c4:	2b30      	cmp	r3, #48	@ 0x30
 80048c6:	d86b      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d060      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d867      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d05c      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d05a      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048d8:	e062      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ea:	f000 fb69 	bl	8004fc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	609a      	str	r2, [r3, #8]
      break;
 8004906:	e04f      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004918:	f000 fb52 	bl	8004fc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800492a:	609a      	str	r2, [r3, #8]
      break;
 800492c:	e03c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800493a:	461a      	mov	r2, r3
 800493c:	f000 fac6 	bl	8004ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2150      	movs	r1, #80	@ 0x50
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fb1f 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 800494c:	e02c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800495a:	461a      	mov	r2, r3
 800495c:	f000 fae5 	bl	8004f2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2160      	movs	r1, #96	@ 0x60
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fb0f 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 800496c:	e01c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800497a:	461a      	mov	r2, r3
 800497c:	f000 faa6 	bl	8004ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2140      	movs	r1, #64	@ 0x40
 8004986:	4618      	mov	r0, r3
 8004988:	f000 faff 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 800498c:	e00c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f000 faf6 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 800499e:	e003      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
      break;
 80049a4:	e000      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a46      	ldr	r2, [pc, #280]	@ (8004b40 <TIM_Base_SetConfig+0x12c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a32:	d00f      	beq.n	8004a54 <TIM_Base_SetConfig+0x40>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a43      	ldr	r2, [pc, #268]	@ (8004b44 <TIM_Base_SetConfig+0x130>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <TIM_Base_SetConfig+0x40>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a42      	ldr	r2, [pc, #264]	@ (8004b48 <TIM_Base_SetConfig+0x134>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <TIM_Base_SetConfig+0x40>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a41      	ldr	r2, [pc, #260]	@ (8004b4c <TIM_Base_SetConfig+0x138>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_Base_SetConfig+0x40>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a40      	ldr	r2, [pc, #256]	@ (8004b50 <TIM_Base_SetConfig+0x13c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d108      	bne.n	8004a66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a35      	ldr	r2, [pc, #212]	@ (8004b40 <TIM_Base_SetConfig+0x12c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d02b      	beq.n	8004ac6 <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a74:	d027      	beq.n	8004ac6 <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a32      	ldr	r2, [pc, #200]	@ (8004b44 <TIM_Base_SetConfig+0x130>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d023      	beq.n	8004ac6 <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a31      	ldr	r2, [pc, #196]	@ (8004b48 <TIM_Base_SetConfig+0x134>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01f      	beq.n	8004ac6 <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a30      	ldr	r2, [pc, #192]	@ (8004b4c <TIM_Base_SetConfig+0x138>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d01b      	beq.n	8004ac6 <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2f      	ldr	r2, [pc, #188]	@ (8004b50 <TIM_Base_SetConfig+0x13c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d017      	beq.n	8004ac6 <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2e      	ldr	r2, [pc, #184]	@ (8004b54 <TIM_Base_SetConfig+0x140>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b58 <TIM_Base_SetConfig+0x144>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00f      	beq.n	8004ac6 <TIM_Base_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b5c <TIM_Base_SetConfig+0x148>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00b      	beq.n	8004ac6 <TIM_Base_SetConfig+0xb2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b60 <TIM_Base_SetConfig+0x14c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d007      	beq.n	8004ac6 <TIM_Base_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b64 <TIM_Base_SetConfig+0x150>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d003      	beq.n	8004ac6 <TIM_Base_SetConfig+0xb2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a29      	ldr	r2, [pc, #164]	@ (8004b68 <TIM_Base_SetConfig+0x154>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d108      	bne.n	8004ad8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a10      	ldr	r2, [pc, #64]	@ (8004b40 <TIM_Base_SetConfig+0x12c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_Base_SetConfig+0xf8>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a12      	ldr	r2, [pc, #72]	@ (8004b50 <TIM_Base_SetConfig+0x13c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d103      	bne.n	8004b14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d105      	bne.n	8004b32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f023 0201 	bic.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]
  }
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	40010400 	.word	0x40010400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40014400 	.word	0x40014400
 8004b5c:	40014800 	.word	0x40014800
 8004b60:	40001800 	.word	0x40001800
 8004b64:	40001c00 	.word	0x40001c00
 8004b68:	40002000 	.word	0x40002000

08004b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f023 0201 	bic.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 0302 	bic.w	r3, r3, #2
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a20      	ldr	r2, [pc, #128]	@ (8004c44 <TIM_OC1_SetConfig+0xd8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_OC1_SetConfig+0x64>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a1f      	ldr	r2, [pc, #124]	@ (8004c48 <TIM_OC1_SetConfig+0xdc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d10c      	bne.n	8004bea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0308 	bic.w	r3, r3, #8
 8004bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a15      	ldr	r2, [pc, #84]	@ (8004c44 <TIM_OC1_SetConfig+0xd8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_OC1_SetConfig+0x8e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a14      	ldr	r2, [pc, #80]	@ (8004c48 <TIM_OC1_SetConfig+0xdc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d111      	bne.n	8004c1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	621a      	str	r2, [r3, #32]
}
 8004c38:	bf00      	nop
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	40010000 	.word	0x40010000
 8004c48:	40010400 	.word	0x40010400

08004c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f023 0210 	bic.w	r2, r3, #16
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	021b      	lsls	r3, r3, #8
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0320 	bic.w	r3, r3, #32
 8004c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a22      	ldr	r2, [pc, #136]	@ (8004d30 <TIM_OC2_SetConfig+0xe4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <TIM_OC2_SetConfig+0x68>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a21      	ldr	r2, [pc, #132]	@ (8004d34 <TIM_OC2_SetConfig+0xe8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10d      	bne.n	8004cd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	@ (8004d30 <TIM_OC2_SetConfig+0xe4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_OC2_SetConfig+0x94>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a16      	ldr	r2, [pc, #88]	@ (8004d34 <TIM_OC2_SetConfig+0xe8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d113      	bne.n	8004d08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40010000 	.word	0x40010000
 8004d34:	40010400 	.word	0x40010400

08004d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a21      	ldr	r2, [pc, #132]	@ (8004e18 <TIM_OC3_SetConfig+0xe0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_OC3_SetConfig+0x66>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a20      	ldr	r2, [pc, #128]	@ (8004e1c <TIM_OC3_SetConfig+0xe4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d10d      	bne.n	8004dba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a16      	ldr	r2, [pc, #88]	@ (8004e18 <TIM_OC3_SetConfig+0xe0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC3_SetConfig+0x92>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a15      	ldr	r2, [pc, #84]	@ (8004e1c <TIM_OC3_SetConfig+0xe4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d113      	bne.n	8004df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400

08004e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	031b      	lsls	r3, r3, #12
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a12      	ldr	r2, [pc, #72]	@ (8004ec4 <TIM_OC4_SetConfig+0xa4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_OC4_SetConfig+0x68>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a11      	ldr	r2, [pc, #68]	@ (8004ec8 <TIM_OC4_SetConfig+0xa8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d109      	bne.n	8004e9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	019b      	lsls	r3, r3, #6
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40010400 	.word	0x40010400

08004ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f023 030a 	bic.w	r3, r3, #10
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b087      	sub	sp, #28
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f023 0210 	bic.w	r2, r3, #16
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	031b      	lsls	r3, r3, #12
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f043 0307 	orr.w	r3, r3, #7
 8004fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	021a      	lsls	r2, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	609a      	str	r2, [r3, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2201      	movs	r2, #1
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1a      	ldr	r2, [r3, #32]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	43db      	mvns	r3, r3
 8005022:	401a      	ands	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	fa01 f303 	lsl.w	r3, r1, r3
 8005038:	431a      	orrs	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
	...

0800504c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005060:	2302      	movs	r3, #2
 8005062:	e05a      	b.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a21      	ldr	r2, [pc, #132]	@ (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b0:	d01d      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1d      	ldr	r2, [pc, #116]	@ (800512c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d018      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a18      	ldr	r2, [pc, #96]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a17      	ldr	r2, [pc, #92]	@ (800513c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a15      	ldr	r2, [pc, #84]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d10c      	bne.n	8005108 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40010000 	.word	0x40010000
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40010400 	.word	0x40010400
 800513c:	40014000 	.word	0x40014000
 8005140:	40001800 	.word	0x40001800

08005144 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <std>:
 800516c:	2300      	movs	r3, #0
 800516e:	b510      	push	{r4, lr}
 8005170:	4604      	mov	r4, r0
 8005172:	e9c0 3300 	strd	r3, r3, [r0]
 8005176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800517a:	6083      	str	r3, [r0, #8]
 800517c:	8181      	strh	r1, [r0, #12]
 800517e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005180:	81c2      	strh	r2, [r0, #14]
 8005182:	6183      	str	r3, [r0, #24]
 8005184:	4619      	mov	r1, r3
 8005186:	2208      	movs	r2, #8
 8005188:	305c      	adds	r0, #92	@ 0x5c
 800518a:	f000 f9e7 	bl	800555c <memset>
 800518e:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <std+0x58>)
 8005190:	6263      	str	r3, [r4, #36]	@ 0x24
 8005192:	4b0d      	ldr	r3, [pc, #52]	@ (80051c8 <std+0x5c>)
 8005194:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005196:	4b0d      	ldr	r3, [pc, #52]	@ (80051cc <std+0x60>)
 8005198:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800519a:	4b0d      	ldr	r3, [pc, #52]	@ (80051d0 <std+0x64>)
 800519c:	6323      	str	r3, [r4, #48]	@ 0x30
 800519e:	4b0d      	ldr	r3, [pc, #52]	@ (80051d4 <std+0x68>)
 80051a0:	6224      	str	r4, [r4, #32]
 80051a2:	429c      	cmp	r4, r3
 80051a4:	d006      	beq.n	80051b4 <std+0x48>
 80051a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051aa:	4294      	cmp	r4, r2
 80051ac:	d002      	beq.n	80051b4 <std+0x48>
 80051ae:	33d0      	adds	r3, #208	@ 0xd0
 80051b0:	429c      	cmp	r4, r3
 80051b2:	d105      	bne.n	80051c0 <std+0x54>
 80051b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051bc:	f000 ba46 	b.w	800564c <__retarget_lock_init_recursive>
 80051c0:	bd10      	pop	{r4, pc}
 80051c2:	bf00      	nop
 80051c4:	080053ad 	.word	0x080053ad
 80051c8:	080053cf 	.word	0x080053cf
 80051cc:	08005407 	.word	0x08005407
 80051d0:	0800542b 	.word	0x0800542b
 80051d4:	200001d4 	.word	0x200001d4

080051d8 <stdio_exit_handler>:
 80051d8:	4a02      	ldr	r2, [pc, #8]	@ (80051e4 <stdio_exit_handler+0xc>)
 80051da:	4903      	ldr	r1, [pc, #12]	@ (80051e8 <stdio_exit_handler+0x10>)
 80051dc:	4803      	ldr	r0, [pc, #12]	@ (80051ec <stdio_exit_handler+0x14>)
 80051de:	f000 b869 	b.w	80052b4 <_fwalk_sglue>
 80051e2:	bf00      	nop
 80051e4:	2000000c 	.word	0x2000000c
 80051e8:	0800594d 	.word	0x0800594d
 80051ec:	2000001c 	.word	0x2000001c

080051f0 <cleanup_stdio>:
 80051f0:	6841      	ldr	r1, [r0, #4]
 80051f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <cleanup_stdio+0x34>)
 80051f4:	4299      	cmp	r1, r3
 80051f6:	b510      	push	{r4, lr}
 80051f8:	4604      	mov	r4, r0
 80051fa:	d001      	beq.n	8005200 <cleanup_stdio+0x10>
 80051fc:	f000 fba6 	bl	800594c <_fflush_r>
 8005200:	68a1      	ldr	r1, [r4, #8]
 8005202:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <cleanup_stdio+0x38>)
 8005204:	4299      	cmp	r1, r3
 8005206:	d002      	beq.n	800520e <cleanup_stdio+0x1e>
 8005208:	4620      	mov	r0, r4
 800520a:	f000 fb9f 	bl	800594c <_fflush_r>
 800520e:	68e1      	ldr	r1, [r4, #12]
 8005210:	4b06      	ldr	r3, [pc, #24]	@ (800522c <cleanup_stdio+0x3c>)
 8005212:	4299      	cmp	r1, r3
 8005214:	d004      	beq.n	8005220 <cleanup_stdio+0x30>
 8005216:	4620      	mov	r0, r4
 8005218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800521c:	f000 bb96 	b.w	800594c <_fflush_r>
 8005220:	bd10      	pop	{r4, pc}
 8005222:	bf00      	nop
 8005224:	200001d4 	.word	0x200001d4
 8005228:	2000023c 	.word	0x2000023c
 800522c:	200002a4 	.word	0x200002a4

08005230 <global_stdio_init.part.0>:
 8005230:	b510      	push	{r4, lr}
 8005232:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <global_stdio_init.part.0+0x30>)
 8005234:	4c0b      	ldr	r4, [pc, #44]	@ (8005264 <global_stdio_init.part.0+0x34>)
 8005236:	4a0c      	ldr	r2, [pc, #48]	@ (8005268 <global_stdio_init.part.0+0x38>)
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	4620      	mov	r0, r4
 800523c:	2200      	movs	r2, #0
 800523e:	2104      	movs	r1, #4
 8005240:	f7ff ff94 	bl	800516c <std>
 8005244:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005248:	2201      	movs	r2, #1
 800524a:	2109      	movs	r1, #9
 800524c:	f7ff ff8e 	bl	800516c <std>
 8005250:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005254:	2202      	movs	r2, #2
 8005256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525a:	2112      	movs	r1, #18
 800525c:	f7ff bf86 	b.w	800516c <std>
 8005260:	2000030c 	.word	0x2000030c
 8005264:	200001d4 	.word	0x200001d4
 8005268:	080051d9 	.word	0x080051d9

0800526c <__sfp_lock_acquire>:
 800526c:	4801      	ldr	r0, [pc, #4]	@ (8005274 <__sfp_lock_acquire+0x8>)
 800526e:	f000 b9ee 	b.w	800564e <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	20000315 	.word	0x20000315

08005278 <__sfp_lock_release>:
 8005278:	4801      	ldr	r0, [pc, #4]	@ (8005280 <__sfp_lock_release+0x8>)
 800527a:	f000 b9e9 	b.w	8005650 <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	20000315 	.word	0x20000315

08005284 <__sinit>:
 8005284:	b510      	push	{r4, lr}
 8005286:	4604      	mov	r4, r0
 8005288:	f7ff fff0 	bl	800526c <__sfp_lock_acquire>
 800528c:	6a23      	ldr	r3, [r4, #32]
 800528e:	b11b      	cbz	r3, 8005298 <__sinit+0x14>
 8005290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005294:	f7ff bff0 	b.w	8005278 <__sfp_lock_release>
 8005298:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <__sinit+0x28>)
 800529a:	6223      	str	r3, [r4, #32]
 800529c:	4b04      	ldr	r3, [pc, #16]	@ (80052b0 <__sinit+0x2c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f5      	bne.n	8005290 <__sinit+0xc>
 80052a4:	f7ff ffc4 	bl	8005230 <global_stdio_init.part.0>
 80052a8:	e7f2      	b.n	8005290 <__sinit+0xc>
 80052aa:	bf00      	nop
 80052ac:	080051f1 	.word	0x080051f1
 80052b0:	2000030c 	.word	0x2000030c

080052b4 <_fwalk_sglue>:
 80052b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b8:	4607      	mov	r7, r0
 80052ba:	4688      	mov	r8, r1
 80052bc:	4614      	mov	r4, r2
 80052be:	2600      	movs	r6, #0
 80052c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052c4:	f1b9 0901 	subs.w	r9, r9, #1
 80052c8:	d505      	bpl.n	80052d6 <_fwalk_sglue+0x22>
 80052ca:	6824      	ldr	r4, [r4, #0]
 80052cc:	2c00      	cmp	r4, #0
 80052ce:	d1f7      	bne.n	80052c0 <_fwalk_sglue+0xc>
 80052d0:	4630      	mov	r0, r6
 80052d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052d6:	89ab      	ldrh	r3, [r5, #12]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d907      	bls.n	80052ec <_fwalk_sglue+0x38>
 80052dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052e0:	3301      	adds	r3, #1
 80052e2:	d003      	beq.n	80052ec <_fwalk_sglue+0x38>
 80052e4:	4629      	mov	r1, r5
 80052e6:	4638      	mov	r0, r7
 80052e8:	47c0      	blx	r8
 80052ea:	4306      	orrs	r6, r0
 80052ec:	3568      	adds	r5, #104	@ 0x68
 80052ee:	e7e9      	b.n	80052c4 <_fwalk_sglue+0x10>

080052f0 <_puts_r>:
 80052f0:	6a03      	ldr	r3, [r0, #32]
 80052f2:	b570      	push	{r4, r5, r6, lr}
 80052f4:	6884      	ldr	r4, [r0, #8]
 80052f6:	4605      	mov	r5, r0
 80052f8:	460e      	mov	r6, r1
 80052fa:	b90b      	cbnz	r3, 8005300 <_puts_r+0x10>
 80052fc:	f7ff ffc2 	bl	8005284 <__sinit>
 8005300:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005302:	07db      	lsls	r3, r3, #31
 8005304:	d405      	bmi.n	8005312 <_puts_r+0x22>
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	0598      	lsls	r0, r3, #22
 800530a:	d402      	bmi.n	8005312 <_puts_r+0x22>
 800530c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800530e:	f000 f99e 	bl	800564e <__retarget_lock_acquire_recursive>
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	0719      	lsls	r1, r3, #28
 8005316:	d502      	bpl.n	800531e <_puts_r+0x2e>
 8005318:	6923      	ldr	r3, [r4, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d135      	bne.n	800538a <_puts_r+0x9a>
 800531e:	4621      	mov	r1, r4
 8005320:	4628      	mov	r0, r5
 8005322:	f000 f8c5 	bl	80054b0 <__swsetup_r>
 8005326:	b380      	cbz	r0, 800538a <_puts_r+0x9a>
 8005328:	f04f 35ff 	mov.w	r5, #4294967295
 800532c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800532e:	07da      	lsls	r2, r3, #31
 8005330:	d405      	bmi.n	800533e <_puts_r+0x4e>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	059b      	lsls	r3, r3, #22
 8005336:	d402      	bmi.n	800533e <_puts_r+0x4e>
 8005338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800533a:	f000 f989 	bl	8005650 <__retarget_lock_release_recursive>
 800533e:	4628      	mov	r0, r5
 8005340:	bd70      	pop	{r4, r5, r6, pc}
 8005342:	2b00      	cmp	r3, #0
 8005344:	da04      	bge.n	8005350 <_puts_r+0x60>
 8005346:	69a2      	ldr	r2, [r4, #24]
 8005348:	429a      	cmp	r2, r3
 800534a:	dc17      	bgt.n	800537c <_puts_r+0x8c>
 800534c:	290a      	cmp	r1, #10
 800534e:	d015      	beq.n	800537c <_puts_r+0x8c>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	7019      	strb	r1, [r3, #0]
 8005358:	68a3      	ldr	r3, [r4, #8]
 800535a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800535e:	3b01      	subs	r3, #1
 8005360:	60a3      	str	r3, [r4, #8]
 8005362:	2900      	cmp	r1, #0
 8005364:	d1ed      	bne.n	8005342 <_puts_r+0x52>
 8005366:	2b00      	cmp	r3, #0
 8005368:	da11      	bge.n	800538e <_puts_r+0x9e>
 800536a:	4622      	mov	r2, r4
 800536c:	210a      	movs	r1, #10
 800536e:	4628      	mov	r0, r5
 8005370:	f000 f85f 	bl	8005432 <__swbuf_r>
 8005374:	3001      	adds	r0, #1
 8005376:	d0d7      	beq.n	8005328 <_puts_r+0x38>
 8005378:	250a      	movs	r5, #10
 800537a:	e7d7      	b.n	800532c <_puts_r+0x3c>
 800537c:	4622      	mov	r2, r4
 800537e:	4628      	mov	r0, r5
 8005380:	f000 f857 	bl	8005432 <__swbuf_r>
 8005384:	3001      	adds	r0, #1
 8005386:	d1e7      	bne.n	8005358 <_puts_r+0x68>
 8005388:	e7ce      	b.n	8005328 <_puts_r+0x38>
 800538a:	3e01      	subs	r6, #1
 800538c:	e7e4      	b.n	8005358 <_puts_r+0x68>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	6022      	str	r2, [r4, #0]
 8005394:	220a      	movs	r2, #10
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	e7ee      	b.n	8005378 <_puts_r+0x88>
	...

0800539c <puts>:
 800539c:	4b02      	ldr	r3, [pc, #8]	@ (80053a8 <puts+0xc>)
 800539e:	4601      	mov	r1, r0
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	f7ff bfa5 	b.w	80052f0 <_puts_r>
 80053a6:	bf00      	nop
 80053a8:	20000018 	.word	0x20000018

080053ac <__sread>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	460c      	mov	r4, r1
 80053b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b4:	f000 f8fc 	bl	80055b0 <_read_r>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	bfab      	itete	ge
 80053bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053be:	89a3      	ldrhlt	r3, [r4, #12]
 80053c0:	181b      	addge	r3, r3, r0
 80053c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053c6:	bfac      	ite	ge
 80053c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053ca:	81a3      	strhlt	r3, [r4, #12]
 80053cc:	bd10      	pop	{r4, pc}

080053ce <__swrite>:
 80053ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d2:	461f      	mov	r7, r3
 80053d4:	898b      	ldrh	r3, [r1, #12]
 80053d6:	05db      	lsls	r3, r3, #23
 80053d8:	4605      	mov	r5, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	4616      	mov	r6, r2
 80053de:	d505      	bpl.n	80053ec <__swrite+0x1e>
 80053e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e4:	2302      	movs	r3, #2
 80053e6:	2200      	movs	r2, #0
 80053e8:	f000 f8d0 	bl	800558c <_lseek_r>
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	4632      	mov	r2, r6
 80053fa:	463b      	mov	r3, r7
 80053fc:	4628      	mov	r0, r5
 80053fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005402:	f000 b8e7 	b.w	80055d4 <_write_r>

08005406 <__sseek>:
 8005406:	b510      	push	{r4, lr}
 8005408:	460c      	mov	r4, r1
 800540a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540e:	f000 f8bd 	bl	800558c <_lseek_r>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	bf15      	itete	ne
 8005418:	6560      	strne	r0, [r4, #84]	@ 0x54
 800541a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800541e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005422:	81a3      	strheq	r3, [r4, #12]
 8005424:	bf18      	it	ne
 8005426:	81a3      	strhne	r3, [r4, #12]
 8005428:	bd10      	pop	{r4, pc}

0800542a <__sclose>:
 800542a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542e:	f000 b89d 	b.w	800556c <_close_r>

08005432 <__swbuf_r>:
 8005432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005434:	460e      	mov	r6, r1
 8005436:	4614      	mov	r4, r2
 8005438:	4605      	mov	r5, r0
 800543a:	b118      	cbz	r0, 8005444 <__swbuf_r+0x12>
 800543c:	6a03      	ldr	r3, [r0, #32]
 800543e:	b90b      	cbnz	r3, 8005444 <__swbuf_r+0x12>
 8005440:	f7ff ff20 	bl	8005284 <__sinit>
 8005444:	69a3      	ldr	r3, [r4, #24]
 8005446:	60a3      	str	r3, [r4, #8]
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	071a      	lsls	r2, r3, #28
 800544c:	d501      	bpl.n	8005452 <__swbuf_r+0x20>
 800544e:	6923      	ldr	r3, [r4, #16]
 8005450:	b943      	cbnz	r3, 8005464 <__swbuf_r+0x32>
 8005452:	4621      	mov	r1, r4
 8005454:	4628      	mov	r0, r5
 8005456:	f000 f82b 	bl	80054b0 <__swsetup_r>
 800545a:	b118      	cbz	r0, 8005464 <__swbuf_r+0x32>
 800545c:	f04f 37ff 	mov.w	r7, #4294967295
 8005460:	4638      	mov	r0, r7
 8005462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	6922      	ldr	r2, [r4, #16]
 8005468:	1a98      	subs	r0, r3, r2
 800546a:	6963      	ldr	r3, [r4, #20]
 800546c:	b2f6      	uxtb	r6, r6
 800546e:	4283      	cmp	r3, r0
 8005470:	4637      	mov	r7, r6
 8005472:	dc05      	bgt.n	8005480 <__swbuf_r+0x4e>
 8005474:	4621      	mov	r1, r4
 8005476:	4628      	mov	r0, r5
 8005478:	f000 fa68 	bl	800594c <_fflush_r>
 800547c:	2800      	cmp	r0, #0
 800547e:	d1ed      	bne.n	800545c <__swbuf_r+0x2a>
 8005480:	68a3      	ldr	r3, [r4, #8]
 8005482:	3b01      	subs	r3, #1
 8005484:	60a3      	str	r3, [r4, #8]
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	6022      	str	r2, [r4, #0]
 800548c:	701e      	strb	r6, [r3, #0]
 800548e:	6962      	ldr	r2, [r4, #20]
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	429a      	cmp	r2, r3
 8005494:	d004      	beq.n	80054a0 <__swbuf_r+0x6e>
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	07db      	lsls	r3, r3, #31
 800549a:	d5e1      	bpl.n	8005460 <__swbuf_r+0x2e>
 800549c:	2e0a      	cmp	r6, #10
 800549e:	d1df      	bne.n	8005460 <__swbuf_r+0x2e>
 80054a0:	4621      	mov	r1, r4
 80054a2:	4628      	mov	r0, r5
 80054a4:	f000 fa52 	bl	800594c <_fflush_r>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d0d9      	beq.n	8005460 <__swbuf_r+0x2e>
 80054ac:	e7d6      	b.n	800545c <__swbuf_r+0x2a>
	...

080054b0 <__swsetup_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4b29      	ldr	r3, [pc, #164]	@ (8005558 <__swsetup_r+0xa8>)
 80054b4:	4605      	mov	r5, r0
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	460c      	mov	r4, r1
 80054ba:	b118      	cbz	r0, 80054c4 <__swsetup_r+0x14>
 80054bc:	6a03      	ldr	r3, [r0, #32]
 80054be:	b90b      	cbnz	r3, 80054c4 <__swsetup_r+0x14>
 80054c0:	f7ff fee0 	bl	8005284 <__sinit>
 80054c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054c8:	0719      	lsls	r1, r3, #28
 80054ca:	d422      	bmi.n	8005512 <__swsetup_r+0x62>
 80054cc:	06da      	lsls	r2, r3, #27
 80054ce:	d407      	bmi.n	80054e0 <__swsetup_r+0x30>
 80054d0:	2209      	movs	r2, #9
 80054d2:	602a      	str	r2, [r5, #0]
 80054d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054d8:	81a3      	strh	r3, [r4, #12]
 80054da:	f04f 30ff 	mov.w	r0, #4294967295
 80054de:	e033      	b.n	8005548 <__swsetup_r+0x98>
 80054e0:	0758      	lsls	r0, r3, #29
 80054e2:	d512      	bpl.n	800550a <__swsetup_r+0x5a>
 80054e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054e6:	b141      	cbz	r1, 80054fa <__swsetup_r+0x4a>
 80054e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054ec:	4299      	cmp	r1, r3
 80054ee:	d002      	beq.n	80054f6 <__swsetup_r+0x46>
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 f8af 	bl	8005654 <_free_r>
 80054f6:	2300      	movs	r3, #0
 80054f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005500:	81a3      	strh	r3, [r4, #12]
 8005502:	2300      	movs	r3, #0
 8005504:	6063      	str	r3, [r4, #4]
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	f043 0308 	orr.w	r3, r3, #8
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	6923      	ldr	r3, [r4, #16]
 8005514:	b94b      	cbnz	r3, 800552a <__swsetup_r+0x7a>
 8005516:	89a3      	ldrh	r3, [r4, #12]
 8005518:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800551c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005520:	d003      	beq.n	800552a <__swsetup_r+0x7a>
 8005522:	4621      	mov	r1, r4
 8005524:	4628      	mov	r0, r5
 8005526:	f000 fa5f 	bl	80059e8 <__smakebuf_r>
 800552a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800552e:	f013 0201 	ands.w	r2, r3, #1
 8005532:	d00a      	beq.n	800554a <__swsetup_r+0x9a>
 8005534:	2200      	movs	r2, #0
 8005536:	60a2      	str	r2, [r4, #8]
 8005538:	6962      	ldr	r2, [r4, #20]
 800553a:	4252      	negs	r2, r2
 800553c:	61a2      	str	r2, [r4, #24]
 800553e:	6922      	ldr	r2, [r4, #16]
 8005540:	b942      	cbnz	r2, 8005554 <__swsetup_r+0xa4>
 8005542:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005546:	d1c5      	bne.n	80054d4 <__swsetup_r+0x24>
 8005548:	bd38      	pop	{r3, r4, r5, pc}
 800554a:	0799      	lsls	r1, r3, #30
 800554c:	bf58      	it	pl
 800554e:	6962      	ldrpl	r2, [r4, #20]
 8005550:	60a2      	str	r2, [r4, #8]
 8005552:	e7f4      	b.n	800553e <__swsetup_r+0x8e>
 8005554:	2000      	movs	r0, #0
 8005556:	e7f7      	b.n	8005548 <__swsetup_r+0x98>
 8005558:	20000018 	.word	0x20000018

0800555c <memset>:
 800555c:	4402      	add	r2, r0
 800555e:	4603      	mov	r3, r0
 8005560:	4293      	cmp	r3, r2
 8005562:	d100      	bne.n	8005566 <memset+0xa>
 8005564:	4770      	bx	lr
 8005566:	f803 1b01 	strb.w	r1, [r3], #1
 800556a:	e7f9      	b.n	8005560 <memset+0x4>

0800556c <_close_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4d06      	ldr	r5, [pc, #24]	@ (8005588 <_close_r+0x1c>)
 8005570:	2300      	movs	r3, #0
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	602b      	str	r3, [r5, #0]
 8005578:	f7fc facd 	bl	8001b16 <_close>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_close_r+0x1a>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b103      	cbz	r3, 8005586 <_close_r+0x1a>
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	20000310 	.word	0x20000310

0800558c <_lseek_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4d07      	ldr	r5, [pc, #28]	@ (80055ac <_lseek_r+0x20>)
 8005590:	4604      	mov	r4, r0
 8005592:	4608      	mov	r0, r1
 8005594:	4611      	mov	r1, r2
 8005596:	2200      	movs	r2, #0
 8005598:	602a      	str	r2, [r5, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	f7fc fae2 	bl	8001b64 <_lseek>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_lseek_r+0x1e>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_lseek_r+0x1e>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	20000310 	.word	0x20000310

080055b0 <_read_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4d07      	ldr	r5, [pc, #28]	@ (80055d0 <_read_r+0x20>)
 80055b4:	4604      	mov	r4, r0
 80055b6:	4608      	mov	r0, r1
 80055b8:	4611      	mov	r1, r2
 80055ba:	2200      	movs	r2, #0
 80055bc:	602a      	str	r2, [r5, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	f7fc fa70 	bl	8001aa4 <_read>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_read_r+0x1e>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_read_r+0x1e>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	20000310 	.word	0x20000310

080055d4 <_write_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4d07      	ldr	r5, [pc, #28]	@ (80055f4 <_write_r+0x20>)
 80055d8:	4604      	mov	r4, r0
 80055da:	4608      	mov	r0, r1
 80055dc:	4611      	mov	r1, r2
 80055de:	2200      	movs	r2, #0
 80055e0:	602a      	str	r2, [r5, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f7fc fa7b 	bl	8001ade <_write>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_write_r+0x1e>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_write_r+0x1e>
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	20000310 	.word	0x20000310

080055f8 <__errno>:
 80055f8:	4b01      	ldr	r3, [pc, #4]	@ (8005600 <__errno+0x8>)
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	20000018 	.word	0x20000018

08005604 <__libc_init_array>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	4d0d      	ldr	r5, [pc, #52]	@ (800563c <__libc_init_array+0x38>)
 8005608:	4c0d      	ldr	r4, [pc, #52]	@ (8005640 <__libc_init_array+0x3c>)
 800560a:	1b64      	subs	r4, r4, r5
 800560c:	10a4      	asrs	r4, r4, #2
 800560e:	2600      	movs	r6, #0
 8005610:	42a6      	cmp	r6, r4
 8005612:	d109      	bne.n	8005628 <__libc_init_array+0x24>
 8005614:	4d0b      	ldr	r5, [pc, #44]	@ (8005644 <__libc_init_array+0x40>)
 8005616:	4c0c      	ldr	r4, [pc, #48]	@ (8005648 <__libc_init_array+0x44>)
 8005618:	f000 fa54 	bl	8005ac4 <_init>
 800561c:	1b64      	subs	r4, r4, r5
 800561e:	10a4      	asrs	r4, r4, #2
 8005620:	2600      	movs	r6, #0
 8005622:	42a6      	cmp	r6, r4
 8005624:	d105      	bne.n	8005632 <__libc_init_array+0x2e>
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	f855 3b04 	ldr.w	r3, [r5], #4
 800562c:	4798      	blx	r3
 800562e:	3601      	adds	r6, #1
 8005630:	e7ee      	b.n	8005610 <__libc_init_array+0xc>
 8005632:	f855 3b04 	ldr.w	r3, [r5], #4
 8005636:	4798      	blx	r3
 8005638:	3601      	adds	r6, #1
 800563a:	e7f2      	b.n	8005622 <__libc_init_array+0x1e>
 800563c:	08005b54 	.word	0x08005b54
 8005640:	08005b54 	.word	0x08005b54
 8005644:	08005b54 	.word	0x08005b54
 8005648:	08005b58 	.word	0x08005b58

0800564c <__retarget_lock_init_recursive>:
 800564c:	4770      	bx	lr

0800564e <__retarget_lock_acquire_recursive>:
 800564e:	4770      	bx	lr

08005650 <__retarget_lock_release_recursive>:
 8005650:	4770      	bx	lr
	...

08005654 <_free_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4605      	mov	r5, r0
 8005658:	2900      	cmp	r1, #0
 800565a:	d041      	beq.n	80056e0 <_free_r+0x8c>
 800565c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005660:	1f0c      	subs	r4, r1, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	bfb8      	it	lt
 8005666:	18e4      	addlt	r4, r4, r3
 8005668:	f000 f8e0 	bl	800582c <__malloc_lock>
 800566c:	4a1d      	ldr	r2, [pc, #116]	@ (80056e4 <_free_r+0x90>)
 800566e:	6813      	ldr	r3, [r2, #0]
 8005670:	b933      	cbnz	r3, 8005680 <_free_r+0x2c>
 8005672:	6063      	str	r3, [r4, #4]
 8005674:	6014      	str	r4, [r2, #0]
 8005676:	4628      	mov	r0, r5
 8005678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800567c:	f000 b8dc 	b.w	8005838 <__malloc_unlock>
 8005680:	42a3      	cmp	r3, r4
 8005682:	d908      	bls.n	8005696 <_free_r+0x42>
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	1821      	adds	r1, r4, r0
 8005688:	428b      	cmp	r3, r1
 800568a:	bf01      	itttt	eq
 800568c:	6819      	ldreq	r1, [r3, #0]
 800568e:	685b      	ldreq	r3, [r3, #4]
 8005690:	1809      	addeq	r1, r1, r0
 8005692:	6021      	streq	r1, [r4, #0]
 8005694:	e7ed      	b.n	8005672 <_free_r+0x1e>
 8005696:	461a      	mov	r2, r3
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	b10b      	cbz	r3, 80056a0 <_free_r+0x4c>
 800569c:	42a3      	cmp	r3, r4
 800569e:	d9fa      	bls.n	8005696 <_free_r+0x42>
 80056a0:	6811      	ldr	r1, [r2, #0]
 80056a2:	1850      	adds	r0, r2, r1
 80056a4:	42a0      	cmp	r0, r4
 80056a6:	d10b      	bne.n	80056c0 <_free_r+0x6c>
 80056a8:	6820      	ldr	r0, [r4, #0]
 80056aa:	4401      	add	r1, r0
 80056ac:	1850      	adds	r0, r2, r1
 80056ae:	4283      	cmp	r3, r0
 80056b0:	6011      	str	r1, [r2, #0]
 80056b2:	d1e0      	bne.n	8005676 <_free_r+0x22>
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	6053      	str	r3, [r2, #4]
 80056ba:	4408      	add	r0, r1
 80056bc:	6010      	str	r0, [r2, #0]
 80056be:	e7da      	b.n	8005676 <_free_r+0x22>
 80056c0:	d902      	bls.n	80056c8 <_free_r+0x74>
 80056c2:	230c      	movs	r3, #12
 80056c4:	602b      	str	r3, [r5, #0]
 80056c6:	e7d6      	b.n	8005676 <_free_r+0x22>
 80056c8:	6820      	ldr	r0, [r4, #0]
 80056ca:	1821      	adds	r1, r4, r0
 80056cc:	428b      	cmp	r3, r1
 80056ce:	bf04      	itt	eq
 80056d0:	6819      	ldreq	r1, [r3, #0]
 80056d2:	685b      	ldreq	r3, [r3, #4]
 80056d4:	6063      	str	r3, [r4, #4]
 80056d6:	bf04      	itt	eq
 80056d8:	1809      	addeq	r1, r1, r0
 80056da:	6021      	streq	r1, [r4, #0]
 80056dc:	6054      	str	r4, [r2, #4]
 80056de:	e7ca      	b.n	8005676 <_free_r+0x22>
 80056e0:	bd38      	pop	{r3, r4, r5, pc}
 80056e2:	bf00      	nop
 80056e4:	2000031c 	.word	0x2000031c

080056e8 <sbrk_aligned>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4e0f      	ldr	r6, [pc, #60]	@ (8005728 <sbrk_aligned+0x40>)
 80056ec:	460c      	mov	r4, r1
 80056ee:	6831      	ldr	r1, [r6, #0]
 80056f0:	4605      	mov	r5, r0
 80056f2:	b911      	cbnz	r1, 80056fa <sbrk_aligned+0x12>
 80056f4:	f000 f9d6 	bl	8005aa4 <_sbrk_r>
 80056f8:	6030      	str	r0, [r6, #0]
 80056fa:	4621      	mov	r1, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 f9d1 	bl	8005aa4 <_sbrk_r>
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	d103      	bne.n	800570e <sbrk_aligned+0x26>
 8005706:	f04f 34ff 	mov.w	r4, #4294967295
 800570a:	4620      	mov	r0, r4
 800570c:	bd70      	pop	{r4, r5, r6, pc}
 800570e:	1cc4      	adds	r4, r0, #3
 8005710:	f024 0403 	bic.w	r4, r4, #3
 8005714:	42a0      	cmp	r0, r4
 8005716:	d0f8      	beq.n	800570a <sbrk_aligned+0x22>
 8005718:	1a21      	subs	r1, r4, r0
 800571a:	4628      	mov	r0, r5
 800571c:	f000 f9c2 	bl	8005aa4 <_sbrk_r>
 8005720:	3001      	adds	r0, #1
 8005722:	d1f2      	bne.n	800570a <sbrk_aligned+0x22>
 8005724:	e7ef      	b.n	8005706 <sbrk_aligned+0x1e>
 8005726:	bf00      	nop
 8005728:	20000318 	.word	0x20000318

0800572c <_malloc_r>:
 800572c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005730:	1ccd      	adds	r5, r1, #3
 8005732:	f025 0503 	bic.w	r5, r5, #3
 8005736:	3508      	adds	r5, #8
 8005738:	2d0c      	cmp	r5, #12
 800573a:	bf38      	it	cc
 800573c:	250c      	movcc	r5, #12
 800573e:	2d00      	cmp	r5, #0
 8005740:	4606      	mov	r6, r0
 8005742:	db01      	blt.n	8005748 <_malloc_r+0x1c>
 8005744:	42a9      	cmp	r1, r5
 8005746:	d904      	bls.n	8005752 <_malloc_r+0x26>
 8005748:	230c      	movs	r3, #12
 800574a:	6033      	str	r3, [r6, #0]
 800574c:	2000      	movs	r0, #0
 800574e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005752:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005828 <_malloc_r+0xfc>
 8005756:	f000 f869 	bl	800582c <__malloc_lock>
 800575a:	f8d8 3000 	ldr.w	r3, [r8]
 800575e:	461c      	mov	r4, r3
 8005760:	bb44      	cbnz	r4, 80057b4 <_malloc_r+0x88>
 8005762:	4629      	mov	r1, r5
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff ffbf 	bl	80056e8 <sbrk_aligned>
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	4604      	mov	r4, r0
 800576e:	d158      	bne.n	8005822 <_malloc_r+0xf6>
 8005770:	f8d8 4000 	ldr.w	r4, [r8]
 8005774:	4627      	mov	r7, r4
 8005776:	2f00      	cmp	r7, #0
 8005778:	d143      	bne.n	8005802 <_malloc_r+0xd6>
 800577a:	2c00      	cmp	r4, #0
 800577c:	d04b      	beq.n	8005816 <_malloc_r+0xea>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	4639      	mov	r1, r7
 8005782:	4630      	mov	r0, r6
 8005784:	eb04 0903 	add.w	r9, r4, r3
 8005788:	f000 f98c 	bl	8005aa4 <_sbrk_r>
 800578c:	4581      	cmp	r9, r0
 800578e:	d142      	bne.n	8005816 <_malloc_r+0xea>
 8005790:	6821      	ldr	r1, [r4, #0]
 8005792:	1a6d      	subs	r5, r5, r1
 8005794:	4629      	mov	r1, r5
 8005796:	4630      	mov	r0, r6
 8005798:	f7ff ffa6 	bl	80056e8 <sbrk_aligned>
 800579c:	3001      	adds	r0, #1
 800579e:	d03a      	beq.n	8005816 <_malloc_r+0xea>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	442b      	add	r3, r5
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	f8d8 3000 	ldr.w	r3, [r8]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	bb62      	cbnz	r2, 8005808 <_malloc_r+0xdc>
 80057ae:	f8c8 7000 	str.w	r7, [r8]
 80057b2:	e00f      	b.n	80057d4 <_malloc_r+0xa8>
 80057b4:	6822      	ldr	r2, [r4, #0]
 80057b6:	1b52      	subs	r2, r2, r5
 80057b8:	d420      	bmi.n	80057fc <_malloc_r+0xd0>
 80057ba:	2a0b      	cmp	r2, #11
 80057bc:	d917      	bls.n	80057ee <_malloc_r+0xc2>
 80057be:	1961      	adds	r1, r4, r5
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	6025      	str	r5, [r4, #0]
 80057c4:	bf18      	it	ne
 80057c6:	6059      	strne	r1, [r3, #4]
 80057c8:	6863      	ldr	r3, [r4, #4]
 80057ca:	bf08      	it	eq
 80057cc:	f8c8 1000 	streq.w	r1, [r8]
 80057d0:	5162      	str	r2, [r4, r5]
 80057d2:	604b      	str	r3, [r1, #4]
 80057d4:	4630      	mov	r0, r6
 80057d6:	f000 f82f 	bl	8005838 <__malloc_unlock>
 80057da:	f104 000b 	add.w	r0, r4, #11
 80057de:	1d23      	adds	r3, r4, #4
 80057e0:	f020 0007 	bic.w	r0, r0, #7
 80057e4:	1ac2      	subs	r2, r0, r3
 80057e6:	bf1c      	itt	ne
 80057e8:	1a1b      	subne	r3, r3, r0
 80057ea:	50a3      	strne	r3, [r4, r2]
 80057ec:	e7af      	b.n	800574e <_malloc_r+0x22>
 80057ee:	6862      	ldr	r2, [r4, #4]
 80057f0:	42a3      	cmp	r3, r4
 80057f2:	bf0c      	ite	eq
 80057f4:	f8c8 2000 	streq.w	r2, [r8]
 80057f8:	605a      	strne	r2, [r3, #4]
 80057fa:	e7eb      	b.n	80057d4 <_malloc_r+0xa8>
 80057fc:	4623      	mov	r3, r4
 80057fe:	6864      	ldr	r4, [r4, #4]
 8005800:	e7ae      	b.n	8005760 <_malloc_r+0x34>
 8005802:	463c      	mov	r4, r7
 8005804:	687f      	ldr	r7, [r7, #4]
 8005806:	e7b6      	b.n	8005776 <_malloc_r+0x4a>
 8005808:	461a      	mov	r2, r3
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	42a3      	cmp	r3, r4
 800580e:	d1fb      	bne.n	8005808 <_malloc_r+0xdc>
 8005810:	2300      	movs	r3, #0
 8005812:	6053      	str	r3, [r2, #4]
 8005814:	e7de      	b.n	80057d4 <_malloc_r+0xa8>
 8005816:	230c      	movs	r3, #12
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	4630      	mov	r0, r6
 800581c:	f000 f80c 	bl	8005838 <__malloc_unlock>
 8005820:	e794      	b.n	800574c <_malloc_r+0x20>
 8005822:	6005      	str	r5, [r0, #0]
 8005824:	e7d6      	b.n	80057d4 <_malloc_r+0xa8>
 8005826:	bf00      	nop
 8005828:	2000031c 	.word	0x2000031c

0800582c <__malloc_lock>:
 800582c:	4801      	ldr	r0, [pc, #4]	@ (8005834 <__malloc_lock+0x8>)
 800582e:	f7ff bf0e 	b.w	800564e <__retarget_lock_acquire_recursive>
 8005832:	bf00      	nop
 8005834:	20000314 	.word	0x20000314

08005838 <__malloc_unlock>:
 8005838:	4801      	ldr	r0, [pc, #4]	@ (8005840 <__malloc_unlock+0x8>)
 800583a:	f7ff bf09 	b.w	8005650 <__retarget_lock_release_recursive>
 800583e:	bf00      	nop
 8005840:	20000314 	.word	0x20000314

08005844 <__sflush_r>:
 8005844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584c:	0716      	lsls	r6, r2, #28
 800584e:	4605      	mov	r5, r0
 8005850:	460c      	mov	r4, r1
 8005852:	d454      	bmi.n	80058fe <__sflush_r+0xba>
 8005854:	684b      	ldr	r3, [r1, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	dc02      	bgt.n	8005860 <__sflush_r+0x1c>
 800585a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd48      	ble.n	80058f2 <__sflush_r+0xae>
 8005860:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005862:	2e00      	cmp	r6, #0
 8005864:	d045      	beq.n	80058f2 <__sflush_r+0xae>
 8005866:	2300      	movs	r3, #0
 8005868:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800586c:	682f      	ldr	r7, [r5, #0]
 800586e:	6a21      	ldr	r1, [r4, #32]
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	d030      	beq.n	80058d6 <__sflush_r+0x92>
 8005874:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	0759      	lsls	r1, r3, #29
 800587a:	d505      	bpl.n	8005888 <__sflush_r+0x44>
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005882:	b10b      	cbz	r3, 8005888 <__sflush_r+0x44>
 8005884:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	2300      	movs	r3, #0
 800588a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	4628      	mov	r0, r5
 8005890:	47b0      	blx	r6
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	d106      	bne.n	80058a6 <__sflush_r+0x62>
 8005898:	6829      	ldr	r1, [r5, #0]
 800589a:	291d      	cmp	r1, #29
 800589c:	d82b      	bhi.n	80058f6 <__sflush_r+0xb2>
 800589e:	4a2a      	ldr	r2, [pc, #168]	@ (8005948 <__sflush_r+0x104>)
 80058a0:	410a      	asrs	r2, r1
 80058a2:	07d6      	lsls	r6, r2, #31
 80058a4:	d427      	bmi.n	80058f6 <__sflush_r+0xb2>
 80058a6:	2200      	movs	r2, #0
 80058a8:	6062      	str	r2, [r4, #4]
 80058aa:	04d9      	lsls	r1, r3, #19
 80058ac:	6922      	ldr	r2, [r4, #16]
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	d504      	bpl.n	80058bc <__sflush_r+0x78>
 80058b2:	1c42      	adds	r2, r0, #1
 80058b4:	d101      	bne.n	80058ba <__sflush_r+0x76>
 80058b6:	682b      	ldr	r3, [r5, #0]
 80058b8:	b903      	cbnz	r3, 80058bc <__sflush_r+0x78>
 80058ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80058bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058be:	602f      	str	r7, [r5, #0]
 80058c0:	b1b9      	cbz	r1, 80058f2 <__sflush_r+0xae>
 80058c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058c6:	4299      	cmp	r1, r3
 80058c8:	d002      	beq.n	80058d0 <__sflush_r+0x8c>
 80058ca:	4628      	mov	r0, r5
 80058cc:	f7ff fec2 	bl	8005654 <_free_r>
 80058d0:	2300      	movs	r3, #0
 80058d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80058d4:	e00d      	b.n	80058f2 <__sflush_r+0xae>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4628      	mov	r0, r5
 80058da:	47b0      	blx	r6
 80058dc:	4602      	mov	r2, r0
 80058de:	1c50      	adds	r0, r2, #1
 80058e0:	d1c9      	bne.n	8005876 <__sflush_r+0x32>
 80058e2:	682b      	ldr	r3, [r5, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0c6      	beq.n	8005876 <__sflush_r+0x32>
 80058e8:	2b1d      	cmp	r3, #29
 80058ea:	d001      	beq.n	80058f0 <__sflush_r+0xac>
 80058ec:	2b16      	cmp	r3, #22
 80058ee:	d11e      	bne.n	800592e <__sflush_r+0xea>
 80058f0:	602f      	str	r7, [r5, #0]
 80058f2:	2000      	movs	r0, #0
 80058f4:	e022      	b.n	800593c <__sflush_r+0xf8>
 80058f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058fa:	b21b      	sxth	r3, r3
 80058fc:	e01b      	b.n	8005936 <__sflush_r+0xf2>
 80058fe:	690f      	ldr	r7, [r1, #16]
 8005900:	2f00      	cmp	r7, #0
 8005902:	d0f6      	beq.n	80058f2 <__sflush_r+0xae>
 8005904:	0793      	lsls	r3, r2, #30
 8005906:	680e      	ldr	r6, [r1, #0]
 8005908:	bf08      	it	eq
 800590a:	694b      	ldreq	r3, [r1, #20]
 800590c:	600f      	str	r7, [r1, #0]
 800590e:	bf18      	it	ne
 8005910:	2300      	movne	r3, #0
 8005912:	eba6 0807 	sub.w	r8, r6, r7
 8005916:	608b      	str	r3, [r1, #8]
 8005918:	f1b8 0f00 	cmp.w	r8, #0
 800591c:	dde9      	ble.n	80058f2 <__sflush_r+0xae>
 800591e:	6a21      	ldr	r1, [r4, #32]
 8005920:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005922:	4643      	mov	r3, r8
 8005924:	463a      	mov	r2, r7
 8005926:	4628      	mov	r0, r5
 8005928:	47b0      	blx	r6
 800592a:	2800      	cmp	r0, #0
 800592c:	dc08      	bgt.n	8005940 <__sflush_r+0xfc>
 800592e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005940:	4407      	add	r7, r0
 8005942:	eba8 0800 	sub.w	r8, r8, r0
 8005946:	e7e7      	b.n	8005918 <__sflush_r+0xd4>
 8005948:	dfbffffe 	.word	0xdfbffffe

0800594c <_fflush_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	690b      	ldr	r3, [r1, #16]
 8005950:	4605      	mov	r5, r0
 8005952:	460c      	mov	r4, r1
 8005954:	b913      	cbnz	r3, 800595c <_fflush_r+0x10>
 8005956:	2500      	movs	r5, #0
 8005958:	4628      	mov	r0, r5
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	b118      	cbz	r0, 8005966 <_fflush_r+0x1a>
 800595e:	6a03      	ldr	r3, [r0, #32]
 8005960:	b90b      	cbnz	r3, 8005966 <_fflush_r+0x1a>
 8005962:	f7ff fc8f 	bl	8005284 <__sinit>
 8005966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f3      	beq.n	8005956 <_fflush_r+0xa>
 800596e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005970:	07d0      	lsls	r0, r2, #31
 8005972:	d404      	bmi.n	800597e <_fflush_r+0x32>
 8005974:	0599      	lsls	r1, r3, #22
 8005976:	d402      	bmi.n	800597e <_fflush_r+0x32>
 8005978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800597a:	f7ff fe68 	bl	800564e <__retarget_lock_acquire_recursive>
 800597e:	4628      	mov	r0, r5
 8005980:	4621      	mov	r1, r4
 8005982:	f7ff ff5f 	bl	8005844 <__sflush_r>
 8005986:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005988:	07da      	lsls	r2, r3, #31
 800598a:	4605      	mov	r5, r0
 800598c:	d4e4      	bmi.n	8005958 <_fflush_r+0xc>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	059b      	lsls	r3, r3, #22
 8005992:	d4e1      	bmi.n	8005958 <_fflush_r+0xc>
 8005994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005996:	f7ff fe5b 	bl	8005650 <__retarget_lock_release_recursive>
 800599a:	e7dd      	b.n	8005958 <_fflush_r+0xc>

0800599c <__swhatbuf_r>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	460c      	mov	r4, r1
 80059a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a4:	2900      	cmp	r1, #0
 80059a6:	b096      	sub	sp, #88	@ 0x58
 80059a8:	4615      	mov	r5, r2
 80059aa:	461e      	mov	r6, r3
 80059ac:	da0d      	bge.n	80059ca <__swhatbuf_r+0x2e>
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059b4:	f04f 0100 	mov.w	r1, #0
 80059b8:	bf14      	ite	ne
 80059ba:	2340      	movne	r3, #64	@ 0x40
 80059bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80059c0:	2000      	movs	r0, #0
 80059c2:	6031      	str	r1, [r6, #0]
 80059c4:	602b      	str	r3, [r5, #0]
 80059c6:	b016      	add	sp, #88	@ 0x58
 80059c8:	bd70      	pop	{r4, r5, r6, pc}
 80059ca:	466a      	mov	r2, sp
 80059cc:	f000 f848 	bl	8005a60 <_fstat_r>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	dbec      	blt.n	80059ae <__swhatbuf_r+0x12>
 80059d4:	9901      	ldr	r1, [sp, #4]
 80059d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80059da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80059de:	4259      	negs	r1, r3
 80059e0:	4159      	adcs	r1, r3
 80059e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059e6:	e7eb      	b.n	80059c0 <__swhatbuf_r+0x24>

080059e8 <__smakebuf_r>:
 80059e8:	898b      	ldrh	r3, [r1, #12]
 80059ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ec:	079d      	lsls	r5, r3, #30
 80059ee:	4606      	mov	r6, r0
 80059f0:	460c      	mov	r4, r1
 80059f2:	d507      	bpl.n	8005a04 <__smakebuf_r+0x1c>
 80059f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	6123      	str	r3, [r4, #16]
 80059fc:	2301      	movs	r3, #1
 80059fe:	6163      	str	r3, [r4, #20]
 8005a00:	b003      	add	sp, #12
 8005a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a04:	ab01      	add	r3, sp, #4
 8005a06:	466a      	mov	r2, sp
 8005a08:	f7ff ffc8 	bl	800599c <__swhatbuf_r>
 8005a0c:	9f00      	ldr	r7, [sp, #0]
 8005a0e:	4605      	mov	r5, r0
 8005a10:	4639      	mov	r1, r7
 8005a12:	4630      	mov	r0, r6
 8005a14:	f7ff fe8a 	bl	800572c <_malloc_r>
 8005a18:	b948      	cbnz	r0, 8005a2e <__smakebuf_r+0x46>
 8005a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a1e:	059a      	lsls	r2, r3, #22
 8005a20:	d4ee      	bmi.n	8005a00 <__smakebuf_r+0x18>
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	f043 0302 	orr.w	r3, r3, #2
 8005a2a:	81a3      	strh	r3, [r4, #12]
 8005a2c:	e7e2      	b.n	80059f4 <__smakebuf_r+0xc>
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	6020      	str	r0, [r4, #0]
 8005a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a36:	81a3      	strh	r3, [r4, #12]
 8005a38:	9b01      	ldr	r3, [sp, #4]
 8005a3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a3e:	b15b      	cbz	r3, 8005a58 <__smakebuf_r+0x70>
 8005a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a44:	4630      	mov	r0, r6
 8005a46:	f000 f81d 	bl	8005a84 <_isatty_r>
 8005a4a:	b128      	cbz	r0, 8005a58 <__smakebuf_r+0x70>
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	f023 0303 	bic.w	r3, r3, #3
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	431d      	orrs	r5, r3
 8005a5c:	81a5      	strh	r5, [r4, #12]
 8005a5e:	e7cf      	b.n	8005a00 <__smakebuf_r+0x18>

08005a60 <_fstat_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4d07      	ldr	r5, [pc, #28]	@ (8005a80 <_fstat_r+0x20>)
 8005a64:	2300      	movs	r3, #0
 8005a66:	4604      	mov	r4, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	602b      	str	r3, [r5, #0]
 8005a6e:	f7fc f85e 	bl	8001b2e <_fstat>
 8005a72:	1c43      	adds	r3, r0, #1
 8005a74:	d102      	bne.n	8005a7c <_fstat_r+0x1c>
 8005a76:	682b      	ldr	r3, [r5, #0]
 8005a78:	b103      	cbz	r3, 8005a7c <_fstat_r+0x1c>
 8005a7a:	6023      	str	r3, [r4, #0]
 8005a7c:	bd38      	pop	{r3, r4, r5, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000310 	.word	0x20000310

08005a84 <_isatty_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4d06      	ldr	r5, [pc, #24]	@ (8005aa0 <_isatty_r+0x1c>)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	602b      	str	r3, [r5, #0]
 8005a90:	f7fc f85d 	bl	8001b4e <_isatty>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_isatty_r+0x1a>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_isatty_r+0x1a>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	20000310 	.word	0x20000310

08005aa4 <_sbrk_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d06      	ldr	r5, [pc, #24]	@ (8005ac0 <_sbrk_r+0x1c>)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	f7fc f866 	bl	8001b80 <_sbrk>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_sbrk_r+0x1a>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_sbrk_r+0x1a>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20000310 	.word	0x20000310

08005ac4 <_init>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr

08005ad0 <_fini>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	bf00      	nop
 8005ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad6:	bc08      	pop	{r3}
 8005ad8:	469e      	mov	lr, r3
 8005ada:	4770      	bx	lr
