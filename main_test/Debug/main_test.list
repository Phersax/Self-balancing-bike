
main_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a48  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005c10  08005c10  00006c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c80  08005c80  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c88  08005c88  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c88  08005c88  00006c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c8c  08005c8c  00006c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005c90  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000068  08005cf8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005cf8  00007328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f094  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000279b  00000000  00000000  0001612c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  000188c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6b  00000000  00000000  00019788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b2d  00000000  00000000  0001a2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a6a  00000000  00000000  0003de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d362c  00000000  00000000  0005188a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124eb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004468  00000000  00000000  00124efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00129364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000068 	.word	0x20000068
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005bf8 	.word	0x08005bf8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000006c 	.word	0x2000006c
 8000204:	08005bf8 	.word	0x08005bf8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <MX_GPIO_Init+0x9c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e20 <MX_GPIO_Init+0x9c>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <MX_GPIO_Init+0x9c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <MX_GPIO_Init+0x9c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a18      	ldr	r2, [pc, #96]	@ (8000e20 <MX_GPIO_Init+0x9c>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <MX_GPIO_Init+0x9c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <MX_GPIO_Init+0x9c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a11      	ldr	r2, [pc, #68]	@ (8000e20 <MX_GPIO_Init+0x9c>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <MX_GPIO_Init+0x9c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df4:	480b      	ldr	r0, [pc, #44]	@ (8000e24 <MX_GPIO_Init+0xa0>)
 8000df6:	f001 fb0b 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Direction_Pin;
 8000dfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e04:	2302      	movs	r3, #2
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Direction_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4619      	mov	r1, r3
 8000e12:	4804      	ldr	r0, [pc, #16]	@ (8000e24 <MX_GPIO_Init+0xa0>)
 8000e14:	f001 f968 	bl	80020e8 <HAL_GPIO_Init>

}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020400 	.word	0x40020400

08000e28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e2e:	4a13      	ldr	r2, [pc, #76]	@ (8000e7c <MX_I2C1_Init+0x54>)
 8000e30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e34:	4a12      	ldr	r2, [pc, #72]	@ (8000e80 <MX_I2C1_Init+0x58>)
 8000e36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e58:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e66:	f001 faed 	bl	8002444 <HAL_I2C_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e70:	f000 f942 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000084 	.word	0x20000084
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	000186a0 	.word	0x000186a0

08000e84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a19      	ldr	r2, [pc, #100]	@ (8000f08 <HAL_I2C_MspInit+0x84>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d12c      	bne.n	8000f00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <HAL_I2C_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <HAL_I2C_MspInit+0x88>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_I2C_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ec2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec8:	2312      	movs	r3, #18
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <HAL_I2C_MspInit+0x8c>)
 8000ee0:	f001 f902 	bl	80020e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <HAL_I2C_MspInit+0x88>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	4a07      	ldr	r2, [pc, #28]	@ (8000f0c <HAL_I2C_MspInit+0x88>)
 8000eee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ef2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <HAL_I2C_MspInit+0x88>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	@ 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020400 	.word	0x40020400

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f18:	f000 ff3e 	bl	8001d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1c:	f000 f83c 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f20:	f7ff ff30 	bl	8000d84 <MX_GPIO_Init>
  MX_TIM5_Init();
 8000f24:	f000 fe32 	bl	8001b8c <MX_TIM5_Init>
  MX_I2C1_Init();
 8000f28:	f7ff ff7e 	bl	8000e28 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f2c:	f000 fde0 	bl	8001af0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f30:	4811      	ldr	r0, [pc, #68]	@ (8000f78 <main+0x64>)
 8000f32:	f003 f9df 	bl	80042f4 <HAL_TIM_Base_Start_IT>
  pid_init(&pid, 1, 1, 0.8, -100, 100);
 8000f36:	ed9f 2a11 	vldr	s4, [pc, #68]	@ 8000f7c <main+0x68>
 8000f3a:	eddf 1a11 	vldr	s3, [pc, #68]	@ 8000f80 <main+0x6c>
 8000f3e:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8000f84 <main+0x70>
 8000f42:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000f46:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f4a:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <main+0x74>)
 8000f4c:	f000 fb14 	bl	8001578 <pid_init>
  pid_set_setpoint(&pid, 0);
 8000f50:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8000f8c <main+0x78>
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <main+0x74>)
 8000f56:	f000 fb3d 	bl	80015d4 <pid_set_setpoint>
  //mpu6050_init();
  status = mpu6050_init();
 8000f5a:	f000 f8d3 	bl	8001104 <mpu6050_init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <main+0x7c>)
 8000f64:	701a      	strb	r2, [r3, #0]
  nidec_h24_init(GPIO_PIN_10, GPIOB);
 8000f66:	490b      	ldr	r1, [pc, #44]	@ (8000f94 <main+0x80>)
 8000f68:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f6c:	f000 f9f2 	bl	8001354 <nidec_h24_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f000 ff83 	bl	8001e7c <HAL_Delay>
 8000f76:	e7fb      	b.n	8000f70 <main+0x5c>
 8000f78:	20000148 	.word	0x20000148
 8000f7c:	42c80000 	.word	0x42c80000
 8000f80:	c2c80000 	.word	0xc2c80000
 8000f84:	3f4ccccd 	.word	0x3f4ccccd
 8000f88:	200000d8 	.word	0x200000d8
 8000f8c:	00000000 	.word	0x00000000
 8000f90:	20000110 	.word	0x20000110
 8000f94:	40020400 	.word	0x40020400

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	@ 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2234      	movs	r2, #52	@ 0x34
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 fb72 	bl	8005690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	4a28      	ldr	r2, [pc, #160]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fcc:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4b23      	ldr	r3, [pc, #140]	@ (800106c <SystemClock_Config+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fe4:	4a21      	ldr	r2, [pc, #132]	@ (800106c <SystemClock_Config+0xd4>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <SystemClock_Config+0xd4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2310      	movs	r3, #16
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800100c:	2308      	movs	r3, #8
 800100e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001010:	2354      	movs	r3, #84	@ 0x54
 8001012:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4618      	mov	r0, r3
 8001026:	f002 fe0f 	bl	8003c48 <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001030:	f000 f862 	bl	80010f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001034:	230f      	movs	r3, #15
 8001036:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001038:	2302      	movs	r3, #2
 800103a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001044:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2102      	movs	r1, #2
 8001050:	4618      	mov	r0, r3
 8001052:	f002 fb49 	bl	80036e8 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800105c:	f000 f84c 	bl	80010f8 <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3750      	adds	r7, #80	@ 0x50
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d129      	bne.n	80010d6 <HAL_TIM_PeriodElapsedCallback+0x66>
		res_gx = mpu6050_gyrox();
 8001082:	f000 f89d 	bl	80011c0 <mpu6050_gyrox>
 8001086:	4603      	mov	r3, r0
 8001088:	4a16      	ldr	r2, [pc, #88]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800108a:	6013      	str	r3, [r2, #0]
		res_gy = mpu6050_gyroy();
 800108c:	f000 f8dc 	bl	8001248 <mpu6050_gyroy>
 8001090:	4603      	mov	r3, r0
 8001092:	4a15      	ldr	r2, [pc, #84]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001094:	6013      	str	r3, [r2, #0]
		res_gz = mpu6050_gyroz();
 8001096:	f000 f91b 	bl	80012d0 <mpu6050_gyroz>
 800109a:	4603      	mov	r3, r0
 800109c:	4a13      	ldr	r2, [pc, #76]	@ (80010ec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800109e:	6013      	str	r3, [r2, #0]
		pwm = pid_compute_control_action(&pid, res_gx.data, 0);
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	2100      	movs	r1, #0
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80010b6:	f000 faab 	bl	8001610 <pid_compute_control_action>
 80010ba:	eef0 7a40 	vmov.f32	s15, s0
 80010be:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010c0:	edc3 7a00 	vstr	s15, [r3]
		nidec_h24_Move(pwm);
 80010c4:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ce:	ee17 0a90 	vmov	r0, s15
 80010d2:	f000 fa2b 	bl	800152c <nidec_h24_Move>
	}
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40000400 	.word	0x40000400
 80010e4:	20000114 	.word	0x20000114
 80010e8:	20000118 	.word	0x20000118
 80010ec:	2000011c 	.word	0x2000011c
 80010f0:	200000d8 	.word	0x200000d8
 80010f4:	20000120 	.word	0x20000120

080010f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010fc:	b672      	cpsid	i
}
 80010fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <Error_Handler+0x8>

08001104 <mpu6050_init>:
    gy_bias = gy_sum / num_samples;
    gz_bias = gz_sum / num_samples;
}
*/

HAL_StatusTypeDef mpu6050_init(){
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDR, 1, 100);
 800110a:	2364      	movs	r3, #100	@ 0x64
 800110c:	2201      	movs	r2, #1
 800110e:	21d0      	movs	r1, #208	@ 0xd0
 8001110:	4827      	ldr	r0, [pc, #156]	@ (80011b0 <mpu6050_init+0xac>)
 8001112:	f001 fe07 	bl	8002d24 <HAL_I2C_IsDeviceReady>
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK) {
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d13f      	bne.n	80011a0 <mpu6050_init+0x9c>
			printf("mpu6050 is ready \n");
 8001120:	4824      	ldr	r0, [pc, #144]	@ (80011b4 <mpu6050_init+0xb0>)
 8001122:	f004 f9d5 	bl	80054d0 <puts>
			printf("mpu6050 configuration... \n");
 8001126:	4824      	ldr	r0, [pc, #144]	@ (80011b8 <mpu6050_init+0xb4>)
 8001128:	f004 f9d2 	bl	80054d0 <puts>

			uint8_t data;

			/* power management register 0X6B must be all 0s to wake the sensor up */
			data = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 100);
 8001130:	2364      	movs	r3, #100	@ 0x64
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	1dbb      	adds	r3, r7, #6
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	226b      	movs	r2, #107	@ 0x6b
 8001140:	21d0      	movs	r1, #208	@ 0xd0
 8001142:	481b      	ldr	r0, [pc, #108]	@ (80011b0 <mpu6050_init+0xac>)
 8001144:	f001 fac2 	bl	80026cc <HAL_I2C_Mem_Write>

			/* Set DATA RATE of 1KHz by writing SMPLRT_DIV register */
			data = 0x07;
 8001148:	2307      	movs	r3, #7
 800114a:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 100);
 800114c:	2364      	movs	r3, #100	@ 0x64
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	1dbb      	adds	r3, r7, #6
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	2219      	movs	r2, #25
 800115c:	21d0      	movs	r1, #208	@ 0xd0
 800115e:	4814      	ldr	r0, [pc, #80]	@ (80011b0 <mpu6050_init+0xac>)
 8001160:	f001 fab4 	bl	80026cc <HAL_I2C_Mem_Write>

			/*  Set accelerometer configuration in ACCEL_CONFIG Register */
			/* XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g */
			data = FS_ACC_2G;
 8001164:	2300      	movs	r3, #0
 8001166:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 100);
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2301      	movs	r3, #1
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	1dbb      	adds	r3, r7, #6
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	221c      	movs	r2, #28
 8001178:	21d0      	movs	r1, #208	@ 0xd0
 800117a:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <mpu6050_init+0xac>)
 800117c:	f001 faa6 	bl	80026cc <HAL_I2C_Mem_Write>

			/* Set Gyroscope configuration in GYRO_CONFIG Register */
			/* XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 deg/s */
			data = FS_GYRO_250;
 8001180:	2300      	movs	r3, #0
 8001182:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 100);
 8001184:	2364      	movs	r3, #100	@ 0x64
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	2301      	movs	r3, #1
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	1dbb      	adds	r3, r7, #6
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	221b      	movs	r2, #27
 8001194:	21d0      	movs	r1, #208	@ 0xd0
 8001196:	4806      	ldr	r0, [pc, #24]	@ (80011b0 <mpu6050_init+0xac>)
 8001198:	f001 fa98 	bl	80026cc <HAL_I2C_Mem_Write>
			return HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	e003      	b.n	80011a8 <mpu6050_init+0xa4>
		} else {
			printf("mpu6050 error, check connection cables \n");
 80011a0:	4806      	ldr	r0, [pc, #24]	@ (80011bc <mpu6050_init+0xb8>)
 80011a2:	f004 f995 	bl	80054d0 <puts>
			return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
		}
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000084 	.word	0x20000084
 80011b4:	08005c10 	.word	0x08005c10
 80011b8:	08005c24 	.word	0x08005c24
 80011bc:	08005c40 	.word	0x08005c40

080011c0 <mpu6050_gyrox>:
		res.data = imu_data / ACC_SCALE;
		return res;
}

/* Accelerometer reading MPU6050 */
result mpu6050_gyrox(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af04      	add	r7, sp, #16
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 80011c6:	23c8      	movs	r3, #200	@ 0xc8
 80011c8:	9302      	str	r3, [sp, #8]
 80011ca:	230e      	movs	r3, #14
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	223b      	movs	r2, #59	@ 0x3b
 80011d6:	21d0      	movs	r1, #208	@ 0xd0
 80011d8:	4819      	ldr	r0, [pc, #100]	@ (8001240 <mpu6050_gyrox+0x80>)
 80011da:	f001 fb71 	bl	80028c0 <HAL_I2C_Mem_Read>
 80011de:	4603      	mov	r3, r0
 80011e0:	77fb      	strb	r3, [r7, #31]
	short imu_data = buffer[8] << 8  | buffer[9];
 80011e2:	7b3b      	ldrb	r3, [r7, #12]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	83bb      	strh	r3, [r7, #28]
	res.status = status;
 80011f0:	7ffb      	ldrb	r3, [r7, #31]
 80011f2:	75bb      	strb	r3, [r7, #22]
	res.data = imu_data / GYRO_SCALE;
 80011f4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f957 	bl	80004ac <__aeabi_i2d>
 80011fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8001238 <mpu6050_gyrox+0x78>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fae6 	bl	80007d4 <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fbc8 	bl	80009a4 <__aeabi_d2iz>
 8001214:	4603      	mov	r3, r0
 8001216:	b21b      	sxth	r3, r3
 8001218:	82bb      	strh	r3, [r7, #20]
	return res;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	2300      	movs	r3, #0
 8001220:	8b3a      	ldrh	r2, [r7, #24]
 8001222:	f362 030f 	bfi	r3, r2, #0, #16
 8001226:	8b7a      	ldrh	r2, [r7, #26]
 8001228:	f362 431f 	bfi	r3, r2, #16, #16
}
 800122c:	4618      	mov	r0, r3
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	f3af 8000 	nop.w
 8001238:	00000000 	.word	0x00000000
 800123c:	40606000 	.word	0x40606000
 8001240:	20000084 	.word	0x20000084
 8001244:	00000000 	.word	0x00000000

08001248 <mpu6050_gyroy>:

result mpu6050_gyroy(){
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	@ 0x30
 800124c:	af04      	add	r7, sp, #16
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 800124e:	23c8      	movs	r3, #200	@ 0xc8
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	230e      	movs	r3, #14
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	223b      	movs	r2, #59	@ 0x3b
 800125e:	21d0      	movs	r1, #208	@ 0xd0
 8001260:	4819      	ldr	r0, [pc, #100]	@ (80012c8 <mpu6050_gyroy+0x80>)
 8001262:	f001 fb2d 	bl	80028c0 <HAL_I2C_Mem_Read>
 8001266:	4603      	mov	r3, r0
 8001268:	77fb      	strb	r3, [r7, #31]
	short imu_data = buffer[10] << 8  | buffer[11];
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	83bb      	strh	r3, [r7, #28]
	res.status = status;
 8001278:	7ffb      	ldrb	r3, [r7, #31]
 800127a:	75bb      	strb	r3, [r7, #22]
    res.data = imu_data / GYRO_SCALE;
 800127c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f913 	bl	80004ac <__aeabi_i2d>
 8001286:	a30e      	add	r3, pc, #56	@ (adr r3, 80012c0 <mpu6050_gyroy+0x78>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff faa2 	bl	80007d4 <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fb84 	bl	80009a4 <__aeabi_d2iz>
 800129c:	4603      	mov	r3, r0
 800129e:	b21b      	sxth	r3, r3
 80012a0:	82bb      	strh	r3, [r7, #20]
	return res;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	2300      	movs	r3, #0
 80012a8:	8b3a      	ldrh	r2, [r7, #24]
 80012aa:	f362 030f 	bfi	r3, r2, #0, #16
 80012ae:	8b7a      	ldrh	r2, [r7, #26]
 80012b0:	f362 431f 	bfi	r3, r2, #16, #16
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	f3af 8000 	nop.w
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40606000 	.word	0x40606000
 80012c8:	20000084 	.word	0x20000084
 80012cc:	00000000 	.word	0x00000000

080012d0 <mpu6050_gyroz>:

result mpu6050_gyroz(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	@ 0x30
 80012d4:	af04      	add	r7, sp, #16
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 80012d6:	23c8      	movs	r3, #200	@ 0xc8
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	230e      	movs	r3, #14
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	223b      	movs	r2, #59	@ 0x3b
 80012e6:	21d0      	movs	r1, #208	@ 0xd0
 80012e8:	4819      	ldr	r0, [pc, #100]	@ (8001350 <mpu6050_gyroz+0x80>)
 80012ea:	f001 fae9 	bl	80028c0 <HAL_I2C_Mem_Read>
 80012ee:	4603      	mov	r3, r0
 80012f0:	77fb      	strb	r3, [r7, #31]
	short imu_data = buffer[12] << 8  | buffer[13];
 80012f2:	7c3b      	ldrb	r3, [r7, #16]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	7c7b      	ldrb	r3, [r7, #17]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	83bb      	strh	r3, [r7, #28]
	res.status = status;
 8001300:	7ffb      	ldrb	r3, [r7, #31]
 8001302:	75bb      	strb	r3, [r7, #22]
	res.data = imu_data / GYRO_SCALE;
 8001304:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f8cf 	bl	80004ac <__aeabi_i2d>
 800130e:	a30e      	add	r3, pc, #56	@ (adr r3, 8001348 <mpu6050_gyroz+0x78>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	f7ff fa5e 	bl	80007d4 <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fb40 	bl	80009a4 <__aeabi_d2iz>
 8001324:	4603      	mov	r3, r0
 8001326:	b21b      	sxth	r3, r3
 8001328:	82bb      	strh	r3, [r7, #20]
	return res;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	2300      	movs	r3, #0
 8001330:	8b3a      	ldrh	r2, [r7, #24]
 8001332:	f362 030f 	bfi	r3, r2, #0, #16
 8001336:	8b7a      	ldrh	r2, [r7, #26]
 8001338:	f362 431f 	bfi	r3, r2, #16, #16
}
 800133c:	4618      	mov	r0, r3
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	f3af 8000 	nop.w
 8001348:	00000000 	.word	0x00000000
 800134c:	40606000 	.word	0x40606000
 8001350:	20000084 	.word	0x20000084

08001354 <nidec_h24_init>:
static  uint16_t direction_pin;
static  GPIO_TypeDef *direction_port;

/*Init the motor*/

void nidec_h24_init(uint16_t DIRECTION_Pin, GPIO_TypeDef *DIRECTION_GPIO_Port){
 8001354:	b580      	push	{r7, lr}
 8001356:	b090      	sub	sp, #64	@ 0x40
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	80fb      	strh	r3, [r7, #6]

    GPIO_InitTypeDef GPIO_InitStruct = {0};  // Declare the GPIO init struct
 8001360:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]

    if (DIRECTION_GPIO_Port == GPIOA) {
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	4a60      	ldr	r2, [pc, #384]	@ (80014f4 <nidec_h24_init+0x1a0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d10e      	bne.n	8001396 <nidec_h24_init+0x42>
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800137c:	4b5e      	ldr	r3, [pc, #376]	@ (80014f8 <nidec_h24_init+0x1a4>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	4a5d      	ldr	r2, [pc, #372]	@ (80014f8 <nidec_h24_init+0x1a4>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6313      	str	r3, [r2, #48]	@ 0x30
 8001388:	4b5b      	ldr	r3, [pc, #364]	@ (80014f8 <nidec_h24_init+0x1a4>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001394:	e083      	b.n	800149e <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOB) {
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	4a58      	ldr	r2, [pc, #352]	@ (80014fc <nidec_h24_init+0x1a8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10e      	bne.n	80013bc <nidec_h24_init+0x68>
        __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a2:	4b55      	ldr	r3, [pc, #340]	@ (80014f8 <nidec_h24_init+0x1a4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a54      	ldr	r2, [pc, #336]	@ (80014f8 <nidec_h24_init+0x1a4>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b52      	ldr	r3, [pc, #328]	@ (80014f8 <nidec_h24_init+0x1a4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	e070      	b.n	800149e <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOC) {
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4a50      	ldr	r2, [pc, #320]	@ (8001500 <nidec_h24_init+0x1ac>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d10e      	bne.n	80013e2 <nidec_h24_init+0x8e>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
 80013c8:	4b4b      	ldr	r3, [pc, #300]	@ (80014f8 <nidec_h24_init+0x1a4>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013cc:	4a4a      	ldr	r2, [pc, #296]	@ (80014f8 <nidec_h24_init+0x1a4>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d4:	4b48      	ldr	r3, [pc, #288]	@ (80014f8 <nidec_h24_init+0x1a4>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	623b      	str	r3, [r7, #32]
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	e05d      	b.n	800149e <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOD) {
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	4a47      	ldr	r2, [pc, #284]	@ (8001504 <nidec_h24_init+0x1b0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10e      	bne.n	8001408 <nidec_h24_init+0xb4>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	4b42      	ldr	r3, [pc, #264]	@ (80014f8 <nidec_h24_init+0x1a4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a41      	ldr	r2, [pc, #260]	@ (80014f8 <nidec_h24_init+0x1a4>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b3f      	ldr	r3, [pc, #252]	@ (80014f8 <nidec_h24_init+0x1a4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	e04a      	b.n	800149e <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOE) {
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	4a3f      	ldr	r2, [pc, #252]	@ (8001508 <nidec_h24_init+0x1b4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d10e      	bne.n	800142e <nidec_h24_init+0xda>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <nidec_h24_init+0x1a4>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001418:	4a37      	ldr	r2, [pc, #220]	@ (80014f8 <nidec_h24_init+0x1a4>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001420:	4b35      	ldr	r3, [pc, #212]	@ (80014f8 <nidec_h24_init+0x1a4>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	e037      	b.n	800149e <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOF) {
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	4a36      	ldr	r2, [pc, #216]	@ (800150c <nidec_h24_init+0x1b8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d10e      	bne.n	8001454 <nidec_h24_init+0x100>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <nidec_h24_init+0x1a4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a2e      	ldr	r2, [pc, #184]	@ (80014f8 <nidec_h24_init+0x1a4>)
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <nidec_h24_init+0x1a4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0320 	and.w	r3, r3, #32
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	e024      	b.n	800149e <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOG) {
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4a2e      	ldr	r2, [pc, #184]	@ (8001510 <nidec_h24_init+0x1bc>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d10e      	bne.n	800147a <nidec_h24_init+0x126>
        __HAL_RCC_GPIOG_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <nidec_h24_init+0x1a4>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	4a24      	ldr	r2, [pc, #144]	@ (80014f8 <nidec_h24_init+0x1a4>)
 8001466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800146a:	6313      	str	r3, [r2, #48]	@ 0x30
 800146c:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <nidec_h24_init+0x1a4>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	e011      	b.n	800149e <nidec_h24_init+0x14a>
    } else if (DIRECTION_GPIO_Port == GPIOH) {
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	4a25      	ldr	r2, [pc, #148]	@ (8001514 <nidec_h24_init+0x1c0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d10d      	bne.n	800149e <nidec_h24_init+0x14a>
        __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <nidec_h24_init+0x1a4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a1b      	ldr	r2, [pc, #108]	@ (80014f8 <nidec_h24_init+0x1a4>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <nidec_h24_init+0x1a4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    }

    direction_pin = DIRECTION_Pin;
 800149e:	4a1e      	ldr	r2, [pc, #120]	@ (8001518 <nidec_h24_init+0x1c4>)
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	8013      	strh	r3, [r2, #0]
    direction_port = DIRECTION_GPIO_Port;
 80014a4:	4a1d      	ldr	r2, [pc, #116]	@ (800151c <nidec_h24_init+0x1c8>)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6013      	str	r3, [r2, #0]

	/*Configure GPIO pin : Direction_Pin */
	GPIO_InitStruct.Pin = DIRECTION_Pin;
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b2:	2302      	movs	r3, #2
 80014b4:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(DIRECTION_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014be:	4619      	mov	r1, r3
 80014c0:	6838      	ldr	r0, [r7, #0]
 80014c2:	f000 fe11 	bl	80020e8 <HAL_GPIO_Init>

	// Set the pin to low initially
	HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, GPIO_PIN_RESET);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	6838      	ldr	r0, [r7, #0]
 80014ce:	f000 ff9f 	bl	8002410 <HAL_GPIO_WritePin>

	// Start PWM on the specified timer and channel
	TIM5->CCR1 = 0;
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <nidec_h24_init+0x1cc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_Base_Start(&htim5);
 80014d8:	4812      	ldr	r0, [pc, #72]	@ (8001524 <nidec_h24_init+0x1d0>)
 80014da:	f002 fea3 	bl	8004224 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim5, Channel);
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <nidec_h24_init+0x1d4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	480f      	ldr	r0, [pc, #60]	@ (8001524 <nidec_h24_init+0x1d0>)
 80014e6:	f002 ffc5 	bl	8004474 <HAL_TIM_PWM_Start>
}
 80014ea:	bf00      	nop
 80014ec:	3740      	adds	r7, #64	@ 0x40
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020800 	.word	0x40020800
 8001504:	40020c00 	.word	0x40020c00
 8001508:	40021000 	.word	0x40021000
 800150c:	40021400 	.word	0x40021400
 8001510:	40021800 	.word	0x40021800
 8001514:	40021c00 	.word	0x40021c00
 8001518:	20000128 	.word	0x20000128
 800151c:	2000012c 	.word	0x2000012c
 8001520:	40000c00 	.word	0x40000c00
 8001524:	20000190 	.word	0x20000190
 8001528:	20000124 	.word	0x20000124

0800152c <nidec_h24_Move>:

void nidec_h24_Move(int32_t dutyCycle){
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

    // Calculate the compare value
    //uint32_t ccr = (uint16_t)(dutyCycle * (float)(htim5.Instance->ARR + 1))/100;

    // Set the PWM duty cycle
    TIM5->CCR1 = abs(dutyCycle);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800153a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <nidec_h24_Move+0x40>)
 8001540:	635a      	str	r2, [r3, #52]	@ 0x34

    if (dutyCycle > 0) {
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	dd02      	ble.n	800154e <nidec_h24_Move+0x22>
        dir = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e001      	b.n	8001552 <nidec_h24_Move+0x26>
    }else{
        dir = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
    }

	// Set direction motor
	HAL_GPIO_WritePin(direction_port, direction_pin, dir);
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <nidec_h24_Move+0x44>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a07      	ldr	r2, [pc, #28]	@ (8001574 <nidec_h24_Move+0x48>)
 8001558:	8811      	ldrh	r1, [r2, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f000 ff56 	bl	8002410 <HAL_GPIO_WritePin>

    // Generate an update event to reload the value immediately
    //htim5.Instance->EGR = TIM_EGR_UG;
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40000c00 	.word	0x40000c00
 8001570:	2000012c 	.word	0x2000012c
 8001574:	20000128 	.word	0x20000128

08001578 <pid_init>:
static float pid_get_current_sampling_time(PID_t *p);
void pid_update_ts(PID_t *p);

float p_action, i_action, d_action, error_debug;

void pid_init(PID_t *p, float k_p, float k_i, float k_d, float min_out, float max_out){
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6178      	str	r0, [r7, #20]
 8001580:	ed87 0a04 	vstr	s0, [r7, #16]
 8001584:	edc7 0a03 	vstr	s1, [r7, #12]
 8001588:	ed87 1a02 	vstr	s2, [r7, #8]
 800158c:	edc7 1a01 	vstr	s3, [r7, #4]
 8001590:	ed87 2a00 	vstr	s4, [r7]
    p->k_p = k_p;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	611a      	str	r2, [r3, #16]
    p->k_i = k_i;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	615a      	str	r2, [r3, #20]
    p->k_d = k_d;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	619a      	str	r2, [r3, #24]
    p->integral_error = 0;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
    p->last_error = 0;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
    p->last_updated_ts = 0;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
    p->min_output = min_out;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	621a      	str	r2, [r3, #32]
    p->max_output = max_out;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	61da      	str	r2, [r3, #28]
}
 80015c8:	bf00      	nop
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <pid_set_setpoint>:

void pid_set_setpoint(PID_t *p, float set_point){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	ed87 0a00 	vstr	s0, [r7]
    p->set_point = set_point;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	605a      	str	r2, [r3, #4]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <pid_get_setpoint>:

float pid_get_setpoint(PID_t *p){
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
    return p->set_point;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	ee07 3a90 	vmov	s15, r3
}
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <pid_compute_control_action>:

float pid_compute_control_action(PID_t *p, float est_output, float *est_out_derivative){
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	@ 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	ed87 0a02 	vstr	s0, [r7, #8]
 800161c:	6079      	str	r1, [r7, #4]
    float delta_T;
    float error, integral_error;
    float u;
    static float last_u;
    float derivative;
    float alpha = 0.9;
 800161e:	4b87      	ldr	r3, [pc, #540]	@ (800183c <pid_compute_control_action+0x22c>)
 8001620:	623b      	str	r3, [r7, #32]
    float k_p = p->k_p;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	61fb      	str	r3, [r7, #28]

    error = pid_get_setpoint(p) - est_output;
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff ffe2 	bl	80015f2 <pid_get_setpoint>
 800162e:	eeb0 7a40 	vmov.f32	s14, s0
 8001632:	edd7 7a02 	vldr	s15, [r7, #8]
 8001636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163a:	edc7 7a06 	vstr	s15, [r7, #24]

    delta_T = pid_get_current_sampling_time(p);
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f916 	bl	8001870 <pid_get_current_sampling_time>
 8001644:	ed87 0a05 	vstr	s0, [r7, #20]

    if (p->k_d != 0.0){
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	edd3 7a06 	vldr	s15, [r3, #24]
 800164e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	d04a      	beq.n	80016ee <pid_compute_control_action+0xde>
        if (est_out_derivative == NULL){
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d127      	bne.n	80016ae <pid_compute_control_action+0x9e>
            derivative = (1 - alpha) * (error - p->last_error)/delta_T + alpha * p->d_term/(p->k_d * k_p);
 800165e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001662:	edd7 7a08 	vldr	s15, [r7, #32]
 8001666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001670:	edd7 6a06 	vldr	s13, [r7, #24]
 8001674:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001678:	ee67 6a27 	vmul.f32	s13, s14, s15
 800167c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800168a:	edd7 7a08 	vldr	s15, [r7, #32]
 800168e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	edd3 6a06 	vldr	s13, [r3, #24]
 8001698:	edd7 7a07 	vldr	s15, [r7, #28]
 800169c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016a0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80016ac:	e022      	b.n	80016f4 <pid_compute_control_action+0xe4>
        } else {
            derivative = (1 - alpha) * (*est_out_derivative) + alpha * p->d_term/(p->k_d * k_p);
 80016ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80016b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80016ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80016ce:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	edd3 6a06 	vldr	s13, [r3, #24]
 80016d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80016dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016e0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80016ec:	e002      	b.n	80016f4 <pid_compute_control_action+0xe4>
        }
    } else {
        derivative = 0;
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (error > p->pos_deadzone || error < p->neg_deadzone){
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80016fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	dc09      	bgt.n	800171c <pid_compute_control_action+0x10c>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800170e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	d50d      	bpl.n	8001738 <pid_compute_control_action+0x128>
        integral_error = p->integral_error + delta_T * error;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001722:	edd7 6a05 	vldr	s13, [r7, #20]
 8001726:	edd7 7a06 	vldr	s15, [r7, #24]
 800172a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001732:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8001736:	e002      	b.n	800173e <pid_compute_control_action+0x12e>
    } else {
        integral_error = p->integral_error;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    u = k_p * (error + p->k_i * integral_error + p->k_d * derivative);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	ed93 7a05 	vldr	s14, [r3, #20]
 8001744:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	edd3 6a06 	vldr	s13, [r3, #24]
 800175a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800175e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	ed97 7a07 	vldr	s14, [r7, #28]
 800176a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    p->p_term = k_p * error;
 8001772:	ed97 7a07 	vldr	s14, [r7, #28]
 8001776:	edd7 7a06 	vldr	s15, [r7, #24]
 800177a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    p->i_term = k_p * p->k_i * integral_error;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	ed93 7a05 	vldr	s14, [r3, #20]
 800178a:	edd7 7a07 	vldr	s15, [r7, #28]
 800178e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001792:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    p->d_term = k_p * p->k_d * derivative;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	ed93 7a06 	vldr	s14, [r3, #24]
 80017a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80017aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    p_action = p->p_term;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001840 <pid_compute_control_action+0x230>)
 80017c2:	6013      	str	r3, [r2, #0]
    i_action = p->i_term;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001844 <pid_compute_control_action+0x234>)
 80017ca:	6013      	str	r3, [r2, #0]
    d_action = p->d_term;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001848 <pid_compute_control_action+0x238>)
 80017d2:	6013      	str	r3, [r2, #0]

    // reset wind-up
    if (u < p->min_output) {
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80017da:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80017de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	d503      	bpl.n	80017f0 <pid_compute_control_action+0x1e0>
	u = p->min_output;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017ee:	e010      	b.n	8001812 <pid_compute_control_action+0x202>
    } else if (u > p->max_output) {
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80017f6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80017fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	dd03      	ble.n	800180c <pid_compute_control_action+0x1fc>
	u = p->max_output;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800180a:	e002      	b.n	8001812 <pid_compute_control_action+0x202>
    } else {
	p->integral_error = integral_error;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001810:	609a      	str	r2, [r3, #8]
    }

    last_u = u;
 8001812:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <pid_compute_control_action+0x23c>)
 8001814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001816:	6013      	str	r3, [r2, #0]

    p->last_error = error;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	60da      	str	r2, [r3, #12]
    error_debug = error;
 800181e:	4a0c      	ldr	r2, [pc, #48]	@ (8001850 <pid_compute_control_action+0x240>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6013      	str	r3, [r2, #0]
    pid_update_ts(p);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 f815 	bl	8001854 <pid_update_ts>
    return u;
 800182a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182c:	ee07 3a90 	vmov	s15, r3
}
 8001830:	eeb0 0a67 	vmov.f32	s0, s15
 8001834:	3730      	adds	r7, #48	@ 0x30
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	3f666666 	.word	0x3f666666
 8001840:	20000130 	.word	0x20000130
 8001844:	20000134 	.word	0x20000134
 8001848:	20000138 	.word	0x20000138
 800184c:	20000140 	.word	0x20000140
 8001850:	2000013c 	.word	0x2000013c

08001854 <pid_update_ts>:

float pid_get_error(PID_t *p){
	return p->last_error;
}

void pid_update_ts(PID_t *p){
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	p->last_updated_ts = HAL_GetTick();
 800185c:	f000 fb02 	bl	8001e64 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	601a      	str	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <pid_get_current_sampling_time>:

static float pid_get_current_sampling_time(PID_t *p){
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	return (float) (HAL_GetTick() - p->last_updated_ts)/1000.0;
 8001878:	f000 faf4 	bl	8001e64 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800188c:	ee17 0a90 	vmov	r0, s15
 8001890:	f7fe fe1e 	bl	80004d0 <__aeabi_f2d>
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <pid_get_current_sampling_time+0x4c>)
 800189a:	f7fe ff9b 	bl	80007d4 <__aeabi_ddiv>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f8a5 	bl	80009f4 <__aeabi_d2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	ee07 3a90 	vmov	s15, r3
}
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	408f4000 	.word	0x408f4000

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	4a0f      	ldr	r2, [pc, #60]	@ (800190c <HAL_MspInit+0x4c>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d6:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	4a08      	ldr	r2, [pc, #32]	@ (800190c <HAL_MspInit+0x4c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <NMI_Handler+0x4>

08001918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <MemManage_Handler+0x4>

08001928 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <UsageFault_Handler+0x4>

08001938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001966:	f000 fa69 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <TIM3_IRQHandler+0x10>)
 8001976:	f002 fe45 	bl	8004604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000148 	.word	0x20000148

08001984 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00a      	b.n	80019ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001996:	f3af 8000 	nop.w
 800199a:	4601      	mov	r1, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf0      	blt.n	8001996 <_read+0x12>
  }

  return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e009      	b.n	80019e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf1      	blt.n	80019d0 <_write+0x12>
  }
  return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_close>:

int _close(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_isatty>:

int _isatty(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f003 fe4c 	bl	800572c <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20020000 	.word	0x20020000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	20000144 	.word	0x20000144
 8001ac8:	20000328 	.word	0x20000328

08001acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	463b      	mov	r3, r7
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <MX_TIM3_Init+0x94>)
 8001b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b88 <MX_TIM3_Init+0x98>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <MX_TIM3_Init+0x94>)
 8001b14:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001b18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <MX_TIM3_Init+0x94>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8001b20:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <MX_TIM3_Init+0x94>)
 8001b22:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001b26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b28:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <MX_TIM3_Init+0x94>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <MX_TIM3_Init+0x94>)
 8001b30:	2280      	movs	r2, #128	@ 0x80
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b34:	4813      	ldr	r0, [pc, #76]	@ (8001b84 <MX_TIM3_Init+0x94>)
 8001b36:	f002 fb25 	bl	8004184 <HAL_TIM_Base_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b40:	f7ff fada 	bl	80010f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <MX_TIM3_Init+0x94>)
 8001b52:	f002 ff09 	bl	8004968 <HAL_TIM_ConfigClockSource>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b5c:	f7ff facc 	bl	80010f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <MX_TIM3_Init+0x94>)
 8001b6e:	f003 fb07 	bl	8005180 <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b78:	f7ff fabe 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000148 	.word	0x20000148
 8001b88:	40000400 	.word	0x40000400

08001b8c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	@ 0x28
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b92:	f107 0320 	add.w	r3, r7, #32
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	615a      	str	r2, [r3, #20]
 8001bac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bae:	4b21      	ldr	r3, [pc, #132]	@ (8001c34 <MX_TIM5_Init+0xa8>)
 8001bb0:	4a21      	ldr	r2, [pc, #132]	@ (8001c38 <MX_TIM5_Init+0xac>)
 8001bb2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 43;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c34 <MX_TIM5_Init+0xa8>)
 8001bb6:	222b      	movs	r2, #43	@ 0x2b
 8001bb8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b1e      	ldr	r3, [pc, #120]	@ (8001c34 <MX_TIM5_Init+0xa8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <MX_TIM5_Init+0xa8>)
 8001bc2:	2263      	movs	r2, #99	@ 0x63
 8001bc4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <MX_TIM5_Init+0xa8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <MX_TIM5_Init+0xa8>)
 8001bce:	2280      	movs	r2, #128	@ 0x80
 8001bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bd2:	4818      	ldr	r0, [pc, #96]	@ (8001c34 <MX_TIM5_Init+0xa8>)
 8001bd4:	f002 fbfe 	bl	80043d4 <HAL_TIM_PWM_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001bde:	f7ff fa8b 	bl	80010f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bea:	f107 0320 	add.w	r3, r7, #32
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4810      	ldr	r0, [pc, #64]	@ (8001c34 <MX_TIM5_Init+0xa8>)
 8001bf2:	f003 fac5 	bl	8005180 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001bfc:	f7ff fa7c 	bl	80010f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c00:	2360      	movs	r3, #96	@ 0x60
 8001c02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2200      	movs	r2, #0
 8001c14:	4619      	mov	r1, r3
 8001c16:	4807      	ldr	r0, [pc, #28]	@ (8001c34 <MX_TIM5_Init+0xa8>)
 8001c18:	f002 fde4 	bl	80047e4 <HAL_TIM_PWM_ConfigChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001c22:	f7ff fa69 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c26:	4803      	ldr	r0, [pc, #12]	@ (8001c34 <MX_TIM5_Init+0xa8>)
 8001c28:	f000 f852 	bl	8001cd0 <HAL_TIM_MspPostInit>

}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	@ 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000190 	.word	0x20000190
 8001c38:	40000c00 	.word	0x40000c00

08001c3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0e      	ldr	r2, [pc, #56]	@ (8001c84 <HAL_TIM_Base_MspInit+0x48>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d115      	bne.n	8001c7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <HAL_TIM_Base_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	4a0c      	ldr	r2, [pc, #48]	@ (8001c88 <HAL_TIM_Base_MspInit+0x4c>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <HAL_TIM_Base_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	201d      	movs	r0, #29
 8001c70:	f000 fa03 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c74:	201d      	movs	r0, #29
 8001c76:	f000 fa1c 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40000400 	.word	0x40000400
 8001c88:	40023800 	.word	0x40023800

08001c8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10d      	bne.n	8001cba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_TIM_PWM_MspInit+0x40>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <HAL_TIM_PWM_MspInit+0x40>)
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <HAL_TIM_PWM_MspInit+0x40>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40000c00 	.word	0x40000c00
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <HAL_TIM_MspPostInit+0x68>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d11d      	bne.n	8001d2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a10      	ldr	r2, [pc, #64]	@ (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <HAL_TIM_MspPostInit+0x70>)
 8001d2a:	f000 f9dd 	bl	80020e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40000c00 	.word	0x40000c00
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020000 	.word	0x40020000

08001d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d48:	f7ff fec0 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d4c:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d4e:	490d      	ldr	r1, [pc, #52]	@ (8001d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d54:	e002      	b.n	8001d5c <LoopCopyDataInit>

08001d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5a:	3304      	adds	r3, #4

08001d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d60:	d3f9      	bcc.n	8001d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d64:	4c0a      	ldr	r4, [pc, #40]	@ (8001d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d68:	e001      	b.n	8001d6e <LoopFillZerobss>

08001d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d6c:	3204      	adds	r2, #4

08001d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d70:	d3fb      	bcc.n	8001d6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d72:	f003 fce1 	bl	8005738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d76:	f7ff f8cd 	bl	8000f14 <main>
  bx  lr    
 8001d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d88:	08005c90 	.word	0x08005c90
  ldr r2, =_sbss
 8001d8c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d90:	20000328 	.word	0x20000328

08001d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC_IRQHandler>
	...

08001d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <HAL_Init+0x40>)
 8001da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_Init+0x40>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <HAL_Init+0x40>)
 8001dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <HAL_Init+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a07      	ldr	r2, [pc, #28]	@ (8001dd8 <HAL_Init+0x40>)
 8001dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f000 f94f 	bl	8002064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f000 f808 	bl	8001ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dcc:	f7ff fd78 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_InitTick+0x54>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <HAL_InitTick+0x58>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f967 	bl	80020ce <HAL_SYSTICK_Config>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00e      	b.n	8001e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b0f      	cmp	r3, #15
 8001e0e:	d80a      	bhi.n	8001e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e10:	2200      	movs	r2, #0
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f000 f92f 	bl	800207a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e1c:	4a06      	ldr	r2, [pc, #24]	@ (8001e38 <HAL_InitTick+0x5c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e000      	b.n	8001e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000008 	.word	0x20000008
 8001e38:	20000004 	.word	0x20000004

08001e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_IncTick+0x20>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_IncTick+0x24>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <HAL_IncTick+0x24>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	200001d8 	.word	0x200001d8

08001e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b03      	ldr	r3, [pc, #12]	@ (8001e78 <HAL_GetTick+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200001d8 	.word	0x200001d8

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff ffee 	bl	8001e64 <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <HAL_Delay+0x44>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea2:	bf00      	nop
 8001ea4:	f7ff ffde 	bl	8001e64 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
  {
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4907      	ldr	r1, [pc, #28]	@ (8001f60 <__NVIC_EnableIRQ+0x38>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	@ (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	@ (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf28      	it	cs
 8001fd6:	2304      	movcs	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d902      	bls.n	8001fe8 <NVIC_EncodePriority+0x30>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b03      	subs	r3, #3
 8001fe6:	e000      	b.n	8001fea <NVIC_EncodePriority+0x32>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002000:	f04f 31ff 	mov.w	r1, #4294967295
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43d9      	mvns	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
         );
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	@ 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002030:	d301      	bcc.n	8002036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002032:	2301      	movs	r3, #1
 8002034:	e00f      	b.n	8002056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002036:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <SysTick_Config+0x40>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203e:	210f      	movs	r1, #15
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f7ff ff8e 	bl	8001f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <SysTick_Config+0x40>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204e:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <SysTick_Config+0x40>)
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000e010 	.word	0xe000e010

08002064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff29 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208c:	f7ff ff3e 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 8002090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f7ff ff8e 	bl	8001fb8 <NVIC_EncodePriority>
 800209c:	4602      	mov	r2, r0
 800209e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff5d 	bl	8001f64 <__NVIC_SetPriority>
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff31 	bl	8001f28 <__NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ffa2 	bl	8002020 <SysTick_Config>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	@ 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e165      	b.n	80023d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002104:	2201      	movs	r2, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	429a      	cmp	r2, r3
 800211e:	f040 8154 	bne.w	80023ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d005      	beq.n	800213a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002136:	2b02      	cmp	r3, #2
 8002138:	d130      	bne.n	800219c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	2203      	movs	r2, #3
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002170:	2201      	movs	r2, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 0201 	and.w	r2, r3, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d017      	beq.n	80021d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d123      	bne.n	800222c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	08da      	lsrs	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3208      	adds	r2, #8
 80021ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	220f      	movs	r2, #15
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	08da      	lsrs	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3208      	adds	r2, #8
 8002226:	69b9      	ldr	r1, [r7, #24]
 8002228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0203 	and.w	r2, r3, #3
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80ae 	beq.w	80023ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b5d      	ldr	r3, [pc, #372]	@ (80023e8 <HAL_GPIO_Init+0x300>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	4a5c      	ldr	r2, [pc, #368]	@ (80023e8 <HAL_GPIO_Init+0x300>)
 8002278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800227c:	6453      	str	r3, [r2, #68]	@ 0x44
 800227e:	4b5a      	ldr	r3, [pc, #360]	@ (80023e8 <HAL_GPIO_Init+0x300>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228a:	4a58      	ldr	r2, [pc, #352]	@ (80023ec <HAL_GPIO_Init+0x304>)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	220f      	movs	r2, #15
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4f      	ldr	r2, [pc, #316]	@ (80023f0 <HAL_GPIO_Init+0x308>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d025      	beq.n	8002302 <HAL_GPIO_Init+0x21a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4e      	ldr	r2, [pc, #312]	@ (80023f4 <HAL_GPIO_Init+0x30c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01f      	beq.n	80022fe <HAL_GPIO_Init+0x216>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4d      	ldr	r2, [pc, #308]	@ (80023f8 <HAL_GPIO_Init+0x310>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d019      	beq.n	80022fa <HAL_GPIO_Init+0x212>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4c      	ldr	r2, [pc, #304]	@ (80023fc <HAL_GPIO_Init+0x314>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_GPIO_Init+0x20e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002400 <HAL_GPIO_Init+0x318>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00d      	beq.n	80022f2 <HAL_GPIO_Init+0x20a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002404 <HAL_GPIO_Init+0x31c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_Init+0x206>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a49      	ldr	r2, [pc, #292]	@ (8002408 <HAL_GPIO_Init+0x320>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_GPIO_Init+0x202>
 80022e6:	2306      	movs	r3, #6
 80022e8:	e00c      	b.n	8002304 <HAL_GPIO_Init+0x21c>
 80022ea:	2307      	movs	r3, #7
 80022ec:	e00a      	b.n	8002304 <HAL_GPIO_Init+0x21c>
 80022ee:	2305      	movs	r3, #5
 80022f0:	e008      	b.n	8002304 <HAL_GPIO_Init+0x21c>
 80022f2:	2304      	movs	r3, #4
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x21c>
 80022f6:	2303      	movs	r3, #3
 80022f8:	e004      	b.n	8002304 <HAL_GPIO_Init+0x21c>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_Init+0x21c>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_GPIO_Init+0x21c>
 8002302:	2300      	movs	r3, #0
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	f002 0203 	and.w	r2, r2, #3
 800230a:	0092      	lsls	r2, r2, #2
 800230c:	4093      	lsls	r3, r2
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002314:	4935      	ldr	r1, [pc, #212]	@ (80023ec <HAL_GPIO_Init+0x304>)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002322:	4b3a      	ldr	r3, [pc, #232]	@ (800240c <HAL_GPIO_Init+0x324>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002346:	4a31      	ldr	r2, [pc, #196]	@ (800240c <HAL_GPIO_Init+0x324>)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800234c:	4b2f      	ldr	r3, [pc, #188]	@ (800240c <HAL_GPIO_Init+0x324>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002370:	4a26      	ldr	r2, [pc, #152]	@ (800240c <HAL_GPIO_Init+0x324>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002376:	4b25      	ldr	r3, [pc, #148]	@ (800240c <HAL_GPIO_Init+0x324>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239a:	4a1c      	ldr	r2, [pc, #112]	@ (800240c <HAL_GPIO_Init+0x324>)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <HAL_GPIO_Init+0x324>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c4:	4a11      	ldr	r2, [pc, #68]	@ (800240c <HAL_GPIO_Init+0x324>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3301      	adds	r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b0f      	cmp	r3, #15
 80023d4:	f67f ae96 	bls.w	8002104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3724      	adds	r7, #36	@ 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40013800 	.word	0x40013800
 80023f0:	40020000 	.word	0x40020000
 80023f4:	40020400 	.word	0x40020400
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020c00 	.word	0x40020c00
 8002400:	40021000 	.word	0x40021000
 8002404:	40021400 	.word	0x40021400
 8002408:	40021800 	.word	0x40021800
 800240c:	40013c00 	.word	0x40013c00

08002410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
 800241c:	4613      	mov	r3, r2
 800241e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800242c:	e003      	b.n	8002436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	041a      	lsls	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	619a      	str	r2, [r3, #24]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e12b      	b.n	80026ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe fd0a 	bl	8000e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2224      	movs	r2, #36	@ 0x24
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002496:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024a8:	f001 fa10 	bl	80038cc <HAL_RCC_GetPCLK1Freq>
 80024ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4a81      	ldr	r2, [pc, #516]	@ (80026b8 <HAL_I2C_Init+0x274>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d807      	bhi.n	80024c8 <HAL_I2C_Init+0x84>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a80      	ldr	r2, [pc, #512]	@ (80026bc <HAL_I2C_Init+0x278>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	bf94      	ite	ls
 80024c0:	2301      	movls	r3, #1
 80024c2:	2300      	movhi	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e006      	b.n	80024d6 <HAL_I2C_Init+0x92>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a7d      	ldr	r2, [pc, #500]	@ (80026c0 <HAL_I2C_Init+0x27c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bf94      	ite	ls
 80024d0:	2301      	movls	r3, #1
 80024d2:	2300      	movhi	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0e7      	b.n	80026ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4a78      	ldr	r2, [pc, #480]	@ (80026c4 <HAL_I2C_Init+0x280>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0c9b      	lsrs	r3, r3, #18
 80024e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a6a      	ldr	r2, [pc, #424]	@ (80026b8 <HAL_I2C_Init+0x274>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d802      	bhi.n	8002518 <HAL_I2C_Init+0xd4>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3301      	adds	r3, #1
 8002516:	e009      	b.n	800252c <HAL_I2C_Init+0xe8>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	4a69      	ldr	r2, [pc, #420]	@ (80026c8 <HAL_I2C_Init+0x284>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	3301      	adds	r3, #1
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	430b      	orrs	r3, r1
 8002532:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800253e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	495c      	ldr	r1, [pc, #368]	@ (80026b8 <HAL_I2C_Init+0x274>)
 8002548:	428b      	cmp	r3, r1
 800254a:	d819      	bhi.n	8002580 <HAL_I2C_Init+0x13c>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1e59      	subs	r1, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fbb1 f3f3 	udiv	r3, r1, r3
 800255a:	1c59      	adds	r1, r3, #1
 800255c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002560:	400b      	ands	r3, r1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_I2C_Init+0x138>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1e59      	subs	r1, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fbb1 f3f3 	udiv	r3, r1, r3
 8002574:	3301      	adds	r3, #1
 8002576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257a:	e051      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 800257c:	2304      	movs	r3, #4
 800257e:	e04f      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d111      	bne.n	80025ac <HAL_I2C_Init+0x168>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e58      	subs	r0, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e012      	b.n	80025d2 <HAL_I2C_Init+0x18e>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	0099      	lsls	r1, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Init+0x196>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e022      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10e      	bne.n	8002600 <HAL_I2C_Init+0x1bc>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e58      	subs	r0, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	440b      	add	r3, r1
 80025f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025fe:	e00f      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	0099      	lsls	r1, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	6809      	ldr	r1, [r1, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800264e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6911      	ldr	r1, [r2, #16]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	000186a0 	.word	0x000186a0
 80026bc:	001e847f 	.word	0x001e847f
 80026c0:	003d08ff 	.word	0x003d08ff
 80026c4:	431bde83 	.word	0x431bde83
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	461a      	mov	r2, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	817b      	strh	r3, [r7, #10]
 80026de:	460b      	mov	r3, r1
 80026e0:	813b      	strh	r3, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026e6:	f7ff fbbd 	bl	8001e64 <HAL_GetTick>
 80026ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	f040 80d9 	bne.w	80028ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2319      	movs	r3, #25
 8002700:	2201      	movs	r2, #1
 8002702:	496d      	ldr	r1, [pc, #436]	@ (80028b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fdb9 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002710:	2302      	movs	r3, #2
 8002712:	e0cc      	b.n	80028ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_I2C_Mem_Write+0x56>
 800271e:	2302      	movs	r3, #2
 8002720:	e0c5      	b.n	80028ae <HAL_I2C_Mem_Write+0x1e2>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d007      	beq.n	8002748 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002756:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2221      	movs	r2, #33	@ 0x21
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2240      	movs	r2, #64	@ 0x40
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002778:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a4d      	ldr	r2, [pc, #308]	@ (80028bc <HAL_I2C_Mem_Write+0x1f0>)
 8002788:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800278a:	88f8      	ldrh	r0, [r7, #6]
 800278c:	893a      	ldrh	r2, [r7, #8]
 800278e:	8979      	ldrh	r1, [r7, #10]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	4603      	mov	r3, r0
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fbf0 	bl	8002f80 <I2C_RequestMemoryWrite>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d052      	beq.n	800284c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e081      	b.n	80028ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fe7e 	bl	80034b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d107      	bne.n	80027d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e06b      	b.n	80028ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b04      	cmp	r3, #4
 8002812:	d11b      	bne.n	800284c <HAL_I2C_Mem_Write+0x180>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	d017      	beq.n	800284c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1aa      	bne.n	80027aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fe71 	bl	8003540 <I2C_WaitOnBTFFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00d      	beq.n	8002880 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	2b04      	cmp	r3, #4
 800286a:	d107      	bne.n	800287c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e016      	b.n	80028ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	00100002 	.word	0x00100002
 80028bc:	ffff0000 	.word	0xffff0000

080028c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	@ 0x30
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	4608      	mov	r0, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	4603      	mov	r3, r0
 80028d0:	817b      	strh	r3, [r7, #10]
 80028d2:	460b      	mov	r3, r1
 80028d4:	813b      	strh	r3, [r7, #8]
 80028d6:	4613      	mov	r3, r2
 80028d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028da:	f7ff fac3 	bl	8001e64 <HAL_GetTick>
 80028de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	f040 8214 	bne.w	8002d16 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	2319      	movs	r3, #25
 80028f4:	2201      	movs	r2, #1
 80028f6:	497b      	ldr	r1, [pc, #492]	@ (8002ae4 <HAL_I2C_Mem_Read+0x224>)
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fcbf 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002904:	2302      	movs	r3, #2
 8002906:	e207      	b.n	8002d18 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_I2C_Mem_Read+0x56>
 8002912:	2302      	movs	r3, #2
 8002914:	e200      	b.n	8002d18 <HAL_I2C_Mem_Read+0x458>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d007      	beq.n	800293c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800294a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2222      	movs	r2, #34	@ 0x22
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2240      	movs	r2, #64	@ 0x40
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002966:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800296c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ae8 <HAL_I2C_Mem_Read+0x228>)
 800297c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800297e:	88f8      	ldrh	r0, [r7, #6]
 8002980:	893a      	ldrh	r2, [r7, #8]
 8002982:	8979      	ldrh	r1, [r7, #10]
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	4603      	mov	r3, r0
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fb8c 	bl	80030ac <I2C_RequestMemoryRead>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1bc      	b.n	8002d18 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d113      	bne.n	80029ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	623b      	str	r3, [r7, #32]
 80029ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e190      	b.n	8002cf0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d11b      	bne.n	8002a0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e170      	b.n	8002cf0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d11b      	bne.n	8002a4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	e150      	b.n	8002cf0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a64:	e144      	b.n	8002cf0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	f200 80f1 	bhi.w	8002c52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d123      	bne.n	8002ac0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 fda7 	bl	80035d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e145      	b.n	8002d18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002abe:	e117      	b.n	8002cf0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d14e      	bne.n	8002b66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ace:	2200      	movs	r2, #0
 8002ad0:	4906      	ldr	r1, [pc, #24]	@ (8002aec <HAL_I2C_Mem_Read+0x22c>)
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fbd2 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e11a      	b.n	8002d18 <HAL_I2C_Mem_Read+0x458>
 8002ae2:	bf00      	nop
 8002ae4:	00100002 	.word	0x00100002
 8002ae8:	ffff0000 	.word	0xffff0000
 8002aec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b64:	e0c4      	b.n	8002cf0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	496c      	ldr	r1, [pc, #432]	@ (8002d20 <HAL_I2C_Mem_Read+0x460>)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fb83 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0cb      	b.n	8002d18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4955      	ldr	r1, [pc, #340]	@ (8002d20 <HAL_I2C_Mem_Read+0x460>)
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fb55 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e09d      	b.n	8002d18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c50:	e04e      	b.n	8002cf0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fcba 	bl	80035d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e058      	b.n	8002d18 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d124      	bne.n	8002cf0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d107      	bne.n	8002cbe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cbc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f aeb6 	bne.w	8002a66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3728      	adds	r7, #40	@ 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	00010004 	.word	0x00010004

08002d24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	@ 0x28
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	460b      	mov	r3, r1
 8002d32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7ff f896 	bl	8001e64 <HAL_GetTick>
 8002d38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	f040 8111 	bne.w	8002f6e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2319      	movs	r3, #25
 8002d52:	2201      	movs	r2, #1
 8002d54:	4988      	ldr	r1, [pc, #544]	@ (8002f78 <HAL_I2C_IsDeviceReady+0x254>)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fa90 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
 8002d64:	e104      	b.n	8002f70 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_I2C_IsDeviceReady+0x50>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e0fd      	b.n	8002f70 <HAL_I2C_IsDeviceReady+0x24c>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d007      	beq.n	8002d9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0201 	orr.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002da8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2224      	movs	r2, #36	@ 0x24
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a70      	ldr	r2, [pc, #448]	@ (8002f7c <HAL_I2C_IsDeviceReady+0x258>)
 8002dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dcc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fa4e 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df4:	d103      	bne.n	8002dfe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dfc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0b6      	b.n	8002f70 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e02:	897b      	ldrh	r3, [r7, #10]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e10:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e12:	f7ff f827 	bl	8001e64 <HAL_GetTick>
 8002e16:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	bf0c      	ite	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	2300      	movne	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e3c:	bf0c      	ite	eq
 8002e3e:	2301      	moveq	r3, #1
 8002e40:	2300      	movne	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e46:	e025      	b.n	8002e94 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e48:	f7ff f80c 	bl	8001e64 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d302      	bcc.n	8002e5e <HAL_I2C_IsDeviceReady+0x13a>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	22a0      	movs	r2, #160	@ 0xa0
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e9e:	d005      	beq.n	8002eac <HAL_I2C_IsDeviceReady+0x188>
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <HAL_I2C_IsDeviceReady+0x188>
 8002ea6:	7dbb      	ldrb	r3, [r7, #22]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0cd      	beq.n	8002e48 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d129      	bne.n	8002f16 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2319      	movs	r3, #25
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4921      	ldr	r1, [pc, #132]	@ (8002f78 <HAL_I2C_IsDeviceReady+0x254>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f9c2 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e036      	b.n	8002f70 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e02c      	b.n	8002f70 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f24:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f2e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2319      	movs	r3, #25
 8002f36:	2201      	movs	r2, #1
 8002f38:	490f      	ldr	r1, [pc, #60]	@ (8002f78 <HAL_I2C_IsDeviceReady+0x254>)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f99e 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e012      	b.n	8002f70 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	f4ff af32 	bcc.w	8002dbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	00100002 	.word	0x00100002
 8002f7c:	ffff0000 	.word	0xffff0000

08002f80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	4608      	mov	r0, r1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	817b      	strh	r3, [r7, #10]
 8002f92:	460b      	mov	r3, r1
 8002f94:	813b      	strh	r3, [r7, #8]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f960 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd0:	d103      	bne.n	8002fda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e05f      	b.n	800309e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	6a3a      	ldr	r2, [r7, #32]
 8002ff2:	492d      	ldr	r1, [pc, #180]	@ (80030a8 <I2C_RequestMemoryWrite+0x128>)
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f9bb 	bl	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e04c      	b.n	800309e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800301a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800301c:	6a39      	ldr	r1, [r7, #32]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fa46 	bl	80034b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	2b04      	cmp	r3, #4
 8003030:	d107      	bne.n	8003042 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003040:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e02b      	b.n	800309e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800304c:	893b      	ldrh	r3, [r7, #8]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	611a      	str	r2, [r3, #16]
 8003056:	e021      	b.n	800309c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003058:	893b      	ldrh	r3, [r7, #8]
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	b29b      	uxth	r3, r3
 800305e:	b2da      	uxtb	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003068:	6a39      	ldr	r1, [r7, #32]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fa20 	bl	80034b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00d      	beq.n	8003092 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	2b04      	cmp	r3, #4
 800307c:	d107      	bne.n	800308e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e005      	b.n	800309e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003092:	893b      	ldrh	r3, [r7, #8]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	00010002 	.word	0x00010002

080030ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	817b      	strh	r3, [r7, #10]
 80030be:	460b      	mov	r3, r1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f8c2 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800310c:	d103      	bne.n	8003116 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003114:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e0aa      	b.n	8003270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800311a:	897b      	ldrh	r3, [r7, #10]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003128:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	6a3a      	ldr	r2, [r7, #32]
 800312e:	4952      	ldr	r1, [pc, #328]	@ (8003278 <I2C_RequestMemoryRead+0x1cc>)
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f91d 	bl	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e097      	b.n	8003270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003158:	6a39      	ldr	r1, [r7, #32]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f9a8 	bl	80034b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	2b04      	cmp	r3, #4
 800316c:	d107      	bne.n	800317e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e076      	b.n	8003270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d105      	bne.n	8003194 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003188:	893b      	ldrh	r3, [r7, #8]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	611a      	str	r2, [r3, #16]
 8003192:	e021      	b.n	80031d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003194:	893b      	ldrh	r3, [r7, #8]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a4:	6a39      	ldr	r1, [r7, #32]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f982 	bl	80034b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d107      	bne.n	80031ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e050      	b.n	8003270 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031ce:	893b      	ldrh	r3, [r7, #8]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031da:	6a39      	ldr	r1, [r7, #32]
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f967 	bl	80034b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00d      	beq.n	8003204 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d107      	bne.n	8003200 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e035      	b.n	8003270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003212:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	2200      	movs	r2, #0
 800321c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f82b 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00d      	beq.n	8003248 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323a:	d103      	bne.n	8003244 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e013      	b.n	8003270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003248:	897b      	ldrh	r3, [r7, #10]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	6a3a      	ldr	r2, [r7, #32]
 800325c:	4906      	ldr	r1, [pc, #24]	@ (8003278 <I2C_RequestMemoryRead+0x1cc>)
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f886 	bl	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	00010002 	.word	0x00010002

0800327c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800328c:	e048      	b.n	8003320 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d044      	beq.n	8003320 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003296:	f7fe fde5 	bl	8001e64 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d139      	bne.n	8003320 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	0c1b      	lsrs	r3, r3, #16
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d10d      	bne.n	80032d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	43da      	mvns	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4013      	ands	r3, r2
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	e00c      	b.n	80032ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	43da      	mvns	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4013      	ands	r3, r2
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d116      	bne.n	8003320 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e023      	b.n	8003368 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	0c1b      	lsrs	r3, r3, #16
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d10d      	bne.n	8003346 <I2C_WaitOnFlagUntilTimeout+0xca>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	43da      	mvns	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4013      	ands	r3, r2
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	e00c      	b.n	8003360 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	43da      	mvns	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4013      	ands	r3, r2
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	429a      	cmp	r2, r3
 8003364:	d093      	beq.n	800328e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800337e:	e071      	b.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338e:	d123      	bne.n	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	f043 0204 	orr.w	r2, r3, #4
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e067      	b.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033de:	d041      	beq.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e0:	f7fe fd40 	bl	8001e64 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d302      	bcc.n	80033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d136      	bne.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d10c      	bne.n	800341a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	43da      	mvns	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4013      	ands	r3, r2
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	e00b      	b.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	43da      	mvns	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4013      	ands	r3, r2
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d016      	beq.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e021      	b.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10c      	bne.n	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	43da      	mvns	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e00b      	b.n	80034a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	43da      	mvns	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4013      	ands	r3, r2
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	bf14      	ite	ne
 800349a:	2301      	movne	r3, #1
 800349c:	2300      	moveq	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f47f af6d 	bne.w	8003380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034bc:	e034      	b.n	8003528 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f8e3 	bl	800368a <I2C_IsAcknowledgeFailed>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e034      	b.n	8003538 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d028      	beq.n	8003528 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7fe fcc5 	bl	8001e64 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d302      	bcc.n	80034ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d11d      	bne.n	8003528 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f6:	2b80      	cmp	r3, #128	@ 0x80
 80034f8:	d016      	beq.n	8003528 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e007      	b.n	8003538 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003532:	2b80      	cmp	r3, #128	@ 0x80
 8003534:	d1c3      	bne.n	80034be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800354c:	e034      	b.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f89b 	bl	800368a <I2C_IsAcknowledgeFailed>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e034      	b.n	80035c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d028      	beq.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7fe fc7d 	bl	8001e64 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d11d      	bne.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b04      	cmp	r3, #4
 8003588:	d016      	beq.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e007      	b.n	80035c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d1c3      	bne.n	800354e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035dc:	e049      	b.n	8003672 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d119      	bne.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0210 	mvn.w	r2, #16
 80035f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e030      	b.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003620:	f7fe fc20 	bl	8001e64 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	d302      	bcc.n	8003636 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d11d      	bne.n	8003672 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003640:	2b40      	cmp	r3, #64	@ 0x40
 8003642:	d016      	beq.n	8003672 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e007      	b.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b40      	cmp	r3, #64	@ 0x40
 800367e:	d1ae      	bne.n	80035de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a0:	d11b      	bne.n	80036da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f043 0204 	orr.w	r2, r3, #4
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0cc      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036fc:	4b68      	ldr	r3, [pc, #416]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d90c      	bls.n	8003724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b65      	ldr	r3, [pc, #404]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b63      	ldr	r3, [pc, #396]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0b8      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d020      	beq.n	8003772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800373c:	4b59      	ldr	r3, [pc, #356]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a58      	ldr	r2, [pc, #352]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003746:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003754:	4b53      	ldr	r3, [pc, #332]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4a52      	ldr	r2, [pc, #328]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800375e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003760:	4b50      	ldr	r3, [pc, #320]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	494d      	ldr	r1, [pc, #308]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d044      	beq.n	8003808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	4b47      	ldr	r3, [pc, #284]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d119      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e07f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d003      	beq.n	80037a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a6:	4b3f      	ldr	r3, [pc, #252]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e06f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	4b3b      	ldr	r3, [pc, #236]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e067      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c6:	4b37      	ldr	r3, [pc, #220]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4934      	ldr	r1, [pc, #208]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d8:	f7fe fb44 	bl	8001e64 <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e0:	f7fe fb40 	bl	8001e64 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e04f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	4b2b      	ldr	r3, [pc, #172]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 020c 	and.w	r2, r3, #12
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d1eb      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003808:	4b25      	ldr	r3, [pc, #148]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d20c      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b22      	ldr	r3, [pc, #136]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b20      	ldr	r3, [pc, #128]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e032      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800383c:	4b19      	ldr	r3, [pc, #100]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4916      	ldr	r1, [pc, #88]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385a:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	490e      	ldr	r1, [pc, #56]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800386e:	f000 f841 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8003872:	4602      	mov	r2, r0
 8003874:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	490a      	ldr	r1, [pc, #40]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	fa22 f303 	lsr.w	r3, r2, r3
 8003886:	4a09      	ldr	r2, [pc, #36]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800388a:	4b09      	ldr	r3, [pc, #36]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe faa4 	bl	8001ddc <HAL_InitTick>

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40023c00 	.word	0x40023c00
 80038a4:	40023800 	.word	0x40023800
 80038a8:	08005c68 	.word	0x08005c68
 80038ac:	20000000 	.word	0x20000000
 80038b0:	20000004 	.word	0x20000004

080038b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b8:	4b03      	ldr	r3, [pc, #12]	@ (80038c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000000 	.word	0x20000000

080038cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038d0:	f7ff fff0 	bl	80038b4 <HAL_RCC_GetHCLKFreq>
 80038d4:	4602      	mov	r2, r0
 80038d6:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	0a9b      	lsrs	r3, r3, #10
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	4903      	ldr	r1, [pc, #12]	@ (80038f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e2:	5ccb      	ldrb	r3, [r1, r3]
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40023800 	.word	0x40023800
 80038f0:	08005c78 	.word	0x08005c78

080038f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f8:	b0a6      	sub	sp, #152	@ 0x98
 80038fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800391a:	4bc8      	ldr	r3, [pc, #800]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x348>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b0c      	cmp	r3, #12
 8003924:	f200 817e 	bhi.w	8003c24 <HAL_RCC_GetSysClockFreq+0x330>
 8003928:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <HAL_RCC_GetSysClockFreq+0x3c>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003965 	.word	0x08003965
 8003934:	08003c25 	.word	0x08003c25
 8003938:	08003c25 	.word	0x08003c25
 800393c:	08003c25 	.word	0x08003c25
 8003940:	0800396d 	.word	0x0800396d
 8003944:	08003c25 	.word	0x08003c25
 8003948:	08003c25 	.word	0x08003c25
 800394c:	08003c25 	.word	0x08003c25
 8003950:	08003975 	.word	0x08003975
 8003954:	08003c25 	.word	0x08003c25
 8003958:	08003c25 	.word	0x08003c25
 800395c:	08003c25 	.word	0x08003c25
 8003960:	08003adf 	.word	0x08003adf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4bb6      	ldr	r3, [pc, #728]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 800396a:	e15f      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800396c:	4bb5      	ldr	r3, [pc, #724]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x350>)
 800396e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003972:	e15b      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003974:	4bb1      	ldr	r3, [pc, #708]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x348>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800397c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003980:	4bae      	ldr	r3, [pc, #696]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x348>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d031      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398c:	4bab      	ldr	r3, [pc, #684]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x348>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	2200      	movs	r2, #0
 8003994:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003996:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003998:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800399a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399e:	663b      	str	r3, [r7, #96]	@ 0x60
 80039a0:	2300      	movs	r3, #0
 80039a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80039a4:	4ba7      	ldr	r3, [pc, #668]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x350>)
 80039a6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80039aa:	462a      	mov	r2, r5
 80039ac:	fb03 f202 	mul.w	r2, r3, r2
 80039b0:	2300      	movs	r3, #0
 80039b2:	4621      	mov	r1, r4
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	4413      	add	r3, r2
 80039ba:	4aa2      	ldr	r2, [pc, #648]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x350>)
 80039bc:	4621      	mov	r1, r4
 80039be:	fba1 1202 	umull	r1, r2, r1, r2
 80039c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039c4:	460a      	mov	r2, r1
 80039c6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80039c8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80039ca:	4413      	add	r3, r2
 80039cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d2:	2200      	movs	r2, #0
 80039d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80039d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80039e0:	f7fd f858 	bl	8000a94 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039ee:	e064      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f0:	4b92      	ldr	r3, [pc, #584]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x348>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	099b      	lsrs	r3, r3, #6
 80039f6:	2200      	movs	r2, #0
 80039f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80039fa:	657a      	str	r2, [r7, #84]	@ 0x54
 80039fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a04:	2300      	movs	r3, #0
 8003a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a08:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003a0c:	4622      	mov	r2, r4
 8003a0e:	462b      	mov	r3, r5
 8003a10:	f04f 0000 	mov.w	r0, #0
 8003a14:	f04f 0100 	mov.w	r1, #0
 8003a18:	0159      	lsls	r1, r3, #5
 8003a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a1e:	0150      	lsls	r0, r2, #5
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4621      	mov	r1, r4
 8003a26:	1a51      	subs	r1, r2, r1
 8003a28:	6139      	str	r1, [r7, #16]
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	eb63 0301 	sbc.w	r3, r3, r1
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a3e:	4659      	mov	r1, fp
 8003a40:	018b      	lsls	r3, r1, #6
 8003a42:	4651      	mov	r1, sl
 8003a44:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a48:	4651      	mov	r1, sl
 8003a4a:	018a      	lsls	r2, r1, #6
 8003a4c:	4651      	mov	r1, sl
 8003a4e:	ebb2 0801 	subs.w	r8, r2, r1
 8003a52:	4659      	mov	r1, fp
 8003a54:	eb63 0901 	sbc.w	r9, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a6c:	4690      	mov	r8, r2
 8003a6e:	4699      	mov	r9, r3
 8003a70:	4623      	mov	r3, r4
 8003a72:	eb18 0303 	adds.w	r3, r8, r3
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	462b      	mov	r3, r5
 8003a7a:	eb49 0303 	adc.w	r3, r9, r3
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	028b      	lsls	r3, r1, #10
 8003a90:	4621      	mov	r1, r4
 8003a92:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a96:	4621      	mov	r1, r4
 8003a98:	028a      	lsls	r2, r1, #10
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003aa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003aac:	f7fc fff2 	bl	8000a94 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aba:	4b60      	ldr	r3, [pc, #384]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x348>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8003acc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003adc:	e0a6      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ade:	4b57      	ldr	r3, [pc, #348]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x348>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aea:	4b54      	ldr	r3, [pc, #336]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x348>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d02a      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af6:	4b51      	ldr	r3, [pc, #324]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x348>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	2200      	movs	r2, #0
 8003afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b0c:	fb03 f201 	mul.w	r2, r3, r1
 8003b10:	2300      	movs	r3, #0
 8003b12:	fb00 f303 	mul.w	r3, r0, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	4a4a      	ldr	r2, [pc, #296]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b1a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b20:	460a      	mov	r2, r1
 8003b22:	673a      	str	r2, [r7, #112]	@ 0x70
 8003b24:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b26:	4413      	add	r3, r2
 8003b28:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b2e:	2200      	movs	r2, #0
 8003b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b32:	637a      	str	r2, [r7, #52]	@ 0x34
 8003b34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003b38:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003b3c:	f7fc ffaa 	bl	8000a94 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4613      	mov	r3, r2
 8003b46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b4a:	e05b      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x348>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	2200      	movs	r2, #0
 8003b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	f04f 0000 	mov.w	r0, #0
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	0159      	lsls	r1, r3, #5
 8003b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7a:	0150      	lsls	r0, r2, #5
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4641      	mov	r1, r8
 8003b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b86:	4649      	mov	r1, r9
 8003b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	00eb      	lsls	r3, r5, #3
 8003bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb6:	00e2      	lsls	r2, r4, #3
 8003bb8:	4614      	mov	r4, r2
 8003bba:	461d      	mov	r5, r3
 8003bbc:	4643      	mov	r3, r8
 8003bbe:	18e3      	adds	r3, r4, r3
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	eb45 0303 	adc.w	r3, r5, r3
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	028b      	lsls	r3, r1, #10
 8003bda:	4621      	mov	r1, r4
 8003bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be0:	4621      	mov	r1, r4
 8003be2:	028a      	lsls	r2, r1, #10
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bec:	2200      	movs	r2, #0
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	61fa      	str	r2, [r7, #28]
 8003bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf6:	f7fc ff4d 	bl	8000a94 <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4613      	mov	r3, r2
 8003c00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c04:	4b0d      	ldr	r3, [pc, #52]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	0f1b      	lsrs	r3, r3, #28
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8003c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c22:	e003      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003c26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3798      	adds	r7, #152	@ 0x98
 8003c34:	46bd      	mov	sp, r7
 8003c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	017d7840 	.word	0x017d7840

08003c48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e28d      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8083 	beq.w	8003d6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c68:	4b94      	ldr	r3, [pc, #592]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d019      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c74:	4b91      	ldr	r3, [pc, #580]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c80:	4b8e      	ldr	r3, [pc, #568]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c8c:	d00c      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d112      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9a:	4b88      	ldr	r3, [pc, #544]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	4b84      	ldr	r3, [pc, #528]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d05b      	beq.n	8003d6c <HAL_RCC_OscConfig+0x124>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d157      	bne.n	8003d6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e25a      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cc8:	d106      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x90>
 8003cca:	4b7c      	ldr	r3, [pc, #496]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a7b      	ldr	r2, [pc, #492]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e01d      	b.n	8003d14 <HAL_RCC_OscConfig+0xcc>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0xb4>
 8003ce2:	4b76      	ldr	r3, [pc, #472]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a75      	ldr	r2, [pc, #468]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b73      	ldr	r3, [pc, #460]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a72      	ldr	r2, [pc, #456]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCC_OscConfig+0xcc>
 8003cfc:	4b6f      	ldr	r3, [pc, #444]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6e      	ldr	r2, [pc, #440]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b6c      	ldr	r3, [pc, #432]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a6b      	ldr	r2, [pc, #428]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d013      	beq.n	8003d44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe f8a2 	bl	8001e64 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fe f89e 	bl	8001e64 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	@ 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e21f      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b61      	ldr	r3, [pc, #388]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0xdc>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fe f88e 	bl	8001e64 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7fe f88a 	bl	8001e64 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	@ 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e20b      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5e:	4b57      	ldr	r3, [pc, #348]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x104>
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d06f      	beq.n	8003e5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d7a:	4b50      	ldr	r3, [pc, #320]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d017      	beq.n	8003db6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d86:	4b4d      	ldr	r3, [pc, #308]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d105      	bne.n	8003d9e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d92:	4b4a      	ldr	r3, [pc, #296]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9e:	4b47      	ldr	r3, [pc, #284]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d11c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003daa:	4b44      	ldr	r3, [pc, #272]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d116      	bne.n	8003de4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	4b41      	ldr	r3, [pc, #260]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_RCC_OscConfig+0x186>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e1d3      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dce:	4b3b      	ldr	r3, [pc, #236]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4937      	ldr	r1, [pc, #220]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	e03a      	b.n	8003e5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dec:	4b34      	ldr	r3, [pc, #208]	@ (8003ec0 <HAL_RCC_OscConfig+0x278>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fe f837 	bl	8001e64 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7fe f833 	bl	8001e64 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e1b4      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e18:	4b28      	ldr	r3, [pc, #160]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4925      	ldr	r1, [pc, #148]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
 8003e2c:	e015      	b.n	8003e5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e2e:	4b24      	ldr	r3, [pc, #144]	@ (8003ec0 <HAL_RCC_OscConfig+0x278>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe f816 	bl	8001e64 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3c:	f7fe f812 	bl	8001e64 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e193      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d036      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <HAL_RCC_OscConfig+0x27c>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fd fff6 	bl	8001e64 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fd fff2 	bl	8001e64 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e173      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x234>
 8003e9a:	e01b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e9c:	4b09      	ldr	r3, [pc, #36]	@ (8003ec4 <HAL_RCC_OscConfig+0x27c>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fd ffdf 	bl	8001e64 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	e00e      	b.n	8003ec8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eaa:	f7fd ffdb 	bl	8001e64 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d907      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e15c      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	42470000 	.word	0x42470000
 8003ec4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec8:	4b8a      	ldr	r3, [pc, #552]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1ea      	bne.n	8003eaa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8097 	beq.w	8004010 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee6:	4b83      	ldr	r3, [pc, #524]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	4a7e      	ldr	r2, [pc, #504]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f02:	4b7c      	ldr	r3, [pc, #496]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f12:	4b79      	ldr	r3, [pc, #484]	@ (80040f8 <HAL_RCC_OscConfig+0x4b0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d118      	bne.n	8003f50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1e:	4b76      	ldr	r3, [pc, #472]	@ (80040f8 <HAL_RCC_OscConfig+0x4b0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a75      	ldr	r2, [pc, #468]	@ (80040f8 <HAL_RCC_OscConfig+0x4b0>)
 8003f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2a:	f7fd ff9b 	bl	8001e64 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f32:	f7fd ff97 	bl	8001e64 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e118      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	4b6c      	ldr	r3, [pc, #432]	@ (80040f8 <HAL_RCC_OscConfig+0x4b0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d106      	bne.n	8003f66 <HAL_RCC_OscConfig+0x31e>
 8003f58:	4b66      	ldr	r3, [pc, #408]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5c:	4a65      	ldr	r2, [pc, #404]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f64:	e01c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x358>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b05      	cmp	r3, #5
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x340>
 8003f6e:	4b61      	ldr	r3, [pc, #388]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f72:	4a60      	ldr	r2, [pc, #384]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f74:	f043 0304 	orr.w	r3, r3, #4
 8003f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	4a5d      	ldr	r2, [pc, #372]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0x358>
 8003f88:	4b5a      	ldr	r3, [pc, #360]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8c:	4a59      	ldr	r2, [pc, #356]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f94:	4b57      	ldr	r3, [pc, #348]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f98:	4a56      	ldr	r2, [pc, #344]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f9a:	f023 0304 	bic.w	r3, r3, #4
 8003f9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d015      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fd ff5c 	bl	8001e64 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fd ff58 	bl	8001e64 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0d7      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc6:	4b4b      	ldr	r3, [pc, #300]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0ee      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x368>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fd ff46 	bl	8001e64 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7fd ff42 	bl	8001e64 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e0c1      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff2:	4b40      	ldr	r3, [pc, #256]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1ee      	bne.n	8003fdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004004:	4b3b      	ldr	r3, [pc, #236]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	4a3a      	ldr	r2, [pc, #232]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 800400a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800400e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80ad 	beq.w	8004174 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800401a:	4b36      	ldr	r3, [pc, #216]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b08      	cmp	r3, #8
 8004024:	d060      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d145      	bne.n	80040ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b33      	ldr	r3, [pc, #204]	@ (80040fc <HAL_RCC_OscConfig+0x4b4>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd ff16 	bl	8001e64 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403c:	f7fd ff12 	bl	8001e64 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e093      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	4b29      	ldr	r3, [pc, #164]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	019b      	lsls	r3, r3, #6
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	3b01      	subs	r3, #1
 8004074:	041b      	lsls	r3, r3, #16
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	071b      	lsls	r3, r3, #28
 8004086:	491b      	ldr	r1, [pc, #108]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <HAL_RCC_OscConfig+0x4b4>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fd fee7 	bl	8001e64 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409a:	f7fd fee3 	bl	8001e64 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e064      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ac:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x452>
 80040b8:	e05c      	b.n	8004174 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <HAL_RCC_OscConfig+0x4b4>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fd fed0 	bl	8001e64 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fd fecc 	bl	8001e64 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e04d      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x480>
 80040e6:	e045      	b.n	8004174 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e040      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40007000 	.word	0x40007000
 80040fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004100:	4b1f      	ldr	r3, [pc, #124]	@ (8004180 <HAL_RCC_OscConfig+0x538>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d030      	beq.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d129      	bne.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d122      	bne.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004138:	4293      	cmp	r3, r2
 800413a:	d119      	bne.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	3b01      	subs	r3, #1
 800414a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d10f      	bne.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d107      	bne.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800

08004184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e041      	b.n	800421a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fd fd46 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3304      	adds	r3, #4
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f000 fcc0 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	d001      	beq.n	800423c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e046      	b.n	80042ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a23      	ldr	r2, [pc, #140]	@ (80042d8 <HAL_TIM_Base_Start+0xb4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d022      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004256:	d01d      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1f      	ldr	r2, [pc, #124]	@ (80042dc <HAL_TIM_Base_Start+0xb8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d018      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1e      	ldr	r2, [pc, #120]	@ (80042e0 <HAL_TIM_Base_Start+0xbc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1c      	ldr	r2, [pc, #112]	@ (80042e4 <HAL_TIM_Base_Start+0xc0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1b      	ldr	r2, [pc, #108]	@ (80042e8 <HAL_TIM_Base_Start+0xc4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a19      	ldr	r2, [pc, #100]	@ (80042ec <HAL_TIM_Base_Start+0xc8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <HAL_TIM_Base_Start+0xcc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d010      	beq.n	80042c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	e007      	b.n	80042c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40010400 	.word	0x40010400
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40001800 	.word	0x40001800

080042f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e04e      	b.n	80043aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a23      	ldr	r2, [pc, #140]	@ (80043b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d022      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004336:	d01d      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1f      	ldr	r2, [pc, #124]	@ (80043bc <HAL_TIM_Base_Start_IT+0xc8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d018      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1e      	ldr	r2, [pc, #120]	@ (80043c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1c      	ldr	r2, [pc, #112]	@ (80043c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00e      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1b      	ldr	r2, [pc, #108]	@ (80043c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a19      	ldr	r2, [pc, #100]	@ (80043cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a18      	ldr	r2, [pc, #96]	@ (80043d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d111      	bne.n	8004398 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b06      	cmp	r3, #6
 8004384:	d010      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004396:	e007      	b.n	80043a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40010000 	.word	0x40010000
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800
 80043c4:	40000c00 	.word	0x40000c00
 80043c8:	40010400 	.word	0x40010400
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40001800 	.word	0x40001800

080043d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e041      	b.n	800446a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd fc46 	bl	8001c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f000 fb98 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d109      	bne.n	8004498 <HAL_TIM_PWM_Start+0x24>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e022      	b.n	80044de <HAL_TIM_PWM_Start+0x6a>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b04      	cmp	r3, #4
 800449c:	d109      	bne.n	80044b2 <HAL_TIM_PWM_Start+0x3e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	bf14      	ite	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	2300      	moveq	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	e015      	b.n	80044de <HAL_TIM_PWM_Start+0x6a>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d109      	bne.n	80044cc <HAL_TIM_PWM_Start+0x58>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e008      	b.n	80044de <HAL_TIM_PWM_Start+0x6a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	bf14      	ite	ne
 80044d8:	2301      	movne	r3, #1
 80044da:	2300      	moveq	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e07c      	b.n	80045e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_PWM_Start+0x82>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f4:	e013      	b.n	800451e <HAL_TIM_PWM_Start+0xaa>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d104      	bne.n	8004506 <HAL_TIM_PWM_Start+0x92>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004504:	e00b      	b.n	800451e <HAL_TIM_PWM_Start+0xaa>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d104      	bne.n	8004516 <HAL_TIM_PWM_Start+0xa2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004514:	e003      	b.n	800451e <HAL_TIM_PWM_Start+0xaa>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	6839      	ldr	r1, [r7, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fe04 	bl	8005134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2d      	ldr	r2, [pc, #180]	@ (80045e8 <HAL_TIM_PWM_Start+0x174>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_TIM_PWM_Start+0xcc>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a2c      	ldr	r2, [pc, #176]	@ (80045ec <HAL_TIM_PWM_Start+0x178>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d101      	bne.n	8004544 <HAL_TIM_PWM_Start+0xd0>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <HAL_TIM_PWM_Start+0xd2>
 8004544:	2300      	movs	r3, #0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a22      	ldr	r2, [pc, #136]	@ (80045e8 <HAL_TIM_PWM_Start+0x174>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d022      	beq.n	80045aa <HAL_TIM_PWM_Start+0x136>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800456c:	d01d      	beq.n	80045aa <HAL_TIM_PWM_Start+0x136>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1f      	ldr	r2, [pc, #124]	@ (80045f0 <HAL_TIM_PWM_Start+0x17c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d018      	beq.n	80045aa <HAL_TIM_PWM_Start+0x136>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1d      	ldr	r2, [pc, #116]	@ (80045f4 <HAL_TIM_PWM_Start+0x180>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <HAL_TIM_PWM_Start+0x136>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1c      	ldr	r2, [pc, #112]	@ (80045f8 <HAL_TIM_PWM_Start+0x184>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00e      	beq.n	80045aa <HAL_TIM_PWM_Start+0x136>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a16      	ldr	r2, [pc, #88]	@ (80045ec <HAL_TIM_PWM_Start+0x178>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d009      	beq.n	80045aa <HAL_TIM_PWM_Start+0x136>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a18      	ldr	r2, [pc, #96]	@ (80045fc <HAL_TIM_PWM_Start+0x188>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d004      	beq.n	80045aa <HAL_TIM_PWM_Start+0x136>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a16      	ldr	r2, [pc, #88]	@ (8004600 <HAL_TIM_PWM_Start+0x18c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d111      	bne.n	80045ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b06      	cmp	r3, #6
 80045ba:	d010      	beq.n	80045de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045cc:	e007      	b.n	80045de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40010400 	.word	0x40010400
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40014000 	.word	0x40014000
 8004600:	40001800 	.word	0x40001800

08004604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d020      	beq.n	8004668 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01b      	beq.n	8004668 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0202 	mvn.w	r2, #2
 8004638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa5b 	bl	8004b0a <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa4d 	bl	8004af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fa5e 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d020      	beq.n	80046b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0204 	mvn.w	r2, #4
 8004684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2202      	movs	r2, #2
 800468a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa35 	bl	8004b0a <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa27 	bl	8004af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fa38 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d020      	beq.n	8004700 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01b      	beq.n	8004700 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0208 	mvn.w	r2, #8
 80046d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2204      	movs	r2, #4
 80046d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa0f 	bl	8004b0a <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fa01 	bl	8004af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fa12 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	d020      	beq.n	800474c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01b      	beq.n	800474c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0210 	mvn.w	r2, #16
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2208      	movs	r2, #8
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9e9 	bl	8004b0a <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f9db 	bl	8004af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f9ec 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0201 	mvn.w	r2, #1
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc fc80 	bl	8001070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00c      	beq.n	8004794 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fd7c 	bl	800528c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f9bd 	bl	8004b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0220 	mvn.w	r2, #32
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fd4e 	bl	8005278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047fe:	2302      	movs	r3, #2
 8004800:	e0ae      	b.n	8004960 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	f200 809f 	bhi.w	8004950 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004812:	a201      	add	r2, pc, #4	@ (adr r2, 8004818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	0800484d 	.word	0x0800484d
 800481c:	08004951 	.word	0x08004951
 8004820:	08004951 	.word	0x08004951
 8004824:	08004951 	.word	0x08004951
 8004828:	0800488d 	.word	0x0800488d
 800482c:	08004951 	.word	0x08004951
 8004830:	08004951 	.word	0x08004951
 8004834:	08004951 	.word	0x08004951
 8004838:	080048cf 	.word	0x080048cf
 800483c:	08004951 	.word	0x08004951
 8004840:	08004951 	.word	0x08004951
 8004844:	08004951 	.word	0x08004951
 8004848:	0800490f 	.word	0x0800490f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fa24 	bl	8004ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0208 	orr.w	r2, r2, #8
 8004866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0204 	bic.w	r2, r2, #4
 8004876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6999      	ldr	r1, [r3, #24]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	619a      	str	r2, [r3, #24]
      break;
 800488a:	e064      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fa74 	bl	8004d80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6999      	ldr	r1, [r3, #24]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	021a      	lsls	r2, r3, #8
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	619a      	str	r2, [r3, #24]
      break;
 80048cc:	e043      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fac9 	bl	8004e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0208 	orr.w	r2, r2, #8
 80048e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0204 	bic.w	r2, r2, #4
 80048f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69d9      	ldr	r1, [r3, #28]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	61da      	str	r2, [r3, #28]
      break;
 800490c:	e023      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fb1d 	bl	8004f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69da      	ldr	r2, [r3, #28]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69d9      	ldr	r1, [r3, #28]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	021a      	lsls	r2, r3, #8
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	61da      	str	r2, [r3, #28]
      break;
 800494e:	e002      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	75fb      	strb	r3, [r7, #23]
      break;
 8004954:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800495e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_TIM_ConfigClockSource+0x1c>
 8004980:	2302      	movs	r3, #2
 8004982:	e0b4      	b.n	8004aee <HAL_TIM_ConfigClockSource+0x186>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049bc:	d03e      	beq.n	8004a3c <HAL_TIM_ConfigClockSource+0xd4>
 80049be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049c2:	f200 8087 	bhi.w	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ca:	f000 8086 	beq.w	8004ada <HAL_TIM_ConfigClockSource+0x172>
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d2:	d87f      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049d4:	2b70      	cmp	r3, #112	@ 0x70
 80049d6:	d01a      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0xa6>
 80049d8:	2b70      	cmp	r3, #112	@ 0x70
 80049da:	d87b      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049dc:	2b60      	cmp	r3, #96	@ 0x60
 80049de:	d050      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x11a>
 80049e0:	2b60      	cmp	r3, #96	@ 0x60
 80049e2:	d877      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049e4:	2b50      	cmp	r3, #80	@ 0x50
 80049e6:	d03c      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0xfa>
 80049e8:	2b50      	cmp	r3, #80	@ 0x50
 80049ea:	d873      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049ec:	2b40      	cmp	r3, #64	@ 0x40
 80049ee:	d058      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80049f0:	2b40      	cmp	r3, #64	@ 0x40
 80049f2:	d86f      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049f4:	2b30      	cmp	r3, #48	@ 0x30
 80049f6:	d064      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80049f8:	2b30      	cmp	r3, #48	@ 0x30
 80049fa:	d86b      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d060      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d867      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d05c      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d05a      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a0c:	e062      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a1e:	f000 fb69 	bl	80050f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	609a      	str	r2, [r3, #8]
      break;
 8004a3a:	e04f      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a4c:	f000 fb52 	bl	80050f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a5e:	609a      	str	r2, [r3, #8]
      break;
 8004a60:	e03c      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f000 fac6 	bl	8005000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2150      	movs	r1, #80	@ 0x50
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fb1f 	bl	80050be <TIM_ITRx_SetConfig>
      break;
 8004a80:	e02c      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f000 fae5 	bl	800505e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2160      	movs	r1, #96	@ 0x60
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fb0f 	bl	80050be <TIM_ITRx_SetConfig>
      break;
 8004aa0:	e01c      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 faa6 	bl	8005000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2140      	movs	r1, #64	@ 0x40
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 faff 	bl	80050be <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e00c      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f000 faf6 	bl	80050be <TIM_ITRx_SetConfig>
      break;
 8004ad2:	e003      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad8:	e000      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a46      	ldr	r2, [pc, #280]	@ (8004c74 <TIM_Base_SetConfig+0x12c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d013      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b66:	d00f      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a43      	ldr	r2, [pc, #268]	@ (8004c78 <TIM_Base_SetConfig+0x130>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00b      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a42      	ldr	r2, [pc, #264]	@ (8004c7c <TIM_Base_SetConfig+0x134>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d007      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a41      	ldr	r2, [pc, #260]	@ (8004c80 <TIM_Base_SetConfig+0x138>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a40      	ldr	r2, [pc, #256]	@ (8004c84 <TIM_Base_SetConfig+0x13c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a35      	ldr	r2, [pc, #212]	@ (8004c74 <TIM_Base_SetConfig+0x12c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d02b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba8:	d027      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a32      	ldr	r2, [pc, #200]	@ (8004c78 <TIM_Base_SetConfig+0x130>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d023      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a31      	ldr	r2, [pc, #196]	@ (8004c7c <TIM_Base_SetConfig+0x134>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01f      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a30      	ldr	r2, [pc, #192]	@ (8004c80 <TIM_Base_SetConfig+0x138>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8004c84 <TIM_Base_SetConfig+0x13c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d017      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8004c88 <TIM_Base_SetConfig+0x140>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8004c8c <TIM_Base_SetConfig+0x144>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8004c90 <TIM_Base_SetConfig+0x148>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2b      	ldr	r2, [pc, #172]	@ (8004c94 <TIM_Base_SetConfig+0x14c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2a      	ldr	r2, [pc, #168]	@ (8004c98 <TIM_Base_SetConfig+0x150>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a29      	ldr	r2, [pc, #164]	@ (8004c9c <TIM_Base_SetConfig+0x154>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a10      	ldr	r2, [pc, #64]	@ (8004c74 <TIM_Base_SetConfig+0x12c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_Base_SetConfig+0xf8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a12      	ldr	r2, [pc, #72]	@ (8004c84 <TIM_Base_SetConfig+0x13c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d103      	bne.n	8004c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d105      	bne.n	8004c66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f023 0201 	bic.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	611a      	str	r2, [r3, #16]
  }
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40010400 	.word	0x40010400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40014400 	.word	0x40014400
 8004c90:	40014800 	.word	0x40014800
 8004c94:	40001800 	.word	0x40001800
 8004c98:	40001c00 	.word	0x40001c00
 8004c9c:	40002000 	.word	0x40002000

08004ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f023 0201 	bic.w	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 0302 	bic.w	r3, r3, #2
 8004ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a20      	ldr	r2, [pc, #128]	@ (8004d78 <TIM_OC1_SetConfig+0xd8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_OC1_SetConfig+0x64>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8004d7c <TIM_OC1_SetConfig+0xdc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10c      	bne.n	8004d1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0308 	bic.w	r3, r3, #8
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a15      	ldr	r2, [pc, #84]	@ (8004d78 <TIM_OC1_SetConfig+0xd8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_OC1_SetConfig+0x8e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a14      	ldr	r2, [pc, #80]	@ (8004d7c <TIM_OC1_SetConfig+0xdc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d111      	bne.n	8004d52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	621a      	str	r2, [r3, #32]
}
 8004d6c:	bf00      	nop
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40010400 	.word	0x40010400

08004d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f023 0210 	bic.w	r2, r3, #16
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0320 	bic.w	r3, r3, #32
 8004dca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a22      	ldr	r2, [pc, #136]	@ (8004e64 <TIM_OC2_SetConfig+0xe4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_OC2_SetConfig+0x68>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a21      	ldr	r2, [pc, #132]	@ (8004e68 <TIM_OC2_SetConfig+0xe8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d10d      	bne.n	8004e04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a17      	ldr	r2, [pc, #92]	@ (8004e64 <TIM_OC2_SetConfig+0xe4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_OC2_SetConfig+0x94>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a16      	ldr	r2, [pc, #88]	@ (8004e68 <TIM_OC2_SetConfig+0xe8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d113      	bne.n	8004e3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40010400 	.word	0x40010400

08004e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0303 	bic.w	r3, r3, #3
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a21      	ldr	r2, [pc, #132]	@ (8004f4c <TIM_OC3_SetConfig+0xe0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <TIM_OC3_SetConfig+0x66>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a20      	ldr	r2, [pc, #128]	@ (8004f50 <TIM_OC3_SetConfig+0xe4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d10d      	bne.n	8004eee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a16      	ldr	r2, [pc, #88]	@ (8004f4c <TIM_OC3_SetConfig+0xe0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d003      	beq.n	8004efe <TIM_OC3_SetConfig+0x92>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a15      	ldr	r2, [pc, #84]	@ (8004f50 <TIM_OC3_SetConfig+0xe4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d113      	bne.n	8004f26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	621a      	str	r2, [r3, #32]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40010400 	.word	0x40010400

08004f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	031b      	lsls	r3, r3, #12
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a12      	ldr	r2, [pc, #72]	@ (8004ff8 <TIM_OC4_SetConfig+0xa4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_OC4_SetConfig+0x68>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a11      	ldr	r2, [pc, #68]	@ (8004ffc <TIM_OC4_SetConfig+0xa8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d109      	bne.n	8004fd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	019b      	lsls	r3, r3, #6
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40010400 	.word	0x40010400

08005000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f023 0201 	bic.w	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800502a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 030a 	bic.w	r3, r3, #10
 800503c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800505e:	b480      	push	{r7}
 8005060:	b087      	sub	sp, #28
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f023 0210 	bic.w	r2, r3, #16
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	031b      	lsls	r3, r3, #12
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800509a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	f043 0307 	orr.w	r3, r3, #7
 80050e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	609a      	str	r2, [r3, #8]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800510e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	021a      	lsls	r2, r3, #8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	431a      	orrs	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4313      	orrs	r3, r2
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	609a      	str	r2, [r3, #8]
}
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2201      	movs	r2, #1
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1a      	ldr	r2, [r3, #32]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	43db      	mvns	r3, r3
 8005156:	401a      	ands	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a1a      	ldr	r2, [r3, #32]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	fa01 f303 	lsl.w	r3, r1, r3
 800516c:	431a      	orrs	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005194:	2302      	movs	r3, #2
 8005196:	e05a      	b.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a21      	ldr	r2, [pc, #132]	@ (800525c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d022      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e4:	d01d      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005260 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d018      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005264 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00e      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a18      	ldr	r2, [pc, #96]	@ (800526c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d009      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a17      	ldr	r2, [pc, #92]	@ (8005270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d004      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a15      	ldr	r2, [pc, #84]	@ (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10c      	bne.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	4313      	orrs	r3, r2
 8005232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40010000 	.word	0x40010000
 8005260:	40000400 	.word	0x40000400
 8005264:	40000800 	.word	0x40000800
 8005268:	40000c00 	.word	0x40000c00
 800526c:	40010400 	.word	0x40010400
 8005270:	40014000 	.word	0x40014000
 8005274:	40001800 	.word	0x40001800

08005278 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <std>:
 80052a0:	2300      	movs	r3, #0
 80052a2:	b510      	push	{r4, lr}
 80052a4:	4604      	mov	r4, r0
 80052a6:	e9c0 3300 	strd	r3, r3, [r0]
 80052aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ae:	6083      	str	r3, [r0, #8]
 80052b0:	8181      	strh	r1, [r0, #12]
 80052b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80052b4:	81c2      	strh	r2, [r0, #14]
 80052b6:	6183      	str	r3, [r0, #24]
 80052b8:	4619      	mov	r1, r3
 80052ba:	2208      	movs	r2, #8
 80052bc:	305c      	adds	r0, #92	@ 0x5c
 80052be:	f000 f9e7 	bl	8005690 <memset>
 80052c2:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <std+0x58>)
 80052c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80052c6:	4b0d      	ldr	r3, [pc, #52]	@ (80052fc <std+0x5c>)
 80052c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <std+0x60>)
 80052cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <std+0x64>)
 80052d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80052d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005308 <std+0x68>)
 80052d4:	6224      	str	r4, [r4, #32]
 80052d6:	429c      	cmp	r4, r3
 80052d8:	d006      	beq.n	80052e8 <std+0x48>
 80052da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052de:	4294      	cmp	r4, r2
 80052e0:	d002      	beq.n	80052e8 <std+0x48>
 80052e2:	33d0      	adds	r3, #208	@ 0xd0
 80052e4:	429c      	cmp	r4, r3
 80052e6:	d105      	bne.n	80052f4 <std+0x54>
 80052e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f0:	f000 ba46 	b.w	8005780 <__retarget_lock_init_recursive>
 80052f4:	bd10      	pop	{r4, pc}
 80052f6:	bf00      	nop
 80052f8:	080054e1 	.word	0x080054e1
 80052fc:	08005503 	.word	0x08005503
 8005300:	0800553b 	.word	0x0800553b
 8005304:	0800555f 	.word	0x0800555f
 8005308:	200001dc 	.word	0x200001dc

0800530c <stdio_exit_handler>:
 800530c:	4a02      	ldr	r2, [pc, #8]	@ (8005318 <stdio_exit_handler+0xc>)
 800530e:	4903      	ldr	r1, [pc, #12]	@ (800531c <stdio_exit_handler+0x10>)
 8005310:	4803      	ldr	r0, [pc, #12]	@ (8005320 <stdio_exit_handler+0x14>)
 8005312:	f000 b869 	b.w	80053e8 <_fwalk_sglue>
 8005316:	bf00      	nop
 8005318:	2000000c 	.word	0x2000000c
 800531c:	08005a81 	.word	0x08005a81
 8005320:	2000001c 	.word	0x2000001c

08005324 <cleanup_stdio>:
 8005324:	6841      	ldr	r1, [r0, #4]
 8005326:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <cleanup_stdio+0x34>)
 8005328:	4299      	cmp	r1, r3
 800532a:	b510      	push	{r4, lr}
 800532c:	4604      	mov	r4, r0
 800532e:	d001      	beq.n	8005334 <cleanup_stdio+0x10>
 8005330:	f000 fba6 	bl	8005a80 <_fflush_r>
 8005334:	68a1      	ldr	r1, [r4, #8]
 8005336:	4b09      	ldr	r3, [pc, #36]	@ (800535c <cleanup_stdio+0x38>)
 8005338:	4299      	cmp	r1, r3
 800533a:	d002      	beq.n	8005342 <cleanup_stdio+0x1e>
 800533c:	4620      	mov	r0, r4
 800533e:	f000 fb9f 	bl	8005a80 <_fflush_r>
 8005342:	68e1      	ldr	r1, [r4, #12]
 8005344:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <cleanup_stdio+0x3c>)
 8005346:	4299      	cmp	r1, r3
 8005348:	d004      	beq.n	8005354 <cleanup_stdio+0x30>
 800534a:	4620      	mov	r0, r4
 800534c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005350:	f000 bb96 	b.w	8005a80 <_fflush_r>
 8005354:	bd10      	pop	{r4, pc}
 8005356:	bf00      	nop
 8005358:	200001dc 	.word	0x200001dc
 800535c:	20000244 	.word	0x20000244
 8005360:	200002ac 	.word	0x200002ac

08005364 <global_stdio_init.part.0>:
 8005364:	b510      	push	{r4, lr}
 8005366:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <global_stdio_init.part.0+0x30>)
 8005368:	4c0b      	ldr	r4, [pc, #44]	@ (8005398 <global_stdio_init.part.0+0x34>)
 800536a:	4a0c      	ldr	r2, [pc, #48]	@ (800539c <global_stdio_init.part.0+0x38>)
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	4620      	mov	r0, r4
 8005370:	2200      	movs	r2, #0
 8005372:	2104      	movs	r1, #4
 8005374:	f7ff ff94 	bl	80052a0 <std>
 8005378:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800537c:	2201      	movs	r2, #1
 800537e:	2109      	movs	r1, #9
 8005380:	f7ff ff8e 	bl	80052a0 <std>
 8005384:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005388:	2202      	movs	r2, #2
 800538a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538e:	2112      	movs	r1, #18
 8005390:	f7ff bf86 	b.w	80052a0 <std>
 8005394:	20000314 	.word	0x20000314
 8005398:	200001dc 	.word	0x200001dc
 800539c:	0800530d 	.word	0x0800530d

080053a0 <__sfp_lock_acquire>:
 80053a0:	4801      	ldr	r0, [pc, #4]	@ (80053a8 <__sfp_lock_acquire+0x8>)
 80053a2:	f000 b9ee 	b.w	8005782 <__retarget_lock_acquire_recursive>
 80053a6:	bf00      	nop
 80053a8:	2000031d 	.word	0x2000031d

080053ac <__sfp_lock_release>:
 80053ac:	4801      	ldr	r0, [pc, #4]	@ (80053b4 <__sfp_lock_release+0x8>)
 80053ae:	f000 b9e9 	b.w	8005784 <__retarget_lock_release_recursive>
 80053b2:	bf00      	nop
 80053b4:	2000031d 	.word	0x2000031d

080053b8 <__sinit>:
 80053b8:	b510      	push	{r4, lr}
 80053ba:	4604      	mov	r4, r0
 80053bc:	f7ff fff0 	bl	80053a0 <__sfp_lock_acquire>
 80053c0:	6a23      	ldr	r3, [r4, #32]
 80053c2:	b11b      	cbz	r3, 80053cc <__sinit+0x14>
 80053c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c8:	f7ff bff0 	b.w	80053ac <__sfp_lock_release>
 80053cc:	4b04      	ldr	r3, [pc, #16]	@ (80053e0 <__sinit+0x28>)
 80053ce:	6223      	str	r3, [r4, #32]
 80053d0:	4b04      	ldr	r3, [pc, #16]	@ (80053e4 <__sinit+0x2c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f5      	bne.n	80053c4 <__sinit+0xc>
 80053d8:	f7ff ffc4 	bl	8005364 <global_stdio_init.part.0>
 80053dc:	e7f2      	b.n	80053c4 <__sinit+0xc>
 80053de:	bf00      	nop
 80053e0:	08005325 	.word	0x08005325
 80053e4:	20000314 	.word	0x20000314

080053e8 <_fwalk_sglue>:
 80053e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053ec:	4607      	mov	r7, r0
 80053ee:	4688      	mov	r8, r1
 80053f0:	4614      	mov	r4, r2
 80053f2:	2600      	movs	r6, #0
 80053f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053f8:	f1b9 0901 	subs.w	r9, r9, #1
 80053fc:	d505      	bpl.n	800540a <_fwalk_sglue+0x22>
 80053fe:	6824      	ldr	r4, [r4, #0]
 8005400:	2c00      	cmp	r4, #0
 8005402:	d1f7      	bne.n	80053f4 <_fwalk_sglue+0xc>
 8005404:	4630      	mov	r0, r6
 8005406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800540a:	89ab      	ldrh	r3, [r5, #12]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d907      	bls.n	8005420 <_fwalk_sglue+0x38>
 8005410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005414:	3301      	adds	r3, #1
 8005416:	d003      	beq.n	8005420 <_fwalk_sglue+0x38>
 8005418:	4629      	mov	r1, r5
 800541a:	4638      	mov	r0, r7
 800541c:	47c0      	blx	r8
 800541e:	4306      	orrs	r6, r0
 8005420:	3568      	adds	r5, #104	@ 0x68
 8005422:	e7e9      	b.n	80053f8 <_fwalk_sglue+0x10>

08005424 <_puts_r>:
 8005424:	6a03      	ldr	r3, [r0, #32]
 8005426:	b570      	push	{r4, r5, r6, lr}
 8005428:	6884      	ldr	r4, [r0, #8]
 800542a:	4605      	mov	r5, r0
 800542c:	460e      	mov	r6, r1
 800542e:	b90b      	cbnz	r3, 8005434 <_puts_r+0x10>
 8005430:	f7ff ffc2 	bl	80053b8 <__sinit>
 8005434:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005436:	07db      	lsls	r3, r3, #31
 8005438:	d405      	bmi.n	8005446 <_puts_r+0x22>
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	0598      	lsls	r0, r3, #22
 800543e:	d402      	bmi.n	8005446 <_puts_r+0x22>
 8005440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005442:	f000 f99e 	bl	8005782 <__retarget_lock_acquire_recursive>
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	0719      	lsls	r1, r3, #28
 800544a:	d502      	bpl.n	8005452 <_puts_r+0x2e>
 800544c:	6923      	ldr	r3, [r4, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d135      	bne.n	80054be <_puts_r+0x9a>
 8005452:	4621      	mov	r1, r4
 8005454:	4628      	mov	r0, r5
 8005456:	f000 f8c5 	bl	80055e4 <__swsetup_r>
 800545a:	b380      	cbz	r0, 80054be <_puts_r+0x9a>
 800545c:	f04f 35ff 	mov.w	r5, #4294967295
 8005460:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005462:	07da      	lsls	r2, r3, #31
 8005464:	d405      	bmi.n	8005472 <_puts_r+0x4e>
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	059b      	lsls	r3, r3, #22
 800546a:	d402      	bmi.n	8005472 <_puts_r+0x4e>
 800546c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800546e:	f000 f989 	bl	8005784 <__retarget_lock_release_recursive>
 8005472:	4628      	mov	r0, r5
 8005474:	bd70      	pop	{r4, r5, r6, pc}
 8005476:	2b00      	cmp	r3, #0
 8005478:	da04      	bge.n	8005484 <_puts_r+0x60>
 800547a:	69a2      	ldr	r2, [r4, #24]
 800547c:	429a      	cmp	r2, r3
 800547e:	dc17      	bgt.n	80054b0 <_puts_r+0x8c>
 8005480:	290a      	cmp	r1, #10
 8005482:	d015      	beq.n	80054b0 <_puts_r+0x8c>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	6022      	str	r2, [r4, #0]
 800548a:	7019      	strb	r1, [r3, #0]
 800548c:	68a3      	ldr	r3, [r4, #8]
 800548e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005492:	3b01      	subs	r3, #1
 8005494:	60a3      	str	r3, [r4, #8]
 8005496:	2900      	cmp	r1, #0
 8005498:	d1ed      	bne.n	8005476 <_puts_r+0x52>
 800549a:	2b00      	cmp	r3, #0
 800549c:	da11      	bge.n	80054c2 <_puts_r+0x9e>
 800549e:	4622      	mov	r2, r4
 80054a0:	210a      	movs	r1, #10
 80054a2:	4628      	mov	r0, r5
 80054a4:	f000 f85f 	bl	8005566 <__swbuf_r>
 80054a8:	3001      	adds	r0, #1
 80054aa:	d0d7      	beq.n	800545c <_puts_r+0x38>
 80054ac:	250a      	movs	r5, #10
 80054ae:	e7d7      	b.n	8005460 <_puts_r+0x3c>
 80054b0:	4622      	mov	r2, r4
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 f857 	bl	8005566 <__swbuf_r>
 80054b8:	3001      	adds	r0, #1
 80054ba:	d1e7      	bne.n	800548c <_puts_r+0x68>
 80054bc:	e7ce      	b.n	800545c <_puts_r+0x38>
 80054be:	3e01      	subs	r6, #1
 80054c0:	e7e4      	b.n	800548c <_puts_r+0x68>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	6022      	str	r2, [r4, #0]
 80054c8:	220a      	movs	r2, #10
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	e7ee      	b.n	80054ac <_puts_r+0x88>
	...

080054d0 <puts>:
 80054d0:	4b02      	ldr	r3, [pc, #8]	@ (80054dc <puts+0xc>)
 80054d2:	4601      	mov	r1, r0
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	f7ff bfa5 	b.w	8005424 <_puts_r>
 80054da:	bf00      	nop
 80054dc:	20000018 	.word	0x20000018

080054e0 <__sread>:
 80054e0:	b510      	push	{r4, lr}
 80054e2:	460c      	mov	r4, r1
 80054e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e8:	f000 f8fc 	bl	80056e4 <_read_r>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	bfab      	itete	ge
 80054f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054f2:	89a3      	ldrhlt	r3, [r4, #12]
 80054f4:	181b      	addge	r3, r3, r0
 80054f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054fa:	bfac      	ite	ge
 80054fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054fe:	81a3      	strhlt	r3, [r4, #12]
 8005500:	bd10      	pop	{r4, pc}

08005502 <__swrite>:
 8005502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005506:	461f      	mov	r7, r3
 8005508:	898b      	ldrh	r3, [r1, #12]
 800550a:	05db      	lsls	r3, r3, #23
 800550c:	4605      	mov	r5, r0
 800550e:	460c      	mov	r4, r1
 8005510:	4616      	mov	r6, r2
 8005512:	d505      	bpl.n	8005520 <__swrite+0x1e>
 8005514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005518:	2302      	movs	r3, #2
 800551a:	2200      	movs	r2, #0
 800551c:	f000 f8d0 	bl	80056c0 <_lseek_r>
 8005520:	89a3      	ldrh	r3, [r4, #12]
 8005522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800552a:	81a3      	strh	r3, [r4, #12]
 800552c:	4632      	mov	r2, r6
 800552e:	463b      	mov	r3, r7
 8005530:	4628      	mov	r0, r5
 8005532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005536:	f000 b8e7 	b.w	8005708 <_write_r>

0800553a <__sseek>:
 800553a:	b510      	push	{r4, lr}
 800553c:	460c      	mov	r4, r1
 800553e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005542:	f000 f8bd 	bl	80056c0 <_lseek_r>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	bf15      	itete	ne
 800554c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800554e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005552:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005556:	81a3      	strheq	r3, [r4, #12]
 8005558:	bf18      	it	ne
 800555a:	81a3      	strhne	r3, [r4, #12]
 800555c:	bd10      	pop	{r4, pc}

0800555e <__sclose>:
 800555e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005562:	f000 b89d 	b.w	80056a0 <_close_r>

08005566 <__swbuf_r>:
 8005566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005568:	460e      	mov	r6, r1
 800556a:	4614      	mov	r4, r2
 800556c:	4605      	mov	r5, r0
 800556e:	b118      	cbz	r0, 8005578 <__swbuf_r+0x12>
 8005570:	6a03      	ldr	r3, [r0, #32]
 8005572:	b90b      	cbnz	r3, 8005578 <__swbuf_r+0x12>
 8005574:	f7ff ff20 	bl	80053b8 <__sinit>
 8005578:	69a3      	ldr	r3, [r4, #24]
 800557a:	60a3      	str	r3, [r4, #8]
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	071a      	lsls	r2, r3, #28
 8005580:	d501      	bpl.n	8005586 <__swbuf_r+0x20>
 8005582:	6923      	ldr	r3, [r4, #16]
 8005584:	b943      	cbnz	r3, 8005598 <__swbuf_r+0x32>
 8005586:	4621      	mov	r1, r4
 8005588:	4628      	mov	r0, r5
 800558a:	f000 f82b 	bl	80055e4 <__swsetup_r>
 800558e:	b118      	cbz	r0, 8005598 <__swbuf_r+0x32>
 8005590:	f04f 37ff 	mov.w	r7, #4294967295
 8005594:	4638      	mov	r0, r7
 8005596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	6922      	ldr	r2, [r4, #16]
 800559c:	1a98      	subs	r0, r3, r2
 800559e:	6963      	ldr	r3, [r4, #20]
 80055a0:	b2f6      	uxtb	r6, r6
 80055a2:	4283      	cmp	r3, r0
 80055a4:	4637      	mov	r7, r6
 80055a6:	dc05      	bgt.n	80055b4 <__swbuf_r+0x4e>
 80055a8:	4621      	mov	r1, r4
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 fa68 	bl	8005a80 <_fflush_r>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d1ed      	bne.n	8005590 <__swbuf_r+0x2a>
 80055b4:	68a3      	ldr	r3, [r4, #8]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	60a3      	str	r3, [r4, #8]
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	6022      	str	r2, [r4, #0]
 80055c0:	701e      	strb	r6, [r3, #0]
 80055c2:	6962      	ldr	r2, [r4, #20]
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d004      	beq.n	80055d4 <__swbuf_r+0x6e>
 80055ca:	89a3      	ldrh	r3, [r4, #12]
 80055cc:	07db      	lsls	r3, r3, #31
 80055ce:	d5e1      	bpl.n	8005594 <__swbuf_r+0x2e>
 80055d0:	2e0a      	cmp	r6, #10
 80055d2:	d1df      	bne.n	8005594 <__swbuf_r+0x2e>
 80055d4:	4621      	mov	r1, r4
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 fa52 	bl	8005a80 <_fflush_r>
 80055dc:	2800      	cmp	r0, #0
 80055de:	d0d9      	beq.n	8005594 <__swbuf_r+0x2e>
 80055e0:	e7d6      	b.n	8005590 <__swbuf_r+0x2a>
	...

080055e4 <__swsetup_r>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	4b29      	ldr	r3, [pc, #164]	@ (800568c <__swsetup_r+0xa8>)
 80055e8:	4605      	mov	r5, r0
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	460c      	mov	r4, r1
 80055ee:	b118      	cbz	r0, 80055f8 <__swsetup_r+0x14>
 80055f0:	6a03      	ldr	r3, [r0, #32]
 80055f2:	b90b      	cbnz	r3, 80055f8 <__swsetup_r+0x14>
 80055f4:	f7ff fee0 	bl	80053b8 <__sinit>
 80055f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055fc:	0719      	lsls	r1, r3, #28
 80055fe:	d422      	bmi.n	8005646 <__swsetup_r+0x62>
 8005600:	06da      	lsls	r2, r3, #27
 8005602:	d407      	bmi.n	8005614 <__swsetup_r+0x30>
 8005604:	2209      	movs	r2, #9
 8005606:	602a      	str	r2, [r5, #0]
 8005608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800560c:	81a3      	strh	r3, [r4, #12]
 800560e:	f04f 30ff 	mov.w	r0, #4294967295
 8005612:	e033      	b.n	800567c <__swsetup_r+0x98>
 8005614:	0758      	lsls	r0, r3, #29
 8005616:	d512      	bpl.n	800563e <__swsetup_r+0x5a>
 8005618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800561a:	b141      	cbz	r1, 800562e <__swsetup_r+0x4a>
 800561c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005620:	4299      	cmp	r1, r3
 8005622:	d002      	beq.n	800562a <__swsetup_r+0x46>
 8005624:	4628      	mov	r0, r5
 8005626:	f000 f8af 	bl	8005788 <_free_r>
 800562a:	2300      	movs	r3, #0
 800562c:	6363      	str	r3, [r4, #52]	@ 0x34
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	2300      	movs	r3, #0
 8005638:	6063      	str	r3, [r4, #4]
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	f043 0308 	orr.w	r3, r3, #8
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	b94b      	cbnz	r3, 800565e <__swsetup_r+0x7a>
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005654:	d003      	beq.n	800565e <__swsetup_r+0x7a>
 8005656:	4621      	mov	r1, r4
 8005658:	4628      	mov	r0, r5
 800565a:	f000 fa5f 	bl	8005b1c <__smakebuf_r>
 800565e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005662:	f013 0201 	ands.w	r2, r3, #1
 8005666:	d00a      	beq.n	800567e <__swsetup_r+0x9a>
 8005668:	2200      	movs	r2, #0
 800566a:	60a2      	str	r2, [r4, #8]
 800566c:	6962      	ldr	r2, [r4, #20]
 800566e:	4252      	negs	r2, r2
 8005670:	61a2      	str	r2, [r4, #24]
 8005672:	6922      	ldr	r2, [r4, #16]
 8005674:	b942      	cbnz	r2, 8005688 <__swsetup_r+0xa4>
 8005676:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800567a:	d1c5      	bne.n	8005608 <__swsetup_r+0x24>
 800567c:	bd38      	pop	{r3, r4, r5, pc}
 800567e:	0799      	lsls	r1, r3, #30
 8005680:	bf58      	it	pl
 8005682:	6962      	ldrpl	r2, [r4, #20]
 8005684:	60a2      	str	r2, [r4, #8]
 8005686:	e7f4      	b.n	8005672 <__swsetup_r+0x8e>
 8005688:	2000      	movs	r0, #0
 800568a:	e7f7      	b.n	800567c <__swsetup_r+0x98>
 800568c:	20000018 	.word	0x20000018

08005690 <memset>:
 8005690:	4402      	add	r2, r0
 8005692:	4603      	mov	r3, r0
 8005694:	4293      	cmp	r3, r2
 8005696:	d100      	bne.n	800569a <memset+0xa>
 8005698:	4770      	bx	lr
 800569a:	f803 1b01 	strb.w	r1, [r3], #1
 800569e:	e7f9      	b.n	8005694 <memset+0x4>

080056a0 <_close_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	4d06      	ldr	r5, [pc, #24]	@ (80056bc <_close_r+0x1c>)
 80056a4:	2300      	movs	r3, #0
 80056a6:	4604      	mov	r4, r0
 80056a8:	4608      	mov	r0, r1
 80056aa:	602b      	str	r3, [r5, #0]
 80056ac:	f7fc f9a3 	bl	80019f6 <_close>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	d102      	bne.n	80056ba <_close_r+0x1a>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b103      	cbz	r3, 80056ba <_close_r+0x1a>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	20000318 	.word	0x20000318

080056c0 <_lseek_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d07      	ldr	r5, [pc, #28]	@ (80056e0 <_lseek_r+0x20>)
 80056c4:	4604      	mov	r4, r0
 80056c6:	4608      	mov	r0, r1
 80056c8:	4611      	mov	r1, r2
 80056ca:	2200      	movs	r2, #0
 80056cc:	602a      	str	r2, [r5, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f7fc f9b8 	bl	8001a44 <_lseek>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d102      	bne.n	80056de <_lseek_r+0x1e>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	b103      	cbz	r3, 80056de <_lseek_r+0x1e>
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	bd38      	pop	{r3, r4, r5, pc}
 80056e0:	20000318 	.word	0x20000318

080056e4 <_read_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4d07      	ldr	r5, [pc, #28]	@ (8005704 <_read_r+0x20>)
 80056e8:	4604      	mov	r4, r0
 80056ea:	4608      	mov	r0, r1
 80056ec:	4611      	mov	r1, r2
 80056ee:	2200      	movs	r2, #0
 80056f0:	602a      	str	r2, [r5, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	f7fc f946 	bl	8001984 <_read>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_read_r+0x1e>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_read_r+0x1e>
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	20000318 	.word	0x20000318

08005708 <_write_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4d07      	ldr	r5, [pc, #28]	@ (8005728 <_write_r+0x20>)
 800570c:	4604      	mov	r4, r0
 800570e:	4608      	mov	r0, r1
 8005710:	4611      	mov	r1, r2
 8005712:	2200      	movs	r2, #0
 8005714:	602a      	str	r2, [r5, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	f7fc f951 	bl	80019be <_write>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d102      	bne.n	8005726 <_write_r+0x1e>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	b103      	cbz	r3, 8005726 <_write_r+0x1e>
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	20000318 	.word	0x20000318

0800572c <__errno>:
 800572c:	4b01      	ldr	r3, [pc, #4]	@ (8005734 <__errno+0x8>)
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000018 	.word	0x20000018

08005738 <__libc_init_array>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	4d0d      	ldr	r5, [pc, #52]	@ (8005770 <__libc_init_array+0x38>)
 800573c:	4c0d      	ldr	r4, [pc, #52]	@ (8005774 <__libc_init_array+0x3c>)
 800573e:	1b64      	subs	r4, r4, r5
 8005740:	10a4      	asrs	r4, r4, #2
 8005742:	2600      	movs	r6, #0
 8005744:	42a6      	cmp	r6, r4
 8005746:	d109      	bne.n	800575c <__libc_init_array+0x24>
 8005748:	4d0b      	ldr	r5, [pc, #44]	@ (8005778 <__libc_init_array+0x40>)
 800574a:	4c0c      	ldr	r4, [pc, #48]	@ (800577c <__libc_init_array+0x44>)
 800574c:	f000 fa54 	bl	8005bf8 <_init>
 8005750:	1b64      	subs	r4, r4, r5
 8005752:	10a4      	asrs	r4, r4, #2
 8005754:	2600      	movs	r6, #0
 8005756:	42a6      	cmp	r6, r4
 8005758:	d105      	bne.n	8005766 <__libc_init_array+0x2e>
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005760:	4798      	blx	r3
 8005762:	3601      	adds	r6, #1
 8005764:	e7ee      	b.n	8005744 <__libc_init_array+0xc>
 8005766:	f855 3b04 	ldr.w	r3, [r5], #4
 800576a:	4798      	blx	r3
 800576c:	3601      	adds	r6, #1
 800576e:	e7f2      	b.n	8005756 <__libc_init_array+0x1e>
 8005770:	08005c88 	.word	0x08005c88
 8005774:	08005c88 	.word	0x08005c88
 8005778:	08005c88 	.word	0x08005c88
 800577c:	08005c8c 	.word	0x08005c8c

08005780 <__retarget_lock_init_recursive>:
 8005780:	4770      	bx	lr

08005782 <__retarget_lock_acquire_recursive>:
 8005782:	4770      	bx	lr

08005784 <__retarget_lock_release_recursive>:
 8005784:	4770      	bx	lr
	...

08005788 <_free_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4605      	mov	r5, r0
 800578c:	2900      	cmp	r1, #0
 800578e:	d041      	beq.n	8005814 <_free_r+0x8c>
 8005790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005794:	1f0c      	subs	r4, r1, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	bfb8      	it	lt
 800579a:	18e4      	addlt	r4, r4, r3
 800579c:	f000 f8e0 	bl	8005960 <__malloc_lock>
 80057a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005818 <_free_r+0x90>)
 80057a2:	6813      	ldr	r3, [r2, #0]
 80057a4:	b933      	cbnz	r3, 80057b4 <_free_r+0x2c>
 80057a6:	6063      	str	r3, [r4, #4]
 80057a8:	6014      	str	r4, [r2, #0]
 80057aa:	4628      	mov	r0, r5
 80057ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057b0:	f000 b8dc 	b.w	800596c <__malloc_unlock>
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d908      	bls.n	80057ca <_free_r+0x42>
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	1821      	adds	r1, r4, r0
 80057bc:	428b      	cmp	r3, r1
 80057be:	bf01      	itttt	eq
 80057c0:	6819      	ldreq	r1, [r3, #0]
 80057c2:	685b      	ldreq	r3, [r3, #4]
 80057c4:	1809      	addeq	r1, r1, r0
 80057c6:	6021      	streq	r1, [r4, #0]
 80057c8:	e7ed      	b.n	80057a6 <_free_r+0x1e>
 80057ca:	461a      	mov	r2, r3
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	b10b      	cbz	r3, 80057d4 <_free_r+0x4c>
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	d9fa      	bls.n	80057ca <_free_r+0x42>
 80057d4:	6811      	ldr	r1, [r2, #0]
 80057d6:	1850      	adds	r0, r2, r1
 80057d8:	42a0      	cmp	r0, r4
 80057da:	d10b      	bne.n	80057f4 <_free_r+0x6c>
 80057dc:	6820      	ldr	r0, [r4, #0]
 80057de:	4401      	add	r1, r0
 80057e0:	1850      	adds	r0, r2, r1
 80057e2:	4283      	cmp	r3, r0
 80057e4:	6011      	str	r1, [r2, #0]
 80057e6:	d1e0      	bne.n	80057aa <_free_r+0x22>
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	6053      	str	r3, [r2, #4]
 80057ee:	4408      	add	r0, r1
 80057f0:	6010      	str	r0, [r2, #0]
 80057f2:	e7da      	b.n	80057aa <_free_r+0x22>
 80057f4:	d902      	bls.n	80057fc <_free_r+0x74>
 80057f6:	230c      	movs	r3, #12
 80057f8:	602b      	str	r3, [r5, #0]
 80057fa:	e7d6      	b.n	80057aa <_free_r+0x22>
 80057fc:	6820      	ldr	r0, [r4, #0]
 80057fe:	1821      	adds	r1, r4, r0
 8005800:	428b      	cmp	r3, r1
 8005802:	bf04      	itt	eq
 8005804:	6819      	ldreq	r1, [r3, #0]
 8005806:	685b      	ldreq	r3, [r3, #4]
 8005808:	6063      	str	r3, [r4, #4]
 800580a:	bf04      	itt	eq
 800580c:	1809      	addeq	r1, r1, r0
 800580e:	6021      	streq	r1, [r4, #0]
 8005810:	6054      	str	r4, [r2, #4]
 8005812:	e7ca      	b.n	80057aa <_free_r+0x22>
 8005814:	bd38      	pop	{r3, r4, r5, pc}
 8005816:	bf00      	nop
 8005818:	20000324 	.word	0x20000324

0800581c <sbrk_aligned>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4e0f      	ldr	r6, [pc, #60]	@ (800585c <sbrk_aligned+0x40>)
 8005820:	460c      	mov	r4, r1
 8005822:	6831      	ldr	r1, [r6, #0]
 8005824:	4605      	mov	r5, r0
 8005826:	b911      	cbnz	r1, 800582e <sbrk_aligned+0x12>
 8005828:	f000 f9d6 	bl	8005bd8 <_sbrk_r>
 800582c:	6030      	str	r0, [r6, #0]
 800582e:	4621      	mov	r1, r4
 8005830:	4628      	mov	r0, r5
 8005832:	f000 f9d1 	bl	8005bd8 <_sbrk_r>
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	d103      	bne.n	8005842 <sbrk_aligned+0x26>
 800583a:	f04f 34ff 	mov.w	r4, #4294967295
 800583e:	4620      	mov	r0, r4
 8005840:	bd70      	pop	{r4, r5, r6, pc}
 8005842:	1cc4      	adds	r4, r0, #3
 8005844:	f024 0403 	bic.w	r4, r4, #3
 8005848:	42a0      	cmp	r0, r4
 800584a:	d0f8      	beq.n	800583e <sbrk_aligned+0x22>
 800584c:	1a21      	subs	r1, r4, r0
 800584e:	4628      	mov	r0, r5
 8005850:	f000 f9c2 	bl	8005bd8 <_sbrk_r>
 8005854:	3001      	adds	r0, #1
 8005856:	d1f2      	bne.n	800583e <sbrk_aligned+0x22>
 8005858:	e7ef      	b.n	800583a <sbrk_aligned+0x1e>
 800585a:	bf00      	nop
 800585c:	20000320 	.word	0x20000320

08005860 <_malloc_r>:
 8005860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005864:	1ccd      	adds	r5, r1, #3
 8005866:	f025 0503 	bic.w	r5, r5, #3
 800586a:	3508      	adds	r5, #8
 800586c:	2d0c      	cmp	r5, #12
 800586e:	bf38      	it	cc
 8005870:	250c      	movcc	r5, #12
 8005872:	2d00      	cmp	r5, #0
 8005874:	4606      	mov	r6, r0
 8005876:	db01      	blt.n	800587c <_malloc_r+0x1c>
 8005878:	42a9      	cmp	r1, r5
 800587a:	d904      	bls.n	8005886 <_malloc_r+0x26>
 800587c:	230c      	movs	r3, #12
 800587e:	6033      	str	r3, [r6, #0]
 8005880:	2000      	movs	r0, #0
 8005882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800595c <_malloc_r+0xfc>
 800588a:	f000 f869 	bl	8005960 <__malloc_lock>
 800588e:	f8d8 3000 	ldr.w	r3, [r8]
 8005892:	461c      	mov	r4, r3
 8005894:	bb44      	cbnz	r4, 80058e8 <_malloc_r+0x88>
 8005896:	4629      	mov	r1, r5
 8005898:	4630      	mov	r0, r6
 800589a:	f7ff ffbf 	bl	800581c <sbrk_aligned>
 800589e:	1c43      	adds	r3, r0, #1
 80058a0:	4604      	mov	r4, r0
 80058a2:	d158      	bne.n	8005956 <_malloc_r+0xf6>
 80058a4:	f8d8 4000 	ldr.w	r4, [r8]
 80058a8:	4627      	mov	r7, r4
 80058aa:	2f00      	cmp	r7, #0
 80058ac:	d143      	bne.n	8005936 <_malloc_r+0xd6>
 80058ae:	2c00      	cmp	r4, #0
 80058b0:	d04b      	beq.n	800594a <_malloc_r+0xea>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	4639      	mov	r1, r7
 80058b6:	4630      	mov	r0, r6
 80058b8:	eb04 0903 	add.w	r9, r4, r3
 80058bc:	f000 f98c 	bl	8005bd8 <_sbrk_r>
 80058c0:	4581      	cmp	r9, r0
 80058c2:	d142      	bne.n	800594a <_malloc_r+0xea>
 80058c4:	6821      	ldr	r1, [r4, #0]
 80058c6:	1a6d      	subs	r5, r5, r1
 80058c8:	4629      	mov	r1, r5
 80058ca:	4630      	mov	r0, r6
 80058cc:	f7ff ffa6 	bl	800581c <sbrk_aligned>
 80058d0:	3001      	adds	r0, #1
 80058d2:	d03a      	beq.n	800594a <_malloc_r+0xea>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	442b      	add	r3, r5
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	f8d8 3000 	ldr.w	r3, [r8]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	bb62      	cbnz	r2, 800593c <_malloc_r+0xdc>
 80058e2:	f8c8 7000 	str.w	r7, [r8]
 80058e6:	e00f      	b.n	8005908 <_malloc_r+0xa8>
 80058e8:	6822      	ldr	r2, [r4, #0]
 80058ea:	1b52      	subs	r2, r2, r5
 80058ec:	d420      	bmi.n	8005930 <_malloc_r+0xd0>
 80058ee:	2a0b      	cmp	r2, #11
 80058f0:	d917      	bls.n	8005922 <_malloc_r+0xc2>
 80058f2:	1961      	adds	r1, r4, r5
 80058f4:	42a3      	cmp	r3, r4
 80058f6:	6025      	str	r5, [r4, #0]
 80058f8:	bf18      	it	ne
 80058fa:	6059      	strne	r1, [r3, #4]
 80058fc:	6863      	ldr	r3, [r4, #4]
 80058fe:	bf08      	it	eq
 8005900:	f8c8 1000 	streq.w	r1, [r8]
 8005904:	5162      	str	r2, [r4, r5]
 8005906:	604b      	str	r3, [r1, #4]
 8005908:	4630      	mov	r0, r6
 800590a:	f000 f82f 	bl	800596c <__malloc_unlock>
 800590e:	f104 000b 	add.w	r0, r4, #11
 8005912:	1d23      	adds	r3, r4, #4
 8005914:	f020 0007 	bic.w	r0, r0, #7
 8005918:	1ac2      	subs	r2, r0, r3
 800591a:	bf1c      	itt	ne
 800591c:	1a1b      	subne	r3, r3, r0
 800591e:	50a3      	strne	r3, [r4, r2]
 8005920:	e7af      	b.n	8005882 <_malloc_r+0x22>
 8005922:	6862      	ldr	r2, [r4, #4]
 8005924:	42a3      	cmp	r3, r4
 8005926:	bf0c      	ite	eq
 8005928:	f8c8 2000 	streq.w	r2, [r8]
 800592c:	605a      	strne	r2, [r3, #4]
 800592e:	e7eb      	b.n	8005908 <_malloc_r+0xa8>
 8005930:	4623      	mov	r3, r4
 8005932:	6864      	ldr	r4, [r4, #4]
 8005934:	e7ae      	b.n	8005894 <_malloc_r+0x34>
 8005936:	463c      	mov	r4, r7
 8005938:	687f      	ldr	r7, [r7, #4]
 800593a:	e7b6      	b.n	80058aa <_malloc_r+0x4a>
 800593c:	461a      	mov	r2, r3
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	42a3      	cmp	r3, r4
 8005942:	d1fb      	bne.n	800593c <_malloc_r+0xdc>
 8005944:	2300      	movs	r3, #0
 8005946:	6053      	str	r3, [r2, #4]
 8005948:	e7de      	b.n	8005908 <_malloc_r+0xa8>
 800594a:	230c      	movs	r3, #12
 800594c:	6033      	str	r3, [r6, #0]
 800594e:	4630      	mov	r0, r6
 8005950:	f000 f80c 	bl	800596c <__malloc_unlock>
 8005954:	e794      	b.n	8005880 <_malloc_r+0x20>
 8005956:	6005      	str	r5, [r0, #0]
 8005958:	e7d6      	b.n	8005908 <_malloc_r+0xa8>
 800595a:	bf00      	nop
 800595c:	20000324 	.word	0x20000324

08005960 <__malloc_lock>:
 8005960:	4801      	ldr	r0, [pc, #4]	@ (8005968 <__malloc_lock+0x8>)
 8005962:	f7ff bf0e 	b.w	8005782 <__retarget_lock_acquire_recursive>
 8005966:	bf00      	nop
 8005968:	2000031c 	.word	0x2000031c

0800596c <__malloc_unlock>:
 800596c:	4801      	ldr	r0, [pc, #4]	@ (8005974 <__malloc_unlock+0x8>)
 800596e:	f7ff bf09 	b.w	8005784 <__retarget_lock_release_recursive>
 8005972:	bf00      	nop
 8005974:	2000031c 	.word	0x2000031c

08005978 <__sflush_r>:
 8005978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800597c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005980:	0716      	lsls	r6, r2, #28
 8005982:	4605      	mov	r5, r0
 8005984:	460c      	mov	r4, r1
 8005986:	d454      	bmi.n	8005a32 <__sflush_r+0xba>
 8005988:	684b      	ldr	r3, [r1, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	dc02      	bgt.n	8005994 <__sflush_r+0x1c>
 800598e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	dd48      	ble.n	8005a26 <__sflush_r+0xae>
 8005994:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005996:	2e00      	cmp	r6, #0
 8005998:	d045      	beq.n	8005a26 <__sflush_r+0xae>
 800599a:	2300      	movs	r3, #0
 800599c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80059a0:	682f      	ldr	r7, [r5, #0]
 80059a2:	6a21      	ldr	r1, [r4, #32]
 80059a4:	602b      	str	r3, [r5, #0]
 80059a6:	d030      	beq.n	8005a0a <__sflush_r+0x92>
 80059a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	0759      	lsls	r1, r3, #29
 80059ae:	d505      	bpl.n	80059bc <__sflush_r+0x44>
 80059b0:	6863      	ldr	r3, [r4, #4]
 80059b2:	1ad2      	subs	r2, r2, r3
 80059b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059b6:	b10b      	cbz	r3, 80059bc <__sflush_r+0x44>
 80059b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059ba:	1ad2      	subs	r2, r2, r3
 80059bc:	2300      	movs	r3, #0
 80059be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059c0:	6a21      	ldr	r1, [r4, #32]
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b0      	blx	r6
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	d106      	bne.n	80059da <__sflush_r+0x62>
 80059cc:	6829      	ldr	r1, [r5, #0]
 80059ce:	291d      	cmp	r1, #29
 80059d0:	d82b      	bhi.n	8005a2a <__sflush_r+0xb2>
 80059d2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a7c <__sflush_r+0x104>)
 80059d4:	410a      	asrs	r2, r1
 80059d6:	07d6      	lsls	r6, r2, #31
 80059d8:	d427      	bmi.n	8005a2a <__sflush_r+0xb2>
 80059da:	2200      	movs	r2, #0
 80059dc:	6062      	str	r2, [r4, #4]
 80059de:	04d9      	lsls	r1, r3, #19
 80059e0:	6922      	ldr	r2, [r4, #16]
 80059e2:	6022      	str	r2, [r4, #0]
 80059e4:	d504      	bpl.n	80059f0 <__sflush_r+0x78>
 80059e6:	1c42      	adds	r2, r0, #1
 80059e8:	d101      	bne.n	80059ee <__sflush_r+0x76>
 80059ea:	682b      	ldr	r3, [r5, #0]
 80059ec:	b903      	cbnz	r3, 80059f0 <__sflush_r+0x78>
 80059ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80059f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059f2:	602f      	str	r7, [r5, #0]
 80059f4:	b1b9      	cbz	r1, 8005a26 <__sflush_r+0xae>
 80059f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059fa:	4299      	cmp	r1, r3
 80059fc:	d002      	beq.n	8005a04 <__sflush_r+0x8c>
 80059fe:	4628      	mov	r0, r5
 8005a00:	f7ff fec2 	bl	8005788 <_free_r>
 8005a04:	2300      	movs	r3, #0
 8005a06:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a08:	e00d      	b.n	8005a26 <__sflush_r+0xae>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b0      	blx	r6
 8005a10:	4602      	mov	r2, r0
 8005a12:	1c50      	adds	r0, r2, #1
 8005a14:	d1c9      	bne.n	80059aa <__sflush_r+0x32>
 8005a16:	682b      	ldr	r3, [r5, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0c6      	beq.n	80059aa <__sflush_r+0x32>
 8005a1c:	2b1d      	cmp	r3, #29
 8005a1e:	d001      	beq.n	8005a24 <__sflush_r+0xac>
 8005a20:	2b16      	cmp	r3, #22
 8005a22:	d11e      	bne.n	8005a62 <__sflush_r+0xea>
 8005a24:	602f      	str	r7, [r5, #0]
 8005a26:	2000      	movs	r0, #0
 8005a28:	e022      	b.n	8005a70 <__sflush_r+0xf8>
 8005a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a2e:	b21b      	sxth	r3, r3
 8005a30:	e01b      	b.n	8005a6a <__sflush_r+0xf2>
 8005a32:	690f      	ldr	r7, [r1, #16]
 8005a34:	2f00      	cmp	r7, #0
 8005a36:	d0f6      	beq.n	8005a26 <__sflush_r+0xae>
 8005a38:	0793      	lsls	r3, r2, #30
 8005a3a:	680e      	ldr	r6, [r1, #0]
 8005a3c:	bf08      	it	eq
 8005a3e:	694b      	ldreq	r3, [r1, #20]
 8005a40:	600f      	str	r7, [r1, #0]
 8005a42:	bf18      	it	ne
 8005a44:	2300      	movne	r3, #0
 8005a46:	eba6 0807 	sub.w	r8, r6, r7
 8005a4a:	608b      	str	r3, [r1, #8]
 8005a4c:	f1b8 0f00 	cmp.w	r8, #0
 8005a50:	dde9      	ble.n	8005a26 <__sflush_r+0xae>
 8005a52:	6a21      	ldr	r1, [r4, #32]
 8005a54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005a56:	4643      	mov	r3, r8
 8005a58:	463a      	mov	r2, r7
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b0      	blx	r6
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	dc08      	bgt.n	8005a74 <__sflush_r+0xfc>
 8005a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a6a:	81a3      	strh	r3, [r4, #12]
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a74:	4407      	add	r7, r0
 8005a76:	eba8 0800 	sub.w	r8, r8, r0
 8005a7a:	e7e7      	b.n	8005a4c <__sflush_r+0xd4>
 8005a7c:	dfbffffe 	.word	0xdfbffffe

08005a80 <_fflush_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	690b      	ldr	r3, [r1, #16]
 8005a84:	4605      	mov	r5, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	b913      	cbnz	r3, 8005a90 <_fflush_r+0x10>
 8005a8a:	2500      	movs	r5, #0
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	b118      	cbz	r0, 8005a9a <_fflush_r+0x1a>
 8005a92:	6a03      	ldr	r3, [r0, #32]
 8005a94:	b90b      	cbnz	r3, 8005a9a <_fflush_r+0x1a>
 8005a96:	f7ff fc8f 	bl	80053b8 <__sinit>
 8005a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f3      	beq.n	8005a8a <_fflush_r+0xa>
 8005aa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005aa4:	07d0      	lsls	r0, r2, #31
 8005aa6:	d404      	bmi.n	8005ab2 <_fflush_r+0x32>
 8005aa8:	0599      	lsls	r1, r3, #22
 8005aaa:	d402      	bmi.n	8005ab2 <_fflush_r+0x32>
 8005aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aae:	f7ff fe68 	bl	8005782 <__retarget_lock_acquire_recursive>
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	f7ff ff5f 	bl	8005978 <__sflush_r>
 8005aba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005abc:	07da      	lsls	r2, r3, #31
 8005abe:	4605      	mov	r5, r0
 8005ac0:	d4e4      	bmi.n	8005a8c <_fflush_r+0xc>
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	059b      	lsls	r3, r3, #22
 8005ac6:	d4e1      	bmi.n	8005a8c <_fflush_r+0xc>
 8005ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aca:	f7ff fe5b 	bl	8005784 <__retarget_lock_release_recursive>
 8005ace:	e7dd      	b.n	8005a8c <_fflush_r+0xc>

08005ad0 <__swhatbuf_r>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	b096      	sub	sp, #88	@ 0x58
 8005adc:	4615      	mov	r5, r2
 8005ade:	461e      	mov	r6, r3
 8005ae0:	da0d      	bge.n	8005afe <__swhatbuf_r+0x2e>
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ae8:	f04f 0100 	mov.w	r1, #0
 8005aec:	bf14      	ite	ne
 8005aee:	2340      	movne	r3, #64	@ 0x40
 8005af0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005af4:	2000      	movs	r0, #0
 8005af6:	6031      	str	r1, [r6, #0]
 8005af8:	602b      	str	r3, [r5, #0]
 8005afa:	b016      	add	sp, #88	@ 0x58
 8005afc:	bd70      	pop	{r4, r5, r6, pc}
 8005afe:	466a      	mov	r2, sp
 8005b00:	f000 f848 	bl	8005b94 <_fstat_r>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	dbec      	blt.n	8005ae2 <__swhatbuf_r+0x12>
 8005b08:	9901      	ldr	r1, [sp, #4]
 8005b0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b12:	4259      	negs	r1, r3
 8005b14:	4159      	adcs	r1, r3
 8005b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b1a:	e7eb      	b.n	8005af4 <__swhatbuf_r+0x24>

08005b1c <__smakebuf_r>:
 8005b1c:	898b      	ldrh	r3, [r1, #12]
 8005b1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b20:	079d      	lsls	r5, r3, #30
 8005b22:	4606      	mov	r6, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	d507      	bpl.n	8005b38 <__smakebuf_r+0x1c>
 8005b28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	6123      	str	r3, [r4, #16]
 8005b30:	2301      	movs	r3, #1
 8005b32:	6163      	str	r3, [r4, #20]
 8005b34:	b003      	add	sp, #12
 8005b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b38:	ab01      	add	r3, sp, #4
 8005b3a:	466a      	mov	r2, sp
 8005b3c:	f7ff ffc8 	bl	8005ad0 <__swhatbuf_r>
 8005b40:	9f00      	ldr	r7, [sp, #0]
 8005b42:	4605      	mov	r5, r0
 8005b44:	4639      	mov	r1, r7
 8005b46:	4630      	mov	r0, r6
 8005b48:	f7ff fe8a 	bl	8005860 <_malloc_r>
 8005b4c:	b948      	cbnz	r0, 8005b62 <__smakebuf_r+0x46>
 8005b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b52:	059a      	lsls	r2, r3, #22
 8005b54:	d4ee      	bmi.n	8005b34 <__smakebuf_r+0x18>
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	f043 0302 	orr.w	r3, r3, #2
 8005b5e:	81a3      	strh	r3, [r4, #12]
 8005b60:	e7e2      	b.n	8005b28 <__smakebuf_r+0xc>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	6020      	str	r0, [r4, #0]
 8005b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b6a:	81a3      	strh	r3, [r4, #12]
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b72:	b15b      	cbz	r3, 8005b8c <__smakebuf_r+0x70>
 8005b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f000 f81d 	bl	8005bb8 <_isatty_r>
 8005b7e:	b128      	cbz	r0, 8005b8c <__smakebuf_r+0x70>
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	f023 0303 	bic.w	r3, r3, #3
 8005b86:	f043 0301 	orr.w	r3, r3, #1
 8005b8a:	81a3      	strh	r3, [r4, #12]
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	431d      	orrs	r5, r3
 8005b90:	81a5      	strh	r5, [r4, #12]
 8005b92:	e7cf      	b.n	8005b34 <__smakebuf_r+0x18>

08005b94 <_fstat_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4d07      	ldr	r5, [pc, #28]	@ (8005bb4 <_fstat_r+0x20>)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	602b      	str	r3, [r5, #0]
 8005ba2:	f7fb ff34 	bl	8001a0e <_fstat>
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	d102      	bne.n	8005bb0 <_fstat_r+0x1c>
 8005baa:	682b      	ldr	r3, [r5, #0]
 8005bac:	b103      	cbz	r3, 8005bb0 <_fstat_r+0x1c>
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	bd38      	pop	{r3, r4, r5, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000318 	.word	0x20000318

08005bb8 <_isatty_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d06      	ldr	r5, [pc, #24]	@ (8005bd4 <_isatty_r+0x1c>)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	602b      	str	r3, [r5, #0]
 8005bc4:	f7fb ff33 	bl	8001a2e <_isatty>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_isatty_r+0x1a>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_isatty_r+0x1a>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	20000318 	.word	0x20000318

08005bd8 <_sbrk_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d06      	ldr	r5, [pc, #24]	@ (8005bf4 <_sbrk_r+0x1c>)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4604      	mov	r4, r0
 8005be0:	4608      	mov	r0, r1
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	f7fb ff3c 	bl	8001a60 <_sbrk>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_sbrk_r+0x1a>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_sbrk_r+0x1a>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	20000318 	.word	0x20000318

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
