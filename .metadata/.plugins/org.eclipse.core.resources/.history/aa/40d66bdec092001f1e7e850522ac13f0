/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdint.h>
#include "encoder.h"
#include "mpu6050.h"
#include "kalman_filter.h"
#include "nidec_h24.h"
#include "pid.h"
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
//encoder
encoder_t enc;
float rpm;

//IMU
extern Kalman filter;
float pitch, distance, distance_error, distance_setpoint, new_angle, pid_out;
mpu_data data;
HAL_StatusTypeDef status;

//controllers
PID_t pid;
float Kp = 9;
float Ki = 0.05;
float Kd = 0.4;

//control variables
float pwm;
float rpm_limit = 0.03;
float weight_balance = 5;

float set_point = 0;
float max_pid = 450;
float max_pwm = 95;

//kalman test
float KalmanAngleRoll = 0, KalmanUncertaintyAngleRoll = 2 * 2;
float KalmanAnglePitch = 0, KalmanUncertaintyAnglePitch = 2 * 2;
float Kalman1DOutput[] = { 0, 0 };
float angle_offset = -1;
float pitch_angle;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_TIM5_Init();
	MX_I2C1_Init();
	MX_TIM1_Init();
	MX_TIM2_Init();
	/* USER CODE BEGIN 2 */
	pid_init(&pid, Kp, Ki, Kd, -max_pid, max_pid);
	pid.pos_deadzone = 150;
	pid.neg_deadzone = -150;
	pid_set_setpoint(&pid, set_point);
	status = mpu6050_init();

	// Kalman filter
	Kalman_init(&filter);
	Kalman_setAngle(&filter, 0);

	nidec_h24_init();
	encoder_init(&enc, AB, &htim1, 100);
	HAL_TIM_Base_Start_IT(&htim2);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(1);
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 84;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	RCC_OscInitStruct.PLL.PLLR = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
		Error_Handler();
	}
}


//test kalman
void kalman_1d(float KalmanState, float KalmanUncertainty, float KalmanInput,
		float KalmanMeasurement) {
	KalmanState = KalmanState + 0.004 * KalmanInput;
	KalmanUncertainty = KalmanUncertainty + 0.004 * 0.004 * 4 * 4;
	float KalmanGain = KalmanUncertainty * 1 / (1 * KalmanUncertainty + 3 * 3);
	KalmanState = KalmanState + KalmanGain * (KalmanMeasurement - KalmanState);
	KalmanUncertainty = (1 - KalmanGain) * KalmanUncertainty;
	Kalman1DOutput[0] = KalmanState;
	Kalman1DOutput[1] = KalmanUncertainty;
}


/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM2) {
		data = mpu6050_data();
		new_angle = -atan(data.ax / sqrt(data.ay * data.ay + data.az * data.az))
				* 180 / M_PI;
		//KalmanAnglePitch = -Kalman_getAngle(&filter, new_angle, data.gy);
		kalman_1d(KalmanAnglePitch, KalmanUncertaintyAnglePitch, data.gy,
				new_angle);
		KalmanAnglePitch = Kalman1DOutput[0];
		KalmanUncertaintyAnglePitch = Kalman1DOutput[1];

		pitch_angle = KalmanAnglePitch - angle_offset;

		distance = -10 * pitch_angle;
		distance_error = distance_setpoint - distance;

		if (distance_error < distance_setpoint) {
			distance_setpoint -= weight_balance * 0.004;
		} else {
			distance_setpoint += weight_balance * 0.004;
		}

		rpm = fabs(encoder_get_pps(&enc));

		if (pid_out < 0) {
			if (rpm > 700) {
				distance_setpoint -= rpm_limit;
			}
		}

		if (pid_out > 0) {
			if (rpm > 700) {
				distance_setpoint += rpm_limit;
			}
		}

		pid_set_setpoint(&pid, distance_setpoint);

		if (KalmanAnglePitch < -30 || KalmanAnglePitch > 30) {
			distance_setpoint = 0;
			nidec_h24_Move(0, 0, 0);
			pid_reset(&pid);
		} else {
			pid_out = pid_compute_control_action(&pid, distance);
			nidec_h24_Move(pid_out, 450, 1);
		}
	}
}
/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
