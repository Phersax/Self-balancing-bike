
encoder_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dcc  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08004f94  08004f94  00005f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005374  08005374  00007020  2**0
                  CONTENTS
  4 .ARM          00000008  08005374  08005374  00006374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800537c  0800537c  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800537c  0800537c  0000637c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005380  08005380  00006380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08005384  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000020  080053a4  00007020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080053a4  000071a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8a5  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bd  00000000  00000000  000128f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  000149b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000881  00000000  00000000  000154d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002224d  00000000  00000000  00015d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e515  00000000  00000000  00037fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ced16  00000000  00000000  000464bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001151d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a0  00000000  00000000  00115214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  001182b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000020 	.word	0x20000020
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004f7c 	.word	0x08004f7c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000024 	.word	0x20000024
 8000204:	08004f7c 	.word	0x08004f7c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b96a 	b.w	8000ed0 <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9d08      	ldr	r5, [sp, #32]
 8000c1a:	460c      	mov	r4, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d14e      	bne.n	8000cbe <__udivmoddi4+0xaa>
 8000c20:	4694      	mov	ip, r2
 8000c22:	458c      	cmp	ip, r1
 8000c24:	4686      	mov	lr, r0
 8000c26:	fab2 f282 	clz	r2, r2
 8000c2a:	d962      	bls.n	8000cf2 <__udivmoddi4+0xde>
 8000c2c:	b14a      	cbz	r2, 8000c42 <__udivmoddi4+0x2e>
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	4091      	lsls	r1, r2
 8000c34:	fa20 f303 	lsr.w	r3, r0, r3
 8000c38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c46:	fa1f f68c 	uxth.w	r6, ip
 8000c4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c52:	fb07 1114 	mls	r1, r7, r4, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb04 f106 	mul.w	r1, r4, r6
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x64>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6a:	f080 8112 	bcs.w	8000e92 <__udivmoddi4+0x27e>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 810f 	bls.w	8000e92 <__udivmoddi4+0x27e>
 8000c74:	3c02      	subs	r4, #2
 8000c76:	4463      	add	r3, ip
 8000c78:	1a59      	subs	r1, r3, r1
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c82:	fb07 1110 	mls	r1, r7, r0, r1
 8000c86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8a:	fb00 f606 	mul.w	r6, r0, r6
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x94>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9a:	f080 80fc 	bcs.w	8000e96 <__udivmoddi4+0x282>
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	f240 80f9 	bls.w	8000e96 <__udivmoddi4+0x282>
 8000ca4:	4463      	add	r3, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	1b9b      	subs	r3, r3, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa6>
 8000cb2:	40d3      	lsrs	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xba>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb4>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa6>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x150>
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xcc>
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	f0c0 80f0 	bcc.w	8000ec0 <__udivmoddi4+0x2ac>
 8000ce0:	1a86      	subs	r6, r0, r2
 8000ce2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	2d00      	cmp	r5, #0
 8000cea:	d0e6      	beq.n	8000cba <__udivmoddi4+0xa6>
 8000cec:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf0:	e7e3      	b.n	8000cba <__udivmoddi4+0xa6>
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x204>
 8000cf8:	eba1 040c 	sub.w	r4, r1, ip
 8000cfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d00:	fa1f f78c 	uxth.w	r7, ip
 8000d04:	2101      	movs	r1, #1
 8000d06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb07 f006 	mul.w	r0, r7, r6
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x11c>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x11a>
 8000d28:	4298      	cmp	r0, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2b4>
 8000d2e:	4626      	mov	r6, r4
 8000d30:	1a1c      	subs	r4, r3, r0
 8000d32:	fa1f f38e 	uxth.w	r3, lr
 8000d36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d42:	fb00 f707 	mul.w	r7, r0, r7
 8000d46:	429f      	cmp	r7, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x148>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x146>
 8000d54:	429f      	cmp	r7, r3
 8000d56:	f200 80b0 	bhi.w	8000eba <__udivmoddi4+0x2a6>
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	1bdb      	subs	r3, r3, r7
 8000d5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x9c>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d74:	fa04 f301 	lsl.w	r3, r4, r1
 8000d78:	ea43 030c 	orr.w	r3, r3, ip
 8000d7c:	40f4      	lsrs	r4, r6
 8000d7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d82:	0c38      	lsrs	r0, r7, #16
 8000d84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d88:	fbb4 fef0 	udiv	lr, r4, r0
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	fb00 441e 	mls	r4, r0, lr, r4
 8000d94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d98:	fb0e f90c 	mul.w	r9, lr, ip
 8000d9c:	45a1      	cmp	r9, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x1a6>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000daa:	f080 8084 	bcs.w	8000eb6 <__udivmoddi4+0x2a2>
 8000dae:	45a1      	cmp	r9, r4
 8000db0:	f240 8081 	bls.w	8000eb6 <__udivmoddi4+0x2a2>
 8000db4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	eba4 0409 	sub.w	r4, r4, r9
 8000dbe:	fa1f f983 	uxth.w	r9, r3
 8000dc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x1d2>
 8000dd6:	193c      	adds	r4, r7, r4
 8000dd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ddc:	d267      	bcs.n	8000eae <__udivmoddi4+0x29a>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d965      	bls.n	8000eae <__udivmoddi4+0x29a>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dea:	fba0 9302 	umull	r9, r3, r0, r2
 8000dee:	eba4 040c 	sub.w	r4, r4, ip
 8000df2:	429c      	cmp	r4, r3
 8000df4:	46ce      	mov	lr, r9
 8000df6:	469c      	mov	ip, r3
 8000df8:	d351      	bcc.n	8000e9e <__udivmoddi4+0x28a>
 8000dfa:	d04e      	beq.n	8000e9a <__udivmoddi4+0x286>
 8000dfc:	b155      	cbz	r5, 8000e14 <__udivmoddi4+0x200>
 8000dfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000e02:	eb64 040c 	sbc.w	r4, r4, ip
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	40cb      	lsrs	r3, r1
 8000e0c:	431e      	orrs	r6, r3
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	e9c5 6400 	strd	r6, r4, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	e750      	b.n	8000cba <__udivmoddi4+0xa6>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa24 f303 	lsr.w	r3, r4, r3
 8000e28:	4094      	lsls	r4, r2
 8000e2a:	430c      	orrs	r4, r1
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e34:	fa1f f78c 	uxth.w	r7, ip
 8000e38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e40:	0c23      	lsrs	r3, r4, #16
 8000e42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e46:	fb00 f107 	mul.w	r1, r0, r7
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x24c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e56:	d22c      	bcs.n	8000eb2 <__udivmoddi4+0x29e>
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d92a      	bls.n	8000eb2 <__udivmoddi4+0x29e>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e68:	fb08 3311 	mls	r3, r8, r1, r3
 8000e6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e70:	fb01 f307 	mul.w	r3, r1, r7
 8000e74:	42a3      	cmp	r3, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x276>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e80:	d213      	bcs.n	8000eaa <__udivmoddi4+0x296>
 8000e82:	42a3      	cmp	r3, r4
 8000e84:	d911      	bls.n	8000eaa <__udivmoddi4+0x296>
 8000e86:	3902      	subs	r1, #2
 8000e88:	4464      	add	r4, ip
 8000e8a:	1ae4      	subs	r4, r4, r3
 8000e8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e90:	e739      	b.n	8000d06 <__udivmoddi4+0xf2>
 8000e92:	4604      	mov	r4, r0
 8000e94:	e6f0      	b.n	8000c78 <__udivmoddi4+0x64>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e706      	b.n	8000ca8 <__udivmoddi4+0x94>
 8000e9a:	45c8      	cmp	r8, r9
 8000e9c:	d2ae      	bcs.n	8000dfc <__udivmoddi4+0x1e8>
 8000e9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7a8      	b.n	8000dfc <__udivmoddi4+0x1e8>
 8000eaa:	4631      	mov	r1, r6
 8000eac:	e7ed      	b.n	8000e8a <__udivmoddi4+0x276>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	e799      	b.n	8000de6 <__udivmoddi4+0x1d2>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e7d4      	b.n	8000e60 <__udivmoddi4+0x24c>
 8000eb6:	46d6      	mov	lr, sl
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1a6>
 8000eba:	4463      	add	r3, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e74d      	b.n	8000d5c <__udivmoddi4+0x148>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e70f      	b.n	8000ce8 <__udivmoddi4+0xd4>
 8000ec8:	3e02      	subs	r6, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	e730      	b.n	8000d30 <__udivmoddi4+0x11c>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <encoder_init>:
uint32_t cur_cnt;
int32_t diff, cur_velocity;
float beta = 0.95;

HAL_StatusTypeDef encoder_init(encoder_t *e, channel ch,
		TIM_HandleTypeDef *htim, uint32_t ppr) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	ret = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	75fb      	strb	r3, [r7, #23]
	if (htim == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <encoder_init+0x1e>
		return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e02c      	b.n	8000f4c <encoder_init+0x78>

	e->tim = htim;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	@ 0x24
	ret = HAL_TIM_Encoder_Start(htim, ch);
 8000f00:	7afb      	ldrb	r3, [r7, #11]
 8000f02:	4619      	mov	r1, r3
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f002 fbf7 	bl	80036f8 <HAL_TIM_Encoder_Start>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <encoder_init+0x44>
		return ret;
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	e019      	b.n	8000f4c <encoder_init+0x78>

	if (ch == A || ch == B)
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <encoder_init+0x50>
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d103      	bne.n	8000f2c <encoder_init+0x58>
		e->resolution = 2;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2202      	movs	r2, #2
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	e002      	b.n	8000f32 <encoder_init+0x5e>
	else
		e->resolution = 4;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2204      	movs	r2, #4
 8000f30:	60da      	str	r2, [r3, #12]

	e->velocity_pps = 0.0;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
	e->last_count = htim->Instance->CNT;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
	e->ppr = ppr;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	811a      	strh	r2, [r3, #8]

	return ret;
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <__encoder_update>:

inline static void __encoder_update(encoder_t *e) {
 8000f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]

	cur_cnt = e->tim->Instance->CNT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6a:	4a63      	ldr	r2, [pc, #396]	@ (80010f8 <__encoder_update+0x1a0>)
 8000f6c:	6013      	str	r3, [r2, #0]

	//diff = cur_cnt - e->last_count;

	// Handle overflow and underflow
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(e->tim)) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	2b10      	cmp	r3, #16
 8000f7c:	d11c      	bne.n	8000fb8 <__encoder_update+0x60>
		if (cur_cnt < e->last_count) // underflow
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	4b5d      	ldr	r3, [pc, #372]	@ (80010f8 <__encoder_update+0x1a0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d908      	bls.n	8000f9c <__encoder_update+0x44>
			diff = e->last_count - cur_cnt;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	4b5a      	ldr	r3, [pc, #360]	@ (80010f8 <__encoder_update+0x1a0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b59      	ldr	r3, [pc, #356]	@ (80010fc <__encoder_update+0x1a4>)
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e029      	b.n	8000ff0 <__encoder_update+0x98>
		else
			diff = (e->tim->Instance->ARR - cur_cnt) + e->last_count;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fa4:	4b54      	ldr	r3, [pc, #336]	@ (80010f8 <__encoder_update+0x1a0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	1ad2      	subs	r2, r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b52      	ldr	r3, [pc, #328]	@ (80010fc <__encoder_update+0x1a4>)
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e01b      	b.n	8000ff0 <__encoder_update+0x98>
	} else {
		if (cur_cnt > e->last_count) // overflow
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	4b4e      	ldr	r3, [pc, #312]	@ (80010f8 <__encoder_update+0x1a0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d208      	bcs.n	8000fd6 <__encoder_update+0x7e>
			diff = e->last_count - cur_cnt;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	4b4b      	ldr	r3, [pc, #300]	@ (80010f8 <__encoder_update+0x1a0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80010fc <__encoder_update+0x1a4>)
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e00c      	b.n	8000ff0 <__encoder_update+0x98>
		else
			diff = (e->tim->Instance->ARR - e->last_count) + cur_cnt;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	1ad2      	subs	r2, r2, r3
 8000fe4:	4b44      	ldr	r3, [pc, #272]	@ (80010f8 <__encoder_update+0x1a0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b43      	ldr	r3, [pc, #268]	@ (80010fc <__encoder_update+0x1a4>)
 8000fee:	601a      	str	r2, [r3, #0]
	}

	//__HAL_TIM_GET_COUNTER()

	// velocity in pulses per second
	if (e->last_count == cur_cnt)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	4b40      	ldr	r3, [pc, #256]	@ (80010f8 <__encoder_update+0x1a0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d102      	bne.n	8001002 <__encoder_update+0xaa>
		diff = 0;
 8000ffc:	4b3f      	ldr	r3, [pc, #252]	@ (80010fc <__encoder_update+0x1a4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]

	cur_velocity = (float) diff / DT / (float) e->resolution;
 8001002:	4b3e      	ldr	r3, [pc, #248]	@ (80010fc <__encoder_update+0x1a4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100e:	ee17 0a90 	vmov	r0, s15
 8001012:	f7ff fa5d 	bl	80004d0 <__aeabi_f2d>
 8001016:	a336      	add	r3, pc, #216	@ (adr r3, 80010f0 <__encoder_update+0x198>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff fbda 	bl	80007d4 <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4614      	mov	r4, r2
 8001026:	461d      	mov	r5, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001034:	ee17 0a90 	vmov	r0, s15
 8001038:	f7ff fa4a 	bl	80004d0 <__aeabi_f2d>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4620      	mov	r0, r4
 8001042:	4629      	mov	r1, r5
 8001044:	f7ff fbc6 	bl	80007d4 <__aeabi_ddiv>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fd30 	bl	8000ab4 <__aeabi_d2iz>
 8001054:	4603      	mov	r3, r0
 8001056:	4a2a      	ldr	r2, [pc, #168]	@ (8001100 <__encoder_update+0x1a8>)
 8001058:	6013      	str	r3, [r2, #0]

	// Filtering velocity
	e->velocity_pps = beta * e->velocity_pps + (1.0 - beta) * cur_velocity;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001066:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <__encoder_update+0x1ac>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001070:	ee17 0a90 	vmov	r0, s15
 8001074:	f7ff fa2c 	bl	80004d0 <__aeabi_f2d>
 8001078:	4604      	mov	r4, r0
 800107a:	460d      	mov	r5, r1
 800107c:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <__encoder_update+0x1ac>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa25 	bl	80004d0 <__aeabi_f2d>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	491e      	ldr	r1, [pc, #120]	@ (8001108 <__encoder_update+0x1b0>)
 8001090:	f7ff f8be 	bl	8000210 <__aeabi_dsub>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4690      	mov	r8, r2
 800109a:	4699      	mov	r9, r3
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <__encoder_update+0x1a8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fa03 	bl	80004ac <__aeabi_i2d>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4640      	mov	r0, r8
 80010ac:	4649      	mov	r1, r9
 80010ae:	f7ff fa67 	bl	8000580 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff f8ab 	bl	8000214 <__adddf3>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fcf5 	bl	8000ab4 <__aeabi_d2iz>
 80010ca:	4602      	mov	r2, r0
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]
	//e->velocity_pps = cur_velocity;

	e->tim->Instance->CNT = 0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
	e->last_count = 0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010ea:	bf00      	nop
 80010ec:	f3af 8000 	nop.w
 80010f0:	47ae147b 	.word	0x47ae147b
 80010f4:	3f747ae1 	.word	0x3f747ae1
 80010f8:	2000003c 	.word	0x2000003c
 80010fc:	20000040 	.word	0x20000040
 8001100:	20000044 	.word	0x20000044
 8001104:	20000000 	.word	0x20000000
 8001108:	3ff00000 	.word	0x3ff00000

0800110c <encoder_get_velocity_rps>:

float encoder_get_velocity_rps(encoder_t *e) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	__encoder_update(e);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff1f 	bl	8000f58 <__encoder_update>
	return e->velocity_pps / (float) e->ppr;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	891b      	ldrh	r3, [r3, #8]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001132:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001136:	eef0 7a66 	vmov.f32	s15, s13
}
 800113a:	eeb0 0a67 	vmov.f32	s0, s15
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <encoder_get_velocity_rpm>:

float encoder_get_velocity_rpm(encoder_t *e) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	return encoder_get_velocity_rps(e) * 60.0;
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffdd 	bl	800110c <encoder_get_velocity_rps>
 8001152:	ee10 3a10 	vmov	r3, s0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9ba 	bl	80004d0 <__aeabi_f2d>
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <encoder_get_velocity_rpm+0x40>)
 8001162:	f7ff fa0d 	bl	8000580 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fce9 	bl	8000b44 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	ee07 3a90 	vmov	s15, r3
}
 8001178:	eeb0 0a67 	vmov.f32	s0, s15
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	404e0000 	.word	0x404e0000

08001188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001258 <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a25      	ldr	r2, [pc, #148]	@ (8001258 <MX_GPIO_Init+0xd0>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <MX_GPIO_Init+0xd0>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <MX_GPIO_Init+0xd0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <MX_GPIO_Init+0xd0>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <MX_GPIO_Init+0xd0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2120      	movs	r1, #32
 8001212:	4812      	ldr	r0, [pc, #72]	@ (800125c <MX_GPIO_Init+0xd4>)
 8001214:	f001 f9bc 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001218:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480c      	ldr	r0, [pc, #48]	@ (8001260 <MX_GPIO_Init+0xd8>)
 8001230:	f001 f81a 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001234:	2320      	movs	r3, #32
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_GPIO_Init+0xd4>)
 800124c:	f001 f80c 	bl	8002268 <HAL_GPIO_Init>

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	@ 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020800 	.word	0x40020800
 8001264:	00000000 	.word	0x00000000

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f000 fe54 	bl	8001f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 f8a8 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f7ff ff88 	bl	8001188 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001278:	f000 fc5a 	bl	8001b30 <MX_TIM1_Init>
  MX_TIM2_Init();
 800127c:	f000 fcb0 	bl	8001be0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001280:	f000 fcfc 	bl	8001c7c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  pid_init(&pid, Kp, Ki, Kd, -max_pwm, max_pwm);
 8001284:	4b40      	ldr	r3, [pc, #256]	@ (8001388 <main+0x120>)
 8001286:	ed93 7a00 	vldr	s14, [r3]
 800128a:	4b40      	ldr	r3, [pc, #256]	@ (800138c <main+0x124>)
 800128c:	edd3 6a00 	vldr	s13, [r3]
 8001290:	4b3f      	ldr	r3, [pc, #252]	@ (8001390 <main+0x128>)
 8001292:	ed93 6a00 	vldr	s12, [r3]
 8001296:	4b3f      	ldr	r3, [pc, #252]	@ (8001394 <main+0x12c>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	eef1 7a67 	vneg.f32	s15, s15
 80012a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001394 <main+0x12c>)
 80012a2:	edd3 5a00 	vldr	s11, [r3]
 80012a6:	eeb0 2a65 	vmov.f32	s4, s11
 80012aa:	eef0 1a67 	vmov.f32	s3, s15
 80012ae:	eeb0 1a46 	vmov.f32	s2, s12
 80012b2:	eef0 0a66 	vmov.f32	s1, s13
 80012b6:	eeb0 0a47 	vmov.f32	s0, s14
 80012ba:	4837      	ldr	r0, [pc, #220]	@ (8001398 <main+0x130>)
 80012bc:	f000 fa1e 	bl	80016fc <pid_init>
  pid_set_setpoint(&pid, set_point);
 80012c0:	4b36      	ldr	r3, [pc, #216]	@ (800139c <main+0x134>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	4833      	ldr	r0, [pc, #204]	@ (8001398 <main+0x130>)
 80012cc:	f000 fa44 	bl	8001758 <pid_set_setpoint>
  nidec_h24_init();
 80012d0:	f000 f966 	bl	80015a0 <nidec_h24_init>
  encoder_init(&enc, AB, &htim1, 100);
 80012d4:	2364      	movs	r3, #100	@ 0x64
 80012d6:	4a32      	ldr	r2, [pc, #200]	@ (80013a0 <main+0x138>)
 80012d8:	213c      	movs	r1, #60	@ 0x3c
 80012da:	4832      	ldr	r0, [pc, #200]	@ (80013a4 <main+0x13c>)
 80012dc:	f7ff fdfa 	bl	8000ed4 <encoder_init>
  HAL_TIM_Base_Start_IT(&htim2);
 80012e0:	4831      	ldr	r0, [pc, #196]	@ (80013a8 <main+0x140>)
 80012e2:	f001 ffdb 	bl	800329c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // HAL_GetTick() returns the number of milliseconds since the program started
	  sigB++;
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <main+0x144>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012f4:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <main+0x144>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
	      if (sigB > 200)
 80012fa:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <main+0x144>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80013b0 <main+0x148>
 8001304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd02      	ble.n	8001314 <main+0xac>

	    	  sigB = -200;
 800130e:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <main+0x144>)
 8001310:	4a28      	ldr	r2, [pc, #160]	@ (80013b4 <main+0x14c>)
 8001312:	601a      	str	r2, [r3, #0]

	  sigA = 250*sinf(2*M_PI*HAL_GetTick()/1800.0);
 8001314:	f000 fe66 	bl	8001fe4 <HAL_GetTick>
 8001318:	4603      	mov	r3, r0
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f8b6 	bl	800048c <__aeabi_ui2d>
 8001320:	a317      	add	r3, pc, #92	@ (adr r3, 8001380 <main+0x118>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff f92b 	bl	8000580 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <main+0x150>)
 8001338:	f7ff fa4c 	bl	80007d4 <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fbfe 	bl	8000b44 <__aeabi_d2f>
 8001348:	4603      	mov	r3, r0
 800134a:	ee00 3a10 	vmov	s0, r3
 800134e:	f003 f8db 	bl	8004508 <sinf>
 8001352:	eef0 7a40 	vmov.f32	s15, s0
 8001356:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80013bc <main+0x154>
 800135a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <main+0x158>)
 8001360:	edc3 7a00 	vstr	s15, [r3]
	  pid_set_setpoint(&pid, sigA);
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <main+0x158>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	480a      	ldr	r0, [pc, #40]	@ (8001398 <main+0x130>)
 8001370:	f000 f9f2 	bl	8001758 <pid_set_setpoint>
	  HAL_Delay(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f000 fe41 	bl	8001ffc <HAL_Delay>
	  sigB++;
 800137a:	e7b4      	b.n	80012e6 <main+0x7e>
 800137c:	f3af 8000 	nop.w
 8001380:	54442d18 	.word	0x54442d18
 8001384:	401921fb 	.word	0x401921fb
 8001388:	2000000c 	.word	0x2000000c
 800138c:	2000009c 	.word	0x2000009c
 8001390:	200000a0 	.word	0x200000a0
 8001394:	20000008 	.word	0x20000008
 8001398:	20000060 	.word	0x20000060
 800139c:	20000098 	.word	0x20000098
 80013a0:	200000c4 	.word	0x200000c4
 80013a4:	2000004c 	.word	0x2000004c
 80013a8:	2000010c 	.word	0x2000010c
 80013ac:	200000a8 	.word	0x200000a8
 80013b0:	43480000 	.word	0x43480000
 80013b4:	c3480000 	.word	0xc3480000
 80013b8:	409c2000 	.word	0x409c2000
 80013bc:	437a0000 	.word	0x437a0000
 80013c0:	200000a4 	.word	0x200000a4

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	@ 0x50
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	2234      	movs	r2, #52	@ 0x34
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 f86c 	bl	80044b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <SystemClock_Config+0xd4>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	4a29      	ldr	r2, [pc, #164]	@ (8001498 <SystemClock_Config+0xd4>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f8:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <SystemClock_Config+0xd4>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001404:	2300      	movs	r3, #0
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	4b24      	ldr	r3, [pc, #144]	@ (800149c <SystemClock_Config+0xd8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001410:	4a22      	ldr	r2, [pc, #136]	@ (800149c <SystemClock_Config+0xd8>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <SystemClock_Config+0xd8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001424:	2302      	movs	r3, #2
 8001426:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001428:	2301      	movs	r3, #1
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142c:	2310      	movs	r3, #16
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001430:	2302      	movs	r3, #2
 8001432:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001434:	2300      	movs	r3, #0
 8001436:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001438:	2310      	movs	r3, #16
 800143a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800143c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001440:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001442:	2304      	movs	r3, #4
 8001444:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001446:	2302      	movs	r3, #2
 8001448:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4618      	mov	r0, r3
 8001454:	f001 fbcc 	bl	8002bf0 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800145e:	f000 f899 	bl	8001594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2302      	movs	r3, #2
 8001468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2102      	movs	r1, #2
 800147e:	4618      	mov	r0, r3
 8001480:	f001 f8a0 	bl	80025c4 <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800148a:	f000 f883 	bl	8001594 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	@ 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014b0:	d15e      	bne.n	8001570 <HAL_TIM_PeriodElapsedCallback+0xd0>
		rpm = encoder_get_velocity_rpm(&enc);
 80014b2:	4831      	ldr	r0, [pc, #196]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014b4:	f7ff fe46 	bl	8001144 <encoder_get_velocity_rpm>
 80014b8:	eef0 7a40 	vmov.f32	s15, s0
 80014bc:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014be:	edc3 7a00 	vstr	s15, [r3]
		pwm = pid_compute_control_action(&pid, rpm, NULL);
 80014c2:	4b2e      	ldr	r3, [pc, #184]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	2100      	movs	r1, #0
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	482c      	ldr	r0, [pc, #176]	@ (8001580 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80014d0:	f000 f952 	bl	8001778 <pid_compute_control_action>
 80014d4:	eef0 7a40 	vmov.f32	s15, s0
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80014da:	edc3 7a00 	vstr	s15, [r3]
		nidec_h24_Move(pwm, brk);
 80014de:	4b29      	ldr	r3, [pc, #164]	@ (8001584 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80014e0:	ed93 7a00 	vldr	s14, [r3]
 80014e4:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ee:	edc7 7a00 	vstr	s15, [r7]
 80014f2:	783b      	ldrb	r3, [r7, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	eeb0 0a47 	vmov.f32	s0, s14
 80014fc:	f000 f8a4 	bl	8001648 <nidec_h24_Move>
		if (fabs(rpm)- fabs(sigB) > err)
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	eef0 7ae7 	vabs.f32	s15, s15
 800150a:	ee17 0a90 	vmov	r0, s15
 800150e:	f7fe ffdf 	bl	80004d0 <__aeabi_f2d>
 8001512:	4604      	mov	r4, r0
 8001514:	460d      	mov	r5, r1
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	eef0 7ae7 	vabs.f32	s15, s15
 8001520:	ee17 0a90 	vmov	r0, s15
 8001524:	f7fe ffd4 	bl	80004d0 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4620      	mov	r0, r4
 800152e:	4629      	mov	r1, r5
 8001530:	f7fe fe6e 	bl	8000210 <__aeabi_dsub>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4614      	mov	r4, r2
 800153a:	461d      	mov	r5, r3
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ffc5 	bl	80004d0 <__aeabi_f2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4620      	mov	r0, r4
 800154c:	4629      	mov	r1, r5
 800154e:	f7ff faa7 	bl	8000aa0 <__aeabi_dcmpgt>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0xba>
		err = rpm-sigB;
	}
}
 8001558:	e00a      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0xd0>
		err = rpm-sigB;
 800155a:	4b08      	ldr	r3, [pc, #32]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800155c:	ed93 7a00 	vldr	s14, [r3]
 8001560:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800156c:	edc3 7a00 	vstr	s15, [r3]
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bdb0      	pop	{r4, r5, r7, pc}
 8001578:	2000004c 	.word	0x2000004c
 800157c:	20000048 	.word	0x20000048
 8001580:	20000060 	.word	0x20000060
 8001584:	20000004 	.word	0x20000004
 8001588:	20000010 	.word	0x20000010
 800158c:	200000a8 	.word	0x200000a8
 8001590:	200000ac 	.word	0x200000ac

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <Error_Handler+0x8>

080015a0 <nidec_h24_init>:

/*Default timer settings*/
extern  TIM_HandleTypeDef htim5;

/* To initialize the PWM and direction pins of the motor */
void nidec_h24_init(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};  // Declare the GPIO init struct
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <nidec_h24_init+0x98>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001638 <nidec_h24_init+0x98>)
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <nidec_h24_init+0x98>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : Direction_Pin */
	GPIO_InitStruct.Pin = DIRECTION_PIN;
 80015d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015da:	2302      	movs	r3, #2
 80015dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DIRECTION_PORT, &GPIO_InitStruct);
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4815      	ldr	r0, [pc, #84]	@ (800163c <nidec_h24_init+0x9c>)
 80015e8:	f000 fe3e 	bl	8002268 <HAL_GPIO_Init>

    /*Configure GPIO pin : Brake_Pin */
	GPIO_InitStruct.Pin = BRAKE_PIN;
 80015ec:	2310      	movs	r3, #16
 80015ee:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015f4:	2302      	movs	r3, #2
 80015f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(BRAKE_PORT, &GPIO_InitStruct);
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	480e      	ldr	r0, [pc, #56]	@ (800163c <nidec_h24_init+0x9c>)
 8001602:	f000 fe31 	bl	8002268 <HAL_GPIO_Init>

	// Set the direction pin to low initially
	HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800160c:	480b      	ldr	r0, [pc, #44]	@ (800163c <nidec_h24_init+0x9c>)
 800160e:	f000 ffbf 	bl	8002590 <HAL_GPIO_WritePin>
    
	// Set the brake pin to low initially
	HAL_GPIO_WritePin(BRAKE_PORT, BRAKE_PIN, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2110      	movs	r1, #16
 8001616:	4809      	ldr	r0, [pc, #36]	@ (800163c <nidec_h24_init+0x9c>)
 8001618:	f000 ffba 	bl	8002590 <HAL_GPIO_WritePin>

	// Start PWM on the specified timer and channel
	TIM5->CCR1 = 0;
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <nidec_h24_init+0xa0>)
 800161e:	2200      	movs	r2, #0
 8001620:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_Base_Start(&htim5);
 8001622:	4808      	ldr	r0, [pc, #32]	@ (8001644 <nidec_h24_init+0xa4>)
 8001624:	f001 fdd2 	bl	80031cc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim5, CHANNEL);
 8001628:	2100      	movs	r1, #0
 800162a:	4806      	ldr	r0, [pc, #24]	@ (8001644 <nidec_h24_init+0xa4>)
 800162c:	f001 fef6 	bl	800341c <HAL_TIM_PWM_Start>
}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400
 8001640:	40000c00 	.word	0x40000c00
 8001644:	20000154 	.word	0x20000154

08001648 <nidec_h24_Move>:

/* To make the motor turn based on the input */
void nidec_h24_Move(float dutyCycle, uint8_t brk){
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001652:	4603      	mov	r3, r0
 8001654:	70fb      	strb	r3, [r7, #3]
    // Calculate the compare value
    //uint32_t ccr = (uint16_t)(dutyCycle * (float)(htim5.Instance->ARR + 1))/100;

    // Set the PWM duty cycle
	TIM5->CCR1 = htim5.Instance->ARR*(1 - fabs(dutyCycle)/100);
 8001656:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <nidec_h24_Move+0xa0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff15 	bl	800048c <__aeabi_ui2d>
 8001662:	4604      	mov	r4, r0
 8001664:	460d      	mov	r5, r1
 8001666:	edd7 7a01 	vldr	s15, [r7, #4]
 800166a:	eef0 7ae7 	vabs.f32	s15, s15
 800166e:	ee17 0a90 	vmov	r0, s15
 8001672:	f7fe ff2d 	bl	80004d0 <__aeabi_f2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <nidec_h24_Move+0xa4>)
 800167c:	f7ff f8aa 	bl	80007d4 <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	f04f 0000 	mov.w	r0, #0
 8001688:	4919      	ldr	r1, [pc, #100]	@ (80016f0 <nidec_h24_Move+0xa8>)
 800168a:	f7fe fdc1 	bl	8000210 <__aeabi_dsub>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4620      	mov	r0, r4
 8001694:	4629      	mov	r1, r5
 8001696:	f7fe ff73 	bl	8000580 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4c15      	ldr	r4, [pc, #84]	@ (80016f4 <nidec_h24_Move+0xac>)
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa2e 	bl	8000b04 <__aeabi_d2uiz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	6363      	str	r3, [r4, #52]	@ 0x34

    if (dutyCycle > 0) {
 80016ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	dd06      	ble.n	80016c8 <nidec_h24_Move+0x80>
        // counter-clockwise
        HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016c0:	480d      	ldr	r0, [pc, #52]	@ (80016f8 <nidec_h24_Move+0xb0>)
 80016c2:	f000 ff65 	bl	8002590 <HAL_GPIO_WritePin>
 80016c6:	e005      	b.n	80016d4 <nidec_h24_Move+0x8c>
    }else{
        // clockwise
        HAL_GPIO_WritePin(DIRECTION_PORT, DIRECTION_PIN, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ce:	480a      	ldr	r0, [pc, #40]	@ (80016f8 <nidec_h24_Move+0xb0>)
 80016d0:	f000 ff5e 	bl	8002590 <HAL_GPIO_WritePin>
    }

    // brk -> 0: brakes
    HAL_GPIO_WritePin(BRAKE_PORT, BRAKE_PIN, brk);
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	461a      	mov	r2, r3
 80016d8:	2110      	movs	r1, #16
 80016da:	4807      	ldr	r0, [pc, #28]	@ (80016f8 <nidec_h24_Move+0xb0>)
 80016dc:	f000 ff58 	bl	8002590 <HAL_GPIO_WritePin>

    // Generate an update event to reload the value immediately
    //htim5.Instance->EGR = TIM_EGR_UG;
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bdb0      	pop	{r4, r5, r7, pc}
 80016e8:	20000154 	.word	0x20000154
 80016ec:	40590000 	.word	0x40590000
 80016f0:	3ff00000 	.word	0x3ff00000
 80016f4:	40000c00 	.word	0x40000c00
 80016f8:	40020400 	.word	0x40020400

080016fc <pid_init>:
static float pid_get_current_sampling_time(PID_t *p);

float p_action, i_action, d_action, error_debug;


void pid_init(PID_t *p, float k_p, float k_i, float k_d, float min_out, float max_out){
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6178      	str	r0, [r7, #20]
 8001704:	ed87 0a04 	vstr	s0, [r7, #16]
 8001708:	edc7 0a03 	vstr	s1, [r7, #12]
 800170c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001710:	edc7 1a01 	vstr	s3, [r7, #4]
 8001714:	ed87 2a00 	vstr	s4, [r7]
    p->k_p = k_p;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	611a      	str	r2, [r3, #16]
    p->k_i = k_i;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	615a      	str	r2, [r3, #20]
    p->k_d = k_d;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	619a      	str	r2, [r3, #24]
    p->integral_error = 0;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
    p->last_error = 0;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
    p->last_updated_ts = 0;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
    p->min_output = min_out;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	621a      	str	r2, [r3, #32]
    p->max_output = max_out;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	61da      	str	r2, [r3, #28]
}
 800174c:	bf00      	nop
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <pid_set_setpoint>:


void pid_set_setpoint(PID_t *p, float set_point){
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	ed87 0a00 	vstr	s0, [r7]
    p->set_point = set_point;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	605a      	str	r2, [r3, #4]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <pid_compute_control_action>:


float pid_compute_control_action(PID_t *p, float est_output, float *est_out_derivative){
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	@ 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	ed87 0a02 	vstr	s0, [r7, #8]
 8001784:	6079      	str	r1, [r7, #4]
    float delta_T;
    float error, integral_error;
    float u;
    static float last_u;
    float derivative;
    float alpha = 0.9;
 8001786:	4b87      	ldr	r3, [pc, #540]	@ (80019a4 <pid_compute_control_action+0x22c>)
 8001788:	623b      	str	r3, [r7, #32]
    float k_p = p->k_p;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	61fb      	str	r3, [r7, #28]

    error = pid_get_setpoint(p) - est_output;
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 f913 	bl	80019bc <pid_get_setpoint>
 8001796:	eeb0 7a40 	vmov.f32	s14, s0
 800179a:	edd7 7a02 	vldr	s15, [r7, #8]
 800179e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a2:	edc7 7a06 	vstr	s15, [r7, #24]

    delta_T = pid_get_current_sampling_time(p);
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f918 	bl	80019dc <pid_get_current_sampling_time>
 80017ac:	ed87 0a05 	vstr	s0, [r7, #20]

    if (p->k_d != 0.0){
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80017b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	d04a      	beq.n	8001856 <pid_compute_control_action+0xde>
        if (est_out_derivative == NULL){
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d127      	bne.n	8001816 <pid_compute_control_action+0x9e>
            derivative = (1 - alpha) * (error - p->last_error)/delta_T + alpha * p->d_term/(p->k_d * k_p);
 80017c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80017ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80017d8:	edd7 6a06 	vldr	s13, [r7, #24]
 80017dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017e0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80017f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80017f6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	edd3 6a06 	vldr	s13, [r3, #24]
 8001800:	edd7 7a07 	vldr	s15, [r7, #28]
 8001804:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001808:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800180c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001810:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001814:	e022      	b.n	800185c <pid_compute_control_action+0xe4>
        } else {
            derivative = (1 - alpha) * (*est_out_derivative) + alpha * p->d_term/(p->k_d * k_p);
 8001816:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800181a:	edd7 7a08 	vldr	s15, [r7, #32]
 800181e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001832:	edd7 7a08 	vldr	s15, [r7, #32]
 8001836:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001840:	edd7 7a07 	vldr	s15, [r7, #28]
 8001844:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001848:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001854:	e002      	b.n	800185c <pid_compute_control_action+0xe4>
        }
    } else {
        derivative = 0;
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (error > p->pos_deadzone || error < p->neg_deadzone){
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001862:	ed97 7a06 	vldr	s14, [r7, #24]
 8001866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	dc09      	bgt.n	8001884 <pid_compute_control_action+0x10c>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001876:	ed97 7a06 	vldr	s14, [r7, #24]
 800187a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	d50d      	bpl.n	80018a0 <pid_compute_control_action+0x128>
        integral_error = p->integral_error + delta_T * error;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	ed93 7a02 	vldr	s14, [r3, #8]
 800188a:	edd7 6a05 	vldr	s13, [r7, #20]
 800188e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800189e:	e002      	b.n	80018a6 <pid_compute_control_action+0x12e>
    } else {
        integral_error = p->integral_error;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    u = k_p * (error + p->k_i * integral_error + p->k_d * derivative);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	ed93 7a05 	vldr	s14, [r3, #20]
 80018ac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	edd3 6a06 	vldr	s13, [r3, #24]
 80018c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80018c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    p->p_term = k_p * error;
 80018da:	ed97 7a07 	vldr	s14, [r7, #28]
 80018de:	edd7 7a06 	vldr	s15, [r7, #24]
 80018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    p->i_term = k_p * p->k_i * integral_error;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	ed93 7a05 	vldr	s14, [r3, #20]
 80018f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018fa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    p->d_term = k_p * p->k_d * derivative;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	ed93 7a06 	vldr	s14, [r3, #24]
 800190e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001916:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800191a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    p_action = p->p_term;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001928:	4a1f      	ldr	r2, [pc, #124]	@ (80019a8 <pid_compute_control_action+0x230>)
 800192a:	6013      	str	r3, [r2, #0]
    i_action = p->i_term;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	4a1e      	ldr	r2, [pc, #120]	@ (80019ac <pid_compute_control_action+0x234>)
 8001932:	6013      	str	r3, [r2, #0]
    d_action = p->d_term;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001938:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <pid_compute_control_action+0x238>)
 800193a:	6013      	str	r3, [r2, #0]

    // reset wind-up
    if (u < p->min_output) {
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001942:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	d503      	bpl.n	8001958 <pid_compute_control_action+0x1e0>
	u = p->min_output;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001956:	e010      	b.n	800197a <pid_compute_control_action+0x202>
    } else if (u > p->max_output) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	edd3 7a07 	vldr	s15, [r3, #28]
 800195e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	dd03      	ble.n	8001974 <pid_compute_control_action+0x1fc>
	u = p->max_output;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001972:	e002      	b.n	800197a <pid_compute_control_action+0x202>
    } else {
	p->integral_error = integral_error;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001978:	609a      	str	r2, [r3, #8]
    }

    last_u = u;
 800197a:	4a0e      	ldr	r2, [pc, #56]	@ (80019b4 <pid_compute_control_action+0x23c>)
 800197c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197e:	6013      	str	r3, [r2, #0]

    p->last_error = error;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	60da      	str	r2, [r3, #12]
    error_debug = error;
 8001986:	4a0c      	ldr	r2, [pc, #48]	@ (80019b8 <pid_compute_control_action+0x240>)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	6013      	str	r3, [r2, #0]
    pid_update_ts(p);
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f84d 	bl	8001a2c <pid_update_ts>
    return u;
 8001992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001994:	ee07 3a90 	vmov	s15, r3
}
 8001998:	eeb0 0a67 	vmov.f32	s0, s15
 800199c:	3730      	adds	r7, #48	@ 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	3f666666 	.word	0x3f666666
 80019a8:	200000b0 	.word	0x200000b0
 80019ac:	200000b4 	.word	0x200000b4
 80019b0:	200000b8 	.word	0x200000b8
 80019b4:	200000c0 	.word	0x200000c0
 80019b8:	200000bc 	.word	0x200000bc

080019bc <pid_get_setpoint>:
float pid_get_error(PID_t *p){
	return p->last_error;
}


float pid_get_setpoint(PID_t *p){
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
    return p->set_point;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	ee07 3a90 	vmov	s15, r3
}
 80019cc:	eeb0 0a67 	vmov.f32	s0, s15
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <pid_get_current_sampling_time>:


static float pid_get_current_sampling_time(PID_t *p){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	return (float) (HAL_GetTick() - p->last_updated_ts)/1000.0;
 80019e4:	f000 fafe 	bl	8001fe4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f8:	ee17 0a90 	vmov	r0, s15
 80019fc:	f7fe fd68 	bl	80004d0 <__aeabi_f2d>
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <pid_get_current_sampling_time+0x4c>)
 8001a06:	f7fe fee5 	bl	80007d4 <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f897 	bl	8000b44 <__aeabi_d2f>
 8001a16:	4603      	mov	r3, r0
 8001a18:	ee07 3a90 	vmov	s15, r3
}
 8001a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	408f4000 	.word	0x408f4000

08001a2c <pid_update_ts>:


void pid_update_ts(PID_t *p){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	p->last_updated_ts = HAL_GetTick();
 8001a34:	f000 fad6 	bl	8001fe4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a0f      	ldr	r2, [pc, #60]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a86:	2007      	movs	r0, #7
 8001a88:	f000 fbac 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <NMI_Handler+0x4>

08001aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <MemManage_Handler+0x4>

08001ab0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <UsageFault_Handler+0x4>

08001ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aee:	f000 fa65 	bl	8001fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001afc:	4802      	ldr	r0, [pc, #8]	@ (8001b08 <TIM2_IRQHandler+0x10>)
 8001afe:	f001 fe89 	bl	8003814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000010c 	.word	0x2000010c

08001b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <SystemInit+0x20>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b16:	4a05      	ldr	r2, [pc, #20]	@ (8001b2c <SystemInit+0x20>)
 8001b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	@ 0x30
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	2224      	movs	r2, #36	@ 0x24
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fcb6 	bl	80044b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <MX_TIM1_Init+0xa8>)
 8001b4e:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <MX_TIM1_Init+0xac>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b52:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <MX_TIM1_Init+0xa8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <MX_TIM1_Init+0xa8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <MX_TIM1_Init+0xa8>)
 8001b60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <MX_TIM1_Init+0xa8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_TIM1_Init+0xa8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <MX_TIM1_Init+0xa8>)
 8001b74:	2280      	movs	r2, #128	@ 0x80
 8001b76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b80:	2301      	movs	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b90:	2301      	movs	r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001b98:	230f      	movs	r3, #15
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480d      	ldr	r0, [pc, #52]	@ (8001bd8 <MX_TIM1_Init+0xa8>)
 8001ba4:	f001 fd02 	bl	80035ac <HAL_TIM_Encoder_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001bae:	f7ff fcf1 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	@ (8001bd8 <MX_TIM1_Init+0xa8>)
 8001bc0:	f002 fbe6 	bl	8004390 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001bca:	f7ff fce3 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	3730      	adds	r7, #48	@ 0x30
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200000c4 	.word	0x200000c4
 8001bdc:	40010000 	.word	0x40010000

08001be0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <MX_TIM2_Init+0x94>)
 8001bfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <MX_TIM2_Init+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <MX_TIM2_Init+0x94>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 420000-1;
 8001c10:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <MX_TIM2_Init+0x94>)
 8001c12:	4a19      	ldr	r2, [pc, #100]	@ (8001c78 <MX_TIM2_Init+0x98>)
 8001c14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c16:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <MX_TIM2_Init+0x94>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c1c:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <MX_TIM2_Init+0x94>)
 8001c1e:	2280      	movs	r2, #128	@ 0x80
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c22:	4814      	ldr	r0, [pc, #80]	@ (8001c74 <MX_TIM2_Init+0x94>)
 8001c24:	f001 fa82 	bl	800312c <HAL_TIM_Base_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001c2e:	f7ff fcb1 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480d      	ldr	r0, [pc, #52]	@ (8001c74 <MX_TIM2_Init+0x94>)
 8001c40:	f001 ff9a 	bl	8003b78 <HAL_TIM_ConfigClockSource>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001c4a:	f7ff fca3 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c56:	463b      	mov	r3, r7
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <MX_TIM2_Init+0x94>)
 8001c5c:	f002 fb98 	bl	8004390 <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001c66:	f7ff fc95 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000010c 	.word	0x2000010c
 8001c78:	0006689f 	.word	0x0006689f

08001c7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	@ 0x28
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c82:	f107 0320 	add.w	r3, r7, #32
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c9e:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <MX_TIM5_Init+0xac>)
 8001ca0:	4a22      	ldr	r2, [pc, #136]	@ (8001d2c <MX_TIM5_Init+0xb0>)
 8001ca2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ca4:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <MX_TIM5_Init+0xac>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d28 <MX_TIM5_Init+0xac>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4199;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d28 <MX_TIM5_Init+0xac>)
 8001cb2:	f241 0267 	movw	r2, #4199	@ 0x1067
 8001cb6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <MX_TIM5_Init+0xac>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <MX_TIM5_Init+0xac>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001cc4:	4818      	ldr	r0, [pc, #96]	@ (8001d28 <MX_TIM5_Init+0xac>)
 8001cc6:	f001 fb59 	bl	800337c <HAL_TIM_PWM_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001cd0:	f7ff fc60 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4811      	ldr	r0, [pc, #68]	@ (8001d28 <MX_TIM5_Init+0xac>)
 8001ce4:	f002 fb54 	bl	8004390 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001cee:	f7ff fc51 	bl	8001594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf2:	2360      	movs	r3, #96	@ 0x60
 8001cf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	2200      	movs	r2, #0
 8001d06:	4619      	mov	r1, r3
 8001d08:	4807      	ldr	r0, [pc, #28]	@ (8001d28 <MX_TIM5_Init+0xac>)
 8001d0a:	f001 fe73 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001d14:	f7ff fc3e 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001d18:	4803      	ldr	r0, [pc, #12]	@ (8001d28 <MX_TIM5_Init+0xac>)
 8001d1a:	f000 f899 	bl	8001e50 <HAL_TIM_MspPostInit>

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	@ 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000154 	.word	0x20000154
 8001d2c:	40000c00 	.word	0x40000c00

08001d30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	@ (8001db4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12c      	bne.n	8001dac <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a10      	ldr	r2, [pc, #64]	@ (8001db8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x8c>)
 8001da8:	f000 fa5e 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	@ 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd0:	d115      	bne.n	8001dfe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <HAL_TIM_Base_MspInit+0x48>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4a0b      	ldr	r2, [pc, #44]	@ (8001e08 <HAL_TIM_Base_MspInit+0x48>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_TIM_Base_MspInit+0x48>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	201c      	movs	r0, #28
 8001df4:	f000 fa01 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001df8:	201c      	movs	r0, #28
 8001dfa:	f000 fa1a 	bl	8002232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800

08001e0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0b      	ldr	r2, [pc, #44]	@ (8001e48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10d      	bne.n	8001e3a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <HAL_TIM_PWM_MspInit+0x40>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <HAL_TIM_PWM_MspInit+0x40>)
 8001e28:	f043 0308 	orr.w	r3, r3, #8
 8001e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2e:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <HAL_TIM_PWM_MspInit+0x40>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40000c00 	.word	0x40000c00
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a12      	ldr	r2, [pc, #72]	@ (8001eb8 <HAL_TIM_MspPostInit+0x68>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d11d      	bne.n	8001eae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <HAL_TIM_MspPostInit+0x6c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a10      	ldr	r2, [pc, #64]	@ (8001ebc <HAL_TIM_MspPostInit+0x6c>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <HAL_TIM_MspPostInit+0x6c>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <HAL_TIM_MspPostInit+0x70>)
 8001eaa:	f000 f9dd 	bl	8002268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001eae:	bf00      	nop
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001efc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ec8:	f7ff fe20 	bl	8001b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ece:	490d      	ldr	r1, [pc, #52]	@ (8001f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f002 fae5 	bl	80044c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef6:	f7ff f9b7 	bl	8001268 <main>
  bx  lr    
 8001efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001f08:	08005384 	.word	0x08005384
  ldr r2, =_sbss
 8001f0c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001f10:	200001a0 	.word	0x200001a0

08001f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC_IRQHandler>
	...

08001f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <HAL_Init+0x40>)
 8001f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <HAL_Init+0x40>)
 8001f2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a07      	ldr	r2, [pc, #28]	@ (8001f58 <HAL_Init+0x40>)
 8001f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 f94f 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 f808 	bl	8001f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4c:	f7ff fd7c 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023c00 	.word	0x40023c00

08001f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <HAL_InitTick+0x54>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_InitTick+0x58>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f967 	bl	800224e <HAL_SYSTICK_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00e      	b.n	8001fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0f      	cmp	r3, #15
 8001f8e:	d80a      	bhi.n	8001fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f90:	2200      	movs	r2, #0
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f000 f92f 	bl	80021fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4a06      	ldr	r2, [pc, #24]	@ (8001fb8 <HAL_InitTick+0x5c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000014 	.word	0x20000014
 8001fb4:	2000001c 	.word	0x2000001c
 8001fb8:	20000018 	.word	0x20000018

08001fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_IncTick+0x20>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x24>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <HAL_IncTick+0x24>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	2000001c 	.word	0x2000001c
 8001fe0:	2000019c 	.word	0x2000019c

08001fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <HAL_GetTick+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	2000019c 	.word	0x2000019c

08001ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff ffee 	bl	8001fe4 <HAL_GetTick>
 8002008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d005      	beq.n	8002022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002016:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_Delay+0x44>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002022:	bf00      	nop
 8002024:	f7ff ffde 	bl	8001fe4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	429a      	cmp	r2, r3
 8002032:	d8f7      	bhi.n	8002024 <HAL_Delay+0x28>
  {
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000001c 	.word	0x2000001c

08002044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800206c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002076:	4a04      	ldr	r2, [pc, #16]	@ (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	60d3      	str	r3, [r2, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0307 	and.w	r3, r3, #7
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db0b      	blt.n	80020d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4907      	ldr	r1, [pc, #28]	@ (80020e0 <__NVIC_EnableIRQ+0x38>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	@ (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	@ (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	@ 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
         );
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	@ 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021b0:	d301      	bcc.n	80021b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00f      	b.n	80021d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <SysTick_Config+0x40>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021be:	210f      	movs	r1, #15
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f7ff ff8e 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <SysTick_Config+0x40>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ce:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <SysTick_Config+0x40>)
 80021d0:	2207      	movs	r2, #7
 80021d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	e000e010 	.word	0xe000e010

080021e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff29 	bl	8002044 <__NVIC_SetPriorityGrouping>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800220c:	f7ff ff3e 	bl	800208c <__NVIC_GetPriorityGrouping>
 8002210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	6978      	ldr	r0, [r7, #20]
 8002218:	f7ff ff8e 	bl	8002138 <NVIC_EncodePriority>
 800221c:	4602      	mov	r2, r0
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff5d 	bl	80020e4 <__NVIC_SetPriority>
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff31 	bl	80020a8 <__NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ffa2 	bl	80021a0 <SysTick_Config>
 800225c:	4603      	mov	r3, r0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	@ 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	e165      	b.n	8002550 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	429a      	cmp	r2, r3
 800229e:	f040 8154 	bne.w	800254a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d005      	beq.n	80022ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d130      	bne.n	800231c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 0201 	and.w	r2, r3, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b03      	cmp	r3, #3
 8002326:	d017      	beq.n	8002358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d123      	bne.n	80023ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	220f      	movs	r2, #15
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	69b9      	ldr	r1, [r7, #24]
 80023a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0203 	and.w	r2, r3, #3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80ae 	beq.w	800254a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002568 <HAL_GPIO_Init+0x300>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002568 <HAL_GPIO_Init+0x300>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002568 <HAL_GPIO_Init+0x300>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240a:	4a58      	ldr	r2, [pc, #352]	@ (800256c <HAL_GPIO_Init+0x304>)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	220f      	movs	r2, #15
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4f      	ldr	r2, [pc, #316]	@ (8002570 <HAL_GPIO_Init+0x308>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d025      	beq.n	8002482 <HAL_GPIO_Init+0x21a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4e      	ldr	r2, [pc, #312]	@ (8002574 <HAL_GPIO_Init+0x30c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01f      	beq.n	800247e <HAL_GPIO_Init+0x216>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4d      	ldr	r2, [pc, #308]	@ (8002578 <HAL_GPIO_Init+0x310>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d019      	beq.n	800247a <HAL_GPIO_Init+0x212>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4c      	ldr	r2, [pc, #304]	@ (800257c <HAL_GPIO_Init+0x314>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_GPIO_Init+0x20e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4b      	ldr	r2, [pc, #300]	@ (8002580 <HAL_GPIO_Init+0x318>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00d      	beq.n	8002472 <HAL_GPIO_Init+0x20a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4a      	ldr	r2, [pc, #296]	@ (8002584 <HAL_GPIO_Init+0x31c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <HAL_GPIO_Init+0x206>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a49      	ldr	r2, [pc, #292]	@ (8002588 <HAL_GPIO_Init+0x320>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_GPIO_Init+0x202>
 8002466:	2306      	movs	r3, #6
 8002468:	e00c      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 800246a:	2307      	movs	r3, #7
 800246c:	e00a      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 800246e:	2305      	movs	r3, #5
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 8002472:	2304      	movs	r3, #4
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 8002482:	2300      	movs	r3, #0
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002494:	4935      	ldr	r1, [pc, #212]	@ (800256c <HAL_GPIO_Init+0x304>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a2:	4b3a      	ldr	r3, [pc, #232]	@ (800258c <HAL_GPIO_Init+0x324>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c6:	4a31      	ldr	r2, [pc, #196]	@ (800258c <HAL_GPIO_Init+0x324>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024cc:	4b2f      	ldr	r3, [pc, #188]	@ (800258c <HAL_GPIO_Init+0x324>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f0:	4a26      	ldr	r2, [pc, #152]	@ (800258c <HAL_GPIO_Init+0x324>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024f6:	4b25      	ldr	r3, [pc, #148]	@ (800258c <HAL_GPIO_Init+0x324>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800251a:	4a1c      	ldr	r2, [pc, #112]	@ (800258c <HAL_GPIO_Init+0x324>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002520:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <HAL_GPIO_Init+0x324>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002544:	4a11      	ldr	r2, [pc, #68]	@ (800258c <HAL_GPIO_Init+0x324>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f67f ae96 	bls.w	8002284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	@ 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40013800 	.word	0x40013800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400
 8002578:	40020800 	.word	0x40020800
 800257c:	40020c00 	.word	0x40020c00
 8002580:	40021000 	.word	0x40021000
 8002584:	40021400 	.word	0x40021400
 8002588:	40021800 	.word	0x40021800
 800258c:	40013c00 	.word	0x40013c00

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0cc      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b68      	ldr	r3, [pc, #416]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d90c      	bls.n	8002600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b65      	ldr	r3, [pc, #404]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b63      	ldr	r3, [pc, #396]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b8      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002618:	4b59      	ldr	r3, [pc, #356]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a58      	ldr	r2, [pc, #352]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002622:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002630:	4b53      	ldr	r3, [pc, #332]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a52      	ldr	r2, [pc, #328]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800263a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b50      	ldr	r3, [pc, #320]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	494d      	ldr	r1, [pc, #308]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d044      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b47      	ldr	r3, [pc, #284]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d119      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e07f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d003      	beq.n	8002682 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267e:	2b03      	cmp	r3, #3
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b3f      	ldr	r3, [pc, #252]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	4b3b      	ldr	r3, [pc, #236]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e067      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	4b37      	ldr	r3, [pc, #220]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4934      	ldr	r1, [pc, #208]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b4:	f7ff fc96 	bl	8001fe4 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026bc:	f7ff fc92 	bl	8001fe4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e04f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 020c 	and.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1eb      	bne.n	80026bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b25      	ldr	r3, [pc, #148]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d20c      	bcs.n	800270c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b22      	ldr	r3, [pc, #136]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b20      	ldr	r3, [pc, #128]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e032      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002718:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4916      	ldr	r1, [pc, #88]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002736:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	490e      	ldr	r1, [pc, #56]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274a:	f000 f821 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 800274e:	4602      	mov	r2, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	490a      	ldr	r1, [pc, #40]	@ (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	5ccb      	ldrb	r3, [r1, r3]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a09      	ldr	r2, [pc, #36]	@ (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fbf6 	bl	8001f5c <HAL_InitTick>

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023c00 	.word	0x40023c00
 8002780:	40023800 	.word	0x40023800
 8002784:	08004f94 	.word	0x08004f94
 8002788:	20000014 	.word	0x20000014
 800278c:	20000018 	.word	0x20000018

08002790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002794:	b0ae      	sub	sp, #184	@ 0xb8
 8002796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b6:	4bcb      	ldr	r3, [pc, #812]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b0c      	cmp	r3, #12
 80027c0:	f200 8206 	bhi.w	8002bd0 <HAL_RCC_GetSysClockFreq+0x440>
 80027c4:	a201      	add	r2, pc, #4	@ (adr r2, 80027cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80027c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ca:	bf00      	nop
 80027cc:	08002801 	.word	0x08002801
 80027d0:	08002bd1 	.word	0x08002bd1
 80027d4:	08002bd1 	.word	0x08002bd1
 80027d8:	08002bd1 	.word	0x08002bd1
 80027dc:	08002809 	.word	0x08002809
 80027e0:	08002bd1 	.word	0x08002bd1
 80027e4:	08002bd1 	.word	0x08002bd1
 80027e8:	08002bd1 	.word	0x08002bd1
 80027ec:	08002811 	.word	0x08002811
 80027f0:	08002bd1 	.word	0x08002bd1
 80027f4:	08002bd1 	.word	0x08002bd1
 80027f8:	08002bd1 	.word	0x08002bd1
 80027fc:	08002a01 	.word	0x08002a01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002800:	4bb9      	ldr	r3, [pc, #740]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002802:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002806:	e1e7      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002808:	4bb8      	ldr	r3, [pc, #736]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x35c>)
 800280a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800280e:	e1e3      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002810:	4bb4      	ldr	r3, [pc, #720]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002818:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281c:	4bb1      	ldr	r3, [pc, #708]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d071      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002828:	4bae      	ldr	r3, [pc, #696]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	099b      	lsrs	r3, r3, #6
 800282e:	2200      	movs	r2, #0
 8002830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002834:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002838:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800283c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800284a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	0159      	lsls	r1, r3, #5
 800285c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002860:	0150      	lsls	r0, r2, #5
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4621      	mov	r1, r4
 8002868:	1a51      	subs	r1, r2, r1
 800286a:	6439      	str	r1, [r7, #64]	@ 0x40
 800286c:	4629      	mov	r1, r5
 800286e:	eb63 0301 	sbc.w	r3, r3, r1
 8002872:	647b      	str	r3, [r7, #68]	@ 0x44
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002880:	4649      	mov	r1, r9
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	4641      	mov	r1, r8
 8002886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288a:	4641      	mov	r1, r8
 800288c:	018a      	lsls	r2, r1, #6
 800288e:	4641      	mov	r1, r8
 8002890:	1a51      	subs	r1, r2, r1
 8002892:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002894:	4649      	mov	r1, r9
 8002896:	eb63 0301 	sbc.w	r3, r3, r1
 800289a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028a8:	4649      	mov	r1, r9
 80028aa:	00cb      	lsls	r3, r1, #3
 80028ac:	4641      	mov	r1, r8
 80028ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028b2:	4641      	mov	r1, r8
 80028b4:	00ca      	lsls	r2, r1, #3
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	4603      	mov	r3, r0
 80028bc:	4622      	mov	r2, r4
 80028be:	189b      	adds	r3, r3, r2
 80028c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c2:	462b      	mov	r3, r5
 80028c4:	460a      	mov	r2, r1
 80028c6:	eb42 0303 	adc.w	r3, r2, r3
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028d8:	4629      	mov	r1, r5
 80028da:	024b      	lsls	r3, r1, #9
 80028dc:	4621      	mov	r1, r4
 80028de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028e2:	4621      	mov	r1, r4
 80028e4:	024a      	lsls	r2, r1, #9
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028ee:	2200      	movs	r2, #0
 80028f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80028fc:	f7fe f972 	bl	8000be4 <__aeabi_uldivmod>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4613      	mov	r3, r2
 8002906:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800290a:	e067      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290c:	4b75      	ldr	r3, [pc, #468]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	2200      	movs	r2, #0
 8002914:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002918:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800291c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002924:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002926:	2300      	movs	r3, #0
 8002928:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800292a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800292e:	4622      	mov	r2, r4
 8002930:	462b      	mov	r3, r5
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	0159      	lsls	r1, r3, #5
 800293c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002940:	0150      	lsls	r0, r2, #5
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4621      	mov	r1, r4
 8002948:	1a51      	subs	r1, r2, r1
 800294a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800294c:	4629      	mov	r1, r5
 800294e:	eb63 0301 	sbc.w	r3, r3, r1
 8002952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002960:	4649      	mov	r1, r9
 8002962:	018b      	lsls	r3, r1, #6
 8002964:	4641      	mov	r1, r8
 8002966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800296a:	4641      	mov	r1, r8
 800296c:	018a      	lsls	r2, r1, #6
 800296e:	4641      	mov	r1, r8
 8002970:	ebb2 0a01 	subs.w	sl, r2, r1
 8002974:	4649      	mov	r1, r9
 8002976:	eb63 0b01 	sbc.w	fp, r3, r1
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002986:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800298a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800298e:	4692      	mov	sl, r2
 8002990:	469b      	mov	fp, r3
 8002992:	4623      	mov	r3, r4
 8002994:	eb1a 0303 	adds.w	r3, sl, r3
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	462b      	mov	r3, r5
 800299c:	eb4b 0303 	adc.w	r3, fp, r3
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029ae:	4629      	mov	r1, r5
 80029b0:	028b      	lsls	r3, r1, #10
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b8:	4621      	mov	r1, r4
 80029ba:	028a      	lsls	r2, r1, #10
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c4:	2200      	movs	r2, #0
 80029c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80029c8:	677a      	str	r2, [r7, #116]	@ 0x74
 80029ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029ce:	f7fe f909 	bl	8000be4 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4613      	mov	r3, r2
 80029d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029dc:	4b41      	ldr	r3, [pc, #260]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80029ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029fe:	e0eb      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a00:	4b38      	ldr	r3, [pc, #224]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d06b      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a18:	4b32      	ldr	r3, [pc, #200]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	2200      	movs	r2, #0
 8002a20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a34:	4622      	mov	r2, r4
 8002a36:	462b      	mov	r3, r5
 8002a38:	f04f 0000 	mov.w	r0, #0
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	0159      	lsls	r1, r3, #5
 8002a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a46:	0150      	lsls	r0, r2, #5
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	1a51      	subs	r1, r2, r1
 8002a50:	61b9      	str	r1, [r7, #24]
 8002a52:	4629      	mov	r1, r5
 8002a54:	eb63 0301 	sbc.w	r3, r3, r1
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a66:	4659      	mov	r1, fp
 8002a68:	018b      	lsls	r3, r1, #6
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a70:	4651      	mov	r1, sl
 8002a72:	018a      	lsls	r2, r1, #6
 8002a74:	4651      	mov	r1, sl
 8002a76:	ebb2 0801 	subs.w	r8, r2, r1
 8002a7a:	4659      	mov	r1, fp
 8002a7c:	eb63 0901 	sbc.w	r9, r3, r1
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a94:	4690      	mov	r8, r2
 8002a96:	4699      	mov	r9, r3
 8002a98:	4623      	mov	r3, r4
 8002a9a:	eb18 0303 	adds.w	r3, r8, r3
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	462b      	mov	r3, r5
 8002aa2:	eb49 0303 	adc.w	r3, r9, r3
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	024b      	lsls	r3, r1, #9
 8002ab8:	4621      	mov	r1, r4
 8002aba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002abe:	4621      	mov	r1, r4
 8002ac0:	024a      	lsls	r2, r1, #9
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002aca:	2200      	movs	r2, #0
 8002acc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ace:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ad0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ad4:	f7fe f886 	bl	8000be4 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae2:	e065      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x420>
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	00f42400 	.word	0x00f42400
 8002aec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af0:	4b3d      	ldr	r3, [pc, #244]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	2200      	movs	r2, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	4611      	mov	r1, r2
 8002afc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b00:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b02:	2300      	movs	r3, #0
 8002b04:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b06:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b0a:	4642      	mov	r2, r8
 8002b0c:	464b      	mov	r3, r9
 8002b0e:	f04f 0000 	mov.w	r0, #0
 8002b12:	f04f 0100 	mov.w	r1, #0
 8002b16:	0159      	lsls	r1, r3, #5
 8002b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b1c:	0150      	lsls	r0, r2, #5
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4641      	mov	r1, r8
 8002b24:	1a51      	subs	r1, r2, r1
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	4649      	mov	r1, r9
 8002b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b3c:	4659      	mov	r1, fp
 8002b3e:	018b      	lsls	r3, r1, #6
 8002b40:	4651      	mov	r1, sl
 8002b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b46:	4651      	mov	r1, sl
 8002b48:	018a      	lsls	r2, r1, #6
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	1a54      	subs	r4, r2, r1
 8002b4e:	4659      	mov	r1, fp
 8002b50:	eb63 0501 	sbc.w	r5, r3, r1
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	00eb      	lsls	r3, r5, #3
 8002b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b62:	00e2      	lsls	r2, r4, #3
 8002b64:	4614      	mov	r4, r2
 8002b66:	461d      	mov	r5, r3
 8002b68:	4643      	mov	r3, r8
 8002b6a:	18e3      	adds	r3, r4, r3
 8002b6c:	603b      	str	r3, [r7, #0]
 8002b6e:	464b      	mov	r3, r9
 8002b70:	eb45 0303 	adc.w	r3, r5, r3
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b82:	4629      	mov	r1, r5
 8002b84:	028b      	lsls	r3, r1, #10
 8002b86:	4621      	mov	r1, r4
 8002b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	028a      	lsls	r2, r1, #10
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b98:	2200      	movs	r2, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b9c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ba2:	f7fe f81f 	bl	8000be4 <__aeabi_uldivmod>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4613      	mov	r3, r2
 8002bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	0f1b      	lsrs	r3, r3, #28
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bce:	e003      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	37b8      	adds	r7, #184	@ 0xb8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	00f42400 	.word	0x00f42400

08002bf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e28d      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8083 	beq.w	8002d16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c10:	4b94      	ldr	r3, [pc, #592]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d019      	beq.n	8002c50 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c1c:	4b91      	ldr	r3, [pc, #580]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c28:	4b8e      	ldr	r3, [pc, #568]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c34:	d00c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c36:	4b8b      	ldr	r3, [pc, #556]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c3e:	2b0c      	cmp	r3, #12
 8002c40:	d112      	bne.n	8002c68 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c42:	4b88      	ldr	r3, [pc, #544]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c4e:	d10b      	bne.n	8002c68 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c50:	4b84      	ldr	r3, [pc, #528]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d05b      	beq.n	8002d14 <HAL_RCC_OscConfig+0x124>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d157      	bne.n	8002d14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e25a      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c70:	d106      	bne.n	8002c80 <HAL_RCC_OscConfig+0x90>
 8002c72:	4b7c      	ldr	r3, [pc, #496]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7b      	ldr	r2, [pc, #492]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e01d      	b.n	8002cbc <HAL_RCC_OscConfig+0xcc>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xb4>
 8002c8a:	4b76      	ldr	r3, [pc, #472]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a75      	ldr	r2, [pc, #468]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b73      	ldr	r3, [pc, #460]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a72      	ldr	r2, [pc, #456]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0xcc>
 8002ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6e      	ldr	r2, [pc, #440]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6b      	ldr	r2, [pc, #428]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7ff f98e 	bl	8001fe4 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7ff f98a 	bl	8001fe4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	@ 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e21f      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b61      	ldr	r3, [pc, #388]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0xdc>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7ff f97a 	bl	8001fe4 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7ff f976 	bl	8001fe4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	@ 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e20b      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	4b57      	ldr	r3, [pc, #348]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x104>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d06f      	beq.n	8002e02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d22:	4b50      	ldr	r3, [pc, #320]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d017      	beq.n	8002d5e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b47      	ldr	r3, [pc, #284]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d11c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d52:	4b44      	ldr	r3, [pc, #272]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	4b41      	ldr	r3, [pc, #260]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_RCC_OscConfig+0x186>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e1d3      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4b3b      	ldr	r3, [pc, #236]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4937      	ldr	r1, [pc, #220]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	e03a      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d94:	4b34      	ldr	r3, [pc, #208]	@ (8002e68 <HAL_RCC_OscConfig+0x278>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7ff f923 	bl	8001fe4 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da2:	f7ff f91f 	bl	8001fe4 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1b4      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b28      	ldr	r3, [pc, #160]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4925      	ldr	r1, [pc, #148]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e015      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd6:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <HAL_RCC_OscConfig+0x278>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7ff f902 	bl	8001fe4 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de4:	f7ff f8fe 	bl	8001fe4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e193      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d036      	beq.n	8002e7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <HAL_RCC_OscConfig+0x27c>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7ff f8e2 	bl	8001fe4 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e24:	f7ff f8de 	bl	8001fe4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e173      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x234>
 8002e42:	e01b      	b.n	8002e7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e44:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <HAL_RCC_OscConfig+0x27c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7ff f8cb 	bl	8001fe4 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	e00e      	b.n	8002e70 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e52:	f7ff f8c7 	bl	8001fe4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d907      	bls.n	8002e70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e15c      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	42470000 	.word	0x42470000
 8002e6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	4b8a      	ldr	r3, [pc, #552]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ea      	bne.n	8002e52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8097 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b83      	ldr	r3, [pc, #524]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10f      	bne.n	8002eba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b79      	ldr	r3, [pc, #484]	@ (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d118      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec6:	4b76      	ldr	r3, [pc, #472]	@ (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a75      	ldr	r2, [pc, #468]	@ (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed2:	f7ff f887 	bl	8001fe4 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eda:	f7ff f883 	bl	8001fe4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e118      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	4b6c      	ldr	r3, [pc, #432]	@ (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x31e>
 8002f00:	4b66      	ldr	r3, [pc, #408]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f04:	4a65      	ldr	r2, [pc, #404]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0c:	e01c      	b.n	8002f48 <HAL_RCC_OscConfig+0x358>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x340>
 8002f16:	4b61      	ldr	r3, [pc, #388]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1a:	4a60      	ldr	r2, [pc, #384]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f22:	4b5e      	ldr	r3, [pc, #376]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f26:	4a5d      	ldr	r2, [pc, #372]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0x358>
 8002f30:	4b5a      	ldr	r3, [pc, #360]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f34:	4a59      	ldr	r2, [pc, #356]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f3c:	4b57      	ldr	r3, [pc, #348]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f40:	4a56      	ldr	r2, [pc, #344]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f42:	f023 0304 	bic.w	r3, r3, #4
 8002f46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d015      	beq.n	8002f7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7ff f848 	bl	8001fe4 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7ff f844 	bl	8001fe4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0d7      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0ee      	beq.n	8002f58 <HAL_RCC_OscConfig+0x368>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7ff f832 	bl	8001fe4 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7ff f82e 	bl	8001fe4 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0c1      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9a:	4b40      	ldr	r3, [pc, #256]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1ee      	bne.n	8002f84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fac:	4b3b      	ldr	r3, [pc, #236]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80ad 	beq.w	800311c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc2:	4b36      	ldr	r3, [pc, #216]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d060      	beq.n	8003090 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d145      	bne.n	8003062 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b33      	ldr	r3, [pc, #204]	@ (80030a4 <HAL_RCC_OscConfig+0x4b4>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7ff f802 	bl	8001fe4 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe fffe 	bl	8001fe4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e093      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	4b29      	ldr	r3, [pc, #164]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	3b01      	subs	r3, #1
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	071b      	lsls	r3, r3, #28
 800302e:	491b      	ldr	r1, [pc, #108]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003034:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <HAL_RCC_OscConfig+0x4b4>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe ffd3 	bl	8001fe4 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003042:	f7fe ffcf 	bl	8001fe4 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e064      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003054:	4b11      	ldr	r3, [pc, #68]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x452>
 8003060:	e05c      	b.n	800311c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <HAL_RCC_OscConfig+0x4b4>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe ffbc 	bl	8001fe4 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe ffb8 	bl	8001fe4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e04d      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	4b06      	ldr	r3, [pc, #24]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x480>
 800308e:	e045      	b.n	800311c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e040      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
 800309c:	40023800 	.word	0x40023800
 80030a0:	40007000 	.word	0x40007000
 80030a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003128 <HAL_RCC_OscConfig+0x538>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d030      	beq.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d129      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d122      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030d8:	4013      	ands	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d119      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d10f      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800

0800312c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e041      	b.n	80031c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe fe34 	bl	8001dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3304      	adds	r3, #4
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f000 fdf4 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d001      	beq.n	80031e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e046      	b.n	8003272 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a23      	ldr	r2, [pc, #140]	@ (8003280 <HAL_TIM_Base_Start+0xb4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d022      	beq.n	800323c <HAL_TIM_Base_Start+0x70>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fe:	d01d      	beq.n	800323c <HAL_TIM_Base_Start+0x70>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1f      	ldr	r2, [pc, #124]	@ (8003284 <HAL_TIM_Base_Start+0xb8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d018      	beq.n	800323c <HAL_TIM_Base_Start+0x70>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1e      	ldr	r2, [pc, #120]	@ (8003288 <HAL_TIM_Base_Start+0xbc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_TIM_Base_Start+0x70>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1c      	ldr	r2, [pc, #112]	@ (800328c <HAL_TIM_Base_Start+0xc0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00e      	beq.n	800323c <HAL_TIM_Base_Start+0x70>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1b      	ldr	r2, [pc, #108]	@ (8003290 <HAL_TIM_Base_Start+0xc4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_TIM_Base_Start+0x70>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <HAL_TIM_Base_Start+0xc8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <HAL_TIM_Base_Start+0x70>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a18      	ldr	r2, [pc, #96]	@ (8003298 <HAL_TIM_Base_Start+0xcc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d111      	bne.n	8003260 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b06      	cmp	r3, #6
 800324c:	d010      	beq.n	8003270 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325e:	e007      	b.n	8003270 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40010000 	.word	0x40010000
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800
 800328c:	40000c00 	.word	0x40000c00
 8003290:	40010400 	.word	0x40010400
 8003294:	40014000 	.word	0x40014000
 8003298:	40001800 	.word	0x40001800

0800329c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d001      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e04e      	b.n	8003352 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a23      	ldr	r2, [pc, #140]	@ (8003360 <HAL_TIM_Base_Start_IT+0xc4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d022      	beq.n	800331c <HAL_TIM_Base_Start_IT+0x80>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032de:	d01d      	beq.n	800331c <HAL_TIM_Base_Start_IT+0x80>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003364 <HAL_TIM_Base_Start_IT+0xc8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d018      	beq.n	800331c <HAL_TIM_Base_Start_IT+0x80>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003368 <HAL_TIM_Base_Start_IT+0xcc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d013      	beq.n	800331c <HAL_TIM_Base_Start_IT+0x80>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <HAL_TIM_Base_Start_IT+0xd0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00e      	beq.n	800331c <HAL_TIM_Base_Start_IT+0x80>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1b      	ldr	r2, [pc, #108]	@ (8003370 <HAL_TIM_Base_Start_IT+0xd4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d009      	beq.n	800331c <HAL_TIM_Base_Start_IT+0x80>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a19      	ldr	r2, [pc, #100]	@ (8003374 <HAL_TIM_Base_Start_IT+0xd8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_TIM_Base_Start_IT+0x80>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <HAL_TIM_Base_Start_IT+0xdc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d111      	bne.n	8003340 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b06      	cmp	r3, #6
 800332c:	d010      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333e:	e007      	b.n	8003350 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40010000 	.word	0x40010000
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40000c00 	.word	0x40000c00
 8003370:	40010400 	.word	0x40010400
 8003374:	40014000 	.word	0x40014000
 8003378:	40001800 	.word	0x40001800

0800337c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e041      	b.n	8003412 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fe fd32 	bl	8001e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f000 fccc 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <HAL_TIM_PWM_Start+0x24>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e022      	b.n	8003486 <HAL_TIM_PWM_Start+0x6a>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b04      	cmp	r3, #4
 8003444:	d109      	bne.n	800345a <HAL_TIM_PWM_Start+0x3e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	bf14      	ite	ne
 8003452:	2301      	movne	r3, #1
 8003454:	2300      	moveq	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	e015      	b.n	8003486 <HAL_TIM_PWM_Start+0x6a>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d109      	bne.n	8003474 <HAL_TIM_PWM_Start+0x58>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e008      	b.n	8003486 <HAL_TIM_PWM_Start+0x6a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07c      	b.n	8003588 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d104      	bne.n	800349e <HAL_TIM_PWM_Start+0x82>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800349c:	e013      	b.n	80034c6 <HAL_TIM_PWM_Start+0xaa>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_PWM_Start+0x92>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ac:	e00b      	b.n	80034c6 <HAL_TIM_PWM_Start+0xaa>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d104      	bne.n	80034be <HAL_TIM_PWM_Start+0xa2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034bc:	e003      	b.n	80034c6 <HAL_TIM_PWM_Start+0xaa>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	6839      	ldr	r1, [r7, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 ff38 	bl	8004344 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003590 <HAL_TIM_PWM_Start+0x174>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_TIM_PWM_Start+0xcc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003594 <HAL_TIM_PWM_Start+0x178>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d101      	bne.n	80034ec <HAL_TIM_PWM_Start+0xd0>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_TIM_PWM_Start+0xd2>
 80034ec:	2300      	movs	r3, #0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003500:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a22      	ldr	r2, [pc, #136]	@ (8003590 <HAL_TIM_PWM_Start+0x174>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003514:	d01d      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1f      	ldr	r2, [pc, #124]	@ (8003598 <HAL_TIM_PWM_Start+0x17c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1d      	ldr	r2, [pc, #116]	@ (800359c <HAL_TIM_PWM_Start+0x180>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1c      	ldr	r2, [pc, #112]	@ (80035a0 <HAL_TIM_PWM_Start+0x184>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <HAL_TIM_PWM_Start+0x178>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a18      	ldr	r2, [pc, #96]	@ (80035a4 <HAL_TIM_PWM_Start+0x188>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a16      	ldr	r2, [pc, #88]	@ (80035a8 <HAL_TIM_PWM_Start+0x18c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d111      	bne.n	8003576 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b06      	cmp	r3, #6
 8003562:	d010      	beq.n	8003586 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003574:	e007      	b.n	8003586 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40010000 	.word	0x40010000
 8003594:	40010400 	.word	0x40010400
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40001800 	.word	0x40001800

080035ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e097      	b.n	80036f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7fe fbab 	bl	8001d30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035f0:	f023 0307 	bic.w	r3, r3, #7
 80035f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f000 fba9 	bl	8003d58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	4313      	orrs	r3, r2
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800364c:	f023 030c 	bic.w	r3, r3, #12
 8003650:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003658:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800365c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	4313      	orrs	r3, r2
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	011a      	lsls	r2, r3, #4
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	031b      	lsls	r3, r3, #12
 800367c:	4313      	orrs	r3, r2
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800368a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003692:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	4313      	orrs	r3, r2
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003708:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003710:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003718:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003720:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d110      	bne.n	800374a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d102      	bne.n	8003734 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800372e:	7b7b      	ldrb	r3, [r7, #13]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e069      	b.n	800380c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003748:	e031      	b.n	80037ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d110      	bne.n	8003772 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003750:	7bbb      	ldrb	r3, [r7, #14]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d102      	bne.n	800375c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003756:	7b3b      	ldrb	r3, [r7, #12]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d001      	beq.n	8003760 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e055      	b.n	800380c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003770:	e01d      	b.n	80037ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d108      	bne.n	800378a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003778:	7bbb      	ldrb	r3, [r7, #14]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800377e:	7b7b      	ldrb	r3, [r7, #13]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d102      	bne.n	800378a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003784:	7b3b      	ldrb	r3, [r7, #12]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d001      	beq.n	800378e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e03e      	b.n	800380c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_TIM_Encoder_Start+0xc4>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d008      	beq.n	80037cc <HAL_TIM_Encoder_Start+0xd4>
 80037ba:	e00f      	b.n	80037dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2201      	movs	r2, #1
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fdbd 	bl	8004344 <TIM_CCxChannelCmd>
      break;
 80037ca:	e016      	b.n	80037fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	2104      	movs	r1, #4
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fdb5 	bl	8004344 <TIM_CCxChannelCmd>
      break;
 80037da:	e00e      	b.n	80037fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2201      	movs	r2, #1
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fdad 	bl	8004344 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2201      	movs	r2, #1
 80037f0:	2104      	movs	r1, #4
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fda6 	bl	8004344 <TIM_CCxChannelCmd>
      break;
 80037f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0201 	orr.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d020      	beq.n	8003878 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01b      	beq.n	8003878 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0202 	mvn.w	r2, #2
 8003848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa5b 	bl	8003d1a <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa4d 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fa5e 	bl	8003d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d020      	beq.n	80038c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0204 	mvn.w	r2, #4
 8003894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fa35 	bl	8003d1a <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa27 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fa38 	bl	8003d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0208 	mvn.w	r2, #8
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2204      	movs	r2, #4
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa0f 	bl	8003d1a <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fa01 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fa12 	bl	8003d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0210 	mvn.w	r2, #16
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2208      	movs	r2, #8
 8003932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f9e9 	bl	8003d1a <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9db 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f9ec 	bl	8003d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00c      	beq.n	8003980 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0201 	mvn.w	r2, #1
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd fd90 	bl	80014a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fd7c 	bl	800449c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00c      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d007      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f9bd 	bl	8003d42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00c      	beq.n	80039ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0220 	mvn.w	r2, #32
 80039e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fd4e 	bl	8004488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e0ae      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	f200 809f 	bhi.w	8003b60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a22:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a5d 	.word	0x08003a5d
 8003a2c:	08003b61 	.word	0x08003b61
 8003a30:	08003b61 	.word	0x08003b61
 8003a34:	08003b61 	.word	0x08003b61
 8003a38:	08003a9d 	.word	0x08003a9d
 8003a3c:	08003b61 	.word	0x08003b61
 8003a40:	08003b61 	.word	0x08003b61
 8003a44:	08003b61 	.word	0x08003b61
 8003a48:	08003adf 	.word	0x08003adf
 8003a4c:	08003b61 	.word	0x08003b61
 8003a50:	08003b61 	.word	0x08003b61
 8003a54:	08003b61 	.word	0x08003b61
 8003a58:	08003b1f 	.word	0x08003b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fa24 	bl	8003eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0208 	orr.w	r2, r2, #8
 8003a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6999      	ldr	r1, [r3, #24]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	619a      	str	r2, [r3, #24]
      break;
 8003a9a:	e064      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fa74 	bl	8003f90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6999      	ldr	r1, [r3, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	021a      	lsls	r2, r3, #8
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	619a      	str	r2, [r3, #24]
      break;
 8003adc:	e043      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fac9 	bl	800407c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0208 	orr.w	r2, r2, #8
 8003af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0204 	bic.w	r2, r2, #4
 8003b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69d9      	ldr	r1, [r3, #28]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	61da      	str	r2, [r3, #28]
      break;
 8003b1c:	e023      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fb1d 	bl	8004164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	021a      	lsls	r2, r3, #8
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	61da      	str	r2, [r3, #28]
      break;
 8003b5e:	e002      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	75fb      	strb	r3, [r7, #23]
      break;
 8003b64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIM_ConfigClockSource+0x1c>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e0b4      	b.n	8003cfe <HAL_TIM_ConfigClockSource+0x186>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bcc:	d03e      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0xd4>
 8003bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bd2:	f200 8087 	bhi.w	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bda:	f000 8086 	beq.w	8003cea <HAL_TIM_ConfigClockSource+0x172>
 8003bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be2:	d87f      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b70      	cmp	r3, #112	@ 0x70
 8003be6:	d01a      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0xa6>
 8003be8:	2b70      	cmp	r3, #112	@ 0x70
 8003bea:	d87b      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b60      	cmp	r3, #96	@ 0x60
 8003bee:	d050      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0x11a>
 8003bf0:	2b60      	cmp	r3, #96	@ 0x60
 8003bf2:	d877      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b50      	cmp	r3, #80	@ 0x50
 8003bf6:	d03c      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0xfa>
 8003bf8:	2b50      	cmp	r3, #80	@ 0x50
 8003bfa:	d873      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b40      	cmp	r3, #64	@ 0x40
 8003bfe:	d058      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x13a>
 8003c00:	2b40      	cmp	r3, #64	@ 0x40
 8003c02:	d86f      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b30      	cmp	r3, #48	@ 0x30
 8003c06:	d064      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c08:	2b30      	cmp	r3, #48	@ 0x30
 8003c0a:	d86b      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d060      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d867      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d05c      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d05a      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c1c:	e062      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c2e:	f000 fb69 	bl	8004304 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	609a      	str	r2, [r3, #8]
      break;
 8003c4a:	e04f      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c5c:	f000 fb52 	bl	8004304 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c6e:	609a      	str	r2, [r3, #8]
      break;
 8003c70:	e03c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f000 fac6 	bl	8004210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2150      	movs	r1, #80	@ 0x50
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fb1f 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8003c90:	e02c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f000 fae5 	bl	800426e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2160      	movs	r1, #96	@ 0x60
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fb0f 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8003cb0:	e01c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f000 faa6 	bl	8004210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2140      	movs	r1, #64	@ 0x40
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 faff 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8003cd0:	e00c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f000 faf6 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8003ce2:	e003      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce8:	e000      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a46      	ldr	r2, [pc, #280]	@ (8003e84 <TIM_Base_SetConfig+0x12c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d76:	d00f      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a43      	ldr	r2, [pc, #268]	@ (8003e88 <TIM_Base_SetConfig+0x130>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a42      	ldr	r2, [pc, #264]	@ (8003e8c <TIM_Base_SetConfig+0x134>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a41      	ldr	r2, [pc, #260]	@ (8003e90 <TIM_Base_SetConfig+0x138>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a40      	ldr	r2, [pc, #256]	@ (8003e94 <TIM_Base_SetConfig+0x13c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d108      	bne.n	8003daa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a35      	ldr	r2, [pc, #212]	@ (8003e84 <TIM_Base_SetConfig+0x12c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d02b      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db8:	d027      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a32      	ldr	r2, [pc, #200]	@ (8003e88 <TIM_Base_SetConfig+0x130>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d023      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a31      	ldr	r2, [pc, #196]	@ (8003e8c <TIM_Base_SetConfig+0x134>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01f      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a30      	ldr	r2, [pc, #192]	@ (8003e90 <TIM_Base_SetConfig+0x138>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01b      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a2f      	ldr	r2, [pc, #188]	@ (8003e94 <TIM_Base_SetConfig+0x13c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d017      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8003e98 <TIM_Base_SetConfig+0x140>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2d      	ldr	r2, [pc, #180]	@ (8003e9c <TIM_Base_SetConfig+0x144>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00f      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea0 <TIM_Base_SetConfig+0x148>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00b      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea4 <TIM_Base_SetConfig+0x14c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d007      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea8 <TIM_Base_SetConfig+0x150>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d003      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a29      	ldr	r2, [pc, #164]	@ (8003eac <TIM_Base_SetConfig+0x154>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d108      	bne.n	8003e1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a10      	ldr	r2, [pc, #64]	@ (8003e84 <TIM_Base_SetConfig+0x12c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_Base_SetConfig+0xf8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a12      	ldr	r2, [pc, #72]	@ (8003e94 <TIM_Base_SetConfig+0x13c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d103      	bne.n	8003e58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f023 0201 	bic.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	611a      	str	r2, [r3, #16]
  }
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40010400 	.word	0x40010400
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800
 8003ea4:	40001800 	.word	0x40001800
 8003ea8:	40001c00 	.word	0x40001c00
 8003eac:	40002000 	.word	0x40002000

08003eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f023 0201 	bic.w	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f023 0302 	bic.w	r3, r3, #2
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a20      	ldr	r2, [pc, #128]	@ (8003f88 <TIM_OC1_SetConfig+0xd8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_OC1_SetConfig+0x64>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f8c <TIM_OC1_SetConfig+0xdc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d10c      	bne.n	8003f2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0308 	bic.w	r3, r3, #8
 8003f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f023 0304 	bic.w	r3, r3, #4
 8003f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a15      	ldr	r2, [pc, #84]	@ (8003f88 <TIM_OC1_SetConfig+0xd8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d003      	beq.n	8003f3e <TIM_OC1_SetConfig+0x8e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a14      	ldr	r2, [pc, #80]	@ (8003f8c <TIM_OC1_SetConfig+0xdc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d111      	bne.n	8003f62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	621a      	str	r2, [r3, #32]
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40010400 	.word	0x40010400

08003f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	f023 0210 	bic.w	r2, r3, #16
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 0320 	bic.w	r3, r3, #32
 8003fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a22      	ldr	r2, [pc, #136]	@ (8004074 <TIM_OC2_SetConfig+0xe4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_OC2_SetConfig+0x68>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	@ (8004078 <TIM_OC2_SetConfig+0xe8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d10d      	bne.n	8004014 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004012:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a17      	ldr	r2, [pc, #92]	@ (8004074 <TIM_OC2_SetConfig+0xe4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_OC2_SetConfig+0x94>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a16      	ldr	r2, [pc, #88]	@ (8004078 <TIM_OC2_SetConfig+0xe8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d113      	bne.n	800404c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800402a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	621a      	str	r2, [r3, #32]
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40010000 	.word	0x40010000
 8004078:	40010400 	.word	0x40010400

0800407c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a21      	ldr	r2, [pc, #132]	@ (800415c <TIM_OC3_SetConfig+0xe0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <TIM_OC3_SetConfig+0x66>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a20      	ldr	r2, [pc, #128]	@ (8004160 <TIM_OC3_SetConfig+0xe4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10d      	bne.n	80040fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a16      	ldr	r2, [pc, #88]	@ (800415c <TIM_OC3_SetConfig+0xe0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_OC3_SetConfig+0x92>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a15      	ldr	r2, [pc, #84]	@ (8004160 <TIM_OC3_SetConfig+0xe4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d113      	bne.n	8004136 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800411c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	621a      	str	r2, [r3, #32]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40010000 	.word	0x40010000
 8004160:	40010400 	.word	0x40010400

08004164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800419a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	031b      	lsls	r3, r3, #12
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <TIM_OC4_SetConfig+0xa4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC4_SetConfig+0x68>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a11      	ldr	r2, [pc, #68]	@ (800420c <TIM_OC4_SetConfig+0xa8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d109      	bne.n	80041e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	019b      	lsls	r3, r3, #6
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40010000 	.word	0x40010000
 800420c:	40010400 	.word	0x40010400

08004210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f023 0201 	bic.w	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800423a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 030a 	bic.w	r3, r3, #10
 800424c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800426e:	b480      	push	{r7}
 8004270:	b087      	sub	sp, #28
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f023 0210 	bic.w	r2, r3, #16
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	031b      	lsls	r3, r3, #12
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f043 0307 	orr.w	r3, r3, #7
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800431e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	021a      	lsls	r2, r3, #8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	431a      	orrs	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4313      	orrs	r3, r2
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	609a      	str	r2, [r3, #8]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	2201      	movs	r2, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1a      	ldr	r2, [r3, #32]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	43db      	mvns	r3, r3
 8004366:	401a      	ands	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1a      	ldr	r2, [r3, #32]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e05a      	b.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a21      	ldr	r2, [pc, #132]	@ (800446c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d022      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f4:	d01d      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d018      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1b      	ldr	r2, [pc, #108]	@ (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1a      	ldr	r2, [pc, #104]	@ (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a18      	ldr	r2, [pc, #96]	@ (800447c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a17      	ldr	r2, [pc, #92]	@ (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d10c      	bne.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4313      	orrs	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40010000 	.word	0x40010000
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	40000c00 	.word	0x40000c00
 800447c:	40010400 	.word	0x40010400
 8004480:	40014000 	.word	0x40014000
 8004484:	40001800 	.word	0x40001800

08004488 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <memset>:
 80044b0:	4402      	add	r2, r0
 80044b2:	4603      	mov	r3, r0
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d100      	bne.n	80044ba <memset+0xa>
 80044b8:	4770      	bx	lr
 80044ba:	f803 1b01 	strb.w	r1, [r3], #1
 80044be:	e7f9      	b.n	80044b4 <memset+0x4>

080044c0 <__libc_init_array>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4d0d      	ldr	r5, [pc, #52]	@ (80044f8 <__libc_init_array+0x38>)
 80044c4:	4c0d      	ldr	r4, [pc, #52]	@ (80044fc <__libc_init_array+0x3c>)
 80044c6:	1b64      	subs	r4, r4, r5
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	2600      	movs	r6, #0
 80044cc:	42a6      	cmp	r6, r4
 80044ce:	d109      	bne.n	80044e4 <__libc_init_array+0x24>
 80044d0:	4d0b      	ldr	r5, [pc, #44]	@ (8004500 <__libc_init_array+0x40>)
 80044d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004504 <__libc_init_array+0x44>)
 80044d4:	f000 fd52 	bl	8004f7c <_init>
 80044d8:	1b64      	subs	r4, r4, r5
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	2600      	movs	r6, #0
 80044de:	42a6      	cmp	r6, r4
 80044e0:	d105      	bne.n	80044ee <__libc_init_array+0x2e>
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e8:	4798      	blx	r3
 80044ea:	3601      	adds	r6, #1
 80044ec:	e7ee      	b.n	80044cc <__libc_init_array+0xc>
 80044ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f2:	4798      	blx	r3
 80044f4:	3601      	adds	r6, #1
 80044f6:	e7f2      	b.n	80044de <__libc_init_array+0x1e>
 80044f8:	0800537c 	.word	0x0800537c
 80044fc:	0800537c 	.word	0x0800537c
 8004500:	0800537c 	.word	0x0800537c
 8004504:	08005380 	.word	0x08005380

08004508 <sinf>:
 8004508:	ee10 3a10 	vmov	r3, s0
 800450c:	b507      	push	{r0, r1, r2, lr}
 800450e:	4a1f      	ldr	r2, [pc, #124]	@ (800458c <sinf+0x84>)
 8004510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004514:	4293      	cmp	r3, r2
 8004516:	d807      	bhi.n	8004528 <sinf+0x20>
 8004518:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8004590 <sinf+0x88>
 800451c:	2000      	movs	r0, #0
 800451e:	b003      	add	sp, #12
 8004520:	f85d eb04 	ldr.w	lr, [sp], #4
 8004524:	f000 b88e 	b.w	8004644 <__kernel_sinf>
 8004528:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800452c:	d304      	bcc.n	8004538 <sinf+0x30>
 800452e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004532:	b003      	add	sp, #12
 8004534:	f85d fb04 	ldr.w	pc, [sp], #4
 8004538:	4668      	mov	r0, sp
 800453a:	f000 f8cb 	bl	80046d4 <__ieee754_rem_pio2f>
 800453e:	f000 0003 	and.w	r0, r0, #3
 8004542:	2801      	cmp	r0, #1
 8004544:	d00a      	beq.n	800455c <sinf+0x54>
 8004546:	2802      	cmp	r0, #2
 8004548:	d00f      	beq.n	800456a <sinf+0x62>
 800454a:	b9c0      	cbnz	r0, 800457e <sinf+0x76>
 800454c:	eddd 0a01 	vldr	s1, [sp, #4]
 8004550:	ed9d 0a00 	vldr	s0, [sp]
 8004554:	2001      	movs	r0, #1
 8004556:	f000 f875 	bl	8004644 <__kernel_sinf>
 800455a:	e7ea      	b.n	8004532 <sinf+0x2a>
 800455c:	eddd 0a01 	vldr	s1, [sp, #4]
 8004560:	ed9d 0a00 	vldr	s0, [sp]
 8004564:	f000 f816 	bl	8004594 <__kernel_cosf>
 8004568:	e7e3      	b.n	8004532 <sinf+0x2a>
 800456a:	eddd 0a01 	vldr	s1, [sp, #4]
 800456e:	ed9d 0a00 	vldr	s0, [sp]
 8004572:	2001      	movs	r0, #1
 8004574:	f000 f866 	bl	8004644 <__kernel_sinf>
 8004578:	eeb1 0a40 	vneg.f32	s0, s0
 800457c:	e7d9      	b.n	8004532 <sinf+0x2a>
 800457e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004582:	ed9d 0a00 	vldr	s0, [sp]
 8004586:	f000 f805 	bl	8004594 <__kernel_cosf>
 800458a:	e7f5      	b.n	8004578 <sinf+0x70>
 800458c:	3f490fd8 	.word	0x3f490fd8
 8004590:	00000000 	.word	0x00000000

08004594 <__kernel_cosf>:
 8004594:	ee10 3a10 	vmov	r3, s0
 8004598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800459c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80045a0:	eef0 6a40 	vmov.f32	s13, s0
 80045a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80045a8:	d204      	bcs.n	80045b4 <__kernel_cosf+0x20>
 80045aa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80045ae:	ee17 2a90 	vmov	r2, s15
 80045b2:	b342      	cbz	r2, 8004606 <__kernel_cosf+0x72>
 80045b4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80045b8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8004624 <__kernel_cosf+0x90>
 80045bc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004628 <__kernel_cosf+0x94>
 80045c0:	4a1a      	ldr	r2, [pc, #104]	@ (800462c <__kernel_cosf+0x98>)
 80045c2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80045c6:	4293      	cmp	r3, r2
 80045c8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004630 <__kernel_cosf+0x9c>
 80045cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80045d0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8004634 <__kernel_cosf+0xa0>
 80045d4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80045d8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004638 <__kernel_cosf+0xa4>
 80045dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80045e0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800463c <__kernel_cosf+0xa8>
 80045e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80045e8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80045ec:	ee26 6a07 	vmul.f32	s12, s12, s14
 80045f0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80045f4:	eee7 0a06 	vfma.f32	s1, s14, s12
 80045f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fc:	d804      	bhi.n	8004608 <__kernel_cosf+0x74>
 80045fe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004602:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004606:	4770      	bx	lr
 8004608:	4a0d      	ldr	r2, [pc, #52]	@ (8004640 <__kernel_cosf+0xac>)
 800460a:	4293      	cmp	r3, r2
 800460c:	bf9a      	itte	ls
 800460e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8004612:	ee07 3a10 	vmovls	s14, r3
 8004616:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800461a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800461e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004622:	e7ec      	b.n	80045fe <__kernel_cosf+0x6a>
 8004624:	ad47d74e 	.word	0xad47d74e
 8004628:	310f74f6 	.word	0x310f74f6
 800462c:	3e999999 	.word	0x3e999999
 8004630:	b493f27c 	.word	0xb493f27c
 8004634:	37d00d01 	.word	0x37d00d01
 8004638:	bab60b61 	.word	0xbab60b61
 800463c:	3d2aaaab 	.word	0x3d2aaaab
 8004640:	3f480000 	.word	0x3f480000

08004644 <__kernel_sinf>:
 8004644:	ee10 3a10 	vmov	r3, s0
 8004648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800464c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004650:	d204      	bcs.n	800465c <__kernel_sinf+0x18>
 8004652:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004656:	ee17 3a90 	vmov	r3, s15
 800465a:	b35b      	cbz	r3, 80046b4 <__kernel_sinf+0x70>
 800465c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004660:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80046b8 <__kernel_sinf+0x74>
 8004664:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80046bc <__kernel_sinf+0x78>
 8004668:	eea7 6a27 	vfma.f32	s12, s14, s15
 800466c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80046c0 <__kernel_sinf+0x7c>
 8004670:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004674:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80046c4 <__kernel_sinf+0x80>
 8004678:	eea7 6a87 	vfma.f32	s12, s15, s14
 800467c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80046c8 <__kernel_sinf+0x84>
 8004680:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004684:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004688:	b930      	cbnz	r0, 8004698 <__kernel_sinf+0x54>
 800468a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80046cc <__kernel_sinf+0x88>
 800468e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004692:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004696:	4770      	bx	lr
 8004698:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800469c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80046a0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80046a4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80046a8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80046d0 <__kernel_sinf+0x8c>
 80046ac:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80046b0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	2f2ec9d3 	.word	0x2f2ec9d3
 80046bc:	b2d72f34 	.word	0xb2d72f34
 80046c0:	3638ef1b 	.word	0x3638ef1b
 80046c4:	b9500d01 	.word	0xb9500d01
 80046c8:	3c088889 	.word	0x3c088889
 80046cc:	be2aaaab 	.word	0xbe2aaaab
 80046d0:	3e2aaaab 	.word	0x3e2aaaab

080046d4 <__ieee754_rem_pio2f>:
 80046d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d6:	ee10 6a10 	vmov	r6, s0
 80046da:	4b88      	ldr	r3, [pc, #544]	@ (80048fc <__ieee754_rem_pio2f+0x228>)
 80046dc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80046e0:	429d      	cmp	r5, r3
 80046e2:	b087      	sub	sp, #28
 80046e4:	4604      	mov	r4, r0
 80046e6:	d805      	bhi.n	80046f4 <__ieee754_rem_pio2f+0x20>
 80046e8:	2300      	movs	r3, #0
 80046ea:	ed80 0a00 	vstr	s0, [r0]
 80046ee:	6043      	str	r3, [r0, #4]
 80046f0:	2000      	movs	r0, #0
 80046f2:	e022      	b.n	800473a <__ieee754_rem_pio2f+0x66>
 80046f4:	4b82      	ldr	r3, [pc, #520]	@ (8004900 <__ieee754_rem_pio2f+0x22c>)
 80046f6:	429d      	cmp	r5, r3
 80046f8:	d83a      	bhi.n	8004770 <__ieee754_rem_pio2f+0x9c>
 80046fa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80046fe:	2e00      	cmp	r6, #0
 8004700:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004904 <__ieee754_rem_pio2f+0x230>
 8004704:	4a80      	ldr	r2, [pc, #512]	@ (8004908 <__ieee754_rem_pio2f+0x234>)
 8004706:	f023 030f 	bic.w	r3, r3, #15
 800470a:	dd18      	ble.n	800473e <__ieee754_rem_pio2f+0x6a>
 800470c:	4293      	cmp	r3, r2
 800470e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004712:	bf09      	itett	eq
 8004714:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800490c <__ieee754_rem_pio2f+0x238>
 8004718:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004910 <__ieee754_rem_pio2f+0x23c>
 800471c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004914 <__ieee754_rem_pio2f+0x240>
 8004720:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004724:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8004728:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800472c:	ed80 7a00 	vstr	s14, [r0]
 8004730:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004734:	edc0 7a01 	vstr	s15, [r0, #4]
 8004738:	2001      	movs	r0, #1
 800473a:	b007      	add	sp, #28
 800473c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800473e:	4293      	cmp	r3, r2
 8004740:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004744:	bf09      	itett	eq
 8004746:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800490c <__ieee754_rem_pio2f+0x238>
 800474a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004910 <__ieee754_rem_pio2f+0x23c>
 800474e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004914 <__ieee754_rem_pio2f+0x240>
 8004752:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004756:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800475a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800475e:	ed80 7a00 	vstr	s14, [r0]
 8004762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004766:	edc0 7a01 	vstr	s15, [r0, #4]
 800476a:	f04f 30ff 	mov.w	r0, #4294967295
 800476e:	e7e4      	b.n	800473a <__ieee754_rem_pio2f+0x66>
 8004770:	4b69      	ldr	r3, [pc, #420]	@ (8004918 <__ieee754_rem_pio2f+0x244>)
 8004772:	429d      	cmp	r5, r3
 8004774:	d873      	bhi.n	800485e <__ieee754_rem_pio2f+0x18a>
 8004776:	f000 f8dd 	bl	8004934 <fabsf>
 800477a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800491c <__ieee754_rem_pio2f+0x248>
 800477e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004782:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800478a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800478e:	ee17 0a90 	vmov	r0, s15
 8004792:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004904 <__ieee754_rem_pio2f+0x230>
 8004796:	eea7 0a67 	vfms.f32	s0, s14, s15
 800479a:	281f      	cmp	r0, #31
 800479c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004910 <__ieee754_rem_pio2f+0x23c>
 80047a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a4:	eeb1 6a47 	vneg.f32	s12, s14
 80047a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80047ac:	ee16 1a90 	vmov	r1, s13
 80047b0:	dc09      	bgt.n	80047c6 <__ieee754_rem_pio2f+0xf2>
 80047b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004920 <__ieee754_rem_pio2f+0x24c>)
 80047b4:	1e47      	subs	r7, r0, #1
 80047b6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80047ba:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80047be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d107      	bne.n	80047d6 <__ieee754_rem_pio2f+0x102>
 80047c6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80047ca:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80047ce:	2a08      	cmp	r2, #8
 80047d0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80047d4:	dc14      	bgt.n	8004800 <__ieee754_rem_pio2f+0x12c>
 80047d6:	6021      	str	r1, [r4, #0]
 80047d8:	ed94 7a00 	vldr	s14, [r4]
 80047dc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80047e0:	2e00      	cmp	r6, #0
 80047e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80047e6:	ed84 0a01 	vstr	s0, [r4, #4]
 80047ea:	daa6      	bge.n	800473a <__ieee754_rem_pio2f+0x66>
 80047ec:	eeb1 7a47 	vneg.f32	s14, s14
 80047f0:	eeb1 0a40 	vneg.f32	s0, s0
 80047f4:	ed84 7a00 	vstr	s14, [r4]
 80047f8:	ed84 0a01 	vstr	s0, [r4, #4]
 80047fc:	4240      	negs	r0, r0
 80047fe:	e79c      	b.n	800473a <__ieee754_rem_pio2f+0x66>
 8004800:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800490c <__ieee754_rem_pio2f+0x238>
 8004804:	eef0 6a40 	vmov.f32	s13, s0
 8004808:	eee6 6a25 	vfma.f32	s13, s12, s11
 800480c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8004810:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004814:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004914 <__ieee754_rem_pio2f+0x240>
 8004818:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800481c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004820:	ee15 2a90 	vmov	r2, s11
 8004824:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004828:	1a5b      	subs	r3, r3, r1
 800482a:	2b19      	cmp	r3, #25
 800482c:	dc04      	bgt.n	8004838 <__ieee754_rem_pio2f+0x164>
 800482e:	edc4 5a00 	vstr	s11, [r4]
 8004832:	eeb0 0a66 	vmov.f32	s0, s13
 8004836:	e7cf      	b.n	80047d8 <__ieee754_rem_pio2f+0x104>
 8004838:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004924 <__ieee754_rem_pio2f+0x250>
 800483c:	eeb0 0a66 	vmov.f32	s0, s13
 8004840:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004844:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004848:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004928 <__ieee754_rem_pio2f+0x254>
 800484c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004850:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004854:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004858:	ed84 7a00 	vstr	s14, [r4]
 800485c:	e7bc      	b.n	80047d8 <__ieee754_rem_pio2f+0x104>
 800485e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8004862:	d306      	bcc.n	8004872 <__ieee754_rem_pio2f+0x19e>
 8004864:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004868:	edc0 7a01 	vstr	s15, [r0, #4]
 800486c:	edc0 7a00 	vstr	s15, [r0]
 8004870:	e73e      	b.n	80046f0 <__ieee754_rem_pio2f+0x1c>
 8004872:	15ea      	asrs	r2, r5, #23
 8004874:	3a86      	subs	r2, #134	@ 0x86
 8004876:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004882:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800492c <__ieee754_rem_pio2f+0x258>
 8004886:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800488a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800488e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004892:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004896:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800489a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800489e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048a2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80048a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80048aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b2:	edcd 7a05 	vstr	s15, [sp, #20]
 80048b6:	d11e      	bne.n	80048f6 <__ieee754_rem_pio2f+0x222>
 80048b8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80048bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c0:	bf0c      	ite	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	2302      	movne	r3, #2
 80048c6:	491a      	ldr	r1, [pc, #104]	@ (8004930 <__ieee754_rem_pio2f+0x25c>)
 80048c8:	9101      	str	r1, [sp, #4]
 80048ca:	2102      	movs	r1, #2
 80048cc:	9100      	str	r1, [sp, #0]
 80048ce:	a803      	add	r0, sp, #12
 80048d0:	4621      	mov	r1, r4
 80048d2:	f000 f837 	bl	8004944 <__kernel_rem_pio2f>
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	f6bf af2f 	bge.w	800473a <__ieee754_rem_pio2f+0x66>
 80048dc:	edd4 7a00 	vldr	s15, [r4]
 80048e0:	eef1 7a67 	vneg.f32	s15, s15
 80048e4:	edc4 7a00 	vstr	s15, [r4]
 80048e8:	edd4 7a01 	vldr	s15, [r4, #4]
 80048ec:	eef1 7a67 	vneg.f32	s15, s15
 80048f0:	edc4 7a01 	vstr	s15, [r4, #4]
 80048f4:	e782      	b.n	80047fc <__ieee754_rem_pio2f+0x128>
 80048f6:	2303      	movs	r3, #3
 80048f8:	e7e5      	b.n	80048c6 <__ieee754_rem_pio2f+0x1f2>
 80048fa:	bf00      	nop
 80048fc:	3f490fd8 	.word	0x3f490fd8
 8004900:	4016cbe3 	.word	0x4016cbe3
 8004904:	3fc90f80 	.word	0x3fc90f80
 8004908:	3fc90fd0 	.word	0x3fc90fd0
 800490c:	37354400 	.word	0x37354400
 8004910:	37354443 	.word	0x37354443
 8004914:	2e85a308 	.word	0x2e85a308
 8004918:	43490f80 	.word	0x43490f80
 800491c:	3f22f984 	.word	0x3f22f984
 8004920:	08004fa4 	.word	0x08004fa4
 8004924:	2e85a300 	.word	0x2e85a300
 8004928:	248d3132 	.word	0x248d3132
 800492c:	43800000 	.word	0x43800000
 8004930:	08005024 	.word	0x08005024

08004934 <fabsf>:
 8004934:	ee10 3a10 	vmov	r3, s0
 8004938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800493c:	ee00 3a10 	vmov	s0, r3
 8004940:	4770      	bx	lr
	...

08004944 <__kernel_rem_pio2f>:
 8004944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004948:	ed2d 8b04 	vpush	{d8-d9}
 800494c:	b0d9      	sub	sp, #356	@ 0x164
 800494e:	4690      	mov	r8, r2
 8004950:	9001      	str	r0, [sp, #4]
 8004952:	4ab9      	ldr	r2, [pc, #740]	@ (8004c38 <__kernel_rem_pio2f+0x2f4>)
 8004954:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8004956:	f118 0f04 	cmn.w	r8, #4
 800495a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800495e:	460f      	mov	r7, r1
 8004960:	f103 3bff 	add.w	fp, r3, #4294967295
 8004964:	db27      	blt.n	80049b6 <__kernel_rem_pio2f+0x72>
 8004966:	f1b8 0203 	subs.w	r2, r8, #3
 800496a:	bf48      	it	mi
 800496c:	f108 0204 	addmi.w	r2, r8, #4
 8004970:	10d2      	asrs	r2, r2, #3
 8004972:	1c55      	adds	r5, r2, #1
 8004974:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004976:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8004c48 <__kernel_rem_pio2f+0x304>
 800497a:	00e8      	lsls	r0, r5, #3
 800497c:	eba2 060b 	sub.w	r6, r2, fp
 8004980:	9002      	str	r0, [sp, #8]
 8004982:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8004986:	eb0a 0c0b 	add.w	ip, sl, fp
 800498a:	ac1c      	add	r4, sp, #112	@ 0x70
 800498c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8004990:	2000      	movs	r0, #0
 8004992:	4560      	cmp	r0, ip
 8004994:	dd11      	ble.n	80049ba <__kernel_rem_pio2f+0x76>
 8004996:	a91c      	add	r1, sp, #112	@ 0x70
 8004998:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800499c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80049a0:	f04f 0c00 	mov.w	ip, #0
 80049a4:	45d4      	cmp	ip, sl
 80049a6:	dc27      	bgt.n	80049f8 <__kernel_rem_pio2f+0xb4>
 80049a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80049ac:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8004c48 <__kernel_rem_pio2f+0x304>
 80049b0:	4606      	mov	r6, r0
 80049b2:	2400      	movs	r4, #0
 80049b4:	e016      	b.n	80049e4 <__kernel_rem_pio2f+0xa0>
 80049b6:	2200      	movs	r2, #0
 80049b8:	e7db      	b.n	8004972 <__kernel_rem_pio2f+0x2e>
 80049ba:	42c6      	cmn	r6, r0
 80049bc:	bf5d      	ittte	pl
 80049be:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80049c2:	ee07 1a90 	vmovpl	s15, r1
 80049c6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80049ca:	eef0 7a47 	vmovmi.f32	s15, s14
 80049ce:	ece4 7a01 	vstmia	r4!, {s15}
 80049d2:	3001      	adds	r0, #1
 80049d4:	e7dd      	b.n	8004992 <__kernel_rem_pio2f+0x4e>
 80049d6:	ecfe 6a01 	vldmia	lr!, {s13}
 80049da:	ed96 7a00 	vldr	s14, [r6]
 80049de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80049e2:	3401      	adds	r4, #1
 80049e4:	455c      	cmp	r4, fp
 80049e6:	f1a6 0604 	sub.w	r6, r6, #4
 80049ea:	ddf4      	ble.n	80049d6 <__kernel_rem_pio2f+0x92>
 80049ec:	ece9 7a01 	vstmia	r9!, {s15}
 80049f0:	f10c 0c01 	add.w	ip, ip, #1
 80049f4:	3004      	adds	r0, #4
 80049f6:	e7d5      	b.n	80049a4 <__kernel_rem_pio2f+0x60>
 80049f8:	a908      	add	r1, sp, #32
 80049fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80049fe:	9104      	str	r1, [sp, #16]
 8004a00:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004a02:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8004c44 <__kernel_rem_pio2f+0x300>
 8004a06:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8004c40 <__kernel_rem_pio2f+0x2fc>
 8004a0a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004a0e:	9203      	str	r2, [sp, #12]
 8004a10:	4654      	mov	r4, sl
 8004a12:	00a2      	lsls	r2, r4, #2
 8004a14:	9205      	str	r2, [sp, #20]
 8004a16:	aa58      	add	r2, sp, #352	@ 0x160
 8004a18:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004a1c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8004a20:	a944      	add	r1, sp, #272	@ 0x110
 8004a22:	aa08      	add	r2, sp, #32
 8004a24:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004a28:	4694      	mov	ip, r2
 8004a2a:	4626      	mov	r6, r4
 8004a2c:	2e00      	cmp	r6, #0
 8004a2e:	f1a0 0004 	sub.w	r0, r0, #4
 8004a32:	dc4c      	bgt.n	8004ace <__kernel_rem_pio2f+0x18a>
 8004a34:	4628      	mov	r0, r5
 8004a36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a3a:	f000 f9f5 	bl	8004e28 <scalbnf>
 8004a3e:	eeb0 8a40 	vmov.f32	s16, s0
 8004a42:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8004a46:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004a4a:	f000 fa53 	bl	8004ef4 <floorf>
 8004a4e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8004a52:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a5c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004a60:	ee17 9a90 	vmov	r9, s15
 8004a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a68:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004a6c:	dd41      	ble.n	8004af2 <__kernel_rem_pio2f+0x1ae>
 8004a6e:	f104 3cff 	add.w	ip, r4, #4294967295
 8004a72:	a908      	add	r1, sp, #32
 8004a74:	f1c5 0e08 	rsb	lr, r5, #8
 8004a78:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8004a7c:	fa46 f00e 	asr.w	r0, r6, lr
 8004a80:	4481      	add	r9, r0
 8004a82:	fa00 f00e 	lsl.w	r0, r0, lr
 8004a86:	1a36      	subs	r6, r6, r0
 8004a88:	f1c5 0007 	rsb	r0, r5, #7
 8004a8c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8004a90:	4106      	asrs	r6, r0
 8004a92:	2e00      	cmp	r6, #0
 8004a94:	dd3c      	ble.n	8004b10 <__kernel_rem_pio2f+0x1cc>
 8004a96:	f04f 0e00 	mov.w	lr, #0
 8004a9a:	f109 0901 	add.w	r9, r9, #1
 8004a9e:	4670      	mov	r0, lr
 8004aa0:	4574      	cmp	r4, lr
 8004aa2:	dc68      	bgt.n	8004b76 <__kernel_rem_pio2f+0x232>
 8004aa4:	2d00      	cmp	r5, #0
 8004aa6:	dd03      	ble.n	8004ab0 <__kernel_rem_pio2f+0x16c>
 8004aa8:	2d01      	cmp	r5, #1
 8004aaa:	d074      	beq.n	8004b96 <__kernel_rem_pio2f+0x252>
 8004aac:	2d02      	cmp	r5, #2
 8004aae:	d07d      	beq.n	8004bac <__kernel_rem_pio2f+0x268>
 8004ab0:	2e02      	cmp	r6, #2
 8004ab2:	d12d      	bne.n	8004b10 <__kernel_rem_pio2f+0x1cc>
 8004ab4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004ab8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004abc:	b340      	cbz	r0, 8004b10 <__kernel_rem_pio2f+0x1cc>
 8004abe:	4628      	mov	r0, r5
 8004ac0:	9306      	str	r3, [sp, #24]
 8004ac2:	f000 f9b1 	bl	8004e28 <scalbnf>
 8004ac6:	9b06      	ldr	r3, [sp, #24]
 8004ac8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004acc:	e020      	b.n	8004b10 <__kernel_rem_pio2f+0x1cc>
 8004ace:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004ad2:	3e01      	subs	r6, #1
 8004ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004adc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004ae0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004ae4:	ecac 0a01 	vstmia	ip!, {s0}
 8004ae8:	ed90 0a00 	vldr	s0, [r0]
 8004aec:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004af0:	e79c      	b.n	8004a2c <__kernel_rem_pio2f+0xe8>
 8004af2:	d105      	bne.n	8004b00 <__kernel_rem_pio2f+0x1bc>
 8004af4:	1e60      	subs	r0, r4, #1
 8004af6:	a908      	add	r1, sp, #32
 8004af8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004afc:	11f6      	asrs	r6, r6, #7
 8004afe:	e7c8      	b.n	8004a92 <__kernel_rem_pio2f+0x14e>
 8004b00:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004b04:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0c:	da31      	bge.n	8004b72 <__kernel_rem_pio2f+0x22e>
 8004b0e:	2600      	movs	r6, #0
 8004b10:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b18:	f040 8098 	bne.w	8004c4c <__kernel_rem_pio2f+0x308>
 8004b1c:	1e60      	subs	r0, r4, #1
 8004b1e:	2200      	movs	r2, #0
 8004b20:	4550      	cmp	r0, sl
 8004b22:	da4b      	bge.n	8004bbc <__kernel_rem_pio2f+0x278>
 8004b24:	2a00      	cmp	r2, #0
 8004b26:	d065      	beq.n	8004bf4 <__kernel_rem_pio2f+0x2b0>
 8004b28:	3c01      	subs	r4, #1
 8004b2a:	ab08      	add	r3, sp, #32
 8004b2c:	3d08      	subs	r5, #8
 8004b2e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f8      	beq.n	8004b28 <__kernel_rem_pio2f+0x1e4>
 8004b36:	4628      	mov	r0, r5
 8004b38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004b3c:	f000 f974 	bl	8004e28 <scalbnf>
 8004b40:	1c63      	adds	r3, r4, #1
 8004b42:	aa44      	add	r2, sp, #272	@ 0x110
 8004b44:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004c44 <__kernel_rem_pio2f+0x300>
 8004b48:	0099      	lsls	r1, r3, #2
 8004b4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004b4e:	4623      	mov	r3, r4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f280 80a9 	bge.w	8004ca8 <__kernel_rem_pio2f+0x364>
 8004b56:	4623      	mov	r3, r4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f2c0 80c7 	blt.w	8004cec <__kernel_rem_pio2f+0x3a8>
 8004b5e:	aa44      	add	r2, sp, #272	@ 0x110
 8004b60:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004b64:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004c3c <__kernel_rem_pio2f+0x2f8>
 8004b68:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004c48 <__kernel_rem_pio2f+0x304>
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	1ae2      	subs	r2, r4, r3
 8004b70:	e0b1      	b.n	8004cd6 <__kernel_rem_pio2f+0x392>
 8004b72:	2602      	movs	r6, #2
 8004b74:	e78f      	b.n	8004a96 <__kernel_rem_pio2f+0x152>
 8004b76:	f852 1b04 	ldr.w	r1, [r2], #4
 8004b7a:	b948      	cbnz	r0, 8004b90 <__kernel_rem_pio2f+0x24c>
 8004b7c:	b121      	cbz	r1, 8004b88 <__kernel_rem_pio2f+0x244>
 8004b7e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8004b82:	f842 1c04 	str.w	r1, [r2, #-4]
 8004b86:	2101      	movs	r1, #1
 8004b88:	f10e 0e01 	add.w	lr, lr, #1
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	e787      	b.n	8004aa0 <__kernel_rem_pio2f+0x15c>
 8004b90:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8004b94:	e7f5      	b.n	8004b82 <__kernel_rem_pio2f+0x23e>
 8004b96:	f104 3cff 	add.w	ip, r4, #4294967295
 8004b9a:	aa08      	add	r2, sp, #32
 8004b9c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004ba0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ba4:	a908      	add	r1, sp, #32
 8004ba6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8004baa:	e781      	b.n	8004ab0 <__kernel_rem_pio2f+0x16c>
 8004bac:	f104 3cff 	add.w	ip, r4, #4294967295
 8004bb0:	aa08      	add	r2, sp, #32
 8004bb2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004bb6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004bba:	e7f3      	b.n	8004ba4 <__kernel_rem_pio2f+0x260>
 8004bbc:	a908      	add	r1, sp, #32
 8004bbe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004bc2:	3801      	subs	r0, #1
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	e7ab      	b.n	8004b20 <__kernel_rem_pio2f+0x1dc>
 8004bc8:	3201      	adds	r2, #1
 8004bca:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8004bce:	2e00      	cmp	r6, #0
 8004bd0:	d0fa      	beq.n	8004bc8 <__kernel_rem_pio2f+0x284>
 8004bd2:	9905      	ldr	r1, [sp, #20]
 8004bd4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8004bd8:	eb0d 0001 	add.w	r0, sp, r1
 8004bdc:	18e6      	adds	r6, r4, r3
 8004bde:	a91c      	add	r1, sp, #112	@ 0x70
 8004be0:	f104 0c01 	add.w	ip, r4, #1
 8004be4:	384c      	subs	r0, #76	@ 0x4c
 8004be6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004bea:	4422      	add	r2, r4
 8004bec:	4562      	cmp	r2, ip
 8004bee:	da04      	bge.n	8004bfa <__kernel_rem_pio2f+0x2b6>
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	e70e      	b.n	8004a12 <__kernel_rem_pio2f+0xce>
 8004bf4:	9804      	ldr	r0, [sp, #16]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	e7e7      	b.n	8004bca <__kernel_rem_pio2f+0x286>
 8004bfa:	9903      	ldr	r1, [sp, #12]
 8004bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004c00:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8004c04:	9105      	str	r1, [sp, #20]
 8004c06:	ee07 1a90 	vmov	s15, r1
 8004c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c0e:	2400      	movs	r4, #0
 8004c10:	ece6 7a01 	vstmia	r6!, {s15}
 8004c14:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8004c48 <__kernel_rem_pio2f+0x304>
 8004c18:	46b1      	mov	r9, r6
 8004c1a:	455c      	cmp	r4, fp
 8004c1c:	dd04      	ble.n	8004c28 <__kernel_rem_pio2f+0x2e4>
 8004c1e:	ece0 7a01 	vstmia	r0!, {s15}
 8004c22:	f10c 0c01 	add.w	ip, ip, #1
 8004c26:	e7e1      	b.n	8004bec <__kernel_rem_pio2f+0x2a8>
 8004c28:	ecfe 6a01 	vldmia	lr!, {s13}
 8004c2c:	ed39 7a01 	vldmdb	r9!, {s14}
 8004c30:	3401      	adds	r4, #1
 8004c32:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004c36:	e7f0      	b.n	8004c1a <__kernel_rem_pio2f+0x2d6>
 8004c38:	08005368 	.word	0x08005368
 8004c3c:	0800533c 	.word	0x0800533c
 8004c40:	43800000 	.word	0x43800000
 8004c44:	3b800000 	.word	0x3b800000
 8004c48:	00000000 	.word	0x00000000
 8004c4c:	9b02      	ldr	r3, [sp, #8]
 8004c4e:	eeb0 0a48 	vmov.f32	s0, s16
 8004c52:	eba3 0008 	sub.w	r0, r3, r8
 8004c56:	f000 f8e7 	bl	8004e28 <scalbnf>
 8004c5a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8004c40 <__kernel_rem_pio2f+0x2fc>
 8004c5e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c66:	db19      	blt.n	8004c9c <__kernel_rem_pio2f+0x358>
 8004c68:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8004c44 <__kernel_rem_pio2f+0x300>
 8004c6c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004c70:	aa08      	add	r2, sp, #32
 8004c72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c76:	3508      	adds	r5, #8
 8004c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c7c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004c88:	ee10 3a10 	vmov	r3, s0
 8004c8c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004c90:	ee17 3a90 	vmov	r3, s15
 8004c94:	3401      	adds	r4, #1
 8004c96:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004c9a:	e74c      	b.n	8004b36 <__kernel_rem_pio2f+0x1f2>
 8004c9c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004ca0:	aa08      	add	r2, sp, #32
 8004ca2:	ee10 3a10 	vmov	r3, s0
 8004ca6:	e7f6      	b.n	8004c96 <__kernel_rem_pio2f+0x352>
 8004ca8:	a808      	add	r0, sp, #32
 8004caa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004cae:	9001      	str	r0, [sp, #4]
 8004cb0:	ee07 0a90 	vmov	s15, r0
 8004cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004cbe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004cc2:	ed62 7a01 	vstmdb	r2!, {s15}
 8004cc6:	e743      	b.n	8004b50 <__kernel_rem_pio2f+0x20c>
 8004cc8:	ecfc 6a01 	vldmia	ip!, {s13}
 8004ccc:	ecb5 7a01 	vldmia	r5!, {s14}
 8004cd0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	4550      	cmp	r0, sl
 8004cd8:	dc01      	bgt.n	8004cde <__kernel_rem_pio2f+0x39a>
 8004cda:	4282      	cmp	r2, r0
 8004cdc:	daf4      	bge.n	8004cc8 <__kernel_rem_pio2f+0x384>
 8004cde:	a858      	add	r0, sp, #352	@ 0x160
 8004ce0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ce4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	e735      	b.n	8004b58 <__kernel_rem_pio2f+0x214>
 8004cec:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	dc09      	bgt.n	8004d06 <__kernel_rem_pio2f+0x3c2>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dc2b      	bgt.n	8004d4e <__kernel_rem_pio2f+0x40a>
 8004cf6:	d044      	beq.n	8004d82 <__kernel_rem_pio2f+0x43e>
 8004cf8:	f009 0007 	and.w	r0, r9, #7
 8004cfc:	b059      	add	sp, #356	@ 0x164
 8004cfe:	ecbd 8b04 	vpop	{d8-d9}
 8004d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d06:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d1f5      	bne.n	8004cf8 <__kernel_rem_pio2f+0x3b4>
 8004d0c:	aa30      	add	r2, sp, #192	@ 0xc0
 8004d0e:	1f0b      	subs	r3, r1, #4
 8004d10:	4413      	add	r3, r2
 8004d12:	461a      	mov	r2, r3
 8004d14:	4620      	mov	r0, r4
 8004d16:	2800      	cmp	r0, #0
 8004d18:	f1a2 0204 	sub.w	r2, r2, #4
 8004d1c:	dc52      	bgt.n	8004dc4 <__kernel_rem_pio2f+0x480>
 8004d1e:	4622      	mov	r2, r4
 8004d20:	2a01      	cmp	r2, #1
 8004d22:	f1a3 0304 	sub.w	r3, r3, #4
 8004d26:	dc5d      	bgt.n	8004de4 <__kernel_rem_pio2f+0x4a0>
 8004d28:	ab30      	add	r3, sp, #192	@ 0xc0
 8004d2a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8004c48 <__kernel_rem_pio2f+0x304>
 8004d2e:	440b      	add	r3, r1
 8004d30:	2c01      	cmp	r4, #1
 8004d32:	dc67      	bgt.n	8004e04 <__kernel_rem_pio2f+0x4c0>
 8004d34:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8004d38:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004d3c:	2e00      	cmp	r6, #0
 8004d3e:	d167      	bne.n	8004e10 <__kernel_rem_pio2f+0x4cc>
 8004d40:	edc7 6a00 	vstr	s13, [r7]
 8004d44:	ed87 7a01 	vstr	s14, [r7, #4]
 8004d48:	edc7 7a02 	vstr	s15, [r7, #8]
 8004d4c:	e7d4      	b.n	8004cf8 <__kernel_rem_pio2f+0x3b4>
 8004d4e:	ab30      	add	r3, sp, #192	@ 0xc0
 8004d50:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8004c48 <__kernel_rem_pio2f+0x304>
 8004d54:	440b      	add	r3, r1
 8004d56:	4622      	mov	r2, r4
 8004d58:	2a00      	cmp	r2, #0
 8004d5a:	da24      	bge.n	8004da6 <__kernel_rem_pio2f+0x462>
 8004d5c:	b34e      	cbz	r6, 8004db2 <__kernel_rem_pio2f+0x46e>
 8004d5e:	eef1 7a47 	vneg.f32	s15, s14
 8004d62:	edc7 7a00 	vstr	s15, [r7]
 8004d66:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8004d6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d6e:	aa31      	add	r2, sp, #196	@ 0xc4
 8004d70:	2301      	movs	r3, #1
 8004d72:	429c      	cmp	r4, r3
 8004d74:	da20      	bge.n	8004db8 <__kernel_rem_pio2f+0x474>
 8004d76:	b10e      	cbz	r6, 8004d7c <__kernel_rem_pio2f+0x438>
 8004d78:	eef1 7a67 	vneg.f32	s15, s15
 8004d7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004d80:	e7ba      	b.n	8004cf8 <__kernel_rem_pio2f+0x3b4>
 8004d82:	ab30      	add	r3, sp, #192	@ 0xc0
 8004d84:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8004c48 <__kernel_rem_pio2f+0x304>
 8004d88:	440b      	add	r3, r1
 8004d8a:	2c00      	cmp	r4, #0
 8004d8c:	da05      	bge.n	8004d9a <__kernel_rem_pio2f+0x456>
 8004d8e:	b10e      	cbz	r6, 8004d94 <__kernel_rem_pio2f+0x450>
 8004d90:	eef1 7a67 	vneg.f32	s15, s15
 8004d94:	edc7 7a00 	vstr	s15, [r7]
 8004d98:	e7ae      	b.n	8004cf8 <__kernel_rem_pio2f+0x3b4>
 8004d9a:	ed33 7a01 	vldmdb	r3!, {s14}
 8004d9e:	3c01      	subs	r4, #1
 8004da0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004da4:	e7f1      	b.n	8004d8a <__kernel_rem_pio2f+0x446>
 8004da6:	ed73 7a01 	vldmdb	r3!, {s15}
 8004daa:	3a01      	subs	r2, #1
 8004dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004db0:	e7d2      	b.n	8004d58 <__kernel_rem_pio2f+0x414>
 8004db2:	eef0 7a47 	vmov.f32	s15, s14
 8004db6:	e7d4      	b.n	8004d62 <__kernel_rem_pio2f+0x41e>
 8004db8:	ecb2 7a01 	vldmia	r2!, {s14}
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004dc2:	e7d6      	b.n	8004d72 <__kernel_rem_pio2f+0x42e>
 8004dc4:	edd2 7a00 	vldr	s15, [r2]
 8004dc8:	edd2 6a01 	vldr	s13, [r2, #4]
 8004dcc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004dd0:	3801      	subs	r0, #1
 8004dd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dd6:	ed82 7a00 	vstr	s14, [r2]
 8004dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dde:	edc2 7a01 	vstr	s15, [r2, #4]
 8004de2:	e798      	b.n	8004d16 <__kernel_rem_pio2f+0x3d2>
 8004de4:	edd3 7a00 	vldr	s15, [r3]
 8004de8:	edd3 6a01 	vldr	s13, [r3, #4]
 8004dec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004df0:	3a01      	subs	r2, #1
 8004df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004df6:	ed83 7a00 	vstr	s14, [r3]
 8004dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfe:	edc3 7a01 	vstr	s15, [r3, #4]
 8004e02:	e78d      	b.n	8004d20 <__kernel_rem_pio2f+0x3dc>
 8004e04:	ed33 7a01 	vldmdb	r3!, {s14}
 8004e08:	3c01      	subs	r4, #1
 8004e0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e0e:	e78f      	b.n	8004d30 <__kernel_rem_pio2f+0x3ec>
 8004e10:	eef1 6a66 	vneg.f32	s13, s13
 8004e14:	eeb1 7a47 	vneg.f32	s14, s14
 8004e18:	edc7 6a00 	vstr	s13, [r7]
 8004e1c:	ed87 7a01 	vstr	s14, [r7, #4]
 8004e20:	eef1 7a67 	vneg.f32	s15, s15
 8004e24:	e790      	b.n	8004d48 <__kernel_rem_pio2f+0x404>
 8004e26:	bf00      	nop

08004e28 <scalbnf>:
 8004e28:	ee10 3a10 	vmov	r3, s0
 8004e2c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004e30:	d02b      	beq.n	8004e8a <scalbnf+0x62>
 8004e32:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004e36:	d302      	bcc.n	8004e3e <scalbnf+0x16>
 8004e38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004e3c:	4770      	bx	lr
 8004e3e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8004e42:	d123      	bne.n	8004e8c <scalbnf+0x64>
 8004e44:	4b24      	ldr	r3, [pc, #144]	@ (8004ed8 <scalbnf+0xb0>)
 8004e46:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8004edc <scalbnf+0xb4>
 8004e4a:	4298      	cmp	r0, r3
 8004e4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e50:	db17      	blt.n	8004e82 <scalbnf+0x5a>
 8004e52:	ee10 3a10 	vmov	r3, s0
 8004e56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004e5a:	3a19      	subs	r2, #25
 8004e5c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004e60:	4288      	cmp	r0, r1
 8004e62:	dd15      	ble.n	8004e90 <scalbnf+0x68>
 8004e64:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8004ee0 <scalbnf+0xb8>
 8004e68:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8004ee4 <scalbnf+0xbc>
 8004e6c:	ee10 3a10 	vmov	r3, s0
 8004e70:	eeb0 7a67 	vmov.f32	s14, s15
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bfb8      	it	lt
 8004e78:	eef0 7a66 	vmovlt.f32	s15, s13
 8004e7c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004e80:	4770      	bx	lr
 8004e82:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004ee8 <scalbnf+0xc0>
 8004e86:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004e8a:	4770      	bx	lr
 8004e8c:	0dd2      	lsrs	r2, r2, #23
 8004e8e:	e7e5      	b.n	8004e5c <scalbnf+0x34>
 8004e90:	4410      	add	r0, r2
 8004e92:	28fe      	cmp	r0, #254	@ 0xfe
 8004e94:	dce6      	bgt.n	8004e64 <scalbnf+0x3c>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	dd06      	ble.n	8004ea8 <scalbnf+0x80>
 8004e9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004e9e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004ea2:	ee00 3a10 	vmov	s0, r3
 8004ea6:	4770      	bx	lr
 8004ea8:	f110 0f16 	cmn.w	r0, #22
 8004eac:	da09      	bge.n	8004ec2 <scalbnf+0x9a>
 8004eae:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004ee8 <scalbnf+0xc0>
 8004eb2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8004eec <scalbnf+0xc4>
 8004eb6:	ee10 3a10 	vmov	r3, s0
 8004eba:	eeb0 7a67 	vmov.f32	s14, s15
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	e7d9      	b.n	8004e76 <scalbnf+0x4e>
 8004ec2:	3019      	adds	r0, #25
 8004ec4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004ec8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004ecc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8004ef0 <scalbnf+0xc8>
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	e7d7      	b.n	8004e86 <scalbnf+0x5e>
 8004ed6:	bf00      	nop
 8004ed8:	ffff3cb0 	.word	0xffff3cb0
 8004edc:	4c000000 	.word	0x4c000000
 8004ee0:	7149f2ca 	.word	0x7149f2ca
 8004ee4:	f149f2ca 	.word	0xf149f2ca
 8004ee8:	0da24260 	.word	0x0da24260
 8004eec:	8da24260 	.word	0x8da24260
 8004ef0:	33000000 	.word	0x33000000

08004ef4 <floorf>:
 8004ef4:	ee10 3a10 	vmov	r3, s0
 8004ef8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004efc:	3a7f      	subs	r2, #127	@ 0x7f
 8004efe:	2a16      	cmp	r2, #22
 8004f00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004f04:	dc2b      	bgt.n	8004f5e <floorf+0x6a>
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	da12      	bge.n	8004f30 <floorf+0x3c>
 8004f0a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004f70 <floorf+0x7c>
 8004f0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004f12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1a:	dd06      	ble.n	8004f2a <floorf+0x36>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	da24      	bge.n	8004f6a <floorf+0x76>
 8004f20:	2900      	cmp	r1, #0
 8004f22:	4b14      	ldr	r3, [pc, #80]	@ (8004f74 <floorf+0x80>)
 8004f24:	bf08      	it	eq
 8004f26:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8004f2a:	ee00 3a10 	vmov	s0, r3
 8004f2e:	4770      	bx	lr
 8004f30:	4911      	ldr	r1, [pc, #68]	@ (8004f78 <floorf+0x84>)
 8004f32:	4111      	asrs	r1, r2
 8004f34:	420b      	tst	r3, r1
 8004f36:	d0fa      	beq.n	8004f2e <floorf+0x3a>
 8004f38:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8004f70 <floorf+0x7c>
 8004f3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004f40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f48:	ddef      	ble.n	8004f2a <floorf+0x36>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bfbe      	ittt	lt
 8004f4e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8004f52:	fa40 f202 	asrlt.w	r2, r0, r2
 8004f56:	189b      	addlt	r3, r3, r2
 8004f58:	ea23 0301 	bic.w	r3, r3, r1
 8004f5c:	e7e5      	b.n	8004f2a <floorf+0x36>
 8004f5e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8004f62:	d3e4      	bcc.n	8004f2e <floorf+0x3a>
 8004f64:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004f68:	4770      	bx	lr
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e7dd      	b.n	8004f2a <floorf+0x36>
 8004f6e:	bf00      	nop
 8004f70:	7149f2ca 	.word	0x7149f2ca
 8004f74:	bf800000 	.word	0xbf800000
 8004f78:	007fffff 	.word	0x007fffff

08004f7c <_init>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr

08004f88 <_fini>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr
