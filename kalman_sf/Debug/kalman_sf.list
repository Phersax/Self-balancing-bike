
kalman_sf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b4  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005880  08005880  00006880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005940  08005940  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  08005940  08005940  00006940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005948  08005948  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005948  08005948  00006948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800594c  0800594c  0000694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08005950  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000078  080059c8  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080059c8  000072c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc66  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002408  00000000  00000000  00014d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00017118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1b  00000000  00000000  00017f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023697  00000000  00000000  00018a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c3c  00000000  00000000  0003c122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d347b  00000000  00000000  0004ed5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001221d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004478  00000000  00000000  0012221c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00126694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005864 	.word	0x08005864

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	08005864 	.word	0x08005864

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b96a 	b.w	8000e6c <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	460c      	mov	r4, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14e      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	458c      	cmp	ip, r1
 8000bc0:	4686      	mov	lr, r0
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	d962      	bls.n	8000c8e <__udivmoddi4+0xde>
 8000bc8:	b14a      	cbz	r2, 8000bde <__udivmoddi4+0x2e>
 8000bca:	f1c2 0320 	rsb	r3, r2, #32
 8000bce:	4091      	lsls	r1, r2
 8000bd0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd8:	4319      	orrs	r1, r3
 8000bda:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f f68c 	uxth.w	r6, ip
 8000be6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bee:	fb07 1114 	mls	r1, r7, r4, r1
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb04 f106 	mul.w	r1, r4, r6
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c06:	f080 8112 	bcs.w	8000e2e <__udivmoddi4+0x27e>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 810f 	bls.w	8000e2e <__udivmoddi4+0x27e>
 8000c10:	3c02      	subs	r4, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a59      	subs	r1, r3, r1
 8000c16:	fa1f f38e 	uxth.w	r3, lr
 8000c1a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c26:	fb00 f606 	mul.w	r6, r0, r6
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	d90a      	bls.n	8000c44 <__udivmoddi4+0x94>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c36:	f080 80fc 	bcs.w	8000e32 <__udivmoddi4+0x282>
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	f240 80f9 	bls.w	8000e32 <__udivmoddi4+0x282>
 8000c40:	4463      	add	r3, ip
 8000c42:	3802      	subs	r0, #2
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	b11d      	cbz	r5, 8000c56 <__udivmoddi4+0xa6>
 8000c4e:	40d3      	lsrs	r3, r2
 8000c50:	2200      	movs	r2, #0
 8000c52:	e9c5 3200 	strd	r3, r2, [r5]
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d905      	bls.n	8000c6a <__udivmoddi4+0xba>
 8000c5e:	b10d      	cbz	r5, 8000c64 <__udivmoddi4+0xb4>
 8000c60:	e9c5 0100 	strd	r0, r1, [r5]
 8000c64:	2100      	movs	r1, #0
 8000c66:	4608      	mov	r0, r1
 8000c68:	e7f5      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000c6a:	fab3 f183 	clz	r1, r3
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	d146      	bne.n	8000d00 <__udivmoddi4+0x150>
 8000c72:	42a3      	cmp	r3, r4
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xcc>
 8000c76:	4290      	cmp	r0, r2
 8000c78:	f0c0 80f0 	bcc.w	8000e5c <__udivmoddi4+0x2ac>
 8000c7c:	1a86      	subs	r6, r0, r2
 8000c7e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d0e6      	beq.n	8000c56 <__udivmoddi4+0xa6>
 8000c88:	e9c5 6300 	strd	r6, r3, [r5]
 8000c8c:	e7e3      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000c8e:	2a00      	cmp	r2, #0
 8000c90:	f040 8090 	bne.w	8000db4 <__udivmoddi4+0x204>
 8000c94:	eba1 040c 	sub.w	r4, r1, ip
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	fa1f f78c 	uxth.w	r7, ip
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000caa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb2:	fb07 f006 	mul.w	r0, r7, r6
 8000cb6:	4298      	cmp	r0, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x11c>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x11a>
 8000cc4:	4298      	cmp	r0, r3
 8000cc6:	f200 80cd 	bhi.w	8000e64 <__udivmoddi4+0x2b4>
 8000cca:	4626      	mov	r6, r4
 8000ccc:	1a1c      	subs	r4, r3, r0
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb00 f707 	mul.w	r7, r0, r7
 8000ce2:	429f      	cmp	r7, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x148>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x146>
 8000cf0:	429f      	cmp	r7, r3
 8000cf2:	f200 80b0 	bhi.w	8000e56 <__udivmoddi4+0x2a6>
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	1bdb      	subs	r3, r3, r7
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0x9c>
 8000d00:	f1c1 0620 	rsb	r6, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa22 f706 	lsr.w	r7, r2, r6
 8000d0a:	431f      	orrs	r7, r3
 8000d0c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d10:	fa04 f301 	lsl.w	r3, r4, r1
 8000d14:	ea43 030c 	orr.w	r3, r3, ip
 8000d18:	40f4      	lsrs	r4, r6
 8000d1a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1e:	0c38      	lsrs	r0, r7, #16
 8000d20:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d24:	fbb4 fef0 	udiv	lr, r4, r0
 8000d28:	fa1f fc87 	uxth.w	ip, r7
 8000d2c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d30:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d34:	fb0e f90c 	mul.w	r9, lr, ip
 8000d38:	45a1      	cmp	r9, r4
 8000d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x1a6>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d46:	f080 8084 	bcs.w	8000e52 <__udivmoddi4+0x2a2>
 8000d4a:	45a1      	cmp	r9, r4
 8000d4c:	f240 8081 	bls.w	8000e52 <__udivmoddi4+0x2a2>
 8000d50:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	eba4 0409 	sub.w	r4, r4, r9
 8000d5a:	fa1f f983 	uxth.w	r9, r3
 8000d5e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d62:	fb00 4413 	mls	r4, r0, r3, r4
 8000d66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6e:	45a4      	cmp	ip, r4
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x1d2>
 8000d72:	193c      	adds	r4, r7, r4
 8000d74:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d78:	d267      	bcs.n	8000e4a <__udivmoddi4+0x29a>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	d965      	bls.n	8000e4a <__udivmoddi4+0x29a>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d86:	fba0 9302 	umull	r9, r3, r0, r2
 8000d8a:	eba4 040c 	sub.w	r4, r4, ip
 8000d8e:	429c      	cmp	r4, r3
 8000d90:	46ce      	mov	lr, r9
 8000d92:	469c      	mov	ip, r3
 8000d94:	d351      	bcc.n	8000e3a <__udivmoddi4+0x28a>
 8000d96:	d04e      	beq.n	8000e36 <__udivmoddi4+0x286>
 8000d98:	b155      	cbz	r5, 8000db0 <__udivmoddi4+0x200>
 8000d9a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9e:	eb64 040c 	sbc.w	r4, r4, ip
 8000da2:	fa04 f606 	lsl.w	r6, r4, r6
 8000da6:	40cb      	lsrs	r3, r1
 8000da8:	431e      	orrs	r6, r3
 8000daa:	40cc      	lsrs	r4, r1
 8000dac:	e9c5 6400 	strd	r6, r4, [r5]
 8000db0:	2100      	movs	r1, #0
 8000db2:	e750      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc4:	4094      	lsls	r4, r2
 8000dc6:	430c      	orrs	r4, r1
 8000dc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dcc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd8:	fb08 3110 	mls	r1, r8, r0, r3
 8000ddc:	0c23      	lsrs	r3, r4, #16
 8000dde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de2:	fb00 f107 	mul.w	r1, r0, r7
 8000de6:	4299      	cmp	r1, r3
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x24c>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 36ff 	add.w	r6, r0, #4294967295
 8000df2:	d22c      	bcs.n	8000e4e <__udivmoddi4+0x29e>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	d92a      	bls.n	8000e4e <__udivmoddi4+0x29e>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e04:	fb08 3311 	mls	r3, r8, r1, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb01 f307 	mul.w	r3, r1, r7
 8000e10:	42a3      	cmp	r3, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x276>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e1c:	d213      	bcs.n	8000e46 <__udivmoddi4+0x296>
 8000e1e:	42a3      	cmp	r3, r4
 8000e20:	d911      	bls.n	8000e46 <__udivmoddi4+0x296>
 8000e22:	3902      	subs	r1, #2
 8000e24:	4464      	add	r4, ip
 8000e26:	1ae4      	subs	r4, r4, r3
 8000e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e2c:	e739      	b.n	8000ca2 <__udivmoddi4+0xf2>
 8000e2e:	4604      	mov	r4, r0
 8000e30:	e6f0      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e706      	b.n	8000c44 <__udivmoddi4+0x94>
 8000e36:	45c8      	cmp	r8, r9
 8000e38:	d2ae      	bcs.n	8000d98 <__udivmoddi4+0x1e8>
 8000e3a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e42:	3801      	subs	r0, #1
 8000e44:	e7a8      	b.n	8000d98 <__udivmoddi4+0x1e8>
 8000e46:	4631      	mov	r1, r6
 8000e48:	e7ed      	b.n	8000e26 <__udivmoddi4+0x276>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	e799      	b.n	8000d82 <__udivmoddi4+0x1d2>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e7d4      	b.n	8000dfc <__udivmoddi4+0x24c>
 8000e52:	46d6      	mov	lr, sl
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1a6>
 8000e56:	4463      	add	r3, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e74d      	b.n	8000cf8 <__udivmoddi4+0x148>
 8000e5c:	4606      	mov	r6, r0
 8000e5e:	4623      	mov	r3, r4
 8000e60:	4608      	mov	r0, r1
 8000e62:	e70f      	b.n	8000c84 <__udivmoddi4+0xd4>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	e730      	b.n	8000ccc <__udivmoddi4+0x11c>
 8000e6a:	bf00      	nop

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <updateOrientation>:
#include "filter.h"

Orientation or;

void updateOrientation(float accX, float accY, float accZ, float gyroX, float gyroY, float gyroZ) 
{
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	ed87 0a05 	vstr	s0, [r7, #20]
 8000e7a:	edc7 0a04 	vstr	s1, [r7, #16]
 8000e7e:	ed87 1a03 	vstr	s2, [r7, #12]
 8000e82:	edc7 1a02 	vstr	s3, [r7, #8]
 8000e86:	ed87 2a01 	vstr	s4, [r7, #4]
 8000e8a:	edc7 2a00 	vstr	s5, [r7]

  // compute pitch and roll from acc
  float pitchAcc = atan(accX / sqrt(accY*accY + accZ*accZ)) * 180 / M_PI;
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff fb1e 	bl	80004d0 <__aeabi_f2d>
 8000e94:	4604      	mov	r4, r0
 8000e96:	460d      	mov	r5, r1
 8000e98:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e9c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ea0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ea4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eac:	ee17 0a90 	vmov	r0, s15
 8000eb0:	f7ff fb0e 	bl	80004d0 <__aeabi_f2d>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	ec43 2b10 	vmov	d0, r2, r3
 8000ebc:	f004 fa2a 	bl	8005314 <sqrt>
 8000ec0:	ec53 2b10 	vmov	r2, r3, d0
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	f7ff fc84 	bl	80007d4 <__aeabi_ddiv>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	ec43 2b17 	vmov	d7, r2, r3
 8000ed4:	eeb0 0a47 	vmov.f32	s0, s14
 8000ed8:	eef0 0a67 	vmov.f32	s1, s15
 8000edc:	f004 fa48 	bl	8005370 <atan>
 8000ee0:	ec51 0b10 	vmov	r0, r1, d0
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b95      	ldr	r3, [pc, #596]	@ (8001140 <updateOrientation+0x2d0>)
 8000eea:	f7ff fb49 	bl	8000580 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	a38a      	add	r3, pc, #552	@ (adr r3, 8001120 <updateOrientation+0x2b0>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	f7ff fc6a 	bl	80007d4 <__aeabi_ddiv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f7ff fdea 	bl	8000ae0 <__aeabi_d2f>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  float rollAcc = atan(-accY / sqrt(accX*accX + accZ*accZ)) * 180 / M_PI;
 8000f10:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f14:	eef1 7a67 	vneg.f32	s15, s15
 8000f18:	ee17 3a90 	vmov	r3, s15
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fad7 	bl	80004d0 <__aeabi_f2d>
 8000f22:	4604      	mov	r4, r0
 8000f24:	460d      	mov	r5, r1
 8000f26:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f2a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f32:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f3a:	ee17 0a90 	vmov	r0, s15
 8000f3e:	f7ff fac7 	bl	80004d0 <__aeabi_f2d>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	ec43 2b10 	vmov	d0, r2, r3
 8000f4a:	f004 f9e3 	bl	8005314 <sqrt>
 8000f4e:	ec53 2b10 	vmov	r2, r3, d0
 8000f52:	4620      	mov	r0, r4
 8000f54:	4629      	mov	r1, r5
 8000f56:	f7ff fc3d 	bl	80007d4 <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	ec43 2b17 	vmov	d7, r2, r3
 8000f62:	eeb0 0a47 	vmov.f32	s0, s14
 8000f66:	eef0 0a67 	vmov.f32	s1, s15
 8000f6a:	f004 fa01 	bl	8005370 <atan>
 8000f6e:	ec51 0b10 	vmov	r0, r1, d0
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b72      	ldr	r3, [pc, #456]	@ (8001140 <updateOrientation+0x2d0>)
 8000f78:	f7ff fb02 	bl	8000580 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	a366      	add	r3, pc, #408	@ (adr r3, 8001120 <updateOrientation+0x2b0>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff fc23 	bl	80007d4 <__aeabi_ddiv>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fda3 	bl	8000ae0 <__aeabi_d2f>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	623b      	str	r3, [r7, #32]
  //float yawAcc = atan2(accY, accX);

  float pitchGyro = gyroX * DT;
 8000f9e:	68b8      	ldr	r0, [r7, #8]
 8000fa0:	f7ff fa96 	bl	80004d0 <__aeabi_f2d>
 8000fa4:	a360      	add	r3, pc, #384	@ (adr r3, 8001128 <updateOrientation+0x2b8>)
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	f7ff fae9 	bl	8000580 <__aeabi_dmul>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f7ff fd93 	bl	8000ae0 <__aeabi_d2f>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	61fb      	str	r3, [r7, #28]
  float rollGyro = gyroY * DT;
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fa86 	bl	80004d0 <__aeabi_f2d>
 8000fc4:	a358      	add	r3, pc, #352	@ (adr r3, 8001128 <updateOrientation+0x2b8>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fad9 	bl	8000580 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fd83 	bl	8000ae0 <__aeabi_d2f>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	61bb      	str	r3, [r7, #24]
  //float yawGyro = gyroZ * DT;

  // include complementary filter
  or.pitch = ALPHA * (or.pitch + pitchGyro) + (1 - ALPHA) * pitchAcc;
 8000fde:	4b59      	ldr	r3, [pc, #356]	@ (8001144 <updateOrientation+0x2d4>)
 8000fe0:	ed93 7a00 	vldr	s14, [r3]
 8000fe4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fec:	ee17 0a90 	vmov	r0, s15
 8000ff0:	f7ff fa6e 	bl	80004d0 <__aeabi_f2d>
 8000ff4:	a34e      	add	r3, pc, #312	@ (adr r3, 8001130 <updateOrientation+0x2c0>)
 8000ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffa:	f7ff fac1 	bl	8000580 <__aeabi_dmul>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4614      	mov	r4, r2
 8001004:	461d      	mov	r5, r3
 8001006:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001008:	f7ff fa62 	bl	80004d0 <__aeabi_f2d>
 800100c:	a34a      	add	r3, pc, #296	@ (adr r3, 8001138 <updateOrientation+0x2c8>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff fab5 	bl	8000580 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4620      	mov	r0, r4
 800101c:	4629      	mov	r1, r5
 800101e:	f7ff f8f9 	bl	8000214 <__adddf3>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fd59 	bl	8000ae0 <__aeabi_d2f>
 800102e:	4603      	mov	r3, r0
 8001030:	4a44      	ldr	r2, [pc, #272]	@ (8001144 <updateOrientation+0x2d4>)
 8001032:	6013      	str	r3, [r2, #0]
  or.roll = ALPHA * (or.roll + rollGyro) + (1 - ALPHA) * rollAcc;
 8001034:	4b43      	ldr	r3, [pc, #268]	@ (8001144 <updateOrientation+0x2d4>)
 8001036:	ed93 7a01 	vldr	s14, [r3, #4]
 800103a:	edd7 7a06 	vldr	s15, [r7, #24]
 800103e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001042:	ee17 0a90 	vmov	r0, s15
 8001046:	f7ff fa43 	bl	80004d0 <__aeabi_f2d>
 800104a:	a339      	add	r3, pc, #228	@ (adr r3, 8001130 <updateOrientation+0x2c0>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fa96 	bl	8000580 <__aeabi_dmul>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4614      	mov	r4, r2
 800105a:	461d      	mov	r5, r3
 800105c:	6a38      	ldr	r0, [r7, #32]
 800105e:	f7ff fa37 	bl	80004d0 <__aeabi_f2d>
 8001062:	a335      	add	r3, pc, #212	@ (adr r3, 8001138 <updateOrientation+0x2c8>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fa8a 	bl	8000580 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4620      	mov	r0, r4
 8001072:	4629      	mov	r1, r5
 8001074:	f7ff f8ce 	bl	8000214 <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fd2e 	bl	8000ae0 <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	4a2f      	ldr	r2, [pc, #188]	@ (8001144 <updateOrientation+0x2d4>)
 8001088:	6053      	str	r3, [r2, #4]

  or.yaw += gyroZ * DT;
 800108a:	4b2e      	ldr	r3, [pc, #184]	@ (8001144 <updateOrientation+0x2d4>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fa1e 	bl	80004d0 <__aeabi_f2d>
 8001094:	4604      	mov	r4, r0
 8001096:	460d      	mov	r5, r1
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	f7ff fa19 	bl	80004d0 <__aeabi_f2d>
 800109e:	a322      	add	r3, pc, #136	@ (adr r3, 8001128 <updateOrientation+0x2b8>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff fa6c 	bl	8000580 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4620      	mov	r0, r4
 80010ae:	4629      	mov	r1, r5
 80010b0:	f7ff f8b0 	bl	8000214 <__adddf3>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd10 	bl	8000ae0 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a20      	ldr	r2, [pc, #128]	@ (8001144 <updateOrientation+0x2d4>)
 80010c4:	6093      	str	r3, [r2, #8]
  if (or.yaw < 0) or.yaw += 360;
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <updateOrientation+0x2d4>)
 80010c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80010cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d4:	d50a      	bpl.n	80010ec <updateOrientation+0x27c>
 80010d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <updateOrientation+0x2d4>)
 80010d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80010dc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001148 <updateOrientation+0x2d8>
 80010e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010e4:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <updateOrientation+0x2d4>)
 80010e6:	edc3 7a02 	vstr	s15, [r3, #8]
  else if (or.yaw > 359) or.yaw -= 360;

}
 80010ea:	e014      	b.n	8001116 <updateOrientation+0x2a6>
  else if (or.yaw > 359) or.yaw -= 360;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <updateOrientation+0x2d4>)
 80010ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80010f2:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800114c <updateOrientation+0x2dc>
 80010f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fe:	dc00      	bgt.n	8001102 <updateOrientation+0x292>
}
 8001100:	e009      	b.n	8001116 <updateOrientation+0x2a6>
  else if (or.yaw > 359) or.yaw -= 360;
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <updateOrientation+0x2d4>)
 8001104:	edd3 7a02 	vldr	s15, [r3, #8]
 8001108:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001148 <updateOrientation+0x2d8>
 800110c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <updateOrientation+0x2d4>)
 8001112:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	@ 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bdb0      	pop	{r4, r5, r7, pc}
 800111e:	bf00      	nop
 8001120:	54442d18 	.word	0x54442d18
 8001124:	400921fb 	.word	0x400921fb
 8001128:	47ae147b 	.word	0x47ae147b
 800112c:	3f747ae1 	.word	0x3f747ae1
 8001130:	f5c28f5c 	.word	0xf5c28f5c
 8001134:	3fef5c28 	.word	0x3fef5c28
 8001138:	47ae1480 	.word	0x47ae1480
 800113c:	3f947ae1 	.word	0x3f947ae1
 8001140:	40668000 	.word	0x40668000
 8001144:	20000094 	.word	0x20000094
 8001148:	43b40000 	.word	0x43b40000
 800114c:	43b38000 	.word	0x43b38000

08001150 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_GPIO_Init+0x68>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a16      	ldr	r2, [pc, #88]	@ (80011b8 <MX_GPIO_Init+0x68>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_GPIO_Init+0x68>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <MX_GPIO_Init+0x68>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <MX_GPIO_Init+0x68>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <MX_GPIO_Init+0x68>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_GPIO_Init+0x68>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <MX_GPIO_Init+0x68>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_GPIO_Init+0x68>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
	I2C_ClearBusyBus();
 80011c0:	f000 f874 	bl	80012ac <I2C_ClearBusyBus>
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011c6:	4a13      	ldr	r2, [pc, #76]	@ (8001214 <MX_I2C1_Init+0x58>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011cc:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <MX_I2C1_Init+0x5c>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011fe:	f001 f8c7 	bl	8002390 <HAL_I2C_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C1_Init+0x50>
  {
    Error_Handler();
 8001208:	f000 f9ba 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000a0 	.word	0x200000a0
 8001214:	40005400 	.word	0x40005400
 8001218:	000186a0 	.word	0x000186a0

0800121c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a19      	ldr	r2, [pc, #100]	@ (80012a0 <HAL_I2C_MspInit+0x84>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12c      	bne.n	8001298 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a17      	ldr	r2, [pc, #92]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800125a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001260:	2312      	movs	r3, #18
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001264:	2301      	movs	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800126c:	2304      	movs	r3, #4
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <HAL_I2C_MspInit+0x8c>)
 8001278:	f000 fec4 	bl	8002004 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 8001286:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800128a:	6413      	str	r3, [r2, #64]	@ 0x40
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	@ 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40005400 	.word	0x40005400
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400

080012ac <I2C_ClearBusyBus>:
  }
}

/* USER CODE BEGIN 1 */
void I2C_ClearBusyBus(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]

    // Configure SCL and SDA as output for manual control
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012c4:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012c6:	2304      	movs	r3, #4
 80012c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  // Open-drain mode
 80012ca:	2311      	movs	r3, #17
 80012cc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d2:	2302      	movs	r3, #2
 80012d4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4825      	ldr	r0, [pc, #148]	@ (8001370 <I2C_ClearBusyBus+0xc4>)
 80012dc:	f000 fe92 	bl	8002004 <HAL_GPIO_Init>

    // Set both SCL and SDA to high initially
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012e6:	4822      	ldr	r0, [pc, #136]	@ (8001370 <I2C_ClearBusyBus+0xc4>)
 80012e8:	f001 f838 	bl	800235c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012f2:	481f      	ldr	r0, [pc, #124]	@ (8001370 <I2C_ClearBusyBus+0xc4>)
 80012f4:	f001 f832 	bl	800235c <HAL_GPIO_WritePin>

    // Ensure SDA is high (released)
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET)
 80012f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012fc:	481c      	ldr	r0, [pc, #112]	@ (8001370 <I2C_ClearBusyBus+0xc4>)
 80012fe:	f001 f815 	bl	800232c <HAL_GPIO_ReadPin>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d11a      	bne.n	800133e <I2C_ClearBusyBus+0x92>
    {
        // SDA is stuck low, so generate 9 clock pulses
        for (int i = 0; i < 9; i++)
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e014      	b.n	8001338 <I2C_ClearBusyBus+0x8c>
        {
            // Toggle the SCL pin to generate a clock pulse
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001314:	4816      	ldr	r0, [pc, #88]	@ (8001370 <I2C_ClearBusyBus+0xc4>)
 8001316:	f001 f821 	bl	800235c <HAL_GPIO_WritePin>
            HAL_Delay(1); // Small delay to simulate clock cycle
 800131a:	2001      	movs	r0, #1
 800131c:	f000 fd3c 	bl	8001d98 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001326:	4812      	ldr	r0, [pc, #72]	@ (8001370 <I2C_ClearBusyBus+0xc4>)
 8001328:	f001 f818 	bl	800235c <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800132c:	2001      	movs	r0, #1
 800132e:	f000 fd33 	bl	8001d98 <HAL_Delay>
        for (int i = 0; i < 9; i++)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b08      	cmp	r3, #8
 800133c:	dde7      	ble.n	800130e <I2C_ClearBusyBus+0x62>
        }
    }

    // After the clock cycles, set SDA and SCL back to high
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001344:	480a      	ldr	r0, [pc, #40]	@ (8001370 <I2C_ClearBusyBus+0xc4>)
 8001346:	f001 f809 	bl	800235c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <I2C_ClearBusyBus+0xc4>)
 8001352:	f001 f803 	bl	800235c <HAL_GPIO_WritePin>

    // Reconfigure the pins back to I2C mode
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;  // Alternate function open-drain for I2C
 8001356:	2312      	movs	r3, #18
 8001358:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // Adjust according to your I2C peripheral
 800135a:	2304      	movs	r3, #4
 800135c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	463b      	mov	r3, r7
 8001360:	4619      	mov	r1, r3
 8001362:	4803      	ldr	r0, [pc, #12]	@ (8001370 <I2C_ClearBusyBus+0xc4>)
 8001364:	f000 fe4e 	bl	8002004 <HAL_GPIO_Init>
}
 8001368:	bf00      	nop
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020400 	.word	0x40020400

08001374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001378:	f000 fc9c 	bl	8001cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 f816 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f7ff fee6 	bl	8001150 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001384:	f7ff ff1a 	bl	80011bc <MX_I2C1_Init>
  MX_TIM3_Init();
 8001388:	f000 fbf4 	bl	8001b74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //mpu6050_init();
  status = mpu6050_init();
 800138c:	f000 f8fe 	bl	800158c <mpu6050_init>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <main+0x30>)
 8001396:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim3);
 8001398:	4803      	ldr	r0, [pc, #12]	@ (80013a8 <main+0x34>)
 800139a:	f002 fee9 	bl	8004170 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800139e:	bf00      	nop
 80013a0:	e7fd      	b.n	800139e <main+0x2a>
 80013a2:	bf00      	nop
 80013a4:	200000f4 	.word	0x200000f4
 80013a8:	2000012c 	.word	0x2000012c

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b094      	sub	sp, #80	@ 0x50
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	2234      	movs	r2, #52	@ 0x34
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 fcf6 	bl	8004dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <SystemClock_Config+0xd0>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	4a28      	ldr	r2, [pc, #160]	@ (800147c <SystemClock_Config+0xd0>)
 80013da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013de:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <SystemClock_Config+0xd0>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013ec:	2300      	movs	r3, #0
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <SystemClock_Config+0xd4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013f8:	4a21      	ldr	r2, [pc, #132]	@ (8001480 <SystemClock_Config+0xd4>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <SystemClock_Config+0xd4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140c:	2302      	movs	r3, #2
 800140e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001410:	2301      	movs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001414:	2310      	movs	r3, #16
 8001416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800141c:	2300      	movs	r3, #0
 800141e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001420:	2308      	movs	r3, #8
 8001422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001424:	2354      	movs	r3, #84	@ 0x54
 8001426:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4618      	mov	r0, r3
 800143a:	f002 fbab 	bl	8003b94 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001444:	f000 f89c 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2302      	movs	r3, #2
 800144e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001458:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	2102      	movs	r1, #2
 8001464:	4618      	mov	r0, r3
 8001466:	f002 f8e5 	bl	8003634 <HAL_RCC_ClockConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001470:	f000 f886 	bl	8001580 <Error_Handler>
  }
}
 8001474:	bf00      	nop
 8001476:	3750      	adds	r7, #80	@ 0x50
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
	if(htim -> Instance == TIM3){
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a34      	ldr	r2, [pc, #208]	@ (8001564 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d161      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0xd6>
		gx = mpu6050_gyrox();
 8001496:	4c34      	ldr	r4, [pc, #208]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001498:	463b      	mov	r3, r7
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f98c 	bl	80017b8 <mpu6050_gyrox>
 80014a0:	4622      	mov	r2, r4
 80014a2:	463b      	mov	r3, r7
 80014a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014a8:	e882 0003 	stmia.w	r2, {r0, r1}
		gy = mpu6050_gyroy();
 80014ac:	4c2f      	ldr	r4, [pc, #188]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80014ae:	463b      	mov	r3, r7
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 f9bb 	bl	800182c <mpu6050_gyroy>
 80014b6:	4622      	mov	r2, r4
 80014b8:	463b      	mov	r3, r7
 80014ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014be:	e882 0003 	stmia.w	r2, {r0, r1}
		gz = mpu6050_gyroz();
 80014c2:	4c2b      	ldr	r4, [pc, #172]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80014c4:	463b      	mov	r3, r7
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f9ea 	bl	80018a0 <mpu6050_gyroz>
 80014cc:	4622      	mov	r2, r4
 80014ce:	463b      	mov	r3, r7
 80014d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014d4:	e882 0003 	stmia.w	r2, {r0, r1}
		ax = mpu6050_accx();
 80014d8:	4c26      	ldr	r4, [pc, #152]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80014da:	463b      	mov	r3, r7
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f8bd 	bl	800165c <mpu6050_accx>
 80014e2:	4622      	mov	r2, r4
 80014e4:	463b      	mov	r3, r7
 80014e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014ea:	e882 0003 	stmia.w	r2, {r0, r1}
		ay = mpu6050_accy();
 80014ee:	4c22      	ldr	r4, [pc, #136]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80014f0:	463b      	mov	r3, r7
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f8ec 	bl	80016d0 <mpu6050_accy>
 80014f8:	4622      	mov	r2, r4
 80014fa:	463b      	mov	r3, r7
 80014fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001500:	e882 0003 	stmia.w	r2, {r0, r1}
		az = mpu6050_accz();
 8001504:	4c1d      	ldr	r4, [pc, #116]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001506:	463b      	mov	r3, r7
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f91b 	bl	8001744 <mpu6050_accz>
 800150e:	4622      	mov	r2, r4
 8001510:	463b      	mov	r3, r7
 8001512:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001516:	e882 0003 	stmia.w	r2, {r0, r1}

		updateOrientation(gx.data, gy.data, gz.data, ax.data, ay.data, az.data);
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001522:	ed93 7a00 	vldr	s14, [r3]
 8001526:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001528:	edd3 6a00 	vldr	s13, [r3]
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800152e:	ed93 6a00 	vldr	s12, [r3]
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001534:	edd3 5a00 	vldr	s11, [r3]
 8001538:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800153a:	ed93 5a00 	vldr	s10, [r3]
 800153e:	eef0 2a45 	vmov.f32	s5, s10
 8001542:	eeb0 2a65 	vmov.f32	s4, s11
 8001546:	eef0 1a46 	vmov.f32	s3, s12
 800154a:	eeb0 1a66 	vmov.f32	s2, s13
 800154e:	eef0 0a47 	vmov.f32	s1, s14
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	f7ff fc8b 	bl	8000e70 <updateOrientation>
	}
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	40000400 	.word	0x40000400
 8001568:	20000110 	.word	0x20000110
 800156c:	20000118 	.word	0x20000118
 8001570:	20000120 	.word	0x20000120
 8001574:	200000f8 	.word	0x200000f8
 8001578:	20000100 	.word	0x20000100
 800157c:	20000108 	.word	0x20000108

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <Error_Handler+0x8>

0800158c <mpu6050_init>:
    gy_bias = gy_sum / num_samples;
    gz_bias = gz_sum / num_samples;
}
*/

HAL_StatusTypeDef mpu6050_init(){
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDR, 1, 100);
 8001592:	2364      	movs	r3, #100	@ 0x64
 8001594:	2201      	movs	r2, #1
 8001596:	21d0      	movs	r1, #208	@ 0xd0
 8001598:	482b      	ldr	r0, [pc, #172]	@ (8001648 <mpu6050_init+0xbc>)
 800159a:	f001 fb69 	bl	8002c70 <HAL_I2C_IsDeviceReady>
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK) {
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d13f      	bne.n	8001628 <mpu6050_init+0x9c>
			printf("mpu6050 is ready \n");
 80015a8:	4828      	ldr	r0, [pc, #160]	@ (800164c <mpu6050_init+0xc0>)
 80015aa:	f003 fb1f 	bl	8004bec <puts>
			printf("mpu6050 configuration... \n");
 80015ae:	4828      	ldr	r0, [pc, #160]	@ (8001650 <mpu6050_init+0xc4>)
 80015b0:	f003 fb1c 	bl	8004bec <puts>

			uint8_t data;

			/* power management register 0X6B must be all 0s to wake the sensor up */
			data = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 100);
 80015b8:	2364      	movs	r3, #100	@ 0x64
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2301      	movs	r3, #1
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	1dbb      	adds	r3, r7, #6
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2301      	movs	r3, #1
 80015c6:	226b      	movs	r2, #107	@ 0x6b
 80015c8:	21d0      	movs	r1, #208	@ 0xd0
 80015ca:	481f      	ldr	r0, [pc, #124]	@ (8001648 <mpu6050_init+0xbc>)
 80015cc:	f001 f824 	bl	8002618 <HAL_I2C_Mem_Write>

			/* Set DATA RATE of 1KHz by writing SMPLRT_DIV register */
			data = 0x07;
 80015d0:	2307      	movs	r3, #7
 80015d2:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 100);
 80015d4:	2364      	movs	r3, #100	@ 0x64
 80015d6:	9302      	str	r3, [sp, #8]
 80015d8:	2301      	movs	r3, #1
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	1dbb      	adds	r3, r7, #6
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	2219      	movs	r2, #25
 80015e4:	21d0      	movs	r1, #208	@ 0xd0
 80015e6:	4818      	ldr	r0, [pc, #96]	@ (8001648 <mpu6050_init+0xbc>)
 80015e8:	f001 f816 	bl	8002618 <HAL_I2C_Mem_Write>

			/*  Set accelerometer configuration in ACCEL_CONFIG Register */
			/* XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g */
			data = FS_ACC_2G;
 80015ec:	2300      	movs	r3, #0
 80015ee:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 100);
 80015f0:	2364      	movs	r3, #100	@ 0x64
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2301      	movs	r3, #1
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	1dbb      	adds	r3, r7, #6
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	221c      	movs	r2, #28
 8001600:	21d0      	movs	r1, #208	@ 0xd0
 8001602:	4811      	ldr	r0, [pc, #68]	@ (8001648 <mpu6050_init+0xbc>)
 8001604:	f001 f808 	bl	8002618 <HAL_I2C_Mem_Write>

			/* Set Gyroscope configuration in GYRO_CONFIG Register */
			/* XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 deg/s */
			data = FS_GYRO_250;
 8001608:	2300      	movs	r3, #0
 800160a:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 100);
 800160c:	2364      	movs	r3, #100	@ 0x64
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	2301      	movs	r3, #1
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	1dbb      	adds	r3, r7, #6
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	221b      	movs	r2, #27
 800161c:	21d0      	movs	r1, #208	@ 0xd0
 800161e:	480a      	ldr	r0, [pc, #40]	@ (8001648 <mpu6050_init+0xbc>)
 8001620:	f000 fffa 	bl	8002618 <HAL_I2C_Mem_Write>

			//calculate_gyroscope_bias();
			return HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	e00b      	b.n	8001640 <mpu6050_init+0xb4>
		} else if (status == HAL_ERROR){
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d104      	bne.n	8001638 <mpu6050_init+0xac>
			printf("mpu6050 error, check connection cables \n");
 800162e:	4809      	ldr	r0, [pc, #36]	@ (8001654 <mpu6050_init+0xc8>)
 8001630:	f003 fadc 	bl	8004bec <puts>
			return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e003      	b.n	8001640 <mpu6050_init+0xb4>
		}else {
			printf("mpu6050 busy \n");
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <mpu6050_init+0xcc>)
 800163a:	f003 fad7 	bl	8004bec <puts>
			return HAL_BUSY;
 800163e:	2302      	movs	r3, #2
		}
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000a0 	.word	0x200000a0
 800164c:	08005880 	.word	0x08005880
 8001650:	08005894 	.word	0x08005894
 8001654:	080058b0 	.word	0x080058b0
 8001658:	080058d8 	.word	0x080058d8

0800165c <mpu6050_accx>:

/* Gyroscope reading MPU6050 */
result mpu6050_accx(){
 800165c:	b580      	push	{r7, lr}
 800165e:	b08e      	sub	sp, #56	@ 0x38
 8001660:	af04      	add	r7, sp, #16
 8001662:	6078      	str	r0, [r7, #4]
	uint8_t buffer[14];
	result res;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 100);
 8001664:	2364      	movs	r3, #100	@ 0x64
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	230e      	movs	r3, #14
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	223b      	movs	r2, #59	@ 0x3b
 8001676:	21d0      	movs	r1, #208	@ 0xd0
 8001678:	4813      	ldr	r0, [pc, #76]	@ (80016c8 <mpu6050_accx+0x6c>)
 800167a:	f001 f8c7 	bl	800280c <HAL_I2C_Mem_Read>
 800167e:	4603      	mov	r3, r0
 8001680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	float imu_data = buffer[0] << 8  | buffer[1];
 8001684:	7c3b      	ldrb	r3, [r7, #16]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	7c7a      	ldrb	r2, [r7, #17]
 800168a:	4313      	orrs	r3, r2
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001694:	edc7 7a08 	vstr	s15, [r7, #32]
	res.status = status;
 8001698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800169c:	733b      	strb	r3, [r7, #12]
	res.data = imu_data / ACC_SCALE;
 800169e:	ed97 7a08 	vldr	s14, [r7, #32]
 80016a2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80016cc <mpu6050_accx+0x70>
 80016a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016aa:	edc7 7a02 	vstr	s15, [r7, #8]
	return res;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	461a      	mov	r2, r3
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016ba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	3728      	adds	r7, #40	@ 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200000a0 	.word	0x200000a0
 80016cc:	46800000 	.word	0x46800000

080016d0 <mpu6050_accy>:

result mpu6050_accy(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08e      	sub	sp, #56	@ 0x38
 80016d4:	af04      	add	r7, sp, #16
 80016d6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[14];
	result res;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 100);
 80016d8:	2364      	movs	r3, #100	@ 0x64
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	230e      	movs	r3, #14
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2301      	movs	r3, #1
 80016e8:	223b      	movs	r2, #59	@ 0x3b
 80016ea:	21d0      	movs	r1, #208	@ 0xd0
 80016ec:	4813      	ldr	r0, [pc, #76]	@ (800173c <mpu6050_accy+0x6c>)
 80016ee:	f001 f88d 	bl	800280c <HAL_I2C_Mem_Read>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		float imu_data = buffer[2] << 8  | buffer[3];
 80016f8:	7cbb      	ldrb	r3, [r7, #18]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	7cfa      	ldrb	r2, [r7, #19]
 80016fe:	4313      	orrs	r3, r2
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001708:	edc7 7a08 	vstr	s15, [r7, #32]
		res.status = status;
 800170c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001710:	733b      	strb	r3, [r7, #12]
		res.data = imu_data / ACC_SCALE;
 8001712:	ed97 7a08 	vldr	s14, [r7, #32]
 8001716:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001740 <mpu6050_accy+0x70>
 800171a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171e:	edc7 7a02 	vstr	s15, [r7, #8]
		return res;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	461a      	mov	r2, r3
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800172e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	3728      	adds	r7, #40	@ 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200000a0 	.word	0x200000a0
 8001740:	46800000 	.word	0x46800000

08001744 <mpu6050_accz>:

result mpu6050_accz(){
 8001744:	b580      	push	{r7, lr}
 8001746:	b08e      	sub	sp, #56	@ 0x38
 8001748:	af04      	add	r7, sp, #16
 800174a:	6078      	str	r0, [r7, #4]
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 100);
 800174c:	2364      	movs	r3, #100	@ 0x64
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	230e      	movs	r3, #14
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	f107 0308 	add.w	r3, r7, #8
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2301      	movs	r3, #1
 800175c:	223b      	movs	r2, #59	@ 0x3b
 800175e:	21d0      	movs	r1, #208	@ 0xd0
 8001760:	4813      	ldr	r0, [pc, #76]	@ (80017b0 <mpu6050_accz+0x6c>)
 8001762:	f001 f853 	bl	800280c <HAL_I2C_Mem_Read>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		float imu_data = buffer[4] << 8  | buffer[5];
 800176c:	7b3b      	ldrb	r3, [r7, #12]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	7b7a      	ldrb	r2, [r7, #13]
 8001772:	4313      	orrs	r3, r2
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177c:	edc7 7a08 	vstr	s15, [r7, #32]
		res.status = status;
 8001780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001784:	773b      	strb	r3, [r7, #28]
		res.data = imu_data / ACC_SCALE_Z;
 8001786:	ed97 7a08 	vldr	s14, [r7, #32]
 800178a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80017b4 <mpu6050_accz+0x70>
 800178e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001792:	edc7 7a06 	vstr	s15, [r7, #24]
		return res;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	461a      	mov	r2, r3
 800179a:	f107 0318 	add.w	r3, r7, #24
 800179e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017a2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	3728      	adds	r7, #40	@ 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200000a0 	.word	0x200000a0
 80017b4:	46614800 	.word	0x46614800

080017b8 <mpu6050_gyrox>:

/* Accelerometer reading MPU6050 */
result mpu6050_gyrox(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	@ 0x38
 80017bc:	af04      	add	r7, sp, #16
 80017be:	6078      	str	r0, [r7, #4]
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 100);
 80017c0:	2364      	movs	r3, #100	@ 0x64
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	230e      	movs	r3, #14
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	223b      	movs	r2, #59	@ 0x3b
 80017d2:	21d0      	movs	r1, #208	@ 0xd0
 80017d4:	4813      	ldr	r0, [pc, #76]	@ (8001824 <mpu6050_gyrox+0x6c>)
 80017d6:	f001 f819 	bl	800280c <HAL_I2C_Mem_Read>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	float imu_data = buffer[8] << 8  | buffer[9];
 80017e0:	7c3b      	ldrb	r3, [r7, #16]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	7c7a      	ldrb	r2, [r7, #17]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f0:	edc7 7a08 	vstr	s15, [r7, #32]
	res.status = status;
 80017f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017f8:	773b      	strb	r3, [r7, #28]
	res.data = imu_data / GYRO_SCALE;
 80017fa:	ed97 7a08 	vldr	s14, [r7, #32]
 80017fe:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001828 <mpu6050_gyrox+0x70>
 8001802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001806:	edc7 7a06 	vstr	s15, [r7, #24]
	return res;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	461a      	mov	r2, r3
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001816:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	3728      	adds	r7, #40	@ 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200000a0 	.word	0x200000a0
 8001828:	43030000 	.word	0x43030000

0800182c <mpu6050_gyroy>:

result mpu6050_gyroy(){
 800182c:	b580      	push	{r7, lr}
 800182e:	b08e      	sub	sp, #56	@ 0x38
 8001830:	af04      	add	r7, sp, #16
 8001832:	6078      	str	r0, [r7, #4]
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 100);
 8001834:	2364      	movs	r3, #100	@ 0x64
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	230e      	movs	r3, #14
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2301      	movs	r3, #1
 8001844:	223b      	movs	r2, #59	@ 0x3b
 8001846:	21d0      	movs	r1, #208	@ 0xd0
 8001848:	4813      	ldr	r0, [pc, #76]	@ (8001898 <mpu6050_gyroy+0x6c>)
 800184a:	f000 ffdf 	bl	800280c <HAL_I2C_Mem_Read>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	float imu_data = buffer[10] << 8  | buffer[11];
 8001854:	7cbb      	ldrb	r3, [r7, #18]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	7cfa      	ldrb	r2, [r7, #19]
 800185a:	4313      	orrs	r3, r2
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001864:	edc7 7a08 	vstr	s15, [r7, #32]
	res.status = status;
 8001868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800186c:	773b      	strb	r3, [r7, #28]
    res.data = imu_data / GYRO_SCALE;
 800186e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001872:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800189c <mpu6050_gyroy+0x70>
 8001876:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800187a:	edc7 7a06 	vstr	s15, [r7, #24]
	return res;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	461a      	mov	r2, r3
 8001882:	f107 0318 	add.w	r3, r7, #24
 8001886:	e893 0003 	ldmia.w	r3, {r0, r1}
 800188a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	3728      	adds	r7, #40	@ 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200000a0 	.word	0x200000a0
 800189c:	43030000 	.word	0x43030000

080018a0 <mpu6050_gyroz>:

result mpu6050_gyroz(){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08e      	sub	sp, #56	@ 0x38
 80018a4:	af04      	add	r7, sp, #16
 80018a6:	6078      	str	r0, [r7, #4]
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 100);
 80018a8:	2364      	movs	r3, #100	@ 0x64
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	230e      	movs	r3, #14
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2301      	movs	r3, #1
 80018b8:	223b      	movs	r2, #59	@ 0x3b
 80018ba:	21d0      	movs	r1, #208	@ 0xd0
 80018bc:	4820      	ldr	r0, [pc, #128]	@ (8001940 <mpu6050_gyroz+0xa0>)
 80018be:	f000 ffa5 	bl	800280c <HAL_I2C_Mem_Read>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	float imu_data = buffer[12] << 8  | buffer[13];
 80018c8:	7d3b      	ldrb	r3, [r7, #20]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	7d7a      	ldrb	r2, [r7, #21]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d8:	edc7 7a08 	vstr	s15, [r7, #32]
	res.status = status;
 80018dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018e0:	773b      	strb	r3, [r7, #28]
	res.data = imu_data / GYRO_SCALE - 495;
 80018e2:	6a38      	ldr	r0, [r7, #32]
 80018e4:	f7fe fdf4 	bl	80004d0 <__aeabi_f2d>
 80018e8:	a311      	add	r3, pc, #68	@ (adr r3, 8001930 <mpu6050_gyroz+0x90>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe ff71 	bl	80007d4 <__aeabi_ddiv>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	a30f      	add	r3, pc, #60	@ (adr r3, 8001938 <mpu6050_gyroz+0x98>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fc86 	bl	8000210 <__aeabi_dsub>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f8e8 	bl	8000ae0 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	61bb      	str	r3, [r7, #24]
	return res;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	461a      	mov	r2, r3
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001920:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	3728      	adds	r7, #40	@ 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	f3af 8000 	nop.w
 8001930:	00000000 	.word	0x00000000
 8001934:	40606000 	.word	0x40606000
 8001938:	00000000 	.word	0x00000000
 800193c:	407ef000 	.word	0x407ef000
 8001940:	200000a0 	.word	0x200000a0

08001944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <HAL_MspInit+0x4c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	4a0f      	ldr	r2, [pc, #60]	@ (8001990 <HAL_MspInit+0x4c>)
 8001954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001958:	6453      	str	r3, [r2, #68]	@ 0x44
 800195a:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <HAL_MspInit+0x4c>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	603b      	str	r3, [r7, #0]
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_MspInit+0x4c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	4a08      	ldr	r2, [pc, #32]	@ (8001990 <HAL_MspInit+0x4c>)
 8001970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001974:	6413      	str	r3, [r2, #64]	@ 0x40
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_MspInit+0x4c>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <NMI_Handler+0x4>

0800199c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <HardFault_Handler+0x4>

080019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <MemManage_Handler+0x4>

080019ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <UsageFault_Handler+0x4>

080019bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ea:	f000 f9b5 	bl	8001d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f8:	4802      	ldr	r0, [pc, #8]	@ (8001a04 <TIM3_IRQHandler+0x10>)
 80019fa:	f002 fc29 	bl	8004250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000012c 	.word	0x2000012c

08001a08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e00a      	b.n	8001a30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a1a:	f3af 8000 	nop.w
 8001a1e:	4601      	mov	r1, r0
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	60ba      	str	r2, [r7, #8]
 8001a26:	b2ca      	uxtb	r2, r1
 8001a28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbf0      	blt.n	8001a1a <_read+0x12>
  }

  return len;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e009      	b.n	8001a68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	60ba      	str	r2, [r7, #8]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3301      	adds	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dbf1      	blt.n	8001a54 <_write+0x12>
  }
  return len;
 8001a70:	687b      	ldr	r3, [r7, #4]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_close>:

int _close(int file)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa2:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_isatty>:

int _isatty(int file)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aec:	4a14      	ldr	r2, [pc, #80]	@ (8001b40 <_sbrk+0x5c>)
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <_sbrk+0x60>)
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <_sbrk+0x64>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	@ (8001b4c <_sbrk+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b06:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d207      	bcs.n	8001b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b14:	f003 f998 	bl	8004e48 <__errno>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	e009      	b.n	8001b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <_sbrk+0x64>)
 8001b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20020000 	.word	0x20020000
 8001b44:	00000400 	.word	0x00000400
 8001b48:	20000128 	.word	0x20000128
 8001b4c:	200002c8 	.word	0x200002c8

08001b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <SystemInit+0x20>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5a:	4a05      	ldr	r2, [pc, #20]	@ (8001b70 <SystemInit+0x20>)
 8001b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <MX_TIM3_Init+0x94>)
 8001b92:	4a1e      	ldr	r2, [pc, #120]	@ (8001c0c <MX_TIM3_Init+0x98>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <MX_TIM3_Init+0x94>)
 8001b98:	2229      	movs	r2, #41	@ 0x29
 8001b9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <MX_TIM3_Init+0x94>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <MX_TIM3_Init+0x94>)
 8001ba4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ba8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001baa:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <MX_TIM3_Init+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <MX_TIM3_Init+0x94>)
 8001bb2:	2280      	movs	r2, #128	@ 0x80
 8001bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bb6:	4814      	ldr	r0, [pc, #80]	@ (8001c08 <MX_TIM3_Init+0x94>)
 8001bb8:	f002 fa8a 	bl	80040d0 <HAL_TIM_Base_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001bc2:	f7ff fcdd 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <MX_TIM3_Init+0x94>)
 8001bd4:	f002 fc2c 	bl	8004430 <HAL_TIM_ConfigClockSource>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001bde:	f7ff fccf 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bea:	463b      	mov	r3, r7
 8001bec:	4619      	mov	r1, r3
 8001bee:	4806      	ldr	r0, [pc, #24]	@ (8001c08 <MX_TIM3_Init+0x94>)
 8001bf0:	f002 fe54 	bl	800489c <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001bfa:	f7ff fcc1 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000012c 	.word	0x2000012c
 8001c0c:	40000400 	.word	0x40000400

08001c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001c58 <HAL_TIM_Base_MspInit+0x48>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d115      	bne.n	8001c4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_TIM_Base_MspInit+0x4c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c5c <HAL_TIM_Base_MspInit+0x4c>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_TIM_Base_MspInit+0x4c>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	201d      	movs	r0, #29
 8001c44:	f000 f9a7 	bl	8001f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c48:	201d      	movs	r0, #29
 8001c4a:	f000 f9c0 	bl	8001fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40023800 	.word	0x40023800

08001c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c64:	f7ff ff74 	bl	8001b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c68:	480c      	ldr	r0, [pc, #48]	@ (8001c9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c6a:	490d      	ldr	r1, [pc, #52]	@ (8001ca0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c80:	4c0a      	ldr	r4, [pc, #40]	@ (8001cac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c8e:	f003 f8e1 	bl	8004e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c92:	f7ff fb6f 	bl	8001374 <main>
  bx  lr    
 8001c96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001ca4:	08005950 	.word	0x08005950
  ldr r2, =_sbss
 8001ca8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001cac:	200002c4 	.word	0x200002c4

08001cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC_IRQHandler>
	...

08001cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <HAL_Init+0x40>)
 8001cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <HAL_Init+0x40>)
 8001cca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a07      	ldr	r2, [pc, #28]	@ (8001cf4 <HAL_Init+0x40>)
 8001cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f000 f94f 	bl	8001f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce2:	200f      	movs	r0, #15
 8001ce4:	f000 f808 	bl	8001cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce8:	f7ff fe2c 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023c00 	.word	0x40023c00

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d00:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_InitTick+0x54>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_InitTick+0x58>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f967 	bl	8001fea <HAL_SYSTICK_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00e      	b.n	8001d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d80a      	bhi.n	8001d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f000 f92f 	bl	8001f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d38:	4a06      	ldr	r2, [pc, #24]	@ (8001d54 <HAL_InitTick+0x5c>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e000      	b.n	8001d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000008 	.word	0x20000008
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_IncTick+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_IncTick+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	@ (8001d7c <HAL_IncTick+0x24>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	20000174 	.word	0x20000174

08001d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b03      	ldr	r3, [pc, #12]	@ (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000174 	.word	0x20000174

08001d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff ffee 	bl	8001d80 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d005      	beq.n	8001dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_Delay+0x44>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dbe:	bf00      	nop
 8001dc0:	f7ff ffde 	bl	8001d80 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d8f7      	bhi.n	8001dc0 <HAL_Delay+0x28>
  {
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000008 	.word	0x20000008

08001de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e12:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	60d3      	str	r3, [r2, #12]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <__NVIC_GetPriorityGrouping+0x18>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0307 	and.w	r3, r3, #7
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db0b      	blt.n	8001e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	4907      	ldr	r1, [pc, #28]	@ (8001e7c <__NVIC_EnableIRQ+0x38>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2001      	movs	r0, #1
 8001e66:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	@ (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	@ (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	@ 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	@ 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f4c:	d301      	bcc.n	8001f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00f      	b.n	8001f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <SysTick_Config+0x40>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f7ff ff8e 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <SysTick_Config+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6a:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <SysTick_Config+0x40>)
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff29 	bl	8001de0 <__NVIC_SetPriorityGrouping>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa8:	f7ff ff3e 	bl	8001e28 <__NVIC_GetPriorityGrouping>
 8001fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff ff8e 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff5d 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff31 	bl	8001e44 <__NVIC_EnableIRQ>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ffa2 	bl	8001f3c <SysTick_Config>
 8001ff8:	4603      	mov	r3, r0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	@ 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	e165      	b.n	80022ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002020:	2201      	movs	r2, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	429a      	cmp	r2, r3
 800203a:	f040 8154 	bne.w	80022e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d005      	beq.n	8002056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002052:	2b02      	cmp	r3, #2
 8002054:	d130      	bne.n	80020b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	2203      	movs	r2, #3
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800208c:	2201      	movs	r2, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 0201 	and.w	r2, r3, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d017      	beq.n	80020f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d123      	bne.n	8002148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	08da      	lsrs	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3208      	adds	r2, #8
 8002108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	220f      	movs	r2, #15
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	08da      	lsrs	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3208      	adds	r2, #8
 8002142:	69b9      	ldr	r1, [r7, #24]
 8002144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0203 	and.w	r2, r3, #3
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80ae 	beq.w	80022e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b5d      	ldr	r3, [pc, #372]	@ (8002304 <HAL_GPIO_Init+0x300>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	4a5c      	ldr	r2, [pc, #368]	@ (8002304 <HAL_GPIO_Init+0x300>)
 8002194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002198:	6453      	str	r3, [r2, #68]	@ 0x44
 800219a:	4b5a      	ldr	r3, [pc, #360]	@ (8002304 <HAL_GPIO_Init+0x300>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a6:	4a58      	ldr	r2, [pc, #352]	@ (8002308 <HAL_GPIO_Init+0x304>)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	220f      	movs	r2, #15
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4f      	ldr	r2, [pc, #316]	@ (800230c <HAL_GPIO_Init+0x308>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d025      	beq.n	800221e <HAL_GPIO_Init+0x21a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002310 <HAL_GPIO_Init+0x30c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <HAL_GPIO_Init+0x216>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002314 <HAL_GPIO_Init+0x310>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d019      	beq.n	8002216 <HAL_GPIO_Init+0x212>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002318 <HAL_GPIO_Init+0x314>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0x20e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4b      	ldr	r2, [pc, #300]	@ (800231c <HAL_GPIO_Init+0x318>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00d      	beq.n	800220e <HAL_GPIO_Init+0x20a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002320 <HAL_GPIO_Init+0x31c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x206>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a49      	ldr	r2, [pc, #292]	@ (8002324 <HAL_GPIO_Init+0x320>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x202>
 8002202:	2306      	movs	r3, #6
 8002204:	e00c      	b.n	8002220 <HAL_GPIO_Init+0x21c>
 8002206:	2307      	movs	r3, #7
 8002208:	e00a      	b.n	8002220 <HAL_GPIO_Init+0x21c>
 800220a:	2305      	movs	r3, #5
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x21c>
 800220e:	2304      	movs	r3, #4
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x21c>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x21c>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x21c>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x21c>
 800221e:	2300      	movs	r3, #0
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	@ (8002308 <HAL_GPIO_Init+0x304>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b3a      	ldr	r3, [pc, #232]	@ (8002328 <HAL_GPIO_Init+0x324>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a31      	ldr	r2, [pc, #196]	@ (8002328 <HAL_GPIO_Init+0x324>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b2f      	ldr	r3, [pc, #188]	@ (8002328 <HAL_GPIO_Init+0x324>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a26      	ldr	r2, [pc, #152]	@ (8002328 <HAL_GPIO_Init+0x324>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002292:	4b25      	ldr	r3, [pc, #148]	@ (8002328 <HAL_GPIO_Init+0x324>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002328 <HAL_GPIO_Init+0x324>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <HAL_GPIO_Init+0x324>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e0:	4a11      	ldr	r2, [pc, #68]	@ (8002328 <HAL_GPIO_Init+0x324>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f ae96 	bls.w	8002020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	@ 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40021400 	.word	0x40021400
 8002324:	40021800 	.word	0x40021800
 8002328:	40013c00 	.word	0x40013c00

0800232c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e001      	b.n	800234e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002378:	e003      	b.n	8002382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e12b      	b.n	80025fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe ff30 	bl	800121c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2224      	movs	r2, #36	@ 0x24
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023f4:	f001 fa10 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 80023f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4a81      	ldr	r2, [pc, #516]	@ (8002604 <HAL_I2C_Init+0x274>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d807      	bhi.n	8002414 <HAL_I2C_Init+0x84>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4a80      	ldr	r2, [pc, #512]	@ (8002608 <HAL_I2C_Init+0x278>)
 8002408:	4293      	cmp	r3, r2
 800240a:	bf94      	ite	ls
 800240c:	2301      	movls	r3, #1
 800240e:	2300      	movhi	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	e006      	b.n	8002422 <HAL_I2C_Init+0x92>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4a7d      	ldr	r2, [pc, #500]	@ (800260c <HAL_I2C_Init+0x27c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	bf94      	ite	ls
 800241c:	2301      	movls	r3, #1
 800241e:	2300      	movhi	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0e7      	b.n	80025fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4a78      	ldr	r2, [pc, #480]	@ (8002610 <HAL_I2C_Init+0x280>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	0c9b      	lsrs	r3, r3, #18
 8002434:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	430a      	orrs	r2, r1
 8002448:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a6a      	ldr	r2, [pc, #424]	@ (8002604 <HAL_I2C_Init+0x274>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d802      	bhi.n	8002464 <HAL_I2C_Init+0xd4>
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	3301      	adds	r3, #1
 8002462:	e009      	b.n	8002478 <HAL_I2C_Init+0xe8>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	4a69      	ldr	r2, [pc, #420]	@ (8002614 <HAL_I2C_Init+0x284>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	3301      	adds	r3, #1
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	430b      	orrs	r3, r1
 800247e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800248a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	495c      	ldr	r1, [pc, #368]	@ (8002604 <HAL_I2C_Init+0x274>)
 8002494:	428b      	cmp	r3, r1
 8002496:	d819      	bhi.n	80024cc <HAL_I2C_Init+0x13c>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1e59      	subs	r1, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a6:	1c59      	adds	r1, r3, #1
 80024a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024ac:	400b      	ands	r3, r1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_I2C_Init+0x138>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1e59      	subs	r1, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c6:	e051      	b.n	800256c <HAL_I2C_Init+0x1dc>
 80024c8:	2304      	movs	r3, #4
 80024ca:	e04f      	b.n	800256c <HAL_I2C_Init+0x1dc>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d111      	bne.n	80024f8 <HAL_I2C_Init+0x168>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1e58      	subs	r0, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	440b      	add	r3, r1
 80024e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	e012      	b.n	800251e <HAL_I2C_Init+0x18e>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1e58      	subs	r0, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	0099      	lsls	r1, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	fbb0 f3f3 	udiv	r3, r0, r3
 800250e:	3301      	adds	r3, #1
 8002510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf0c      	ite	eq
 8002518:	2301      	moveq	r3, #1
 800251a:	2300      	movne	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Init+0x196>
 8002522:	2301      	movs	r3, #1
 8002524:	e022      	b.n	800256c <HAL_I2C_Init+0x1dc>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10e      	bne.n	800254c <HAL_I2C_Init+0x1bc>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1e58      	subs	r0, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	440b      	add	r3, r1
 800253c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002540:	3301      	adds	r3, #1
 8002542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800254a:	e00f      	b.n	800256c <HAL_I2C_Init+0x1dc>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1e58      	subs	r0, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	0099      	lsls	r1, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	6809      	ldr	r1, [r1, #0]
 8002570:	4313      	orrs	r3, r2
 8002572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800259a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6911      	ldr	r1, [r2, #16]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68d2      	ldr	r2, [r2, #12]
 80025a6:	4311      	orrs	r1, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	430b      	orrs	r3, r1
 80025ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	000186a0 	.word	0x000186a0
 8002608:	001e847f 	.word	0x001e847f
 800260c:	003d08ff 	.word	0x003d08ff
 8002610:	431bde83 	.word	0x431bde83
 8002614:	10624dd3 	.word	0x10624dd3

08002618 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	4608      	mov	r0, r1
 8002622:	4611      	mov	r1, r2
 8002624:	461a      	mov	r2, r3
 8002626:	4603      	mov	r3, r0
 8002628:	817b      	strh	r3, [r7, #10]
 800262a:	460b      	mov	r3, r1
 800262c:	813b      	strh	r3, [r7, #8]
 800262e:	4613      	mov	r3, r2
 8002630:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002632:	f7ff fba5 	bl	8001d80 <HAL_GetTick>
 8002636:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b20      	cmp	r3, #32
 8002642:	f040 80d9 	bne.w	80027f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2319      	movs	r3, #25
 800264c:	2201      	movs	r2, #1
 800264e:	496d      	ldr	r1, [pc, #436]	@ (8002804 <HAL_I2C_Mem_Write+0x1ec>)
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fdb9 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800265c:	2302      	movs	r3, #2
 800265e:	e0cc      	b.n	80027fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_I2C_Mem_Write+0x56>
 800266a:	2302      	movs	r3, #2
 800266c:	e0c5      	b.n	80027fa <HAL_I2C_Mem_Write+0x1e2>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d007      	beq.n	8002694 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2221      	movs	r2, #33	@ 0x21
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2240      	movs	r2, #64	@ 0x40
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002808 <HAL_I2C_Mem_Write+0x1f0>)
 80026d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026d6:	88f8      	ldrh	r0, [r7, #6]
 80026d8:	893a      	ldrh	r2, [r7, #8]
 80026da:	8979      	ldrh	r1, [r7, #10]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	4603      	mov	r3, r0
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fbf0 	bl	8002ecc <I2C_RequestMemoryWrite>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d052      	beq.n	8002798 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e081      	b.n	80027fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fe7e 	bl	80033fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00d      	beq.n	8002722 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	2b04      	cmp	r3, #4
 800270c:	d107      	bne.n	800271e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800271c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06b      	b.n	80027fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	781a      	ldrb	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b04      	cmp	r3, #4
 800275e:	d11b      	bne.n	8002798 <HAL_I2C_Mem_Write+0x180>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002764:	2b00      	cmp	r3, #0
 8002766:	d017      	beq.n	8002798 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1aa      	bne.n	80026f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fe71 	bl	800348c <I2C_WaitOnBTFFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00d      	beq.n	80027cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d107      	bne.n	80027c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e016      	b.n	80027fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	00100002 	.word	0x00100002
 8002808:	ffff0000 	.word	0xffff0000

0800280c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	@ 0x30
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	4608      	mov	r0, r1
 8002816:	4611      	mov	r1, r2
 8002818:	461a      	mov	r2, r3
 800281a:	4603      	mov	r3, r0
 800281c:	817b      	strh	r3, [r7, #10]
 800281e:	460b      	mov	r3, r1
 8002820:	813b      	strh	r3, [r7, #8]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002826:	f7ff faab 	bl	8001d80 <HAL_GetTick>
 800282a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b20      	cmp	r3, #32
 8002836:	f040 8214 	bne.w	8002c62 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2319      	movs	r3, #25
 8002840:	2201      	movs	r2, #1
 8002842:	497b      	ldr	r1, [pc, #492]	@ (8002a30 <HAL_I2C_Mem_Read+0x224>)
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fcbf 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002850:	2302      	movs	r3, #2
 8002852:	e207      	b.n	8002c64 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Mem_Read+0x56>
 800285e:	2302      	movs	r3, #2
 8002860:	e200      	b.n	8002c64 <HAL_I2C_Mem_Read+0x458>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d007      	beq.n	8002888 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2222      	movs	r2, #34	@ 0x22
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2240      	movs	r2, #64	@ 0x40
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80028b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a34 <HAL_I2C_Mem_Read+0x228>)
 80028c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ca:	88f8      	ldrh	r0, [r7, #6]
 80028cc:	893a      	ldrh	r2, [r7, #8]
 80028ce:	8979      	ldrh	r1, [r7, #10]
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	4603      	mov	r3, r0
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fb8c 	bl	8002ff8 <I2C_RequestMemoryRead>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e1bc      	b.n	8002c64 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d113      	bne.n	800291a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	623b      	str	r3, [r7, #32]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	623b      	str	r3, [r7, #32]
 8002906:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e190      	b.n	8002c3c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291e:	2b01      	cmp	r3, #1
 8002920:	d11b      	bne.n	800295a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002930:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e170      	b.n	8002c3c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295e:	2b02      	cmp	r3, #2
 8002960:	d11b      	bne.n	800299a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002970:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002980:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	e150      	b.n	8002c3c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029b0:	e144      	b.n	8002c3c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	f200 80f1 	bhi.w	8002b9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d123      	bne.n	8002a0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fda7 	bl	800351c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e145      	b.n	8002c64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a0a:	e117      	b.n	8002c3c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d14e      	bne.n	8002ab2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4906      	ldr	r1, [pc, #24]	@ (8002a38 <HAL_I2C_Mem_Read+0x22c>)
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fbd2 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e11a      	b.n	8002c64 <HAL_I2C_Mem_Read+0x458>
 8002a2e:	bf00      	nop
 8002a30:	00100002 	.word	0x00100002
 8002a34:	ffff0000 	.word	0xffff0000
 8002a38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ab0:	e0c4      	b.n	8002c3c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab8:	2200      	movs	r2, #0
 8002aba:	496c      	ldr	r1, [pc, #432]	@ (8002c6c <HAL_I2C_Mem_Read+0x460>)
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fb83 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0cb      	b.n	8002c64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b14:	2200      	movs	r2, #0
 8002b16:	4955      	ldr	r1, [pc, #340]	@ (8002c6c <HAL_I2C_Mem_Read+0x460>)
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fb55 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e09d      	b.n	8002c64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b9c:	e04e      	b.n	8002c3c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fcba 	bl	800351c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e058      	b.n	8002c64 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d124      	bne.n	8002c3c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d107      	bne.n	8002c0a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c08:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f47f aeb6 	bne.w	80029b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e000      	b.n	8002c64 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3728      	adds	r7, #40	@ 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	00010004 	.word	0x00010004

08002c70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	@ 0x28
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7ff f87e 	bl	8001d80 <HAL_GetTick>
 8002c84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	f040 8111 	bne.w	8002eba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2319      	movs	r3, #25
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4988      	ldr	r1, [pc, #544]	@ (8002ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fa90 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e104      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_I2C_IsDeviceReady+0x50>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0fd      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d007      	beq.n	8002ce6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2224      	movs	r2, #36	@ 0x24
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a70      	ldr	r2, [pc, #448]	@ (8002ec8 <HAL_I2C_IsDeviceReady+0x258>)
 8002d08:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa4e 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d40:	d103      	bne.n	8002d4a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d48:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0b6      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d4e:	897b      	ldrh	r3, [r7, #10]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7ff f80f 	bl	8001d80 <HAL_GetTick>
 8002d62:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d92:	e025      	b.n	8002de0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d94:	f7fe fff4 	bl	8001d80 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d302      	bcc.n	8002daa <HAL_I2C_IsDeviceReady+0x13a>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22a0      	movs	r2, #160	@ 0xa0
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2ba0      	cmp	r3, #160	@ 0xa0
 8002dea:	d005      	beq.n	8002df8 <HAL_I2C_IsDeviceReady+0x188>
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d102      	bne.n	8002df8 <HAL_I2C_IsDeviceReady+0x188>
 8002df2:	7dbb      	ldrb	r3, [r7, #22]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0cd      	beq.n	8002d94 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d129      	bne.n	8002e62 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	2319      	movs	r3, #25
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4921      	ldr	r1, [pc, #132]	@ (8002ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f9c2 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e036      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e02c      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e70:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e7a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2319      	movs	r3, #25
 8002e82:	2201      	movs	r2, #1
 8002e84:	490f      	ldr	r1, [pc, #60]	@ (8002ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f99e 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e012      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	f4ff af32 	bcc.w	8002d0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	00100002 	.word	0x00100002
 8002ec8:	ffff0000 	.word	0xffff0000

08002ecc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	817b      	strh	r3, [r7, #10]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	813b      	strh	r3, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f960 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f1c:	d103      	bne.n	8002f26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e05f      	b.n	8002fea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f2a:	897b      	ldrh	r3, [r7, #10]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	6a3a      	ldr	r2, [r7, #32]
 8002f3e:	492d      	ldr	r1, [pc, #180]	@ (8002ff4 <I2C_RequestMemoryWrite+0x128>)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f9bb 	bl	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e04c      	b.n	8002fea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f68:	6a39      	ldr	r1, [r7, #32]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fa46 	bl	80033fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d107      	bne.n	8002f8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e02b      	b.n	8002fea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f98:	893b      	ldrh	r3, [r7, #8]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	611a      	str	r2, [r3, #16]
 8002fa2:	e021      	b.n	8002fe8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fa4:	893b      	ldrh	r3, [r7, #8]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb4:	6a39      	ldr	r1, [r7, #32]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fa20 	bl	80033fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d107      	bne.n	8002fda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e005      	b.n	8002fea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fde:	893b      	ldrh	r3, [r7, #8]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	00010002 	.word	0x00010002

08002ff8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	4608      	mov	r0, r1
 8003002:	4611      	mov	r1, r2
 8003004:	461a      	mov	r2, r3
 8003006:	4603      	mov	r3, r0
 8003008:	817b      	strh	r3, [r7, #10]
 800300a:	460b      	mov	r3, r1
 800300c:	813b      	strh	r3, [r7, #8]
 800300e:	4613      	mov	r3, r2
 8003010:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003020:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003030:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	2200      	movs	r2, #0
 800303a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f8c2 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003058:	d103      	bne.n	8003062 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003060:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0aa      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003066:	897b      	ldrh	r3, [r7, #10]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003074:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	6a3a      	ldr	r2, [r7, #32]
 800307a:	4952      	ldr	r1, [pc, #328]	@ (80031c4 <I2C_RequestMemoryRead+0x1cc>)
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f91d 	bl	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e097      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a4:	6a39      	ldr	r1, [r7, #32]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f9a8 	bl	80033fc <I2C_WaitOnTXEFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00d      	beq.n	80030ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d107      	bne.n	80030ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e076      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	611a      	str	r2, [r3, #16]
 80030de:	e021      	b.n	8003124 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030e0:	893b      	ldrh	r3, [r7, #8]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f0:	6a39      	ldr	r1, [r7, #32]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f982 	bl	80033fc <I2C_WaitOnTXEFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	2b04      	cmp	r3, #4
 8003104:	d107      	bne.n	8003116 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003114:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e050      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800311a:	893b      	ldrh	r3, [r7, #8]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003126:	6a39      	ldr	r1, [r7, #32]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f967 	bl	80033fc <I2C_WaitOnTXEFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00d      	beq.n	8003150 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	2b04      	cmp	r3, #4
 800313a:	d107      	bne.n	800314c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800314a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e035      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800315e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	2200      	movs	r2, #0
 8003168:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f82b 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003186:	d103      	bne.n	8003190 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e013      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003194:	897b      	ldrh	r3, [r7, #10]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	4906      	ldr	r1, [pc, #24]	@ (80031c4 <I2C_RequestMemoryRead+0x1cc>)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f886 	bl	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	00010002 	.word	0x00010002

080031c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d8:	e048      	b.n	800326c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d044      	beq.n	800326c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fe fdcd 	bl	8001d80 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d139      	bne.n	800326c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	0c1b      	lsrs	r3, r3, #16
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d10d      	bne.n	800321e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	43da      	mvns	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4013      	ands	r3, r2
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	e00c      	b.n	8003238 <I2C_WaitOnFlagUntilTimeout+0x70>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	43da      	mvns	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	4013      	ands	r3, r2
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	429a      	cmp	r2, r3
 800323c:	d116      	bne.n	800326c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e023      	b.n	80032b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10d      	bne.n	8003292 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	43da      	mvns	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4013      	ands	r3, r2
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	e00c      	b.n	80032ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	43da      	mvns	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4013      	ands	r3, r2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d093      	beq.n	80031da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ca:	e071      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032da:	d123      	bne.n	8003324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	f043 0204 	orr.w	r2, r3, #4
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e067      	b.n	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d041      	beq.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332c:	f7fe fd28 	bl	8001d80 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	d302      	bcc.n	8003342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d136      	bne.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	d10c      	bne.n	8003366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	e00b      	b.n	800337e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	43da      	mvns	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4013      	ands	r3, r2
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d016      	beq.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e021      	b.n	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	0c1b      	lsrs	r3, r3, #16
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d10c      	bne.n	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	43da      	mvns	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	e00b      	b.n	80033ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4013      	ands	r3, r2
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf14      	ite	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	2300      	moveq	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f47f af6d 	bne.w	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003408:	e034      	b.n	8003474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f8e3 	bl	80035d6 <I2C_IsAcknowledgeFailed>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e034      	b.n	8003484 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d028      	beq.n	8003474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003422:	f7fe fcad 	bl	8001d80 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d11d      	bne.n	8003474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d016      	beq.n	8003474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e007      	b.n	8003484 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347e:	2b80      	cmp	r3, #128	@ 0x80
 8003480:	d1c3      	bne.n	800340a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003498:	e034      	b.n	8003504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f89b 	bl	80035d6 <I2C_IsAcknowledgeFailed>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e034      	b.n	8003514 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d028      	beq.n	8003504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b2:	f7fe fc65 	bl	8001d80 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d302      	bcc.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d11d      	bne.n	8003504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d016      	beq.n	8003504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e007      	b.n	8003514 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b04      	cmp	r3, #4
 8003510:	d1c3      	bne.n	800349a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003528:	e049      	b.n	80035be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b10      	cmp	r3, #16
 8003536:	d119      	bne.n	800356c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0210 	mvn.w	r2, #16
 8003540:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e030      	b.n	80035ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356c:	f7fe fc08 	bl	8001d80 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	429a      	cmp	r2, r3
 800357a:	d302      	bcc.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11d      	bne.n	80035be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b40      	cmp	r3, #64	@ 0x40
 800358e:	d016      	beq.n	80035be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e007      	b.n	80035ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	2b40      	cmp	r3, #64	@ 0x40
 80035ca:	d1ae      	bne.n	800352a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ec:	d11b      	bne.n	8003626 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	f043 0204 	orr.w	r2, r3, #4
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0cc      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b68      	ldr	r3, [pc, #416]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d90c      	bls.n	8003670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b65      	ldr	r3, [pc, #404]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b63      	ldr	r3, [pc, #396]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0b8      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4b59      	ldr	r3, [pc, #356]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a58      	ldr	r2, [pc, #352]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003692:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a0:	4b53      	ldr	r3, [pc, #332]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a52      	ldr	r2, [pc, #328]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b50      	ldr	r3, [pc, #320]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	494d      	ldr	r1, [pc, #308]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d044      	beq.n	8003754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b47      	ldr	r3, [pc, #284]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d119      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b3f      	ldr	r3, [pc, #252]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b3b      	ldr	r3, [pc, #236]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e067      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b37      	ldr	r3, [pc, #220]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4934      	ldr	r1, [pc, #208]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003724:	f7fe fb2c 	bl	8001d80 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fe fb28 	bl	8001d80 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e04f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b2b      	ldr	r3, [pc, #172]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b25      	ldr	r3, [pc, #148]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d20c      	bcs.n	800377c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b22      	ldr	r3, [pc, #136]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b20      	ldr	r3, [pc, #128]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e032      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4916      	ldr	r1, [pc, #88]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a6:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	490e      	ldr	r1, [pc, #56]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ba:	f000 f841 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b0b      	ldr	r3, [pc, #44]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	490a      	ldr	r1, [pc, #40]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	4a09      	ldr	r2, [pc, #36]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037d6:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fa8c 	bl	8001cf8 <HAL_InitTick>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023c00 	.word	0x40023c00
 80037f0:	40023800 	.word	0x40023800
 80037f4:	080058e8 	.word	0x080058e8
 80037f8:	20000000 	.word	0x20000000
 80037fc:	20000004 	.word	0x20000004

08003800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003804:	4b03      	ldr	r3, [pc, #12]	@ (8003814 <HAL_RCC_GetHCLKFreq+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000000 	.word	0x20000000

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800381c:	f7ff fff0 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0a9b      	lsrs	r3, r3, #10
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4903      	ldr	r1, [pc, #12]	@ (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40023800 	.word	0x40023800
 800383c:	080058f8 	.word	0x080058f8

08003840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003844:	b0a6      	sub	sp, #152	@ 0x98
 8003846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003866:	4bc8      	ldr	r3, [pc, #800]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b0c      	cmp	r3, #12
 8003870:	f200 817e 	bhi.w	8003b70 <HAL_RCC_GetSysClockFreq+0x330>
 8003874:	a201      	add	r2, pc, #4	@ (adr r2, 800387c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	080038b1 	.word	0x080038b1
 8003880:	08003b71 	.word	0x08003b71
 8003884:	08003b71 	.word	0x08003b71
 8003888:	08003b71 	.word	0x08003b71
 800388c:	080038b9 	.word	0x080038b9
 8003890:	08003b71 	.word	0x08003b71
 8003894:	08003b71 	.word	0x08003b71
 8003898:	08003b71 	.word	0x08003b71
 800389c:	080038c1 	.word	0x080038c1
 80038a0:	08003b71 	.word	0x08003b71
 80038a4:	08003b71 	.word	0x08003b71
 80038a8:	08003b71 	.word	0x08003b71
 80038ac:	08003a2b 	.word	0x08003a2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4bb6      	ldr	r3, [pc, #728]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x34c>)
 80038b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80038b6:	e15f      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038b8:	4bb5      	ldr	r3, [pc, #724]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x350>)
 80038ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80038be:	e15b      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c0:	4bb1      	ldr	r3, [pc, #708]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x348>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038cc:	4bae      	ldr	r3, [pc, #696]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x348>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d031      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d8:	4bab      	ldr	r3, [pc, #684]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x348>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	2200      	movs	r2, #0
 80038e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80038ec:	2300      	movs	r3, #0
 80038ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80038f0:	4ba7      	ldr	r3, [pc, #668]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x350>)
 80038f2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80038f6:	462a      	mov	r2, r5
 80038f8:	fb03 f202 	mul.w	r2, r3, r2
 80038fc:	2300      	movs	r3, #0
 80038fe:	4621      	mov	r1, r4
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	4aa2      	ldr	r2, [pc, #648]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003908:	4621      	mov	r1, r4
 800390a:	fba1 1202 	umull	r1, r2, r1, r2
 800390e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003910:	460a      	mov	r2, r1
 8003912:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003914:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003916:	4413      	add	r3, r2
 8003918:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800391a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800391e:	2200      	movs	r2, #0
 8003920:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003922:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003924:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003928:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800392c:	f7fd f928 	bl	8000b80 <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4613      	mov	r3, r2
 8003936:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800393a:	e064      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393c:	4b92      	ldr	r3, [pc, #584]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x348>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	2200      	movs	r2, #0
 8003944:	653b      	str	r3, [r7, #80]	@ 0x50
 8003946:	657a      	str	r2, [r7, #84]	@ 0x54
 8003948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003950:	2300      	movs	r3, #0
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003954:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003958:	4622      	mov	r2, r4
 800395a:	462b      	mov	r3, r5
 800395c:	f04f 0000 	mov.w	r0, #0
 8003960:	f04f 0100 	mov.w	r1, #0
 8003964:	0159      	lsls	r1, r3, #5
 8003966:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800396a:	0150      	lsls	r0, r2, #5
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4621      	mov	r1, r4
 8003972:	1a51      	subs	r1, r2, r1
 8003974:	6139      	str	r1, [r7, #16]
 8003976:	4629      	mov	r1, r5
 8003978:	eb63 0301 	sbc.w	r3, r3, r1
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800398a:	4659      	mov	r1, fp
 800398c:	018b      	lsls	r3, r1, #6
 800398e:	4651      	mov	r1, sl
 8003990:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003994:	4651      	mov	r1, sl
 8003996:	018a      	lsls	r2, r1, #6
 8003998:	4651      	mov	r1, sl
 800399a:	ebb2 0801 	subs.w	r8, r2, r1
 800399e:	4659      	mov	r1, fp
 80039a0:	eb63 0901 	sbc.w	r9, r3, r1
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039b8:	4690      	mov	r8, r2
 80039ba:	4699      	mov	r9, r3
 80039bc:	4623      	mov	r3, r4
 80039be:	eb18 0303 	adds.w	r3, r8, r3
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	462b      	mov	r3, r5
 80039c6:	eb49 0303 	adc.w	r3, r9, r3
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039d8:	4629      	mov	r1, r5
 80039da:	028b      	lsls	r3, r1, #10
 80039dc:	4621      	mov	r1, r4
 80039de:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039e2:	4621      	mov	r1, r4
 80039e4:	028a      	lsls	r2, r1, #10
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ee:	2200      	movs	r2, #0
 80039f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80039f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80039f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039f8:	f7fd f8c2 	bl	8000b80 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4613      	mov	r3, r2
 8003a02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a06:	4b60      	ldr	r3, [pc, #384]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	0c1b      	lsrs	r3, r3, #16
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	3301      	adds	r3, #1
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003a18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003a28:	e0a6      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a2a:	4b57      	ldr	r3, [pc, #348]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a36:	4b54      	ldr	r3, [pc, #336]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d02a      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a42:	4b51      	ldr	r3, [pc, #324]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	099b      	lsrs	r3, r3, #6
 8003a48:	2200      	movs	r2, #0
 8003a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a54:	2100      	movs	r1, #0
 8003a56:	4b4e      	ldr	r3, [pc, #312]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a58:	fb03 f201 	mul.w	r2, r3, r1
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	fb00 f303 	mul.w	r3, r0, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	4a4a      	ldr	r2, [pc, #296]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a66:	fba0 1202 	umull	r1, r2, r0, r2
 8003a6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a6c:	460a      	mov	r2, r1
 8003a6e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003a70:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a72:	4413      	add	r3, r2
 8003a74:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a7e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003a84:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003a88:	f7fd f87a 	bl	8000b80 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a96:	e05b      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a98:	4b3b      	ldr	r3, [pc, #236]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aaa:	623b      	str	r3, [r7, #32]
 8003aac:	2300      	movs	r3, #0
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ab4:	4642      	mov	r2, r8
 8003ab6:	464b      	mov	r3, r9
 8003ab8:	f04f 0000 	mov.w	r0, #0
 8003abc:	f04f 0100 	mov.w	r1, #0
 8003ac0:	0159      	lsls	r1, r3, #5
 8003ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac6:	0150      	lsls	r0, r2, #5
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4641      	mov	r1, r8
 8003ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003aec:	ebb2 040a 	subs.w	r4, r2, sl
 8003af0:	eb63 050b 	sbc.w	r5, r3, fp
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	00eb      	lsls	r3, r5, #3
 8003afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b02:	00e2      	lsls	r2, r4, #3
 8003b04:	4614      	mov	r4, r2
 8003b06:	461d      	mov	r5, r3
 8003b08:	4643      	mov	r3, r8
 8003b0a:	18e3      	adds	r3, r4, r3
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	464b      	mov	r3, r9
 8003b10:	eb45 0303 	adc.w	r3, r5, r3
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b22:	4629      	mov	r1, r5
 8003b24:	028b      	lsls	r3, r1, #10
 8003b26:	4621      	mov	r1, r4
 8003b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	028a      	lsls	r2, r1, #10
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b38:	2200      	movs	r2, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	61fa      	str	r2, [r7, #28]
 8003b3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b42:	f7fd f81d 	bl	8000b80 <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b50:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	0f1b      	lsrs	r3, r3, #28
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b6e:	e003      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3798      	adds	r7, #152	@ 0x98
 8003b80:	46bd      	mov	sp, r7
 8003b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	00f42400 	.word	0x00f42400
 8003b90:	017d7840 	.word	0x017d7840

08003b94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e28d      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8083 	beq.w	8003cba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bb4:	4b94      	ldr	r3, [pc, #592]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d019      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003bc0:	4b91      	ldr	r3, [pc, #580]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
        || \
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003bcc:	4b8e      	ldr	r3, [pc, #568]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bda:	4b8b      	ldr	r3, [pc, #556]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003be2:	2b0c      	cmp	r3, #12
 8003be4:	d112      	bne.n	8003c0c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be6:	4b88      	ldr	r3, [pc, #544]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bf2:	d10b      	bne.n	8003c0c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	4b84      	ldr	r3, [pc, #528]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05b      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x124>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d157      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e25a      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_OscConfig+0x90>
 8003c16:	4b7c      	ldr	r3, [pc, #496]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7b      	ldr	r2, [pc, #492]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e01d      	b.n	8003c60 <HAL_RCC_OscConfig+0xcc>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0xb4>
 8003c2e:	4b76      	ldr	r3, [pc, #472]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a75      	ldr	r2, [pc, #468]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b73      	ldr	r3, [pc, #460]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a72      	ldr	r2, [pc, #456]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0xcc>
 8003c48:	4b6f      	ldr	r3, [pc, #444]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b6c      	ldr	r3, [pc, #432]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a6b      	ldr	r2, [pc, #428]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fe f88a 	bl	8001d80 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fe f886 	bl	8001d80 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	@ 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e21f      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	4b61      	ldr	r3, [pc, #388]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0xdc>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fe f876 	bl	8001d80 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fe f872 	bl	8001d80 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	@ 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e20b      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	4b57      	ldr	r3, [pc, #348]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x104>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d06f      	beq.n	8003da6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cc6:	4b50      	ldr	r3, [pc, #320]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d017      	beq.n	8003d02 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
        || \
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d105      	bne.n	8003cea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cde:	4b4a      	ldr	r3, [pc, #296]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cea:	4b47      	ldr	r3, [pc, #284]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	d11c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf6:	4b44      	ldr	r3, [pc, #272]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d116      	bne.n	8003d30 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	4b41      	ldr	r3, [pc, #260]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_RCC_OscConfig+0x186>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e1d3      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4937      	ldr	r1, [pc, #220]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	e03a      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d38:	4b34      	ldr	r3, [pc, #208]	@ (8003e0c <HAL_RCC_OscConfig+0x278>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fe f81f 	bl	8001d80 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d46:	f7fe f81b 	bl	8001d80 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e1b4      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	4b2b      	ldr	r3, [pc, #172]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d64:	4b28      	ldr	r3, [pc, #160]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4925      	ldr	r1, [pc, #148]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]
 8003d78:	e015      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7a:	4b24      	ldr	r3, [pc, #144]	@ (8003e0c <HAL_RCC_OscConfig+0x278>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fd fffe 	bl	8001d80 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d88:	f7fd fffa 	bl	8001d80 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e193      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d036      	beq.n	8003e20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d016      	beq.n	8003de8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dba:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fd ffde 	bl	8001d80 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc8:	f7fd ffda 	bl	8001d80 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e173      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x234>
 8003de6:	e01b      	b.n	8003e20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de8:	4b09      	ldr	r3, [pc, #36]	@ (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dee:	f7fd ffc7 	bl	8001d80 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df4:	e00e      	b.n	8003e14 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df6:	f7fd ffc3 	bl	8001d80 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d907      	bls.n	8003e14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e15c      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	42470000 	.word	0x42470000
 8003e10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	4b8a      	ldr	r3, [pc, #552]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ea      	bne.n	8003df6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8097 	beq.w	8003f5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e32:	4b83      	ldr	r3, [pc, #524]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	4b7f      	ldr	r3, [pc, #508]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	4a7e      	ldr	r2, [pc, #504]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5e:	4b79      	ldr	r3, [pc, #484]	@ (8004044 <HAL_RCC_OscConfig+0x4b0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d118      	bne.n	8003e9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6a:	4b76      	ldr	r3, [pc, #472]	@ (8004044 <HAL_RCC_OscConfig+0x4b0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a75      	ldr	r2, [pc, #468]	@ (8004044 <HAL_RCC_OscConfig+0x4b0>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7fd ff83 	bl	8001d80 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7fd ff7f 	bl	8001d80 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e118      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	4b6c      	ldr	r3, [pc, #432]	@ (8004044 <HAL_RCC_OscConfig+0x4b0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x31e>
 8003ea4:	4b66      	ldr	r3, [pc, #408]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	4a65      	ldr	r2, [pc, #404]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb0:	e01c      	b.n	8003eec <HAL_RCC_OscConfig+0x358>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x340>
 8003eba:	4b61      	ldr	r3, [pc, #388]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebe:	4a60      	ldr	r2, [pc, #384]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003ec0:	f043 0304 	orr.w	r3, r3, #4
 8003ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eca:	4a5d      	ldr	r2, [pc, #372]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed2:	e00b      	b.n	8003eec <HAL_RCC_OscConfig+0x358>
 8003ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed8:	4a59      	ldr	r2, [pc, #356]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee0:	4b57      	ldr	r3, [pc, #348]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee4:	4a56      	ldr	r2, [pc, #344]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003ee6:	f023 0304 	bic.w	r3, r3, #4
 8003eea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d015      	beq.n	8003f20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fd ff44 	bl	8001d80 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fd ff40 	bl	8001d80 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0d7      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f12:	4b4b      	ldr	r3, [pc, #300]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ee      	beq.n	8003efc <HAL_RCC_OscConfig+0x368>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fd ff2e 	bl	8001d80 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fd ff2a 	bl	8001d80 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0c1      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3e:	4b40      	ldr	r3, [pc, #256]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ee      	bne.n	8003f28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f50:	4b3b      	ldr	r3, [pc, #236]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	4a3a      	ldr	r2, [pc, #232]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80ad 	beq.w	80040c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f66:	4b36      	ldr	r3, [pc, #216]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d060      	beq.n	8004034 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d145      	bne.n	8004006 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b33      	ldr	r3, [pc, #204]	@ (8004048 <HAL_RCC_OscConfig+0x4b4>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fd fefe 	bl	8001d80 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fd fefa 	bl	8001d80 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e093      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	4b29      	ldr	r3, [pc, #164]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	071b      	lsls	r3, r3, #28
 8003fd2:	491b      	ldr	r1, [pc, #108]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004048 <HAL_RCC_OscConfig+0x4b4>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd fecf 	bl	8001d80 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fd fecb 	bl	8001d80 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e064      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff8:	4b11      	ldr	r3, [pc, #68]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x452>
 8004004:	e05c      	b.n	80040c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <HAL_RCC_OscConfig+0x4b4>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fd feb8 	bl	8001d80 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd feb4 	bl	8001d80 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e04d      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <HAL_RCC_OscConfig+0x4ac>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x480>
 8004032:	e045      	b.n	80040c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d107      	bne.n	800404c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e040      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
 8004040:	40023800 	.word	0x40023800
 8004044:	40007000 	.word	0x40007000
 8004048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800404c:	4b1f      	ldr	r3, [pc, #124]	@ (80040cc <HAL_RCC_OscConfig+0x538>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d030      	beq.n	80040bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d129      	bne.n	80040bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d122      	bne.n	80040bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800407c:	4013      	ands	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004084:	4293      	cmp	r3, r2
 8004086:	d119      	bne.n	80040bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d10f      	bne.n	80040bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800

080040d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e041      	b.n	8004166 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd fd8a 	bl	8001c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f000 fa7e 	bl	8004610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d001      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e04e      	b.n	8004226 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a23      	ldr	r2, [pc, #140]	@ (8004234 <HAL_TIM_Base_Start_IT+0xc4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d022      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b2:	d01d      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004238 <HAL_TIM_Base_Start_IT+0xc8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d018      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1e      	ldr	r2, [pc, #120]	@ (800423c <HAL_TIM_Base_Start_IT+0xcc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004240 <HAL_TIM_Base_Start_IT+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004244 <HAL_TIM_Base_Start_IT+0xd4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a19      	ldr	r2, [pc, #100]	@ (8004248 <HAL_TIM_Base_Start_IT+0xd8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a18      	ldr	r2, [pc, #96]	@ (800424c <HAL_TIM_Base_Start_IT+0xdc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d111      	bne.n	8004214 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b06      	cmp	r3, #6
 8004200:	d010      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	e007      	b.n	8004224 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800
 8004240:	40000c00 	.word	0x40000c00
 8004244:	40010400 	.word	0x40010400
 8004248:	40014000 	.word	0x40014000
 800424c:	40001800 	.word	0x40001800

08004250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d020      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01b      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0202 	mvn.w	r2, #2
 8004284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f999 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f98b 	bl	80045be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f99c 	bl	80045e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d020      	beq.n	8004300 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01b      	beq.n	8004300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0204 	mvn.w	r2, #4
 80042d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f973 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 80042ec:	e005      	b.n	80042fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f965 	bl	80045be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f976 	bl	80045e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d020      	beq.n	800434c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01b      	beq.n	800434c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0208 	mvn.w	r2, #8
 800431c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2204      	movs	r2, #4
 8004322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f94d 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f93f 	bl	80045be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f950 	bl	80045e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b00      	cmp	r3, #0
 8004354:	d020      	beq.n	8004398 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01b      	beq.n	8004398 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0210 	mvn.w	r2, #16
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2208      	movs	r2, #8
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f927 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f919 	bl	80045be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f92a 	bl	80045e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00c      	beq.n	80043bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0201 	mvn.w	r2, #1
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fd f864 	bl	8001484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00c      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fae4 	bl	80049a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00c      	beq.n	8004404 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d007      	beq.n	8004404 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f8fb 	bl	80045fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00c      	beq.n	8004428 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0220 	mvn.w	r2, #32
 8004420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fab6 	bl	8004994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_TIM_ConfigClockSource+0x1c>
 8004448:	2302      	movs	r3, #2
 800444a:	e0b4      	b.n	80045b6 <HAL_TIM_ConfigClockSource+0x186>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800446a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004484:	d03e      	beq.n	8004504 <HAL_TIM_ConfigClockSource+0xd4>
 8004486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800448a:	f200 8087 	bhi.w	800459c <HAL_TIM_ConfigClockSource+0x16c>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004492:	f000 8086 	beq.w	80045a2 <HAL_TIM_ConfigClockSource+0x172>
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449a:	d87f      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b70      	cmp	r3, #112	@ 0x70
 800449e:	d01a      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0xa6>
 80044a0:	2b70      	cmp	r3, #112	@ 0x70
 80044a2:	d87b      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b60      	cmp	r3, #96	@ 0x60
 80044a6:	d050      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x11a>
 80044a8:	2b60      	cmp	r3, #96	@ 0x60
 80044aa:	d877      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b50      	cmp	r3, #80	@ 0x50
 80044ae:	d03c      	beq.n	800452a <HAL_TIM_ConfigClockSource+0xfa>
 80044b0:	2b50      	cmp	r3, #80	@ 0x50
 80044b2:	d873      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b40      	cmp	r3, #64	@ 0x40
 80044b6:	d058      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x13a>
 80044b8:	2b40      	cmp	r3, #64	@ 0x40
 80044ba:	d86f      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b30      	cmp	r3, #48	@ 0x30
 80044be:	d064      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044c0:	2b30      	cmp	r3, #48	@ 0x30
 80044c2:	d86b      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d060      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d867      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d05c      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d05a      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044d4:	e062      	b.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044e6:	f000 f9b9 	bl	800485c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	609a      	str	r2, [r3, #8]
      break;
 8004502:	e04f      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004514:	f000 f9a2 	bl	800485c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004526:	609a      	str	r2, [r3, #8]
      break;
 8004528:	e03c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004536:	461a      	mov	r2, r3
 8004538:	f000 f916 	bl	8004768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2150      	movs	r1, #80	@ 0x50
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f96f 	bl	8004826 <TIM_ITRx_SetConfig>
      break;
 8004548:	e02c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004556:	461a      	mov	r2, r3
 8004558:	f000 f935 	bl	80047c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2160      	movs	r1, #96	@ 0x60
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f95f 	bl	8004826 <TIM_ITRx_SetConfig>
      break;
 8004568:	e01c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004576:	461a      	mov	r2, r3
 8004578:	f000 f8f6 	bl	8004768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2140      	movs	r1, #64	@ 0x40
 8004582:	4618      	mov	r0, r3
 8004584:	f000 f94f 	bl	8004826 <TIM_ITRx_SetConfig>
      break;
 8004588:	e00c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f000 f946 	bl	8004826 <TIM_ITRx_SetConfig>
      break;
 800459a:	e003      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
      break;
 80045a0:	e000      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a46      	ldr	r2, [pc, #280]	@ (800473c <TIM_Base_SetConfig+0x12c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462e:	d00f      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a43      	ldr	r2, [pc, #268]	@ (8004740 <TIM_Base_SetConfig+0x130>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00b      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a42      	ldr	r2, [pc, #264]	@ (8004744 <TIM_Base_SetConfig+0x134>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a41      	ldr	r2, [pc, #260]	@ (8004748 <TIM_Base_SetConfig+0x138>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a40      	ldr	r2, [pc, #256]	@ (800474c <TIM_Base_SetConfig+0x13c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d108      	bne.n	8004662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a35      	ldr	r2, [pc, #212]	@ (800473c <TIM_Base_SetConfig+0x12c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d02b      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004670:	d027      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a32      	ldr	r2, [pc, #200]	@ (8004740 <TIM_Base_SetConfig+0x130>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d023      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a31      	ldr	r2, [pc, #196]	@ (8004744 <TIM_Base_SetConfig+0x134>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01f      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a30      	ldr	r2, [pc, #192]	@ (8004748 <TIM_Base_SetConfig+0x138>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01b      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a2f      	ldr	r2, [pc, #188]	@ (800474c <TIM_Base_SetConfig+0x13c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d017      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a2e      	ldr	r2, [pc, #184]	@ (8004750 <TIM_Base_SetConfig+0x140>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2d      	ldr	r2, [pc, #180]	@ (8004754 <TIM_Base_SetConfig+0x144>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00f      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004758 <TIM_Base_SetConfig+0x148>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00b      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2b      	ldr	r2, [pc, #172]	@ (800475c <TIM_Base_SetConfig+0x14c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d007      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004760 <TIM_Base_SetConfig+0x150>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d003      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a29      	ldr	r2, [pc, #164]	@ (8004764 <TIM_Base_SetConfig+0x154>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d108      	bne.n	80046d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a10      	ldr	r2, [pc, #64]	@ (800473c <TIM_Base_SetConfig+0x12c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_Base_SetConfig+0xf8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a12      	ldr	r2, [pc, #72]	@ (800474c <TIM_Base_SetConfig+0x13c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d103      	bne.n	8004710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f023 0201 	bic.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	611a      	str	r2, [r3, #16]
  }
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40000c00 	.word	0x40000c00
 800474c:	40010400 	.word	0x40010400
 8004750:	40014000 	.word	0x40014000
 8004754:	40014400 	.word	0x40014400
 8004758:	40014800 	.word	0x40014800
 800475c:	40001800 	.word	0x40001800
 8004760:	40001c00 	.word	0x40001c00
 8004764:	40002000 	.word	0x40002000

08004768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 030a 	bic.w	r3, r3, #10
 80047a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b087      	sub	sp, #28
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f023 0210 	bic.w	r2, r3, #16
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	031b      	lsls	r3, r3, #12
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004802:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	f043 0307 	orr.w	r3, r3, #7
 8004848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	609a      	str	r2, [r3, #8]
}
 8004850:	bf00      	nop
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	021a      	lsls	r2, r3, #8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	431a      	orrs	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4313      	orrs	r3, r2
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e05a      	b.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a21      	ldr	r2, [pc, #132]	@ (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d022      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004900:	d01d      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1d      	ldr	r2, [pc, #116]	@ (800497c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d018      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1b      	ldr	r2, [pc, #108]	@ (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1a      	ldr	r2, [pc, #104]	@ (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00e      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a18      	ldr	r2, [pc, #96]	@ (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d009      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a17      	ldr	r2, [pc, #92]	@ (800498c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a15      	ldr	r2, [pc, #84]	@ (8004990 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d10c      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	4313      	orrs	r3, r2
 800494e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40000400 	.word	0x40000400
 8004980:	40000800 	.word	0x40000800
 8004984:	40000c00 	.word	0x40000c00
 8004988:	40010400 	.word	0x40010400
 800498c:	40014000 	.word	0x40014000
 8004990:	40001800 	.word	0x40001800

08004994 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <std>:
 80049bc:	2300      	movs	r3, #0
 80049be:	b510      	push	{r4, lr}
 80049c0:	4604      	mov	r4, r0
 80049c2:	e9c0 3300 	strd	r3, r3, [r0]
 80049c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ca:	6083      	str	r3, [r0, #8]
 80049cc:	8181      	strh	r1, [r0, #12]
 80049ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80049d0:	81c2      	strh	r2, [r0, #14]
 80049d2:	6183      	str	r3, [r0, #24]
 80049d4:	4619      	mov	r1, r3
 80049d6:	2208      	movs	r2, #8
 80049d8:	305c      	adds	r0, #92	@ 0x5c
 80049da:	f000 f9e7 	bl	8004dac <memset>
 80049de:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <std+0x58>)
 80049e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <std+0x5c>)
 80049e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80049e6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a1c <std+0x60>)
 80049e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80049ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <std+0x64>)
 80049ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80049ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004a24 <std+0x68>)
 80049f0:	6224      	str	r4, [r4, #32]
 80049f2:	429c      	cmp	r4, r3
 80049f4:	d006      	beq.n	8004a04 <std+0x48>
 80049f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80049fa:	4294      	cmp	r4, r2
 80049fc:	d002      	beq.n	8004a04 <std+0x48>
 80049fe:	33d0      	adds	r3, #208	@ 0xd0
 8004a00:	429c      	cmp	r4, r3
 8004a02:	d105      	bne.n	8004a10 <std+0x54>
 8004a04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a0c:	f000 ba46 	b.w	8004e9c <__retarget_lock_init_recursive>
 8004a10:	bd10      	pop	{r4, pc}
 8004a12:	bf00      	nop
 8004a14:	08004bfd 	.word	0x08004bfd
 8004a18:	08004c1f 	.word	0x08004c1f
 8004a1c:	08004c57 	.word	0x08004c57
 8004a20:	08004c7b 	.word	0x08004c7b
 8004a24:	20000178 	.word	0x20000178

08004a28 <stdio_exit_handler>:
 8004a28:	4a02      	ldr	r2, [pc, #8]	@ (8004a34 <stdio_exit_handler+0xc>)
 8004a2a:	4903      	ldr	r1, [pc, #12]	@ (8004a38 <stdio_exit_handler+0x10>)
 8004a2c:	4803      	ldr	r0, [pc, #12]	@ (8004a3c <stdio_exit_handler+0x14>)
 8004a2e:	f000 b869 	b.w	8004b04 <_fwalk_sglue>
 8004a32:	bf00      	nop
 8004a34:	2000000c 	.word	0x2000000c
 8004a38:	0800519d 	.word	0x0800519d
 8004a3c:	2000001c 	.word	0x2000001c

08004a40 <cleanup_stdio>:
 8004a40:	6841      	ldr	r1, [r0, #4]
 8004a42:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <cleanup_stdio+0x34>)
 8004a44:	4299      	cmp	r1, r3
 8004a46:	b510      	push	{r4, lr}
 8004a48:	4604      	mov	r4, r0
 8004a4a:	d001      	beq.n	8004a50 <cleanup_stdio+0x10>
 8004a4c:	f000 fba6 	bl	800519c <_fflush_r>
 8004a50:	68a1      	ldr	r1, [r4, #8]
 8004a52:	4b09      	ldr	r3, [pc, #36]	@ (8004a78 <cleanup_stdio+0x38>)
 8004a54:	4299      	cmp	r1, r3
 8004a56:	d002      	beq.n	8004a5e <cleanup_stdio+0x1e>
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f000 fb9f 	bl	800519c <_fflush_r>
 8004a5e:	68e1      	ldr	r1, [r4, #12]
 8004a60:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <cleanup_stdio+0x3c>)
 8004a62:	4299      	cmp	r1, r3
 8004a64:	d004      	beq.n	8004a70 <cleanup_stdio+0x30>
 8004a66:	4620      	mov	r0, r4
 8004a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a6c:	f000 bb96 	b.w	800519c <_fflush_r>
 8004a70:	bd10      	pop	{r4, pc}
 8004a72:	bf00      	nop
 8004a74:	20000178 	.word	0x20000178
 8004a78:	200001e0 	.word	0x200001e0
 8004a7c:	20000248 	.word	0x20000248

08004a80 <global_stdio_init.part.0>:
 8004a80:	b510      	push	{r4, lr}
 8004a82:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab0 <global_stdio_init.part.0+0x30>)
 8004a84:	4c0b      	ldr	r4, [pc, #44]	@ (8004ab4 <global_stdio_init.part.0+0x34>)
 8004a86:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab8 <global_stdio_init.part.0+0x38>)
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2104      	movs	r1, #4
 8004a90:	f7ff ff94 	bl	80049bc <std>
 8004a94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a98:	2201      	movs	r2, #1
 8004a9a:	2109      	movs	r1, #9
 8004a9c:	f7ff ff8e 	bl	80049bc <std>
 8004aa0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aaa:	2112      	movs	r1, #18
 8004aac:	f7ff bf86 	b.w	80049bc <std>
 8004ab0:	200002b0 	.word	0x200002b0
 8004ab4:	20000178 	.word	0x20000178
 8004ab8:	08004a29 	.word	0x08004a29

08004abc <__sfp_lock_acquire>:
 8004abc:	4801      	ldr	r0, [pc, #4]	@ (8004ac4 <__sfp_lock_acquire+0x8>)
 8004abe:	f000 b9ee 	b.w	8004e9e <__retarget_lock_acquire_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	200002b9 	.word	0x200002b9

08004ac8 <__sfp_lock_release>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	@ (8004ad0 <__sfp_lock_release+0x8>)
 8004aca:	f000 b9e9 	b.w	8004ea0 <__retarget_lock_release_recursive>
 8004ace:	bf00      	nop
 8004ad0:	200002b9 	.word	0x200002b9

08004ad4 <__sinit>:
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	f7ff fff0 	bl	8004abc <__sfp_lock_acquire>
 8004adc:	6a23      	ldr	r3, [r4, #32]
 8004ade:	b11b      	cbz	r3, 8004ae8 <__sinit+0x14>
 8004ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae4:	f7ff bff0 	b.w	8004ac8 <__sfp_lock_release>
 8004ae8:	4b04      	ldr	r3, [pc, #16]	@ (8004afc <__sinit+0x28>)
 8004aea:	6223      	str	r3, [r4, #32]
 8004aec:	4b04      	ldr	r3, [pc, #16]	@ (8004b00 <__sinit+0x2c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f5      	bne.n	8004ae0 <__sinit+0xc>
 8004af4:	f7ff ffc4 	bl	8004a80 <global_stdio_init.part.0>
 8004af8:	e7f2      	b.n	8004ae0 <__sinit+0xc>
 8004afa:	bf00      	nop
 8004afc:	08004a41 	.word	0x08004a41
 8004b00:	200002b0 	.word	0x200002b0

08004b04 <_fwalk_sglue>:
 8004b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b08:	4607      	mov	r7, r0
 8004b0a:	4688      	mov	r8, r1
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	2600      	movs	r6, #0
 8004b10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b14:	f1b9 0901 	subs.w	r9, r9, #1
 8004b18:	d505      	bpl.n	8004b26 <_fwalk_sglue+0x22>
 8004b1a:	6824      	ldr	r4, [r4, #0]
 8004b1c:	2c00      	cmp	r4, #0
 8004b1e:	d1f7      	bne.n	8004b10 <_fwalk_sglue+0xc>
 8004b20:	4630      	mov	r0, r6
 8004b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b26:	89ab      	ldrh	r3, [r5, #12]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d907      	bls.n	8004b3c <_fwalk_sglue+0x38>
 8004b2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b30:	3301      	adds	r3, #1
 8004b32:	d003      	beq.n	8004b3c <_fwalk_sglue+0x38>
 8004b34:	4629      	mov	r1, r5
 8004b36:	4638      	mov	r0, r7
 8004b38:	47c0      	blx	r8
 8004b3a:	4306      	orrs	r6, r0
 8004b3c:	3568      	adds	r5, #104	@ 0x68
 8004b3e:	e7e9      	b.n	8004b14 <_fwalk_sglue+0x10>

08004b40 <_puts_r>:
 8004b40:	6a03      	ldr	r3, [r0, #32]
 8004b42:	b570      	push	{r4, r5, r6, lr}
 8004b44:	6884      	ldr	r4, [r0, #8]
 8004b46:	4605      	mov	r5, r0
 8004b48:	460e      	mov	r6, r1
 8004b4a:	b90b      	cbnz	r3, 8004b50 <_puts_r+0x10>
 8004b4c:	f7ff ffc2 	bl	8004ad4 <__sinit>
 8004b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b52:	07db      	lsls	r3, r3, #31
 8004b54:	d405      	bmi.n	8004b62 <_puts_r+0x22>
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	0598      	lsls	r0, r3, #22
 8004b5a:	d402      	bmi.n	8004b62 <_puts_r+0x22>
 8004b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b5e:	f000 f99e 	bl	8004e9e <__retarget_lock_acquire_recursive>
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	0719      	lsls	r1, r3, #28
 8004b66:	d502      	bpl.n	8004b6e <_puts_r+0x2e>
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d135      	bne.n	8004bda <_puts_r+0x9a>
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 f8c5 	bl	8004d00 <__swsetup_r>
 8004b76:	b380      	cbz	r0, 8004bda <_puts_r+0x9a>
 8004b78:	f04f 35ff 	mov.w	r5, #4294967295
 8004b7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b7e:	07da      	lsls	r2, r3, #31
 8004b80:	d405      	bmi.n	8004b8e <_puts_r+0x4e>
 8004b82:	89a3      	ldrh	r3, [r4, #12]
 8004b84:	059b      	lsls	r3, r3, #22
 8004b86:	d402      	bmi.n	8004b8e <_puts_r+0x4e>
 8004b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b8a:	f000 f989 	bl	8004ea0 <__retarget_lock_release_recursive>
 8004b8e:	4628      	mov	r0, r5
 8004b90:	bd70      	pop	{r4, r5, r6, pc}
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da04      	bge.n	8004ba0 <_puts_r+0x60>
 8004b96:	69a2      	ldr	r2, [r4, #24]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	dc17      	bgt.n	8004bcc <_puts_r+0x8c>
 8004b9c:	290a      	cmp	r1, #10
 8004b9e:	d015      	beq.n	8004bcc <_puts_r+0x8c>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	6022      	str	r2, [r4, #0]
 8004ba6:	7019      	strb	r1, [r3, #0]
 8004ba8:	68a3      	ldr	r3, [r4, #8]
 8004baa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	60a3      	str	r3, [r4, #8]
 8004bb2:	2900      	cmp	r1, #0
 8004bb4:	d1ed      	bne.n	8004b92 <_puts_r+0x52>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	da11      	bge.n	8004bde <_puts_r+0x9e>
 8004bba:	4622      	mov	r2, r4
 8004bbc:	210a      	movs	r1, #10
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 f85f 	bl	8004c82 <__swbuf_r>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d0d7      	beq.n	8004b78 <_puts_r+0x38>
 8004bc8:	250a      	movs	r5, #10
 8004bca:	e7d7      	b.n	8004b7c <_puts_r+0x3c>
 8004bcc:	4622      	mov	r2, r4
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 f857 	bl	8004c82 <__swbuf_r>
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d1e7      	bne.n	8004ba8 <_puts_r+0x68>
 8004bd8:	e7ce      	b.n	8004b78 <_puts_r+0x38>
 8004bda:	3e01      	subs	r6, #1
 8004bdc:	e7e4      	b.n	8004ba8 <_puts_r+0x68>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	6022      	str	r2, [r4, #0]
 8004be4:	220a      	movs	r2, #10
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e7ee      	b.n	8004bc8 <_puts_r+0x88>
	...

08004bec <puts>:
 8004bec:	4b02      	ldr	r3, [pc, #8]	@ (8004bf8 <puts+0xc>)
 8004bee:	4601      	mov	r1, r0
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	f7ff bfa5 	b.w	8004b40 <_puts_r>
 8004bf6:	bf00      	nop
 8004bf8:	20000018 	.word	0x20000018

08004bfc <__sread>:
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	460c      	mov	r4, r1
 8004c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c04:	f000 f8fc 	bl	8004e00 <_read_r>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	bfab      	itete	ge
 8004c0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8004c10:	181b      	addge	r3, r3, r0
 8004c12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c16:	bfac      	ite	ge
 8004c18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c1a:	81a3      	strhlt	r3, [r4, #12]
 8004c1c:	bd10      	pop	{r4, pc}

08004c1e <__swrite>:
 8004c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c22:	461f      	mov	r7, r3
 8004c24:	898b      	ldrh	r3, [r1, #12]
 8004c26:	05db      	lsls	r3, r3, #23
 8004c28:	4605      	mov	r5, r0
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	4616      	mov	r6, r2
 8004c2e:	d505      	bpl.n	8004c3c <__swrite+0x1e>
 8004c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c34:	2302      	movs	r3, #2
 8004c36:	2200      	movs	r2, #0
 8004c38:	f000 f8d0 	bl	8004ddc <_lseek_r>
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c46:	81a3      	strh	r3, [r4, #12]
 8004c48:	4632      	mov	r2, r6
 8004c4a:	463b      	mov	r3, r7
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c52:	f000 b8e7 	b.w	8004e24 <_write_r>

08004c56 <__sseek>:
 8004c56:	b510      	push	{r4, lr}
 8004c58:	460c      	mov	r4, r1
 8004c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5e:	f000 f8bd 	bl	8004ddc <_lseek_r>
 8004c62:	1c43      	adds	r3, r0, #1
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	bf15      	itete	ne
 8004c68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c72:	81a3      	strheq	r3, [r4, #12]
 8004c74:	bf18      	it	ne
 8004c76:	81a3      	strhne	r3, [r4, #12]
 8004c78:	bd10      	pop	{r4, pc}

08004c7a <__sclose>:
 8004c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c7e:	f000 b89d 	b.w	8004dbc <_close_r>

08004c82 <__swbuf_r>:
 8004c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c84:	460e      	mov	r6, r1
 8004c86:	4614      	mov	r4, r2
 8004c88:	4605      	mov	r5, r0
 8004c8a:	b118      	cbz	r0, 8004c94 <__swbuf_r+0x12>
 8004c8c:	6a03      	ldr	r3, [r0, #32]
 8004c8e:	b90b      	cbnz	r3, 8004c94 <__swbuf_r+0x12>
 8004c90:	f7ff ff20 	bl	8004ad4 <__sinit>
 8004c94:	69a3      	ldr	r3, [r4, #24]
 8004c96:	60a3      	str	r3, [r4, #8]
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	071a      	lsls	r2, r3, #28
 8004c9c:	d501      	bpl.n	8004ca2 <__swbuf_r+0x20>
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	b943      	cbnz	r3, 8004cb4 <__swbuf_r+0x32>
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f000 f82b 	bl	8004d00 <__swsetup_r>
 8004caa:	b118      	cbz	r0, 8004cb4 <__swbuf_r+0x32>
 8004cac:	f04f 37ff 	mov.w	r7, #4294967295
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	6922      	ldr	r2, [r4, #16]
 8004cb8:	1a98      	subs	r0, r3, r2
 8004cba:	6963      	ldr	r3, [r4, #20]
 8004cbc:	b2f6      	uxtb	r6, r6
 8004cbe:	4283      	cmp	r3, r0
 8004cc0:	4637      	mov	r7, r6
 8004cc2:	dc05      	bgt.n	8004cd0 <__swbuf_r+0x4e>
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f000 fa68 	bl	800519c <_fflush_r>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d1ed      	bne.n	8004cac <__swbuf_r+0x2a>
 8004cd0:	68a3      	ldr	r3, [r4, #8]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	60a3      	str	r3, [r4, #8]
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	6022      	str	r2, [r4, #0]
 8004cdc:	701e      	strb	r6, [r3, #0]
 8004cde:	6962      	ldr	r2, [r4, #20]
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d004      	beq.n	8004cf0 <__swbuf_r+0x6e>
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	07db      	lsls	r3, r3, #31
 8004cea:	d5e1      	bpl.n	8004cb0 <__swbuf_r+0x2e>
 8004cec:	2e0a      	cmp	r6, #10
 8004cee:	d1df      	bne.n	8004cb0 <__swbuf_r+0x2e>
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f000 fa52 	bl	800519c <_fflush_r>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d0d9      	beq.n	8004cb0 <__swbuf_r+0x2e>
 8004cfc:	e7d6      	b.n	8004cac <__swbuf_r+0x2a>
	...

08004d00 <__swsetup_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4b29      	ldr	r3, [pc, #164]	@ (8004da8 <__swsetup_r+0xa8>)
 8004d04:	4605      	mov	r5, r0
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	460c      	mov	r4, r1
 8004d0a:	b118      	cbz	r0, 8004d14 <__swsetup_r+0x14>
 8004d0c:	6a03      	ldr	r3, [r0, #32]
 8004d0e:	b90b      	cbnz	r3, 8004d14 <__swsetup_r+0x14>
 8004d10:	f7ff fee0 	bl	8004ad4 <__sinit>
 8004d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d18:	0719      	lsls	r1, r3, #28
 8004d1a:	d422      	bmi.n	8004d62 <__swsetup_r+0x62>
 8004d1c:	06da      	lsls	r2, r3, #27
 8004d1e:	d407      	bmi.n	8004d30 <__swsetup_r+0x30>
 8004d20:	2209      	movs	r2, #9
 8004d22:	602a      	str	r2, [r5, #0]
 8004d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d28:	81a3      	strh	r3, [r4, #12]
 8004d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2e:	e033      	b.n	8004d98 <__swsetup_r+0x98>
 8004d30:	0758      	lsls	r0, r3, #29
 8004d32:	d512      	bpl.n	8004d5a <__swsetup_r+0x5a>
 8004d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d36:	b141      	cbz	r1, 8004d4a <__swsetup_r+0x4a>
 8004d38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	d002      	beq.n	8004d46 <__swsetup_r+0x46>
 8004d40:	4628      	mov	r0, r5
 8004d42:	f000 f8af 	bl	8004ea4 <_free_r>
 8004d46:	2300      	movs	r3, #0
 8004d48:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d50:	81a3      	strh	r3, [r4, #12]
 8004d52:	2300      	movs	r3, #0
 8004d54:	6063      	str	r3, [r4, #4]
 8004d56:	6923      	ldr	r3, [r4, #16]
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	f043 0308 	orr.w	r3, r3, #8
 8004d60:	81a3      	strh	r3, [r4, #12]
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	b94b      	cbnz	r3, 8004d7a <__swsetup_r+0x7a>
 8004d66:	89a3      	ldrh	r3, [r4, #12]
 8004d68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d70:	d003      	beq.n	8004d7a <__swsetup_r+0x7a>
 8004d72:	4621      	mov	r1, r4
 8004d74:	4628      	mov	r0, r5
 8004d76:	f000 fa5f 	bl	8005238 <__smakebuf_r>
 8004d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d7e:	f013 0201 	ands.w	r2, r3, #1
 8004d82:	d00a      	beq.n	8004d9a <__swsetup_r+0x9a>
 8004d84:	2200      	movs	r2, #0
 8004d86:	60a2      	str	r2, [r4, #8]
 8004d88:	6962      	ldr	r2, [r4, #20]
 8004d8a:	4252      	negs	r2, r2
 8004d8c:	61a2      	str	r2, [r4, #24]
 8004d8e:	6922      	ldr	r2, [r4, #16]
 8004d90:	b942      	cbnz	r2, 8004da4 <__swsetup_r+0xa4>
 8004d92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d96:	d1c5      	bne.n	8004d24 <__swsetup_r+0x24>
 8004d98:	bd38      	pop	{r3, r4, r5, pc}
 8004d9a:	0799      	lsls	r1, r3, #30
 8004d9c:	bf58      	it	pl
 8004d9e:	6962      	ldrpl	r2, [r4, #20]
 8004da0:	60a2      	str	r2, [r4, #8]
 8004da2:	e7f4      	b.n	8004d8e <__swsetup_r+0x8e>
 8004da4:	2000      	movs	r0, #0
 8004da6:	e7f7      	b.n	8004d98 <__swsetup_r+0x98>
 8004da8:	20000018 	.word	0x20000018

08004dac <memset>:
 8004dac:	4402      	add	r2, r0
 8004dae:	4603      	mov	r3, r0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d100      	bne.n	8004db6 <memset+0xa>
 8004db4:	4770      	bx	lr
 8004db6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dba:	e7f9      	b.n	8004db0 <memset+0x4>

08004dbc <_close_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d06      	ldr	r5, [pc, #24]	@ (8004dd8 <_close_r+0x1c>)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	f7fc fe57 	bl	8001a7a <_close>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_close_r+0x1a>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_close_r+0x1a>
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	200002b4 	.word	0x200002b4

08004ddc <_lseek_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4d07      	ldr	r5, [pc, #28]	@ (8004dfc <_lseek_r+0x20>)
 8004de0:	4604      	mov	r4, r0
 8004de2:	4608      	mov	r0, r1
 8004de4:	4611      	mov	r1, r2
 8004de6:	2200      	movs	r2, #0
 8004de8:	602a      	str	r2, [r5, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f7fc fe6c 	bl	8001ac8 <_lseek>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d102      	bne.n	8004dfa <_lseek_r+0x1e>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	b103      	cbz	r3, 8004dfa <_lseek_r+0x1e>
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	200002b4 	.word	0x200002b4

08004e00 <_read_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d07      	ldr	r5, [pc, #28]	@ (8004e20 <_read_r+0x20>)
 8004e04:	4604      	mov	r4, r0
 8004e06:	4608      	mov	r0, r1
 8004e08:	4611      	mov	r1, r2
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	602a      	str	r2, [r5, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f7fc fdfa 	bl	8001a08 <_read>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_read_r+0x1e>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_read_r+0x1e>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	200002b4 	.word	0x200002b4

08004e24 <_write_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d07      	ldr	r5, [pc, #28]	@ (8004e44 <_write_r+0x20>)
 8004e28:	4604      	mov	r4, r0
 8004e2a:	4608      	mov	r0, r1
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	2200      	movs	r2, #0
 8004e30:	602a      	str	r2, [r5, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f7fc fe05 	bl	8001a42 <_write>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_write_r+0x1e>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_write_r+0x1e>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	200002b4 	.word	0x200002b4

08004e48 <__errno>:
 8004e48:	4b01      	ldr	r3, [pc, #4]	@ (8004e50 <__errno+0x8>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000018 	.word	0x20000018

08004e54 <__libc_init_array>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	4d0d      	ldr	r5, [pc, #52]	@ (8004e8c <__libc_init_array+0x38>)
 8004e58:	4c0d      	ldr	r4, [pc, #52]	@ (8004e90 <__libc_init_array+0x3c>)
 8004e5a:	1b64      	subs	r4, r4, r5
 8004e5c:	10a4      	asrs	r4, r4, #2
 8004e5e:	2600      	movs	r6, #0
 8004e60:	42a6      	cmp	r6, r4
 8004e62:	d109      	bne.n	8004e78 <__libc_init_array+0x24>
 8004e64:	4d0b      	ldr	r5, [pc, #44]	@ (8004e94 <__libc_init_array+0x40>)
 8004e66:	4c0c      	ldr	r4, [pc, #48]	@ (8004e98 <__libc_init_array+0x44>)
 8004e68:	f000 fcfc 	bl	8005864 <_init>
 8004e6c:	1b64      	subs	r4, r4, r5
 8004e6e:	10a4      	asrs	r4, r4, #2
 8004e70:	2600      	movs	r6, #0
 8004e72:	42a6      	cmp	r6, r4
 8004e74:	d105      	bne.n	8004e82 <__libc_init_array+0x2e>
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7c:	4798      	blx	r3
 8004e7e:	3601      	adds	r6, #1
 8004e80:	e7ee      	b.n	8004e60 <__libc_init_array+0xc>
 8004e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e86:	4798      	blx	r3
 8004e88:	3601      	adds	r6, #1
 8004e8a:	e7f2      	b.n	8004e72 <__libc_init_array+0x1e>
 8004e8c:	08005948 	.word	0x08005948
 8004e90:	08005948 	.word	0x08005948
 8004e94:	08005948 	.word	0x08005948
 8004e98:	0800594c 	.word	0x0800594c

08004e9c <__retarget_lock_init_recursive>:
 8004e9c:	4770      	bx	lr

08004e9e <__retarget_lock_acquire_recursive>:
 8004e9e:	4770      	bx	lr

08004ea0 <__retarget_lock_release_recursive>:
 8004ea0:	4770      	bx	lr
	...

08004ea4 <_free_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	d041      	beq.n	8004f30 <_free_r+0x8c>
 8004eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb0:	1f0c      	subs	r4, r1, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bfb8      	it	lt
 8004eb6:	18e4      	addlt	r4, r4, r3
 8004eb8:	f000 f8e0 	bl	800507c <__malloc_lock>
 8004ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f34 <_free_r+0x90>)
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	b933      	cbnz	r3, 8004ed0 <_free_r+0x2c>
 8004ec2:	6063      	str	r3, [r4, #4]
 8004ec4:	6014      	str	r4, [r2, #0]
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ecc:	f000 b8dc 	b.w	8005088 <__malloc_unlock>
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	d908      	bls.n	8004ee6 <_free_r+0x42>
 8004ed4:	6820      	ldr	r0, [r4, #0]
 8004ed6:	1821      	adds	r1, r4, r0
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	bf01      	itttt	eq
 8004edc:	6819      	ldreq	r1, [r3, #0]
 8004ede:	685b      	ldreq	r3, [r3, #4]
 8004ee0:	1809      	addeq	r1, r1, r0
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	e7ed      	b.n	8004ec2 <_free_r+0x1e>
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b10b      	cbz	r3, 8004ef0 <_free_r+0x4c>
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	d9fa      	bls.n	8004ee6 <_free_r+0x42>
 8004ef0:	6811      	ldr	r1, [r2, #0]
 8004ef2:	1850      	adds	r0, r2, r1
 8004ef4:	42a0      	cmp	r0, r4
 8004ef6:	d10b      	bne.n	8004f10 <_free_r+0x6c>
 8004ef8:	6820      	ldr	r0, [r4, #0]
 8004efa:	4401      	add	r1, r0
 8004efc:	1850      	adds	r0, r2, r1
 8004efe:	4283      	cmp	r3, r0
 8004f00:	6011      	str	r1, [r2, #0]
 8004f02:	d1e0      	bne.n	8004ec6 <_free_r+0x22>
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	6053      	str	r3, [r2, #4]
 8004f0a:	4408      	add	r0, r1
 8004f0c:	6010      	str	r0, [r2, #0]
 8004f0e:	e7da      	b.n	8004ec6 <_free_r+0x22>
 8004f10:	d902      	bls.n	8004f18 <_free_r+0x74>
 8004f12:	230c      	movs	r3, #12
 8004f14:	602b      	str	r3, [r5, #0]
 8004f16:	e7d6      	b.n	8004ec6 <_free_r+0x22>
 8004f18:	6820      	ldr	r0, [r4, #0]
 8004f1a:	1821      	adds	r1, r4, r0
 8004f1c:	428b      	cmp	r3, r1
 8004f1e:	bf04      	itt	eq
 8004f20:	6819      	ldreq	r1, [r3, #0]
 8004f22:	685b      	ldreq	r3, [r3, #4]
 8004f24:	6063      	str	r3, [r4, #4]
 8004f26:	bf04      	itt	eq
 8004f28:	1809      	addeq	r1, r1, r0
 8004f2a:	6021      	streq	r1, [r4, #0]
 8004f2c:	6054      	str	r4, [r2, #4]
 8004f2e:	e7ca      	b.n	8004ec6 <_free_r+0x22>
 8004f30:	bd38      	pop	{r3, r4, r5, pc}
 8004f32:	bf00      	nop
 8004f34:	200002c0 	.word	0x200002c0

08004f38 <sbrk_aligned>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4e0f      	ldr	r6, [pc, #60]	@ (8004f78 <sbrk_aligned+0x40>)
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	6831      	ldr	r1, [r6, #0]
 8004f40:	4605      	mov	r5, r0
 8004f42:	b911      	cbnz	r1, 8004f4a <sbrk_aligned+0x12>
 8004f44:	f000 f9d6 	bl	80052f4 <_sbrk_r>
 8004f48:	6030      	str	r0, [r6, #0]
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f000 f9d1 	bl	80052f4 <_sbrk_r>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	d103      	bne.n	8004f5e <sbrk_aligned+0x26>
 8004f56:	f04f 34ff 	mov.w	r4, #4294967295
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	bd70      	pop	{r4, r5, r6, pc}
 8004f5e:	1cc4      	adds	r4, r0, #3
 8004f60:	f024 0403 	bic.w	r4, r4, #3
 8004f64:	42a0      	cmp	r0, r4
 8004f66:	d0f8      	beq.n	8004f5a <sbrk_aligned+0x22>
 8004f68:	1a21      	subs	r1, r4, r0
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 f9c2 	bl	80052f4 <_sbrk_r>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d1f2      	bne.n	8004f5a <sbrk_aligned+0x22>
 8004f74:	e7ef      	b.n	8004f56 <sbrk_aligned+0x1e>
 8004f76:	bf00      	nop
 8004f78:	200002bc 	.word	0x200002bc

08004f7c <_malloc_r>:
 8004f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f80:	1ccd      	adds	r5, r1, #3
 8004f82:	f025 0503 	bic.w	r5, r5, #3
 8004f86:	3508      	adds	r5, #8
 8004f88:	2d0c      	cmp	r5, #12
 8004f8a:	bf38      	it	cc
 8004f8c:	250c      	movcc	r5, #12
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	4606      	mov	r6, r0
 8004f92:	db01      	blt.n	8004f98 <_malloc_r+0x1c>
 8004f94:	42a9      	cmp	r1, r5
 8004f96:	d904      	bls.n	8004fa2 <_malloc_r+0x26>
 8004f98:	230c      	movs	r3, #12
 8004f9a:	6033      	str	r3, [r6, #0]
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005078 <_malloc_r+0xfc>
 8004fa6:	f000 f869 	bl	800507c <__malloc_lock>
 8004faa:	f8d8 3000 	ldr.w	r3, [r8]
 8004fae:	461c      	mov	r4, r3
 8004fb0:	bb44      	cbnz	r4, 8005004 <_malloc_r+0x88>
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7ff ffbf 	bl	8004f38 <sbrk_aligned>
 8004fba:	1c43      	adds	r3, r0, #1
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	d158      	bne.n	8005072 <_malloc_r+0xf6>
 8004fc0:	f8d8 4000 	ldr.w	r4, [r8]
 8004fc4:	4627      	mov	r7, r4
 8004fc6:	2f00      	cmp	r7, #0
 8004fc8:	d143      	bne.n	8005052 <_malloc_r+0xd6>
 8004fca:	2c00      	cmp	r4, #0
 8004fcc:	d04b      	beq.n	8005066 <_malloc_r+0xea>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	4639      	mov	r1, r7
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	eb04 0903 	add.w	r9, r4, r3
 8004fd8:	f000 f98c 	bl	80052f4 <_sbrk_r>
 8004fdc:	4581      	cmp	r9, r0
 8004fde:	d142      	bne.n	8005066 <_malloc_r+0xea>
 8004fe0:	6821      	ldr	r1, [r4, #0]
 8004fe2:	1a6d      	subs	r5, r5, r1
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f7ff ffa6 	bl	8004f38 <sbrk_aligned>
 8004fec:	3001      	adds	r0, #1
 8004fee:	d03a      	beq.n	8005066 <_malloc_r+0xea>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	442b      	add	r3, r5
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	bb62      	cbnz	r2, 8005058 <_malloc_r+0xdc>
 8004ffe:	f8c8 7000 	str.w	r7, [r8]
 8005002:	e00f      	b.n	8005024 <_malloc_r+0xa8>
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	1b52      	subs	r2, r2, r5
 8005008:	d420      	bmi.n	800504c <_malloc_r+0xd0>
 800500a:	2a0b      	cmp	r2, #11
 800500c:	d917      	bls.n	800503e <_malloc_r+0xc2>
 800500e:	1961      	adds	r1, r4, r5
 8005010:	42a3      	cmp	r3, r4
 8005012:	6025      	str	r5, [r4, #0]
 8005014:	bf18      	it	ne
 8005016:	6059      	strne	r1, [r3, #4]
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	bf08      	it	eq
 800501c:	f8c8 1000 	streq.w	r1, [r8]
 8005020:	5162      	str	r2, [r4, r5]
 8005022:	604b      	str	r3, [r1, #4]
 8005024:	4630      	mov	r0, r6
 8005026:	f000 f82f 	bl	8005088 <__malloc_unlock>
 800502a:	f104 000b 	add.w	r0, r4, #11
 800502e:	1d23      	adds	r3, r4, #4
 8005030:	f020 0007 	bic.w	r0, r0, #7
 8005034:	1ac2      	subs	r2, r0, r3
 8005036:	bf1c      	itt	ne
 8005038:	1a1b      	subne	r3, r3, r0
 800503a:	50a3      	strne	r3, [r4, r2]
 800503c:	e7af      	b.n	8004f9e <_malloc_r+0x22>
 800503e:	6862      	ldr	r2, [r4, #4]
 8005040:	42a3      	cmp	r3, r4
 8005042:	bf0c      	ite	eq
 8005044:	f8c8 2000 	streq.w	r2, [r8]
 8005048:	605a      	strne	r2, [r3, #4]
 800504a:	e7eb      	b.n	8005024 <_malloc_r+0xa8>
 800504c:	4623      	mov	r3, r4
 800504e:	6864      	ldr	r4, [r4, #4]
 8005050:	e7ae      	b.n	8004fb0 <_malloc_r+0x34>
 8005052:	463c      	mov	r4, r7
 8005054:	687f      	ldr	r7, [r7, #4]
 8005056:	e7b6      	b.n	8004fc6 <_malloc_r+0x4a>
 8005058:	461a      	mov	r2, r3
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	42a3      	cmp	r3, r4
 800505e:	d1fb      	bne.n	8005058 <_malloc_r+0xdc>
 8005060:	2300      	movs	r3, #0
 8005062:	6053      	str	r3, [r2, #4]
 8005064:	e7de      	b.n	8005024 <_malloc_r+0xa8>
 8005066:	230c      	movs	r3, #12
 8005068:	6033      	str	r3, [r6, #0]
 800506a:	4630      	mov	r0, r6
 800506c:	f000 f80c 	bl	8005088 <__malloc_unlock>
 8005070:	e794      	b.n	8004f9c <_malloc_r+0x20>
 8005072:	6005      	str	r5, [r0, #0]
 8005074:	e7d6      	b.n	8005024 <_malloc_r+0xa8>
 8005076:	bf00      	nop
 8005078:	200002c0 	.word	0x200002c0

0800507c <__malloc_lock>:
 800507c:	4801      	ldr	r0, [pc, #4]	@ (8005084 <__malloc_lock+0x8>)
 800507e:	f7ff bf0e 	b.w	8004e9e <__retarget_lock_acquire_recursive>
 8005082:	bf00      	nop
 8005084:	200002b8 	.word	0x200002b8

08005088 <__malloc_unlock>:
 8005088:	4801      	ldr	r0, [pc, #4]	@ (8005090 <__malloc_unlock+0x8>)
 800508a:	f7ff bf09 	b.w	8004ea0 <__retarget_lock_release_recursive>
 800508e:	bf00      	nop
 8005090:	200002b8 	.word	0x200002b8

08005094 <__sflush_r>:
 8005094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509c:	0716      	lsls	r6, r2, #28
 800509e:	4605      	mov	r5, r0
 80050a0:	460c      	mov	r4, r1
 80050a2:	d454      	bmi.n	800514e <__sflush_r+0xba>
 80050a4:	684b      	ldr	r3, [r1, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dc02      	bgt.n	80050b0 <__sflush_r+0x1c>
 80050aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	dd48      	ble.n	8005142 <__sflush_r+0xae>
 80050b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	d045      	beq.n	8005142 <__sflush_r+0xae>
 80050b6:	2300      	movs	r3, #0
 80050b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050bc:	682f      	ldr	r7, [r5, #0]
 80050be:	6a21      	ldr	r1, [r4, #32]
 80050c0:	602b      	str	r3, [r5, #0]
 80050c2:	d030      	beq.n	8005126 <__sflush_r+0x92>
 80050c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	0759      	lsls	r1, r3, #29
 80050ca:	d505      	bpl.n	80050d8 <__sflush_r+0x44>
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	1ad2      	subs	r2, r2, r3
 80050d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050d2:	b10b      	cbz	r3, 80050d8 <__sflush_r+0x44>
 80050d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050d6:	1ad2      	subs	r2, r2, r3
 80050d8:	2300      	movs	r3, #0
 80050da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050dc:	6a21      	ldr	r1, [r4, #32]
 80050de:	4628      	mov	r0, r5
 80050e0:	47b0      	blx	r6
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	d106      	bne.n	80050f6 <__sflush_r+0x62>
 80050e8:	6829      	ldr	r1, [r5, #0]
 80050ea:	291d      	cmp	r1, #29
 80050ec:	d82b      	bhi.n	8005146 <__sflush_r+0xb2>
 80050ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005198 <__sflush_r+0x104>)
 80050f0:	410a      	asrs	r2, r1
 80050f2:	07d6      	lsls	r6, r2, #31
 80050f4:	d427      	bmi.n	8005146 <__sflush_r+0xb2>
 80050f6:	2200      	movs	r2, #0
 80050f8:	6062      	str	r2, [r4, #4]
 80050fa:	04d9      	lsls	r1, r3, #19
 80050fc:	6922      	ldr	r2, [r4, #16]
 80050fe:	6022      	str	r2, [r4, #0]
 8005100:	d504      	bpl.n	800510c <__sflush_r+0x78>
 8005102:	1c42      	adds	r2, r0, #1
 8005104:	d101      	bne.n	800510a <__sflush_r+0x76>
 8005106:	682b      	ldr	r3, [r5, #0]
 8005108:	b903      	cbnz	r3, 800510c <__sflush_r+0x78>
 800510a:	6560      	str	r0, [r4, #84]	@ 0x54
 800510c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800510e:	602f      	str	r7, [r5, #0]
 8005110:	b1b9      	cbz	r1, 8005142 <__sflush_r+0xae>
 8005112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005116:	4299      	cmp	r1, r3
 8005118:	d002      	beq.n	8005120 <__sflush_r+0x8c>
 800511a:	4628      	mov	r0, r5
 800511c:	f7ff fec2 	bl	8004ea4 <_free_r>
 8005120:	2300      	movs	r3, #0
 8005122:	6363      	str	r3, [r4, #52]	@ 0x34
 8005124:	e00d      	b.n	8005142 <__sflush_r+0xae>
 8005126:	2301      	movs	r3, #1
 8005128:	4628      	mov	r0, r5
 800512a:	47b0      	blx	r6
 800512c:	4602      	mov	r2, r0
 800512e:	1c50      	adds	r0, r2, #1
 8005130:	d1c9      	bne.n	80050c6 <__sflush_r+0x32>
 8005132:	682b      	ldr	r3, [r5, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0c6      	beq.n	80050c6 <__sflush_r+0x32>
 8005138:	2b1d      	cmp	r3, #29
 800513a:	d001      	beq.n	8005140 <__sflush_r+0xac>
 800513c:	2b16      	cmp	r3, #22
 800513e:	d11e      	bne.n	800517e <__sflush_r+0xea>
 8005140:	602f      	str	r7, [r5, #0]
 8005142:	2000      	movs	r0, #0
 8005144:	e022      	b.n	800518c <__sflush_r+0xf8>
 8005146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800514a:	b21b      	sxth	r3, r3
 800514c:	e01b      	b.n	8005186 <__sflush_r+0xf2>
 800514e:	690f      	ldr	r7, [r1, #16]
 8005150:	2f00      	cmp	r7, #0
 8005152:	d0f6      	beq.n	8005142 <__sflush_r+0xae>
 8005154:	0793      	lsls	r3, r2, #30
 8005156:	680e      	ldr	r6, [r1, #0]
 8005158:	bf08      	it	eq
 800515a:	694b      	ldreq	r3, [r1, #20]
 800515c:	600f      	str	r7, [r1, #0]
 800515e:	bf18      	it	ne
 8005160:	2300      	movne	r3, #0
 8005162:	eba6 0807 	sub.w	r8, r6, r7
 8005166:	608b      	str	r3, [r1, #8]
 8005168:	f1b8 0f00 	cmp.w	r8, #0
 800516c:	dde9      	ble.n	8005142 <__sflush_r+0xae>
 800516e:	6a21      	ldr	r1, [r4, #32]
 8005170:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005172:	4643      	mov	r3, r8
 8005174:	463a      	mov	r2, r7
 8005176:	4628      	mov	r0, r5
 8005178:	47b0      	blx	r6
 800517a:	2800      	cmp	r0, #0
 800517c:	dc08      	bgt.n	8005190 <__sflush_r+0xfc>
 800517e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005186:	81a3      	strh	r3, [r4, #12]
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005190:	4407      	add	r7, r0
 8005192:	eba8 0800 	sub.w	r8, r8, r0
 8005196:	e7e7      	b.n	8005168 <__sflush_r+0xd4>
 8005198:	dfbffffe 	.word	0xdfbffffe

0800519c <_fflush_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	690b      	ldr	r3, [r1, #16]
 80051a0:	4605      	mov	r5, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	b913      	cbnz	r3, 80051ac <_fflush_r+0x10>
 80051a6:	2500      	movs	r5, #0
 80051a8:	4628      	mov	r0, r5
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	b118      	cbz	r0, 80051b6 <_fflush_r+0x1a>
 80051ae:	6a03      	ldr	r3, [r0, #32]
 80051b0:	b90b      	cbnz	r3, 80051b6 <_fflush_r+0x1a>
 80051b2:	f7ff fc8f 	bl	8004ad4 <__sinit>
 80051b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f3      	beq.n	80051a6 <_fflush_r+0xa>
 80051be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051c0:	07d0      	lsls	r0, r2, #31
 80051c2:	d404      	bmi.n	80051ce <_fflush_r+0x32>
 80051c4:	0599      	lsls	r1, r3, #22
 80051c6:	d402      	bmi.n	80051ce <_fflush_r+0x32>
 80051c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ca:	f7ff fe68 	bl	8004e9e <__retarget_lock_acquire_recursive>
 80051ce:	4628      	mov	r0, r5
 80051d0:	4621      	mov	r1, r4
 80051d2:	f7ff ff5f 	bl	8005094 <__sflush_r>
 80051d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051d8:	07da      	lsls	r2, r3, #31
 80051da:	4605      	mov	r5, r0
 80051dc:	d4e4      	bmi.n	80051a8 <_fflush_r+0xc>
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	059b      	lsls	r3, r3, #22
 80051e2:	d4e1      	bmi.n	80051a8 <_fflush_r+0xc>
 80051e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051e6:	f7ff fe5b 	bl	8004ea0 <__retarget_lock_release_recursive>
 80051ea:	e7dd      	b.n	80051a8 <_fflush_r+0xc>

080051ec <__swhatbuf_r>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	460c      	mov	r4, r1
 80051f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f4:	2900      	cmp	r1, #0
 80051f6:	b096      	sub	sp, #88	@ 0x58
 80051f8:	4615      	mov	r5, r2
 80051fa:	461e      	mov	r6, r3
 80051fc:	da0d      	bge.n	800521a <__swhatbuf_r+0x2e>
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005204:	f04f 0100 	mov.w	r1, #0
 8005208:	bf14      	ite	ne
 800520a:	2340      	movne	r3, #64	@ 0x40
 800520c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005210:	2000      	movs	r0, #0
 8005212:	6031      	str	r1, [r6, #0]
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	b016      	add	sp, #88	@ 0x58
 8005218:	bd70      	pop	{r4, r5, r6, pc}
 800521a:	466a      	mov	r2, sp
 800521c:	f000 f848 	bl	80052b0 <_fstat_r>
 8005220:	2800      	cmp	r0, #0
 8005222:	dbec      	blt.n	80051fe <__swhatbuf_r+0x12>
 8005224:	9901      	ldr	r1, [sp, #4]
 8005226:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800522a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800522e:	4259      	negs	r1, r3
 8005230:	4159      	adcs	r1, r3
 8005232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005236:	e7eb      	b.n	8005210 <__swhatbuf_r+0x24>

08005238 <__smakebuf_r>:
 8005238:	898b      	ldrh	r3, [r1, #12]
 800523a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800523c:	079d      	lsls	r5, r3, #30
 800523e:	4606      	mov	r6, r0
 8005240:	460c      	mov	r4, r1
 8005242:	d507      	bpl.n	8005254 <__smakebuf_r+0x1c>
 8005244:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	6123      	str	r3, [r4, #16]
 800524c:	2301      	movs	r3, #1
 800524e:	6163      	str	r3, [r4, #20]
 8005250:	b003      	add	sp, #12
 8005252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005254:	ab01      	add	r3, sp, #4
 8005256:	466a      	mov	r2, sp
 8005258:	f7ff ffc8 	bl	80051ec <__swhatbuf_r>
 800525c:	9f00      	ldr	r7, [sp, #0]
 800525e:	4605      	mov	r5, r0
 8005260:	4639      	mov	r1, r7
 8005262:	4630      	mov	r0, r6
 8005264:	f7ff fe8a 	bl	8004f7c <_malloc_r>
 8005268:	b948      	cbnz	r0, 800527e <__smakebuf_r+0x46>
 800526a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800526e:	059a      	lsls	r2, r3, #22
 8005270:	d4ee      	bmi.n	8005250 <__smakebuf_r+0x18>
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	f043 0302 	orr.w	r3, r3, #2
 800527a:	81a3      	strh	r3, [r4, #12]
 800527c:	e7e2      	b.n	8005244 <__smakebuf_r+0xc>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	6020      	str	r0, [r4, #0]
 8005282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	9b01      	ldr	r3, [sp, #4]
 800528a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800528e:	b15b      	cbz	r3, 80052a8 <__smakebuf_r+0x70>
 8005290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005294:	4630      	mov	r0, r6
 8005296:	f000 f81d 	bl	80052d4 <_isatty_r>
 800529a:	b128      	cbz	r0, 80052a8 <__smakebuf_r+0x70>
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	81a3      	strh	r3, [r4, #12]
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	431d      	orrs	r5, r3
 80052ac:	81a5      	strh	r5, [r4, #12]
 80052ae:	e7cf      	b.n	8005250 <__smakebuf_r+0x18>

080052b0 <_fstat_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4d07      	ldr	r5, [pc, #28]	@ (80052d0 <_fstat_r+0x20>)
 80052b4:	2300      	movs	r3, #0
 80052b6:	4604      	mov	r4, r0
 80052b8:	4608      	mov	r0, r1
 80052ba:	4611      	mov	r1, r2
 80052bc:	602b      	str	r3, [r5, #0]
 80052be:	f7fc fbe8 	bl	8001a92 <_fstat>
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	d102      	bne.n	80052cc <_fstat_r+0x1c>
 80052c6:	682b      	ldr	r3, [r5, #0]
 80052c8:	b103      	cbz	r3, 80052cc <_fstat_r+0x1c>
 80052ca:	6023      	str	r3, [r4, #0]
 80052cc:	bd38      	pop	{r3, r4, r5, pc}
 80052ce:	bf00      	nop
 80052d0:	200002b4 	.word	0x200002b4

080052d4 <_isatty_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d06      	ldr	r5, [pc, #24]	@ (80052f0 <_isatty_r+0x1c>)
 80052d8:	2300      	movs	r3, #0
 80052da:	4604      	mov	r4, r0
 80052dc:	4608      	mov	r0, r1
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	f7fc fbe7 	bl	8001ab2 <_isatty>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d102      	bne.n	80052ee <_isatty_r+0x1a>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	b103      	cbz	r3, 80052ee <_isatty_r+0x1a>
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	200002b4 	.word	0x200002b4

080052f4 <_sbrk_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4d06      	ldr	r5, [pc, #24]	@ (8005310 <_sbrk_r+0x1c>)
 80052f8:	2300      	movs	r3, #0
 80052fa:	4604      	mov	r4, r0
 80052fc:	4608      	mov	r0, r1
 80052fe:	602b      	str	r3, [r5, #0]
 8005300:	f7fc fbf0 	bl	8001ae4 <_sbrk>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_sbrk_r+0x1a>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b103      	cbz	r3, 800530e <_sbrk_r+0x1a>
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	200002b4 	.word	0x200002b4

08005314 <sqrt>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	ed2d 8b02 	vpush	{d8}
 800531a:	ec55 4b10 	vmov	r4, r5, d0
 800531e:	f000 f9c7 	bl	80056b0 <__ieee754_sqrt>
 8005322:	4622      	mov	r2, r4
 8005324:	462b      	mov	r3, r5
 8005326:	4620      	mov	r0, r4
 8005328:	4629      	mov	r1, r5
 800532a:	eeb0 8a40 	vmov.f32	s16, s0
 800532e:	eef0 8a60 	vmov.f32	s17, s1
 8005332:	f7fb fbbf 	bl	8000ab4 <__aeabi_dcmpun>
 8005336:	b990      	cbnz	r0, 800535e <sqrt+0x4a>
 8005338:	2200      	movs	r2, #0
 800533a:	2300      	movs	r3, #0
 800533c:	4620      	mov	r0, r4
 800533e:	4629      	mov	r1, r5
 8005340:	f7fb fb90 	bl	8000a64 <__aeabi_dcmplt>
 8005344:	b158      	cbz	r0, 800535e <sqrt+0x4a>
 8005346:	f7ff fd7f 	bl	8004e48 <__errno>
 800534a:	2321      	movs	r3, #33	@ 0x21
 800534c:	6003      	str	r3, [r0, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	2300      	movs	r3, #0
 8005352:	4610      	mov	r0, r2
 8005354:	4619      	mov	r1, r3
 8005356:	f7fb fa3d 	bl	80007d4 <__aeabi_ddiv>
 800535a:	ec41 0b18 	vmov	d8, r0, r1
 800535e:	eeb0 0a48 	vmov.f32	s0, s16
 8005362:	eef0 0a68 	vmov.f32	s1, s17
 8005366:	ecbd 8b02 	vpop	{d8}
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	0000      	movs	r0, r0
	...

08005370 <atan>:
 8005370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	ec55 4b10 	vmov	r4, r5, d0
 8005378:	4bbf      	ldr	r3, [pc, #764]	@ (8005678 <atan+0x308>)
 800537a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800537e:	429e      	cmp	r6, r3
 8005380:	46ab      	mov	fp, r5
 8005382:	d918      	bls.n	80053b6 <atan+0x46>
 8005384:	4bbd      	ldr	r3, [pc, #756]	@ (800567c <atan+0x30c>)
 8005386:	429e      	cmp	r6, r3
 8005388:	d801      	bhi.n	800538e <atan+0x1e>
 800538a:	d109      	bne.n	80053a0 <atan+0x30>
 800538c:	b144      	cbz	r4, 80053a0 <atan+0x30>
 800538e:	4622      	mov	r2, r4
 8005390:	462b      	mov	r3, r5
 8005392:	4620      	mov	r0, r4
 8005394:	4629      	mov	r1, r5
 8005396:	f7fa ff3d 	bl	8000214 <__adddf3>
 800539a:	4604      	mov	r4, r0
 800539c:	460d      	mov	r5, r1
 800539e:	e006      	b.n	80053ae <atan+0x3e>
 80053a0:	f1bb 0f00 	cmp.w	fp, #0
 80053a4:	f340 812b 	ble.w	80055fe <atan+0x28e>
 80053a8:	a597      	add	r5, pc, #604	@ (adr r5, 8005608 <atan+0x298>)
 80053aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80053ae:	ec45 4b10 	vmov	d0, r4, r5
 80053b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b6:	4bb2      	ldr	r3, [pc, #712]	@ (8005680 <atan+0x310>)
 80053b8:	429e      	cmp	r6, r3
 80053ba:	d813      	bhi.n	80053e4 <atan+0x74>
 80053bc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80053c0:	429e      	cmp	r6, r3
 80053c2:	d80c      	bhi.n	80053de <atan+0x6e>
 80053c4:	a392      	add	r3, pc, #584	@ (adr r3, 8005610 <atan+0x2a0>)
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	4620      	mov	r0, r4
 80053cc:	4629      	mov	r1, r5
 80053ce:	f7fa ff21 	bl	8000214 <__adddf3>
 80053d2:	4bac      	ldr	r3, [pc, #688]	@ (8005684 <atan+0x314>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	f7fb fb63 	bl	8000aa0 <__aeabi_dcmpgt>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d1e7      	bne.n	80053ae <atan+0x3e>
 80053de:	f04f 3aff 	mov.w	sl, #4294967295
 80053e2:	e029      	b.n	8005438 <atan+0xc8>
 80053e4:	f000 f95c 	bl	80056a0 <fabs>
 80053e8:	4ba7      	ldr	r3, [pc, #668]	@ (8005688 <atan+0x318>)
 80053ea:	429e      	cmp	r6, r3
 80053ec:	ec55 4b10 	vmov	r4, r5, d0
 80053f0:	f200 80bc 	bhi.w	800556c <atan+0x1fc>
 80053f4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80053f8:	429e      	cmp	r6, r3
 80053fa:	f200 809e 	bhi.w	800553a <atan+0x1ca>
 80053fe:	4622      	mov	r2, r4
 8005400:	462b      	mov	r3, r5
 8005402:	4620      	mov	r0, r4
 8005404:	4629      	mov	r1, r5
 8005406:	f7fa ff05 	bl	8000214 <__adddf3>
 800540a:	4b9e      	ldr	r3, [pc, #632]	@ (8005684 <atan+0x314>)
 800540c:	2200      	movs	r2, #0
 800540e:	f7fa feff 	bl	8000210 <__aeabi_dsub>
 8005412:	2200      	movs	r2, #0
 8005414:	4606      	mov	r6, r0
 8005416:	460f      	mov	r7, r1
 8005418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800541c:	4620      	mov	r0, r4
 800541e:	4629      	mov	r1, r5
 8005420:	f7fa fef8 	bl	8000214 <__adddf3>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4630      	mov	r0, r6
 800542a:	4639      	mov	r1, r7
 800542c:	f7fb f9d2 	bl	80007d4 <__aeabi_ddiv>
 8005430:	f04f 0a00 	mov.w	sl, #0
 8005434:	4604      	mov	r4, r0
 8005436:	460d      	mov	r5, r1
 8005438:	4622      	mov	r2, r4
 800543a:	462b      	mov	r3, r5
 800543c:	4620      	mov	r0, r4
 800543e:	4629      	mov	r1, r5
 8005440:	f7fb f89e 	bl	8000580 <__aeabi_dmul>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4680      	mov	r8, r0
 800544a:	4689      	mov	r9, r1
 800544c:	f7fb f898 	bl	8000580 <__aeabi_dmul>
 8005450:	a371      	add	r3, pc, #452	@ (adr r3, 8005618 <atan+0x2a8>)
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	4606      	mov	r6, r0
 8005458:	460f      	mov	r7, r1
 800545a:	f7fb f891 	bl	8000580 <__aeabi_dmul>
 800545e:	a370      	add	r3, pc, #448	@ (adr r3, 8005620 <atan+0x2b0>)
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f7fa fed6 	bl	8000214 <__adddf3>
 8005468:	4632      	mov	r2, r6
 800546a:	463b      	mov	r3, r7
 800546c:	f7fb f888 	bl	8000580 <__aeabi_dmul>
 8005470:	a36d      	add	r3, pc, #436	@ (adr r3, 8005628 <atan+0x2b8>)
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f7fa fecd 	bl	8000214 <__adddf3>
 800547a:	4632      	mov	r2, r6
 800547c:	463b      	mov	r3, r7
 800547e:	f7fb f87f 	bl	8000580 <__aeabi_dmul>
 8005482:	a36b      	add	r3, pc, #428	@ (adr r3, 8005630 <atan+0x2c0>)
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	f7fa fec4 	bl	8000214 <__adddf3>
 800548c:	4632      	mov	r2, r6
 800548e:	463b      	mov	r3, r7
 8005490:	f7fb f876 	bl	8000580 <__aeabi_dmul>
 8005494:	a368      	add	r3, pc, #416	@ (adr r3, 8005638 <atan+0x2c8>)
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	f7fa febb 	bl	8000214 <__adddf3>
 800549e:	4632      	mov	r2, r6
 80054a0:	463b      	mov	r3, r7
 80054a2:	f7fb f86d 	bl	8000580 <__aeabi_dmul>
 80054a6:	a366      	add	r3, pc, #408	@ (adr r3, 8005640 <atan+0x2d0>)
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f7fa feb2 	bl	8000214 <__adddf3>
 80054b0:	4642      	mov	r2, r8
 80054b2:	464b      	mov	r3, r9
 80054b4:	f7fb f864 	bl	8000580 <__aeabi_dmul>
 80054b8:	a363      	add	r3, pc, #396	@ (adr r3, 8005648 <atan+0x2d8>)
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	4680      	mov	r8, r0
 80054c0:	4689      	mov	r9, r1
 80054c2:	4630      	mov	r0, r6
 80054c4:	4639      	mov	r1, r7
 80054c6:	f7fb f85b 	bl	8000580 <__aeabi_dmul>
 80054ca:	a361      	add	r3, pc, #388	@ (adr r3, 8005650 <atan+0x2e0>)
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f7fa fe9e 	bl	8000210 <__aeabi_dsub>
 80054d4:	4632      	mov	r2, r6
 80054d6:	463b      	mov	r3, r7
 80054d8:	f7fb f852 	bl	8000580 <__aeabi_dmul>
 80054dc:	a35e      	add	r3, pc, #376	@ (adr r3, 8005658 <atan+0x2e8>)
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	f7fa fe95 	bl	8000210 <__aeabi_dsub>
 80054e6:	4632      	mov	r2, r6
 80054e8:	463b      	mov	r3, r7
 80054ea:	f7fb f849 	bl	8000580 <__aeabi_dmul>
 80054ee:	a35c      	add	r3, pc, #368	@ (adr r3, 8005660 <atan+0x2f0>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f7fa fe8c 	bl	8000210 <__aeabi_dsub>
 80054f8:	4632      	mov	r2, r6
 80054fa:	463b      	mov	r3, r7
 80054fc:	f7fb f840 	bl	8000580 <__aeabi_dmul>
 8005500:	a359      	add	r3, pc, #356	@ (adr r3, 8005668 <atan+0x2f8>)
 8005502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005506:	f7fa fe83 	bl	8000210 <__aeabi_dsub>
 800550a:	4632      	mov	r2, r6
 800550c:	463b      	mov	r3, r7
 800550e:	f7fb f837 	bl	8000580 <__aeabi_dmul>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4640      	mov	r0, r8
 8005518:	4649      	mov	r1, r9
 800551a:	f7fa fe7b 	bl	8000214 <__adddf3>
 800551e:	4622      	mov	r2, r4
 8005520:	462b      	mov	r3, r5
 8005522:	f7fb f82d 	bl	8000580 <__aeabi_dmul>
 8005526:	f1ba 3fff 	cmp.w	sl, #4294967295
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	d148      	bne.n	80055c2 <atan+0x252>
 8005530:	4620      	mov	r0, r4
 8005532:	4629      	mov	r1, r5
 8005534:	f7fa fe6c 	bl	8000210 <__aeabi_dsub>
 8005538:	e72f      	b.n	800539a <atan+0x2a>
 800553a:	4b52      	ldr	r3, [pc, #328]	@ (8005684 <atan+0x314>)
 800553c:	2200      	movs	r2, #0
 800553e:	4620      	mov	r0, r4
 8005540:	4629      	mov	r1, r5
 8005542:	f7fa fe65 	bl	8000210 <__aeabi_dsub>
 8005546:	4b4f      	ldr	r3, [pc, #316]	@ (8005684 <atan+0x314>)
 8005548:	4606      	mov	r6, r0
 800554a:	460f      	mov	r7, r1
 800554c:	2200      	movs	r2, #0
 800554e:	4620      	mov	r0, r4
 8005550:	4629      	mov	r1, r5
 8005552:	f7fa fe5f 	bl	8000214 <__adddf3>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4630      	mov	r0, r6
 800555c:	4639      	mov	r1, r7
 800555e:	f7fb f939 	bl	80007d4 <__aeabi_ddiv>
 8005562:	f04f 0a01 	mov.w	sl, #1
 8005566:	4604      	mov	r4, r0
 8005568:	460d      	mov	r5, r1
 800556a:	e765      	b.n	8005438 <atan+0xc8>
 800556c:	4b47      	ldr	r3, [pc, #284]	@ (800568c <atan+0x31c>)
 800556e:	429e      	cmp	r6, r3
 8005570:	d21c      	bcs.n	80055ac <atan+0x23c>
 8005572:	4b47      	ldr	r3, [pc, #284]	@ (8005690 <atan+0x320>)
 8005574:	2200      	movs	r2, #0
 8005576:	4620      	mov	r0, r4
 8005578:	4629      	mov	r1, r5
 800557a:	f7fa fe49 	bl	8000210 <__aeabi_dsub>
 800557e:	4b44      	ldr	r3, [pc, #272]	@ (8005690 <atan+0x320>)
 8005580:	4606      	mov	r6, r0
 8005582:	460f      	mov	r7, r1
 8005584:	2200      	movs	r2, #0
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	f7fa fff9 	bl	8000580 <__aeabi_dmul>
 800558e:	4b3d      	ldr	r3, [pc, #244]	@ (8005684 <atan+0x314>)
 8005590:	2200      	movs	r2, #0
 8005592:	f7fa fe3f 	bl	8000214 <__adddf3>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4630      	mov	r0, r6
 800559c:	4639      	mov	r1, r7
 800559e:	f7fb f919 	bl	80007d4 <__aeabi_ddiv>
 80055a2:	f04f 0a02 	mov.w	sl, #2
 80055a6:	4604      	mov	r4, r0
 80055a8:	460d      	mov	r5, r1
 80055aa:	e745      	b.n	8005438 <atan+0xc8>
 80055ac:	4622      	mov	r2, r4
 80055ae:	462b      	mov	r3, r5
 80055b0:	4938      	ldr	r1, [pc, #224]	@ (8005694 <atan+0x324>)
 80055b2:	2000      	movs	r0, #0
 80055b4:	f7fb f90e 	bl	80007d4 <__aeabi_ddiv>
 80055b8:	f04f 0a03 	mov.w	sl, #3
 80055bc:	4604      	mov	r4, r0
 80055be:	460d      	mov	r5, r1
 80055c0:	e73a      	b.n	8005438 <atan+0xc8>
 80055c2:	4b35      	ldr	r3, [pc, #212]	@ (8005698 <atan+0x328>)
 80055c4:	4e35      	ldr	r6, [pc, #212]	@ (800569c <atan+0x32c>)
 80055c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f7fa fe1f 	bl	8000210 <__aeabi_dsub>
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	f7fa fe1b 	bl	8000210 <__aeabi_dsub>
 80055da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80055e6:	f7fa fe13 	bl	8000210 <__aeabi_dsub>
 80055ea:	f1bb 0f00 	cmp.w	fp, #0
 80055ee:	4604      	mov	r4, r0
 80055f0:	460d      	mov	r5, r1
 80055f2:	f6bf aedc 	bge.w	80053ae <atan+0x3e>
 80055f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055fa:	461d      	mov	r5, r3
 80055fc:	e6d7      	b.n	80053ae <atan+0x3e>
 80055fe:	a51c      	add	r5, pc, #112	@ (adr r5, 8005670 <atan+0x300>)
 8005600:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005604:	e6d3      	b.n	80053ae <atan+0x3e>
 8005606:	bf00      	nop
 8005608:	54442d18 	.word	0x54442d18
 800560c:	3ff921fb 	.word	0x3ff921fb
 8005610:	8800759c 	.word	0x8800759c
 8005614:	7e37e43c 	.word	0x7e37e43c
 8005618:	e322da11 	.word	0xe322da11
 800561c:	3f90ad3a 	.word	0x3f90ad3a
 8005620:	24760deb 	.word	0x24760deb
 8005624:	3fa97b4b 	.word	0x3fa97b4b
 8005628:	a0d03d51 	.word	0xa0d03d51
 800562c:	3fb10d66 	.word	0x3fb10d66
 8005630:	c54c206e 	.word	0xc54c206e
 8005634:	3fb745cd 	.word	0x3fb745cd
 8005638:	920083ff 	.word	0x920083ff
 800563c:	3fc24924 	.word	0x3fc24924
 8005640:	5555550d 	.word	0x5555550d
 8005644:	3fd55555 	.word	0x3fd55555
 8005648:	2c6a6c2f 	.word	0x2c6a6c2f
 800564c:	bfa2b444 	.word	0xbfa2b444
 8005650:	52defd9a 	.word	0x52defd9a
 8005654:	3fadde2d 	.word	0x3fadde2d
 8005658:	af749a6d 	.word	0xaf749a6d
 800565c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005660:	fe231671 	.word	0xfe231671
 8005664:	3fbc71c6 	.word	0x3fbc71c6
 8005668:	9998ebc4 	.word	0x9998ebc4
 800566c:	3fc99999 	.word	0x3fc99999
 8005670:	54442d18 	.word	0x54442d18
 8005674:	bff921fb 	.word	0xbff921fb
 8005678:	440fffff 	.word	0x440fffff
 800567c:	7ff00000 	.word	0x7ff00000
 8005680:	3fdbffff 	.word	0x3fdbffff
 8005684:	3ff00000 	.word	0x3ff00000
 8005688:	3ff2ffff 	.word	0x3ff2ffff
 800568c:	40038000 	.word	0x40038000
 8005690:	3ff80000 	.word	0x3ff80000
 8005694:	bff00000 	.word	0xbff00000
 8005698:	08005900 	.word	0x08005900
 800569c:	08005920 	.word	0x08005920

080056a0 <fabs>:
 80056a0:	ec51 0b10 	vmov	r0, r1, d0
 80056a4:	4602      	mov	r2, r0
 80056a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80056aa:	ec43 2b10 	vmov	d0, r2, r3
 80056ae:	4770      	bx	lr

080056b0 <__ieee754_sqrt>:
 80056b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	4a68      	ldr	r2, [pc, #416]	@ (8005858 <__ieee754_sqrt+0x1a8>)
 80056b6:	ec55 4b10 	vmov	r4, r5, d0
 80056ba:	43aa      	bics	r2, r5
 80056bc:	462b      	mov	r3, r5
 80056be:	4621      	mov	r1, r4
 80056c0:	d110      	bne.n	80056e4 <__ieee754_sqrt+0x34>
 80056c2:	4622      	mov	r2, r4
 80056c4:	4620      	mov	r0, r4
 80056c6:	4629      	mov	r1, r5
 80056c8:	f7fa ff5a 	bl	8000580 <__aeabi_dmul>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4620      	mov	r0, r4
 80056d2:	4629      	mov	r1, r5
 80056d4:	f7fa fd9e 	bl	8000214 <__adddf3>
 80056d8:	4604      	mov	r4, r0
 80056da:	460d      	mov	r5, r1
 80056dc:	ec45 4b10 	vmov	d0, r4, r5
 80056e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e4:	2d00      	cmp	r5, #0
 80056e6:	dc0e      	bgt.n	8005706 <__ieee754_sqrt+0x56>
 80056e8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80056ec:	4322      	orrs	r2, r4
 80056ee:	d0f5      	beq.n	80056dc <__ieee754_sqrt+0x2c>
 80056f0:	b19d      	cbz	r5, 800571a <__ieee754_sqrt+0x6a>
 80056f2:	4622      	mov	r2, r4
 80056f4:	4620      	mov	r0, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	f7fa fd8a 	bl	8000210 <__aeabi_dsub>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	f7fb f868 	bl	80007d4 <__aeabi_ddiv>
 8005704:	e7e8      	b.n	80056d8 <__ieee754_sqrt+0x28>
 8005706:	152a      	asrs	r2, r5, #20
 8005708:	d115      	bne.n	8005736 <__ieee754_sqrt+0x86>
 800570a:	2000      	movs	r0, #0
 800570c:	e009      	b.n	8005722 <__ieee754_sqrt+0x72>
 800570e:	0acb      	lsrs	r3, r1, #11
 8005710:	3a15      	subs	r2, #21
 8005712:	0549      	lsls	r1, r1, #21
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0fa      	beq.n	800570e <__ieee754_sqrt+0x5e>
 8005718:	e7f7      	b.n	800570a <__ieee754_sqrt+0x5a>
 800571a:	462a      	mov	r2, r5
 800571c:	e7fa      	b.n	8005714 <__ieee754_sqrt+0x64>
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	3001      	adds	r0, #1
 8005722:	02dc      	lsls	r4, r3, #11
 8005724:	d5fb      	bpl.n	800571e <__ieee754_sqrt+0x6e>
 8005726:	1e44      	subs	r4, r0, #1
 8005728:	1b12      	subs	r2, r2, r4
 800572a:	f1c0 0420 	rsb	r4, r0, #32
 800572e:	fa21 f404 	lsr.w	r4, r1, r4
 8005732:	4323      	orrs	r3, r4
 8005734:	4081      	lsls	r1, r0
 8005736:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800573a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800573e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005742:	07d2      	lsls	r2, r2, #31
 8005744:	bf5c      	itt	pl
 8005746:	005b      	lslpl	r3, r3, #1
 8005748:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800574c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005750:	bf58      	it	pl
 8005752:	0049      	lslpl	r1, r1, #1
 8005754:	2600      	movs	r6, #0
 8005756:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800575a:	106d      	asrs	r5, r5, #1
 800575c:	0049      	lsls	r1, r1, #1
 800575e:	2016      	movs	r0, #22
 8005760:	4632      	mov	r2, r6
 8005762:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005766:	1917      	adds	r7, r2, r4
 8005768:	429f      	cmp	r7, r3
 800576a:	bfde      	ittt	le
 800576c:	193a      	addle	r2, r7, r4
 800576e:	1bdb      	suble	r3, r3, r7
 8005770:	1936      	addle	r6, r6, r4
 8005772:	0fcf      	lsrs	r7, r1, #31
 8005774:	3801      	subs	r0, #1
 8005776:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800577a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800577e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005782:	d1f0      	bne.n	8005766 <__ieee754_sqrt+0xb6>
 8005784:	4604      	mov	r4, r0
 8005786:	2720      	movs	r7, #32
 8005788:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800578c:	429a      	cmp	r2, r3
 800578e:	eb00 0e0c 	add.w	lr, r0, ip
 8005792:	db02      	blt.n	800579a <__ieee754_sqrt+0xea>
 8005794:	d113      	bne.n	80057be <__ieee754_sqrt+0x10e>
 8005796:	458e      	cmp	lr, r1
 8005798:	d811      	bhi.n	80057be <__ieee754_sqrt+0x10e>
 800579a:	f1be 0f00 	cmp.w	lr, #0
 800579e:	eb0e 000c 	add.w	r0, lr, ip
 80057a2:	da42      	bge.n	800582a <__ieee754_sqrt+0x17a>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	db40      	blt.n	800582a <__ieee754_sqrt+0x17a>
 80057a8:	f102 0801 	add.w	r8, r2, #1
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	458e      	cmp	lr, r1
 80057b0:	bf88      	it	hi
 80057b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80057b6:	eba1 010e 	sub.w	r1, r1, lr
 80057ba:	4464      	add	r4, ip
 80057bc:	4642      	mov	r2, r8
 80057be:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80057c2:	3f01      	subs	r7, #1
 80057c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80057c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80057cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80057d0:	d1dc      	bne.n	800578c <__ieee754_sqrt+0xdc>
 80057d2:	4319      	orrs	r1, r3
 80057d4:	d01b      	beq.n	800580e <__ieee754_sqrt+0x15e>
 80057d6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800585c <__ieee754_sqrt+0x1ac>
 80057da:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005860 <__ieee754_sqrt+0x1b0>
 80057de:	e9da 0100 	ldrd	r0, r1, [sl]
 80057e2:	e9db 2300 	ldrd	r2, r3, [fp]
 80057e6:	f7fa fd13 	bl	8000210 <__aeabi_dsub>
 80057ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4640      	mov	r0, r8
 80057f4:	4649      	mov	r1, r9
 80057f6:	f7fb f93f 	bl	8000a78 <__aeabi_dcmple>
 80057fa:	b140      	cbz	r0, 800580e <__ieee754_sqrt+0x15e>
 80057fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005800:	e9da 0100 	ldrd	r0, r1, [sl]
 8005804:	e9db 2300 	ldrd	r2, r3, [fp]
 8005808:	d111      	bne.n	800582e <__ieee754_sqrt+0x17e>
 800580a:	3601      	adds	r6, #1
 800580c:	463c      	mov	r4, r7
 800580e:	1072      	asrs	r2, r6, #1
 8005810:	0863      	lsrs	r3, r4, #1
 8005812:	07f1      	lsls	r1, r6, #31
 8005814:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005818:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800581c:	bf48      	it	mi
 800581e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005822:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005826:	4618      	mov	r0, r3
 8005828:	e756      	b.n	80056d8 <__ieee754_sqrt+0x28>
 800582a:	4690      	mov	r8, r2
 800582c:	e7be      	b.n	80057ac <__ieee754_sqrt+0xfc>
 800582e:	f7fa fcf1 	bl	8000214 <__adddf3>
 8005832:	e9da 8900 	ldrd	r8, r9, [sl]
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4640      	mov	r0, r8
 800583c:	4649      	mov	r1, r9
 800583e:	f7fb f911 	bl	8000a64 <__aeabi_dcmplt>
 8005842:	b120      	cbz	r0, 800584e <__ieee754_sqrt+0x19e>
 8005844:	1ca0      	adds	r0, r4, #2
 8005846:	bf08      	it	eq
 8005848:	3601      	addeq	r6, #1
 800584a:	3402      	adds	r4, #2
 800584c:	e7df      	b.n	800580e <__ieee754_sqrt+0x15e>
 800584e:	1c63      	adds	r3, r4, #1
 8005850:	f023 0401 	bic.w	r4, r3, #1
 8005854:	e7db      	b.n	800580e <__ieee754_sqrt+0x15e>
 8005856:	bf00      	nop
 8005858:	7ff00000 	.word	0x7ff00000
 800585c:	20000070 	.word	0x20000070
 8005860:	20000068 	.word	0x20000068

08005864 <_init>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	bf00      	nop
 8005868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586a:	bc08      	pop	{r3}
 800586c:	469e      	mov	lr, r3
 800586e:	4770      	bx	lr

08005870 <_fini>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	bf00      	nop
 8005874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005876:	bc08      	pop	{r3}
 8005878:	469e      	mov	lr, r3
 800587a:	4770      	bx	lr
