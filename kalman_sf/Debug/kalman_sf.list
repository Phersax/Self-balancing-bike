
kalman_sf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080058c0  080058c0  000068c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a0  080059a0  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a8  080059a8  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a8  080059a8  000069a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059ac  080059ac  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080059b0  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000078  08005a28  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08005a28  000072ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbad  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e2  00000000  00000000  00014c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00017038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b18  00000000  00000000  00017e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023622  00000000  00000000  000189a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bde  00000000  00000000  0003bfc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3444  00000000  00000000  0004eba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121fe4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d4  00000000  00000000  00122028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001264fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080058a8 	.word	0x080058a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	080058a8 	.word	0x080058a8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <updateOrientation>:
#include "filter.h"

Orientation or;

void updateOrientation(float accX, float accY, float accZ, float gyroX, float gyroY, float gyroZ) 
{
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	ed87 0a05 	vstr	s0, [r7, #20]
 8000eca:	edc7 0a04 	vstr	s1, [r7, #16]
 8000ece:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ed2:	edc7 1a02 	vstr	s3, [r7, #8]
 8000ed6:	ed87 2a01 	vstr	s4, [r7, #4]
 8000eda:	edc7 2a00 	vstr	s5, [r7]

  // compute pitch and roll from acc
  float pitchAcc = atan2(accX, sqrt(accY * accY + accZ * accZ)) * 180 / M_PI;
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff faf6 	bl	80004d0 <__aeabi_f2d>
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	460d      	mov	r5, r1
 8000ee8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ef0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ef4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efc:	ee17 0a90 	vmov	r0, s15
 8000f00:	f7ff fae6 	bl	80004d0 <__aeabi_f2d>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	ec43 2b10 	vmov	d0, r2, r3
 8000f0c:	f004 f95e 	bl	80051cc <sqrt>
 8000f10:	eeb0 7a40 	vmov.f32	s14, s0
 8000f14:	eef0 7a60 	vmov.f32	s15, s1
 8000f18:	eeb0 1a47 	vmov.f32	s2, s14
 8000f1c:	eef0 1a67 	vmov.f32	s3, s15
 8000f20:	ec45 4b10 	vmov	d0, r4, r5
 8000f24:	f004 f950 	bl	80051c8 <atan2>
 8000f28:	ec51 0b10 	vmov	r0, r1, d0
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	4b8f      	ldr	r3, [pc, #572]	@ (8001170 <updateOrientation+0x2b0>)
 8000f32:	f7ff fb25 	bl	8000580 <__aeabi_dmul>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	a384      	add	r3, pc, #528	@ (adr r3, 8001150 <updateOrientation+0x290>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	f7ff fc46 	bl	80007d4 <__aeabi_ddiv>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f7ff fdee 	bl	8000b30 <__aeabi_d2f>
 8000f54:	4603      	mov	r3, r0
 8000f56:	61fb      	str	r3, [r7, #28]
  float rollAcc = atan2(accY, sqrt(accX * accX + accZ * accZ)) * 180 / M_PI;
 8000f58:	6938      	ldr	r0, [r7, #16]
 8000f5a:	f7ff fab9 	bl	80004d0 <__aeabi_f2d>
 8000f5e:	4604      	mov	r4, r0
 8000f60:	460d      	mov	r5, r1
 8000f62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f66:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f76:	ee17 0a90 	vmov	r0, s15
 8000f7a:	f7ff faa9 	bl	80004d0 <__aeabi_f2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	ec43 2b10 	vmov	d0, r2, r3
 8000f86:	f004 f921 	bl	80051cc <sqrt>
 8000f8a:	eeb0 7a40 	vmov.f32	s14, s0
 8000f8e:	eef0 7a60 	vmov.f32	s15, s1
 8000f92:	eeb0 1a47 	vmov.f32	s2, s14
 8000f96:	eef0 1a67 	vmov.f32	s3, s15
 8000f9a:	ec45 4b10 	vmov	d0, r4, r5
 8000f9e:	f004 f913 	bl	80051c8 <atan2>
 8000fa2:	ec51 0b10 	vmov	r0, r1, d0
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b71      	ldr	r3, [pc, #452]	@ (8001170 <updateOrientation+0x2b0>)
 8000fac:	f7ff fae8 	bl	8000580 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	a365      	add	r3, pc, #404	@ (adr r3, 8001150 <updateOrientation+0x290>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fc09 	bl	80007d4 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fdb1 	bl	8000b30 <__aeabi_d2f>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	61bb      	str	r3, [r7, #24]
 
  // include complementary filter
  or.pitch = ALPHA * (or.pitch + gyroX * DT) + (1 - ALPHA) * pitchAcc;
 8000fd2:	4b68      	ldr	r3, [pc, #416]	@ (8001174 <updateOrientation+0x2b4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa7a 	bl	80004d0 <__aeabi_f2d>
 8000fdc:	4604      	mov	r4, r0
 8000fde:	460d      	mov	r5, r1
 8000fe0:	68b8      	ldr	r0, [r7, #8]
 8000fe2:	f7ff fa75 	bl	80004d0 <__aeabi_f2d>
 8000fe6:	a35c      	add	r3, pc, #368	@ (adr r3, 8001158 <updateOrientation+0x298>)
 8000fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fec:	f7ff fac8 	bl	8000580 <__aeabi_dmul>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	f7ff f90c 	bl	8000214 <__adddf3>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	a356      	add	r3, pc, #344	@ (adr r3, 8001160 <updateOrientation+0x2a0>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fab9 	bl	8000580 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4614      	mov	r4, r2
 8001014:	461d      	mov	r5, r3
 8001016:	69f8      	ldr	r0, [r7, #28]
 8001018:	f7ff fa5a 	bl	80004d0 <__aeabi_f2d>
 800101c:	a352      	add	r3, pc, #328	@ (adr r3, 8001168 <updateOrientation+0x2a8>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff faad 	bl	8000580 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff f8f1 	bl	8000214 <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fd79 	bl	8000b30 <__aeabi_d2f>
 800103e:	4603      	mov	r3, r0
 8001040:	4a4c      	ldr	r2, [pc, #304]	@ (8001174 <updateOrientation+0x2b4>)
 8001042:	6013      	str	r3, [r2, #0]
  or.roll = ALPHA * (or.roll + gyroY * DT) + (1 - ALPHA) * rollAcc;
 8001044:	4b4b      	ldr	r3, [pc, #300]	@ (8001174 <updateOrientation+0x2b4>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa41 	bl	80004d0 <__aeabi_f2d>
 800104e:	4604      	mov	r4, r0
 8001050:	460d      	mov	r5, r1
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fa3c 	bl	80004d0 <__aeabi_f2d>
 8001058:	a33f      	add	r3, pc, #252	@ (adr r3, 8001158 <updateOrientation+0x298>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff fa8f 	bl	8000580 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4620      	mov	r0, r4
 8001068:	4629      	mov	r1, r5
 800106a:	f7ff f8d3 	bl	8000214 <__adddf3>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	a33a      	add	r3, pc, #232	@ (adr r3, 8001160 <updateOrientation+0x2a0>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fa80 	bl	8000580 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4614      	mov	r4, r2
 8001086:	461d      	mov	r5, r3
 8001088:	69b8      	ldr	r0, [r7, #24]
 800108a:	f7ff fa21 	bl	80004d0 <__aeabi_f2d>
 800108e:	a336      	add	r3, pc, #216	@ (adr r3, 8001168 <updateOrientation+0x2a8>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fa74 	bl	8000580 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4620      	mov	r0, r4
 800109e:	4629      	mov	r1, r5
 80010a0:	f7ff f8b8 	bl	8000214 <__adddf3>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd40 	bl	8000b30 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <updateOrientation+0x2b4>)
 80010b4:	6053      	str	r3, [r2, #4]

  or.yaw += gyroZ * DT;
 80010b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <updateOrientation+0x2b4>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa08 	bl	80004d0 <__aeabi_f2d>
 80010c0:	4604      	mov	r4, r0
 80010c2:	460d      	mov	r5, r1
 80010c4:	6838      	ldr	r0, [r7, #0]
 80010c6:	f7ff fa03 	bl	80004d0 <__aeabi_f2d>
 80010ca:	a323      	add	r3, pc, #140	@ (adr r3, 8001158 <updateOrientation+0x298>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fa56 	bl	8000580 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4620      	mov	r0, r4
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff f89a 	bl	8000214 <__adddf3>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fd22 	bl	8000b30 <__aeabi_d2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a21      	ldr	r2, [pc, #132]	@ (8001174 <updateOrientation+0x2b4>)
 80010f0:	6093      	str	r3, [r2, #8]
  if (or.yaw < 0) or.yaw += 360;
 80010f2:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <updateOrientation+0x2b4>)
 80010f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d50a      	bpl.n	8001118 <updateOrientation+0x258>
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <updateOrientation+0x2b4>)
 8001104:	edd3 7a02 	vldr	s15, [r3, #8]
 8001108:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001178 <updateOrientation+0x2b8>
 800110c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001110:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <updateOrientation+0x2b4>)
 8001112:	edc3 7a02 	vstr	s15, [r3, #8]
  else if (or.yaw > 359) or.yaw -= 360;

}
 8001116:	e014      	b.n	8001142 <updateOrientation+0x282>
  else if (or.yaw > 359) or.yaw -= 360;
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <updateOrientation+0x2b4>)
 800111a:	edd3 7a02 	vldr	s15, [r3, #8]
 800111e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800117c <updateOrientation+0x2bc>
 8001122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	dc00      	bgt.n	800112e <updateOrientation+0x26e>
}
 800112c:	e009      	b.n	8001142 <updateOrientation+0x282>
  else if (or.yaw > 359) or.yaw -= 360;
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <updateOrientation+0x2b4>)
 8001130:	edd3 7a02 	vldr	s15, [r3, #8]
 8001134:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001178 <updateOrientation+0x2b8>
 8001138:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <updateOrientation+0x2b4>)
 800113e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bdb0      	pop	{r4, r5, r7, pc}
 800114a:	bf00      	nop
 800114c:	f3af 8000 	nop.w
 8001150:	54442d18 	.word	0x54442d18
 8001154:	400921fb 	.word	0x400921fb
 8001158:	47ae147b 	.word	0x47ae147b
 800115c:	3f747ae1 	.word	0x3f747ae1
 8001160:	f5c28f5c 	.word	0xf5c28f5c
 8001164:	3fef5c28 	.word	0x3fef5c28
 8001168:	47ae1480 	.word	0x47ae1480
 800116c:	3f947ae1 	.word	0x3f947ae1
 8001170:	40668000 	.word	0x40668000
 8001174:	20000094 	.word	0x20000094
 8001178:	43b40000 	.word	0x43b40000
 800117c:	43b38000 	.word	0x43b38000

08001180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <MX_GPIO_Init+0x68>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a16      	ldr	r2, [pc, #88]	@ (80011e8 <MX_GPIO_Init+0x68>)
 8001190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MX_GPIO_Init+0x68>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <MX_GPIO_Init+0x68>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <MX_GPIO_Init+0x68>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <MX_GPIO_Init+0x68>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_GPIO_Init+0x68>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <MX_GPIO_Init+0x68>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_GPIO_Init+0x68>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <MX_I2C1_Init+0x50>)
 80011f2:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <MX_I2C1_Init+0x54>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_I2C1_Init+0x50>)
 80011f8:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <MX_I2C1_Init+0x58>)
 80011fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_I2C1_Init+0x50>)
 800120a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800120e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	@ (800123c <MX_I2C1_Init+0x50>)
 800122a:	f001 f80b 	bl	8002244 <HAL_I2C_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001234:	f000 f94a 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200000a0 	.word	0x200000a0
 8001240:	40005400 	.word	0x40005400
 8001244:	000186a0 	.word	0x000186a0

08001248 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a19      	ldr	r2, [pc, #100]	@ (80012cc <HAL_I2C_MspInit+0x84>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d12c      	bne.n	80012c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <HAL_I2C_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a17      	ldr	r2, [pc, #92]	@ (80012d0 <HAL_I2C_MspInit+0x88>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <HAL_I2C_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001286:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128c:	2312      	movs	r3, #18
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001290:	2301      	movs	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001298:	2304      	movs	r3, #4
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <HAL_I2C_MspInit+0x8c>)
 80012a4:	f000 fe3a 	bl	8001f1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <HAL_I2C_MspInit+0x88>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	4a07      	ldr	r2, [pc, #28]	@ (80012d0 <HAL_I2C_MspInit+0x88>)
 80012b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_I2C_MspInit+0x88>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	@ 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40005400 	.word	0x40005400
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020400 	.word	0x40020400

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012dc:	f000 fc9a 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e0:	f000 f816 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e4:	f7ff ff4c 	bl	8001180 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012e8:	f7ff ff80 	bl	80011ec <MX_I2C1_Init>
  MX_TIM3_Init();
 80012ec:	f000 fbf2 	bl	8001ad4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <main+0x30>)
 80012f2:	f002 fe97 	bl	8004024 <HAL_TIM_Base_Start_IT>
  //mpu6050_init();
  status = mpu6050_init();
 80012f6:	f000 f8ef 	bl	80014d8 <mpu6050_init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b03      	ldr	r3, [pc, #12]	@ (800130c <main+0x34>)
 8001300:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001302:	bf00      	nop
 8001304:	e7fd      	b.n	8001302 <main+0x2a>
 8001306:	bf00      	nop
 8001308:	20000114 	.word	0x20000114
 800130c:	200000f4 	.word	0x200000f4

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b094      	sub	sp, #80	@ 0x50
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2234      	movs	r2, #52	@ 0x34
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fc9e 	bl	8004c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <SystemClock_Config+0xd0>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133c:	4a28      	ldr	r2, [pc, #160]	@ (80013e0 <SystemClock_Config+0xd0>)
 800133e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001342:	6413      	str	r3, [r2, #64]	@ 0x40
 8001344:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <SystemClock_Config+0xd0>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <SystemClock_Config+0xd4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800135c:	4a21      	ldr	r2, [pc, #132]	@ (80013e4 <SystemClock_Config+0xd4>)
 800135e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <SystemClock_Config+0xd4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001370:	2302      	movs	r3, #2
 8001372:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001374:	2301      	movs	r3, #1
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001378:	2310      	movs	r3, #16
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	2302      	movs	r3, #2
 800137e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001380:	2300      	movs	r3, #0
 8001382:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001384:	2308      	movs	r3, #8
 8001386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001388:	2354      	movs	r3, #84	@ 0x54
 800138a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800138c:	2302      	movs	r3, #2
 800138e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001390:	2302      	movs	r3, #2
 8001392:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fb53 	bl	8003a48 <HAL_RCC_OscConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013a8:	f000 f890 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ac:	230f      	movs	r3, #15
 80013ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b0:	2302      	movs	r3, #2
 80013b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	2102      	movs	r1, #2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 f88d 	bl	80034e8 <HAL_RCC_ClockConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80013d4:	f000 f87a 	bl	80014cc <Error_Handler>
  }
}
 80013d8:	bf00      	nop
 80013da:	3750      	adds	r7, #80	@ 0x50
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40007000 	.word	0x40007000

080013e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a2e      	ldr	r2, [pc, #184]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d155      	bne.n	80014a6 <HAL_TIM_PeriodElapsedCallback+0xbe>
		gx = mpu6050_gyrox();
 80013fa:	f000 f989 	bl	8001710 <mpu6050_gyrox>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a2c      	ldr	r2, [pc, #176]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001402:	6013      	str	r3, [r2, #0]
		gy = mpu6050_gyroy();
 8001404:	f000 f9c8 	bl	8001798 <mpu6050_gyroy>
 8001408:	4603      	mov	r3, r0
 800140a:	4a2b      	ldr	r2, [pc, #172]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800140c:	6013      	str	r3, [r2, #0]
		gz = mpu6050_gyroz();
 800140e:	f000 fa07 	bl	8001820 <mpu6050_gyroz>
 8001412:	4603      	mov	r3, r0
 8001414:	4a29      	ldr	r2, [pc, #164]	@ (80014bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001416:	6013      	str	r3, [r2, #0]
		ax = mpu6050_accx();
 8001418:	f000 f8bc 	bl	8001594 <mpu6050_accx>
 800141c:	4603      	mov	r3, r0
 800141e:	4a28      	ldr	r2, [pc, #160]	@ (80014c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001420:	6013      	str	r3, [r2, #0]
		ay = mpu6050_accy();
 8001422:	f000 f8f7 	bl	8001614 <mpu6050_accy>
 8001426:	4603      	mov	r3, r0
 8001428:	4a26      	ldr	r2, [pc, #152]	@ (80014c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800142a:	6013      	str	r3, [r2, #0]
		az = mpu6050_accz();
 800142c:	f000 f932 	bl	8001694 <mpu6050_accz>
 8001430:	4603      	mov	r3, r0
 8001432:	4a25      	ldr	r2, [pc, #148]	@ (80014c8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001434:	6013      	str	r3, [r2, #0]

		updateOrientation(gx.data, gy.data, gz.data, ax.data, ay.data, az.data);
 8001436:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001444:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144a:	ee07 3a10 	vmov	s14, r3
 800144e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	ee06 3a90 	vmov	s13, r3
 800145c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001460:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001466:	ee06 3a10 	vmov	s12, r3
 800146a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001474:	ee05 3a90 	vmov	s11, r3
 8001478:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	ee05 3a10 	vmov	s10, r3
 8001486:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800148a:	eef0 2a45 	vmov.f32	s5, s10
 800148e:	eeb0 2a65 	vmov.f32	s4, s11
 8001492:	eef0 1a46 	vmov.f32	s3, s12
 8001496:	eeb0 1a66 	vmov.f32	s2, s13
 800149a:	eef0 0a47 	vmov.f32	s1, s14
 800149e:	eeb0 0a67 	vmov.f32	s0, s15
 80014a2:	f7ff fd0d 	bl	8000ec0 <updateOrientation>
	}
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40000400 	.word	0x40000400
 80014b4:	20000104 	.word	0x20000104
 80014b8:	20000108 	.word	0x20000108
 80014bc:	2000010c 	.word	0x2000010c
 80014c0:	200000f8 	.word	0x200000f8
 80014c4:	200000fc 	.word	0x200000fc
 80014c8:	20000100 	.word	0x20000100

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <Error_Handler+0x8>

080014d8 <mpu6050_init>:
    gy_bias = gy_sum / num_samples;
    gz_bias = gz_sum / num_samples;
}
*/

HAL_StatusTypeDef mpu6050_init(){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDR, 1, 100);
 80014de:	2364      	movs	r3, #100	@ 0x64
 80014e0:	2201      	movs	r2, #1
 80014e2:	21d0      	movs	r1, #208	@ 0xd0
 80014e4:	4827      	ldr	r0, [pc, #156]	@ (8001584 <mpu6050_init+0xac>)
 80014e6:	f001 fb1d 	bl	8002b24 <HAL_I2C_IsDeviceReady>
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK) {
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d13f      	bne.n	8001574 <mpu6050_init+0x9c>
			printf("mpu6050 is ready \n");
 80014f4:	4824      	ldr	r0, [pc, #144]	@ (8001588 <mpu6050_init+0xb0>)
 80014f6:	f003 fad3 	bl	8004aa0 <puts>
			printf("mpu6050 configuration... \n");
 80014fa:	4824      	ldr	r0, [pc, #144]	@ (800158c <mpu6050_init+0xb4>)
 80014fc:	f003 fad0 	bl	8004aa0 <puts>

			uint8_t data;

			/* power management register 0X6B must be all 0s to wake the sensor up */
			data = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 100);
 8001504:	2364      	movs	r3, #100	@ 0x64
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	2301      	movs	r3, #1
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	1dbb      	adds	r3, r7, #6
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	226b      	movs	r2, #107	@ 0x6b
 8001514:	21d0      	movs	r1, #208	@ 0xd0
 8001516:	481b      	ldr	r0, [pc, #108]	@ (8001584 <mpu6050_init+0xac>)
 8001518:	f000 ffd8 	bl	80024cc <HAL_I2C_Mem_Write>

			/* Set DATA RATE of 1KHz by writing SMPLRT_DIV register */
			data = 0x07;
 800151c:	2307      	movs	r3, #7
 800151e:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 100);
 8001520:	2364      	movs	r3, #100	@ 0x64
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2301      	movs	r3, #1
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	1dbb      	adds	r3, r7, #6
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2301      	movs	r3, #1
 800152e:	2219      	movs	r2, #25
 8001530:	21d0      	movs	r1, #208	@ 0xd0
 8001532:	4814      	ldr	r0, [pc, #80]	@ (8001584 <mpu6050_init+0xac>)
 8001534:	f000 ffca 	bl	80024cc <HAL_I2C_Mem_Write>

			/*  Set accelerometer configuration in ACCEL_CONFIG Register */
			/* XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g */
			data = FS_ACC_2G;
 8001538:	2300      	movs	r3, #0
 800153a:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 100);
 800153c:	2364      	movs	r3, #100	@ 0x64
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	2301      	movs	r3, #1
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	1dbb      	adds	r3, r7, #6
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	221c      	movs	r2, #28
 800154c:	21d0      	movs	r1, #208	@ 0xd0
 800154e:	480d      	ldr	r0, [pc, #52]	@ (8001584 <mpu6050_init+0xac>)
 8001550:	f000 ffbc 	bl	80024cc <HAL_I2C_Mem_Write>

			/* Set Gyroscope configuration in GYRO_CONFIG Register */
			/* XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 deg/s */
			data = FS_GYRO_250;
 8001554:	2300      	movs	r3, #0
 8001556:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, IMU_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 100);
 8001558:	2364      	movs	r3, #100	@ 0x64
 800155a:	9302      	str	r3, [sp, #8]
 800155c:	2301      	movs	r3, #1
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	1dbb      	adds	r3, r7, #6
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	221b      	movs	r2, #27
 8001568:	21d0      	movs	r1, #208	@ 0xd0
 800156a:	4806      	ldr	r0, [pc, #24]	@ (8001584 <mpu6050_init+0xac>)
 800156c:	f000 ffae 	bl	80024cc <HAL_I2C_Mem_Write>
			return HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	e003      	b.n	800157c <mpu6050_init+0xa4>
		} else {
			printf("mpu6050 error, check connection cables \n");
 8001574:	4806      	ldr	r0, [pc, #24]	@ (8001590 <mpu6050_init+0xb8>)
 8001576:	f003 fa93 	bl	8004aa0 <puts>
			return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
		}
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200000a0 	.word	0x200000a0
 8001588:	080058c0 	.word	0x080058c0
 800158c:	080058d4 	.word	0x080058d4
 8001590:	080058f0 	.word	0x080058f0

08001594 <mpu6050_accx>:

/* Gyroscope reading MPU6050 */
result mpu6050_accx(){
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	@ 0x30
 8001598:	af04      	add	r7, sp, #16
	uint8_t buffer[14];
	result res;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 800159a:	23c8      	movs	r3, #200	@ 0xc8
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	230e      	movs	r3, #14
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2301      	movs	r3, #1
 80015aa:	223b      	movs	r2, #59	@ 0x3b
 80015ac:	21d0      	movs	r1, #208	@ 0xd0
 80015ae:	4817      	ldr	r0, [pc, #92]	@ (800160c <mpu6050_accx+0x78>)
 80015b0:	f001 f886 	bl	80026c0 <HAL_I2C_Mem_Read>
 80015b4:	4603      	mov	r3, r0
 80015b6:	77fb      	strb	r3, [r7, #31]
	short imu_data = buffer[0] << 8  | buffer[1];
 80015b8:	7a3b      	ldrb	r3, [r7, #8]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	7a7b      	ldrb	r3, [r7, #9]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	83bb      	strh	r3, [r7, #28]
	res.status = status;
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	71bb      	strb	r3, [r7, #6]
	res.data = imu_data / ACC_SCALE;
 80015ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff6c 	bl	80004ac <__aeabi_i2d>
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <mpu6050_accx+0x7c>)
 80015da:	f7ff f8fb 	bl	80007d4 <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff fa7b 	bl	8000ae0 <__aeabi_d2iz>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	80bb      	strh	r3, [r7, #4]
	return res;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	2300      	movs	r3, #0
 80015f6:	8b3a      	ldrh	r2, [r7, #24]
 80015f8:	f362 030f 	bfi	r3, r2, #0, #16
 80015fc:	8b7a      	ldrh	r2, [r7, #26]
 80015fe:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001602:	4618      	mov	r0, r3
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200000a0 	.word	0x200000a0
 8001610:	40d00000 	.word	0x40d00000

08001614 <mpu6050_accy>:

result mpu6050_accy(){
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	@ 0x30
 8001618:	af04      	add	r7, sp, #16
	uint8_t buffer[14];
	result res;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 800161a:	23c8      	movs	r3, #200	@ 0xc8
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	230e      	movs	r3, #14
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2301      	movs	r3, #1
 800162a:	223b      	movs	r2, #59	@ 0x3b
 800162c:	21d0      	movs	r1, #208	@ 0xd0
 800162e:	4817      	ldr	r0, [pc, #92]	@ (800168c <mpu6050_accy+0x78>)
 8001630:	f001 f846 	bl	80026c0 <HAL_I2C_Mem_Read>
 8001634:	4603      	mov	r3, r0
 8001636:	77fb      	strb	r3, [r7, #31]
		short imu_data = buffer[2] << 8  | buffer[3];
 8001638:	7abb      	ldrb	r3, [r7, #10]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	7afb      	ldrb	r3, [r7, #11]
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	83bb      	strh	r3, [r7, #28]
		res.status = status;
 8001646:	7ffb      	ldrb	r3, [r7, #31]
 8001648:	71bb      	strb	r3, [r7, #6]
		res.data = imu_data / ACC_SCALE;
 800164a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff2c 	bl	80004ac <__aeabi_i2d>
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <mpu6050_accy+0x7c>)
 800165a:	f7ff f8bb 	bl	80007d4 <__aeabi_ddiv>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fa3b 	bl	8000ae0 <__aeabi_d2iz>
 800166a:	4603      	mov	r3, r0
 800166c:	b21b      	sxth	r3, r3
 800166e:	80bb      	strh	r3, [r7, #4]
		return res;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	2300      	movs	r3, #0
 8001676:	8b3a      	ldrh	r2, [r7, #24]
 8001678:	f362 030f 	bfi	r3, r2, #0, #16
 800167c:	8b7a      	ldrh	r2, [r7, #26]
 800167e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001682:	4618      	mov	r0, r3
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000a0 	.word	0x200000a0
 8001690:	40d00000 	.word	0x40d00000

08001694 <mpu6050_accz>:

result mpu6050_accz(){
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	@ 0x30
 8001698:	af04      	add	r7, sp, #16
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 800169a:	23c8      	movs	r3, #200	@ 0xc8
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	230e      	movs	r3, #14
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2301      	movs	r3, #1
 80016a8:	223b      	movs	r2, #59	@ 0x3b
 80016aa:	21d0      	movs	r1, #208	@ 0xd0
 80016ac:	4816      	ldr	r0, [pc, #88]	@ (8001708 <mpu6050_accz+0x74>)
 80016ae:	f001 f807 	bl	80026c0 <HAL_I2C_Mem_Read>
 80016b2:	4603      	mov	r3, r0
 80016b4:	77fb      	strb	r3, [r7, #31]
		short imu_data = buffer[4] << 8  | buffer[5];
 80016b6:	7a3b      	ldrb	r3, [r7, #8]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	7a7b      	ldrb	r3, [r7, #9]
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	83bb      	strh	r3, [r7, #28]
		res.status = status;
 80016c4:	7ffb      	ldrb	r3, [r7, #31]
 80016c6:	75bb      	strb	r3, [r7, #22]
		res.data = imu_data / ACC_SCALE;
 80016c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe feed 	bl	80004ac <__aeabi_i2d>
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <mpu6050_accz+0x78>)
 80016d8:	f7ff f87c 	bl	80007d4 <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff f9fc 	bl	8000ae0 <__aeabi_d2iz>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	82bb      	strh	r3, [r7, #20]
		return res;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	61bb      	str	r3, [r7, #24]
 80016f2:	2300      	movs	r3, #0
 80016f4:	8b3a      	ldrh	r2, [r7, #24]
 80016f6:	f362 030f 	bfi	r3, r2, #0, #16
 80016fa:	8b7a      	ldrh	r2, [r7, #26]
 80016fc:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001700:	4618      	mov	r0, r3
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200000a0 	.word	0x200000a0
 800170c:	40d00000 	.word	0x40d00000

08001710 <mpu6050_gyrox>:

/* Accelerometer reading MPU6050 */
result mpu6050_gyrox(){
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	@ 0x30
 8001714:	af04      	add	r7, sp, #16
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 8001716:	23c8      	movs	r3, #200	@ 0xc8
 8001718:	9302      	str	r3, [sp, #8]
 800171a:	230e      	movs	r3, #14
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2301      	movs	r3, #1
 8001724:	223b      	movs	r2, #59	@ 0x3b
 8001726:	21d0      	movs	r1, #208	@ 0xd0
 8001728:	4819      	ldr	r0, [pc, #100]	@ (8001790 <mpu6050_gyrox+0x80>)
 800172a:	f000 ffc9 	bl	80026c0 <HAL_I2C_Mem_Read>
 800172e:	4603      	mov	r3, r0
 8001730:	77fb      	strb	r3, [r7, #31]
	short imu_data = buffer[8] << 8  | buffer[9];
 8001732:	7b3b      	ldrb	r3, [r7, #12]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b21a      	sxth	r2, r3
 8001738:	7b7b      	ldrb	r3, [r7, #13]
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	83bb      	strh	r3, [r7, #28]
	res.status = status;
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	75bb      	strb	r3, [r7, #22]
	res.data = imu_data / GYRO_SCALE;
 8001744:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe feaf 	bl	80004ac <__aeabi_i2d>
 800174e:	a30e      	add	r3, pc, #56	@ (adr r3, 8001788 <mpu6050_gyrox+0x78>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7ff f83e 	bl	80007d4 <__aeabi_ddiv>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff f9be 	bl	8000ae0 <__aeabi_d2iz>
 8001764:	4603      	mov	r3, r0
 8001766:	b21b      	sxth	r3, r3
 8001768:	82bb      	strh	r3, [r7, #20]
	return res;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	61bb      	str	r3, [r7, #24]
 800176e:	2300      	movs	r3, #0
 8001770:	8b3a      	ldrh	r2, [r7, #24]
 8001772:	f362 030f 	bfi	r3, r2, #0, #16
 8001776:	8b7a      	ldrh	r2, [r7, #26]
 8001778:	f362 431f 	bfi	r3, r2, #16, #16
}
 800177c:	4618      	mov	r0, r3
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	f3af 8000 	nop.w
 8001788:	00000000 	.word	0x00000000
 800178c:	40606000 	.word	0x40606000
 8001790:	200000a0 	.word	0x200000a0
 8001794:	00000000 	.word	0x00000000

08001798 <mpu6050_gyroy>:

result mpu6050_gyroy(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	@ 0x30
 800179c:	af04      	add	r7, sp, #16
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 800179e:	23c8      	movs	r3, #200	@ 0xc8
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	230e      	movs	r3, #14
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2301      	movs	r3, #1
 80017ac:	223b      	movs	r2, #59	@ 0x3b
 80017ae:	21d0      	movs	r1, #208	@ 0xd0
 80017b0:	4819      	ldr	r0, [pc, #100]	@ (8001818 <mpu6050_gyroy+0x80>)
 80017b2:	f000 ff85 	bl	80026c0 <HAL_I2C_Mem_Read>
 80017b6:	4603      	mov	r3, r0
 80017b8:	77fb      	strb	r3, [r7, #31]
	short imu_data = buffer[10] << 8  | buffer[11];
 80017ba:	7bbb      	ldrb	r3, [r7, #14]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	b21a      	sxth	r2, r3
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	83bb      	strh	r3, [r7, #28]
	res.status = status;
 80017c8:	7ffb      	ldrb	r3, [r7, #31]
 80017ca:	75bb      	strb	r3, [r7, #22]
    res.data = imu_data / GYRO_SCALE;
 80017cc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe6b 	bl	80004ac <__aeabi_i2d>
 80017d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001810 <mpu6050_gyroy+0x78>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7fe fffa 	bl	80007d4 <__aeabi_ddiv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff f97a 	bl	8000ae0 <__aeabi_d2iz>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	82bb      	strh	r3, [r7, #20]
	return res;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	61bb      	str	r3, [r7, #24]
 80017f6:	2300      	movs	r3, #0
 80017f8:	8b3a      	ldrh	r2, [r7, #24]
 80017fa:	f362 030f 	bfi	r3, r2, #0, #16
 80017fe:	8b7a      	ldrh	r2, [r7, #26]
 8001800:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001804:	4618      	mov	r0, r3
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	f3af 8000 	nop.w
 8001810:	00000000 	.word	0x00000000
 8001814:	40606000 	.word	0x40606000
 8001818:	200000a0 	.word	0x200000a0
 800181c:	00000000 	.word	0x00000000

08001820 <mpu6050_gyroz>:

result mpu6050_gyroz(){
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	@ 0x30
 8001824:	af04      	add	r7, sp, #16
	result res;
	uint8_t buffer[14];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, IMU_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 8001826:	23c8      	movs	r3, #200	@ 0xc8
 8001828:	9302      	str	r3, [sp, #8]
 800182a:	230e      	movs	r3, #14
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	223b      	movs	r2, #59	@ 0x3b
 8001836:	21d0      	movs	r1, #208	@ 0xd0
 8001838:	4819      	ldr	r0, [pc, #100]	@ (80018a0 <mpu6050_gyroz+0x80>)
 800183a:	f000 ff41 	bl	80026c0 <HAL_I2C_Mem_Read>
 800183e:	4603      	mov	r3, r0
 8001840:	77fb      	strb	r3, [r7, #31]
	short imu_data = buffer[12] << 8  | buffer[13];
 8001842:	7c3b      	ldrb	r3, [r7, #16]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	b21a      	sxth	r2, r3
 8001848:	7c7b      	ldrb	r3, [r7, #17]
 800184a:	b21b      	sxth	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	83bb      	strh	r3, [r7, #28]
	res.status = status;
 8001850:	7ffb      	ldrb	r3, [r7, #31]
 8001852:	75bb      	strb	r3, [r7, #22]
	res.data = imu_data / GYRO_SCALE;
 8001854:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe27 	bl	80004ac <__aeabi_i2d>
 800185e:	a30e      	add	r3, pc, #56	@ (adr r3, 8001898 <mpu6050_gyroz+0x78>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe ffb6 	bl	80007d4 <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f936 	bl	8000ae0 <__aeabi_d2iz>
 8001874:	4603      	mov	r3, r0
 8001876:	b21b      	sxth	r3, r3
 8001878:	82bb      	strh	r3, [r7, #20]
	return res;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	2300      	movs	r3, #0
 8001880:	8b3a      	ldrh	r2, [r7, #24]
 8001882:	f362 030f 	bfi	r3, r2, #0, #16
 8001886:	8b7a      	ldrh	r2, [r7, #26]
 8001888:	f362 431f 	bfi	r3, r2, #16, #16
}
 800188c:	4618      	mov	r0, r3
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	f3af 8000 	nop.w
 8001898:	00000000 	.word	0x00000000
 800189c:	40606000 	.word	0x40606000
 80018a0:	200000a0 	.word	0x200000a0

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a08      	ldr	r2, [pc, #32]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <NMI_Handler+0x4>

080018fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <HardFault_Handler+0x4>

08001904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <MemManage_Handler+0x4>

0800190c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <UsageFault_Handler+0x4>

0800191c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194a:	f000 f9b5 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <TIM3_IRQHandler+0x10>)
 800195a:	f002 fbd3 	bl	8004104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000114 	.word	0x20000114

08001968 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e00a      	b.n	8001990 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800197a:	f3af 8000 	nop.w
 800197e:	4601      	mov	r1, r0
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	b2ca      	uxtb	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf0      	blt.n	800197a <_read+0x12>
  }

  return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e009      	b.n	80019c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dbf1      	blt.n	80019b4 <_write+0x12>
  }
  return len;
 80019d0:	687b      	ldr	r3, [r7, #4]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_close>:

int _close(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a02:	605a      	str	r2, [r3, #4]
  return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <_isatty>:

int _isatty(int file)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f003 f942 	bl	8004cfc <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20020000 	.word	0x20020000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	20000110 	.word	0x20000110
 8001aac:	200002b0 	.word	0x200002b0

08001ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <SystemInit+0x20>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aba:	4a05      	ldr	r2, [pc, #20]	@ (8001ad0 <SystemInit+0x20>)
 8001abc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <MX_TIM3_Init+0x94>)
 8001af2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b6c <MX_TIM3_Init+0x98>)
 8001af4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <MX_TIM3_Init+0x94>)
 8001af8:	2229      	movs	r2, #41	@ 0x29
 8001afa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <MX_TIM3_Init+0x94>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001b02:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <MX_TIM3_Init+0x94>)
 8001b04:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <MX_TIM3_Init+0x94>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b10:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <MX_TIM3_Init+0x94>)
 8001b12:	2280      	movs	r2, #128	@ 0x80
 8001b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b16:	4814      	ldr	r0, [pc, #80]	@ (8001b68 <MX_TIM3_Init+0x94>)
 8001b18:	f002 fa34 	bl	8003f84 <HAL_TIM_Base_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b22:	f7ff fcd3 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4619      	mov	r1, r3
 8001b32:	480d      	ldr	r0, [pc, #52]	@ (8001b68 <MX_TIM3_Init+0x94>)
 8001b34:	f002 fbd6 	bl	80042e4 <HAL_TIM_ConfigClockSource>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b3e:	f7ff fcc5 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4806      	ldr	r0, [pc, #24]	@ (8001b68 <MX_TIM3_Init+0x94>)
 8001b50:	f002 fdfe 	bl	8004750 <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001b5a:	f7ff fcb7 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000114 	.word	0x20000114
 8001b6c:	40000400 	.word	0x40000400

08001b70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x48>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d115      	bne.n	8001bae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <HAL_TIM_Base_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <HAL_TIM_Base_MspInit+0x4c>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_TIM_Base_MspInit+0x4c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	201d      	movs	r0, #29
 8001ba4:	f000 f983 	bl	8001eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ba8:	201d      	movs	r0, #29
 8001baa:	f000 f99c 	bl	8001ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bc4:	f7ff ff74 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc8:	480c      	ldr	r0, [pc, #48]	@ (8001bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bca:	490d      	ldr	r1, [pc, #52]	@ (8001c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be0:	4c0a      	ldr	r4, [pc, #40]	@ (8001c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f003 f88b 	bl	8004d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf2:	f7ff fb71 	bl	80012d8 <main>
  bx  lr    
 8001bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001c04:	080059b0 	.word	0x080059b0
  ldr r2, =_sbss
 8001c08:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001c0c:	200002ac 	.word	0x200002ac

08001c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c18:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <HAL_Init+0x40>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <HAL_Init+0x40>)
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a07      	ldr	r2, [pc, #28]	@ (8001c54 <HAL_Init+0x40>)
 8001c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f000 f92b 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c42:	200f      	movs	r0, #15
 8001c44:	f000 f808 	bl	8001c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c48:	f7ff fe2c 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <HAL_InitTick+0x54>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_InitTick+0x58>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f943 	bl	8001f02 <HAL_SYSTICK_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00e      	b.n	8001ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d80a      	bhi.n	8001ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f000 f90b 	bl	8001eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c98:	4a06      	ldr	r2, [pc, #24]	@ (8001cb4 <HAL_InitTick+0x5c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_IncTick+0x20>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <HAL_IncTick+0x24>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <HAL_IncTick+0x24>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	2000015c 	.word	0x2000015c

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	2000015c 	.word	0x2000015c

08001cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	db0b      	blt.n	8001d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4907      	ldr	r1, [pc, #28]	@ (8001d94 <__NVIC_EnableIRQ+0x38>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	@ (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	@ (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	@ 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	@ 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e64:	d301      	bcc.n	8001e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00f      	b.n	8001e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <SysTick_Config+0x40>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e72:	210f      	movs	r1, #15
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f7ff ff8e 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <SysTick_Config+0x40>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <SysTick_Config+0x40>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff29 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec0:	f7ff ff3e 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6978      	ldr	r0, [r7, #20]
 8001ecc:	f7ff ff8e 	bl	8001dec <NVIC_EncodePriority>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff5d 	bl	8001d98 <__NVIC_SetPriority>
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff31 	bl	8001d5c <__NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ffa2 	bl	8001e54 <SysTick_Config>
 8001f10:	4603      	mov	r3, r0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e165      	b.n	8002204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f040 8154 	bne.w	80021fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d005      	beq.n	8001f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d130      	bne.n	8001fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 0201 	and.w	r2, r3, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d017      	beq.n	800200c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d123      	bne.n	8002060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0203 	and.w	r2, r3, #3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80ae 	beq.w	80021fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b5d      	ldr	r3, [pc, #372]	@ (800221c <HAL_GPIO_Init+0x300>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020aa:	4a5c      	ldr	r2, [pc, #368]	@ (800221c <HAL_GPIO_Init+0x300>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b2:	4b5a      	ldr	r3, [pc, #360]	@ (800221c <HAL_GPIO_Init+0x300>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020be:	4a58      	ldr	r2, [pc, #352]	@ (8002220 <HAL_GPIO_Init+0x304>)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002224 <HAL_GPIO_Init+0x308>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d025      	beq.n	8002136 <HAL_GPIO_Init+0x21a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002228 <HAL_GPIO_Init+0x30c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01f      	beq.n	8002132 <HAL_GPIO_Init+0x216>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4d      	ldr	r2, [pc, #308]	@ (800222c <HAL_GPIO_Init+0x310>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <HAL_GPIO_Init+0x212>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002230 <HAL_GPIO_Init+0x314>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x20e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4b      	ldr	r2, [pc, #300]	@ (8002234 <HAL_GPIO_Init+0x318>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x20a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4a      	ldr	r2, [pc, #296]	@ (8002238 <HAL_GPIO_Init+0x31c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x206>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a49      	ldr	r2, [pc, #292]	@ (800223c <HAL_GPIO_Init+0x320>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x202>
 800211a:	2306      	movs	r3, #6
 800211c:	e00c      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 800211e:	2307      	movs	r3, #7
 8002120:	e00a      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 8002122:	2305      	movs	r3, #5
 8002124:	e008      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 8002126:	2304      	movs	r3, #4
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 800212a:	2303      	movs	r3, #3
 800212c:	e004      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 800212e:	2302      	movs	r3, #2
 8002130:	e002      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 8002136:	2300      	movs	r3, #0
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	f002 0203 	and.w	r2, r2, #3
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	4093      	lsls	r3, r2
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002148:	4935      	ldr	r1, [pc, #212]	@ (8002220 <HAL_GPIO_Init+0x304>)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002156:	4b3a      	ldr	r3, [pc, #232]	@ (8002240 <HAL_GPIO_Init+0x324>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217a:	4a31      	ldr	r2, [pc, #196]	@ (8002240 <HAL_GPIO_Init+0x324>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002180:	4b2f      	ldr	r3, [pc, #188]	@ (8002240 <HAL_GPIO_Init+0x324>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a4:	4a26      	ldr	r2, [pc, #152]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021aa:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f8:	4a11      	ldr	r2, [pc, #68]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3301      	adds	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	f67f ae96 	bls.w	8001f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40013800 	.word	0x40013800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40021000 	.word	0x40021000
 8002238:	40021400 	.word	0x40021400
 800223c:	40021800 	.word	0x40021800
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e12b      	b.n	80024ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe ffec 	bl	8001248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2224      	movs	r2, #36	@ 0x24
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002296:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a8:	f001 fa10 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 80022ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4a81      	ldr	r2, [pc, #516]	@ (80024b8 <HAL_I2C_Init+0x274>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d807      	bhi.n	80022c8 <HAL_I2C_Init+0x84>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a80      	ldr	r2, [pc, #512]	@ (80024bc <HAL_I2C_Init+0x278>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	bf94      	ite	ls
 80022c0:	2301      	movls	r3, #1
 80022c2:	2300      	movhi	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e006      	b.n	80022d6 <HAL_I2C_Init+0x92>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4a7d      	ldr	r2, [pc, #500]	@ (80024c0 <HAL_I2C_Init+0x27c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	bf94      	ite	ls
 80022d0:	2301      	movls	r3, #1
 80022d2:	2300      	movhi	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0e7      	b.n	80024ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a78      	ldr	r2, [pc, #480]	@ (80024c4 <HAL_I2C_Init+0x280>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	0c9b      	lsrs	r3, r3, #18
 80022e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a6a      	ldr	r2, [pc, #424]	@ (80024b8 <HAL_I2C_Init+0x274>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d802      	bhi.n	8002318 <HAL_I2C_Init+0xd4>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3301      	adds	r3, #1
 8002316:	e009      	b.n	800232c <HAL_I2C_Init+0xe8>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	4a69      	ldr	r2, [pc, #420]	@ (80024c8 <HAL_I2C_Init+0x284>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	3301      	adds	r3, #1
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	430b      	orrs	r3, r1
 8002332:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800233e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	495c      	ldr	r1, [pc, #368]	@ (80024b8 <HAL_I2C_Init+0x274>)
 8002348:	428b      	cmp	r3, r1
 800234a:	d819      	bhi.n	8002380 <HAL_I2C_Init+0x13c>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1e59      	subs	r1, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fbb1 f3f3 	udiv	r3, r1, r3
 800235a:	1c59      	adds	r1, r3, #1
 800235c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002360:	400b      	ands	r3, r1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_I2C_Init+0x138>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e59      	subs	r1, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fbb1 f3f3 	udiv	r3, r1, r3
 8002374:	3301      	adds	r3, #1
 8002376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237a:	e051      	b.n	8002420 <HAL_I2C_Init+0x1dc>
 800237c:	2304      	movs	r3, #4
 800237e:	e04f      	b.n	8002420 <HAL_I2C_Init+0x1dc>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d111      	bne.n	80023ac <HAL_I2C_Init+0x168>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1e58      	subs	r0, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	440b      	add	r3, r1
 8002396:	fbb0 f3f3 	udiv	r3, r0, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e012      	b.n	80023d2 <HAL_I2C_Init+0x18e>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1e58      	subs	r0, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	0099      	lsls	r1, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Init+0x196>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e022      	b.n	8002420 <HAL_I2C_Init+0x1dc>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10e      	bne.n	8002400 <HAL_I2C_Init+0x1bc>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1e58      	subs	r0, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	440b      	add	r3, r1
 80023f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f4:	3301      	adds	r3, #1
 80023f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023fe:	e00f      	b.n	8002420 <HAL_I2C_Init+0x1dc>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e58      	subs	r0, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	0099      	lsls	r1, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	fbb0 f3f3 	udiv	r3, r0, r3
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	6809      	ldr	r1, [r1, #0]
 8002424:	4313      	orrs	r3, r2
 8002426:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69da      	ldr	r2, [r3, #28]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800244e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6911      	ldr	r1, [r2, #16]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68d2      	ldr	r2, [r2, #12]
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	000186a0 	.word	0x000186a0
 80024bc:	001e847f 	.word	0x001e847f
 80024c0:	003d08ff 	.word	0x003d08ff
 80024c4:	431bde83 	.word	0x431bde83
 80024c8:	10624dd3 	.word	0x10624dd3

080024cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024e6:	f7ff fbfb 	bl	8001ce0 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	f040 80d9 	bne.w	80026ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2319      	movs	r3, #25
 8002500:	2201      	movs	r2, #1
 8002502:	496d      	ldr	r1, [pc, #436]	@ (80026b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fdb9 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002510:	2302      	movs	r3, #2
 8002512:	e0cc      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_I2C_Mem_Write+0x56>
 800251e:	2302      	movs	r3, #2
 8002520:	e0c5      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d007      	beq.n	8002548 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002556:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2221      	movs	r2, #33	@ 0x21
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2240      	movs	r2, #64	@ 0x40
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a3a      	ldr	r2, [r7, #32]
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002578:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a4d      	ldr	r2, [pc, #308]	@ (80026bc <HAL_I2C_Mem_Write+0x1f0>)
 8002588:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800258a:	88f8      	ldrh	r0, [r7, #6]
 800258c:	893a      	ldrh	r2, [r7, #8]
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4603      	mov	r3, r0
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fbf0 	bl	8002d80 <I2C_RequestMemoryWrite>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d052      	beq.n	800264c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e081      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fe7e 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d107      	bne.n	80025d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e06b      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b04      	cmp	r3, #4
 8002612:	d11b      	bne.n	800264c <HAL_I2C_Mem_Write+0x180>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d017      	beq.n	800264c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1aa      	bne.n	80025aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fe71 	bl	8003340 <I2C_WaitOnBTFFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00d      	beq.n	8002680 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	2b04      	cmp	r3, #4
 800266a:	d107      	bne.n	800267c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800267a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e016      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800268e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	00100002 	.word	0x00100002
 80026bc:	ffff0000 	.word	0xffff0000

080026c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	@ 0x30
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	817b      	strh	r3, [r7, #10]
 80026d2:	460b      	mov	r3, r1
 80026d4:	813b      	strh	r3, [r7, #8]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026da:	f7ff fb01 	bl	8001ce0 <HAL_GetTick>
 80026de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	f040 8214 	bne.w	8002b16 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	2319      	movs	r3, #25
 80026f4:	2201      	movs	r2, #1
 80026f6:	497b      	ldr	r1, [pc, #492]	@ (80028e4 <HAL_I2C_Mem_Read+0x224>)
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fcbf 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002704:	2302      	movs	r3, #2
 8002706:	e207      	b.n	8002b18 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_I2C_Mem_Read+0x56>
 8002712:	2302      	movs	r3, #2
 8002714:	e200      	b.n	8002b18 <HAL_I2C_Mem_Read+0x458>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d007      	beq.n	800273c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800274a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2222      	movs	r2, #34	@ 0x22
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2240      	movs	r2, #64	@ 0x40
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002766:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800276c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4a5b      	ldr	r2, [pc, #364]	@ (80028e8 <HAL_I2C_Mem_Read+0x228>)
 800277c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800277e:	88f8      	ldrh	r0, [r7, #6]
 8002780:	893a      	ldrh	r2, [r7, #8]
 8002782:	8979      	ldrh	r1, [r7, #10]
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4603      	mov	r3, r0
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fb8c 	bl	8002eac <I2C_RequestMemoryRead>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e1bc      	b.n	8002b18 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d113      	bne.n	80027ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	623b      	str	r3, [r7, #32]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	623b      	str	r3, [r7, #32]
 80027ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e190      	b.n	8002af0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d11b      	bne.n	800280e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e170      	b.n	8002af0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002812:	2b02      	cmp	r3, #2
 8002814:	d11b      	bne.n	800284e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002824:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	e150      	b.n	8002af0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002864:	e144      	b.n	8002af0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286a:	2b03      	cmp	r3, #3
 800286c:	f200 80f1 	bhi.w	8002a52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	2b01      	cmp	r3, #1
 8002876:	d123      	bne.n	80028c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fda7 	bl	80033d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e145      	b.n	8002b18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028be:	e117      	b.n	8002af0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d14e      	bne.n	8002966 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ce:	2200      	movs	r2, #0
 80028d0:	4906      	ldr	r1, [pc, #24]	@ (80028ec <HAL_I2C_Mem_Read+0x22c>)
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fbd2 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e11a      	b.n	8002b18 <HAL_I2C_Mem_Read+0x458>
 80028e2:	bf00      	nop
 80028e4:	00100002 	.word	0x00100002
 80028e8:	ffff0000 	.word	0xffff0000
 80028ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002964:	e0c4      	b.n	8002af0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800296c:	2200      	movs	r2, #0
 800296e:	496c      	ldr	r1, [pc, #432]	@ (8002b20 <HAL_I2C_Mem_Read+0x460>)
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fb83 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0cb      	b.n	8002b18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800298e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c8:	2200      	movs	r2, #0
 80029ca:	4955      	ldr	r1, [pc, #340]	@ (8002b20 <HAL_I2C_Mem_Read+0x460>)
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fb55 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e09d      	b.n	8002b18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a50:	e04e      	b.n	8002af0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fcba 	bl	80033d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e058      	b.n	8002b18 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d124      	bne.n	8002af0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d107      	bne.n	8002abe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002abc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f47f aeb6 	bne.w	8002866 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e000      	b.n	8002b18 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b16:	2302      	movs	r3, #2
  }
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3728      	adds	r7, #40	@ 0x28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	00010004 	.word	0x00010004

08002b24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	@ 0x28
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	460b      	mov	r3, r1
 8002b32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff f8d4 	bl	8001ce0 <HAL_GetTick>
 8002b38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	f040 8111 	bne.w	8002d6e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2319      	movs	r3, #25
 8002b52:	2201      	movs	r2, #1
 8002b54:	4988      	ldr	r1, [pc, #544]	@ (8002d78 <HAL_I2C_IsDeviceReady+0x254>)
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fa90 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
 8002b64:	e104      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_I2C_IsDeviceReady+0x50>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e0fd      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x24c>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d007      	beq.n	8002b9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0201 	orr.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ba8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2224      	movs	r2, #36	@ 0x24
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a70      	ldr	r2, [pc, #448]	@ (8002d7c <HAL_I2C_IsDeviceReady+0x258>)
 8002bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fa4e 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf4:	d103      	bne.n	8002bfe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bfc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0b6      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c10:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c12:	f7ff f865 	bl	8001ce0 <HAL_GetTick>
 8002c16:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	bf0c      	ite	eq
 8002c26:	2301      	moveq	r3, #1
 8002c28:	2300      	movne	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2301      	moveq	r3, #1
 8002c40:	2300      	movne	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c46:	e025      	b.n	8002c94 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c48:	f7ff f84a 	bl	8001ce0 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d302      	bcc.n	8002c5e <HAL_I2C_IsDeviceReady+0x13a>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	22a0      	movs	r2, #160	@ 0xa0
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c9e:	d005      	beq.n	8002cac <HAL_I2C_IsDeviceReady+0x188>
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <HAL_I2C_IsDeviceReady+0x188>
 8002ca6:	7dbb      	ldrb	r3, [r7, #22]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0cd      	beq.n	8002c48 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d129      	bne.n	8002d16 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2319      	movs	r3, #25
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4921      	ldr	r1, [pc, #132]	@ (8002d78 <HAL_I2C_IsDeviceReady+0x254>)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f9c2 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e036      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e02c      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d24:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d2e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2319      	movs	r3, #25
 8002d36:	2201      	movs	r2, #1
 8002d38:	490f      	ldr	r1, [pc, #60]	@ (8002d78 <HAL_I2C_IsDeviceReady+0x254>)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f99e 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e012      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	f4ff af32 	bcc.w	8002bbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	00100002 	.word	0x00100002
 8002d7c:	ffff0000 	.word	0xffff0000

08002d80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	4608      	mov	r0, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4603      	mov	r3, r0
 8002d90:	817b      	strh	r3, [r7, #10]
 8002d92:	460b      	mov	r3, r1
 8002d94:	813b      	strh	r3, [r7, #8]
 8002d96:	4613      	mov	r3, r2
 8002d98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f960 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dd0:	d103      	bne.n	8002dda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e05f      	b.n	8002e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dde:	897b      	ldrh	r3, [r7, #10]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	6a3a      	ldr	r2, [r7, #32]
 8002df2:	492d      	ldr	r1, [pc, #180]	@ (8002ea8 <I2C_RequestMemoryWrite+0x128>)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f9bb 	bl	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e04c      	b.n	8002e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1c:	6a39      	ldr	r1, [r7, #32]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fa46 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d107      	bne.n	8002e42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e02b      	b.n	8002e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	611a      	str	r2, [r3, #16]
 8002e56:	e021      	b.n	8002e9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e58:	893b      	ldrh	r3, [r7, #8]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fa20 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d107      	bne.n	8002e8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e005      	b.n	8002e9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e92:	893b      	ldrh	r3, [r7, #8]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	00010002 	.word	0x00010002

08002eac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	4608      	mov	r0, r1
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	817b      	strh	r3, [r7, #10]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	813b      	strh	r3, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f8c2 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f0c:	d103      	bne.n	8002f16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0aa      	b.n	8003070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f1a:	897b      	ldrh	r3, [r7, #10]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	4952      	ldr	r1, [pc, #328]	@ (8003078 <I2C_RequestMemoryRead+0x1cc>)
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f91d 	bl	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e097      	b.n	8003070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f58:	6a39      	ldr	r1, [r7, #32]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f9a8 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d107      	bne.n	8002f7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e076      	b.n	8003070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f88:	893b      	ldrh	r3, [r7, #8]
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	611a      	str	r2, [r3, #16]
 8002f92:	e021      	b.n	8002fd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f94:	893b      	ldrh	r3, [r7, #8]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa4:	6a39      	ldr	r1, [r7, #32]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f982 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00d      	beq.n	8002fce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d107      	bne.n	8002fca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e050      	b.n	8003070 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fce:	893b      	ldrh	r3, [r7, #8]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fda:	6a39      	ldr	r1, [r7, #32]
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f967 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00d      	beq.n	8003004 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d107      	bne.n	8003000 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e035      	b.n	8003070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003012:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	2200      	movs	r2, #0
 800301c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f82b 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00d      	beq.n	8003048 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800303a:	d103      	bne.n	8003044 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e013      	b.n	8003070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003048:	897b      	ldrh	r3, [r7, #10]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	6a3a      	ldr	r2, [r7, #32]
 800305c:	4906      	ldr	r1, [pc, #24]	@ (8003078 <I2C_RequestMemoryRead+0x1cc>)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f886 	bl	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	00010002 	.word	0x00010002

0800307c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	4613      	mov	r3, r2
 800308a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800308c:	e048      	b.n	8003120 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d044      	beq.n	8003120 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003096:	f7fe fe23 	bl	8001ce0 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d302      	bcc.n	80030ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d139      	bne.n	8003120 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	0c1b      	lsrs	r3, r3, #16
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d10d      	bne.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	43da      	mvns	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4013      	ands	r3, r2
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	e00c      	b.n	80030ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	43da      	mvns	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4013      	ands	r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d116      	bne.n	8003120 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e023      	b.n	8003168 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	0c1b      	lsrs	r3, r3, #16
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d10d      	bne.n	8003146 <I2C_WaitOnFlagUntilTimeout+0xca>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	43da      	mvns	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4013      	ands	r3, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	e00c      	b.n	8003160 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	43da      	mvns	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4013      	ands	r3, r2
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	429a      	cmp	r2, r3
 8003164:	d093      	beq.n	800308e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800317e:	e071      	b.n	8003264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800318e:	d123      	bne.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f043 0204 	orr.w	r2, r3, #4
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e067      	b.n	80032a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d041      	beq.n	8003264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e0:	f7fe fd7e 	bl	8001ce0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d302      	bcc.n	80031f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d136      	bne.n	8003264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	0c1b      	lsrs	r3, r3, #16
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10c      	bne.n	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	43da      	mvns	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4013      	ands	r3, r2
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	e00b      	b.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	43da      	mvns	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4013      	ands	r3, r2
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e021      	b.n	80032a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d10c      	bne.n	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	43da      	mvns	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4013      	ands	r3, r2
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e00b      	b.n	80032a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	43da      	mvns	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f47f af6d 	bne.w	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032bc:	e034      	b.n	8003328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f8e3 	bl	800348a <I2C_IsAcknowledgeFailed>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e034      	b.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d028      	beq.n	8003328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d6:	f7fe fd03 	bl	8001ce0 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d302      	bcc.n	80032ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d11d      	bne.n	8003328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f6:	2b80      	cmp	r3, #128	@ 0x80
 80032f8:	d016      	beq.n	8003328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e007      	b.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003332:	2b80      	cmp	r3, #128	@ 0x80
 8003334:	d1c3      	bne.n	80032be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800334c:	e034      	b.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f89b 	bl	800348a <I2C_IsAcknowledgeFailed>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e034      	b.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d028      	beq.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe fcbb 	bl	8001ce0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11d      	bne.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d016      	beq.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e007      	b.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d1c3      	bne.n	800334e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033dc:	e049      	b.n	8003472 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b10      	cmp	r3, #16
 80033ea:	d119      	bne.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0210 	mvn.w	r2, #16
 80033f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e030      	b.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003420:	f7fe fc5e 	bl	8001ce0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d302      	bcc.n	8003436 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d11d      	bne.n	8003472 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003440:	2b40      	cmp	r3, #64	@ 0x40
 8003442:	d016      	beq.n	8003472 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	f043 0220 	orr.w	r2, r3, #32
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e007      	b.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347c:	2b40      	cmp	r3, #64	@ 0x40
 800347e:	d1ae      	bne.n	80033de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a0:	d11b      	bne.n	80034da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	f043 0204 	orr.w	r2, r3, #4
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0cc      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034fc:	4b68      	ldr	r3, [pc, #416]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d90c      	bls.n	8003524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b65      	ldr	r3, [pc, #404]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b63      	ldr	r3, [pc, #396]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0b8      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800353c:	4b59      	ldr	r3, [pc, #356]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a58      	ldr	r2, [pc, #352]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003554:	4b53      	ldr	r3, [pc, #332]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4a52      	ldr	r2, [pc, #328]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800355e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003560:	4b50      	ldr	r3, [pc, #320]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	494d      	ldr	r1, [pc, #308]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d044      	beq.n	8003608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b47      	ldr	r3, [pc, #284]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d119      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07f      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d003      	beq.n	80035a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	4b3f      	ldr	r3, [pc, #252]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e06f      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e067      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c6:	4b37      	ldr	r3, [pc, #220]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 0203 	bic.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4934      	ldr	r1, [pc, #208]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d8:	f7fe fb82 	bl	8001ce0 <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e0:	f7fe fb7e 	bl	8001ce0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e04f      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	4b2b      	ldr	r3, [pc, #172]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 020c 	and.w	r2, r3, #12
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	429a      	cmp	r2, r3
 8003606:	d1eb      	bne.n	80035e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003608:	4b25      	ldr	r3, [pc, #148]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d20c      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b22      	ldr	r3, [pc, #136]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e032      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363c:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4916      	ldr	r1, [pc, #88]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365a:	4b12      	ldr	r3, [pc, #72]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	490e      	ldr	r1, [pc, #56]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800366e:	f000 f841 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 8003672:	4602      	mov	r2, r0
 8003674:	4b0b      	ldr	r3, [pc, #44]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	490a      	ldr	r1, [pc, #40]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003680:	5ccb      	ldrb	r3, [r1, r3]
 8003682:	fa22 f303 	lsr.w	r3, r2, r3
 8003686:	4a09      	ldr	r2, [pc, #36]	@ (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800368a:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fae2 	bl	8001c58 <HAL_InitTick>

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023c00 	.word	0x40023c00
 80036a4:	40023800 	.word	0x40023800
 80036a8:	08005918 	.word	0x08005918
 80036ac:	20000000 	.word	0x20000000
 80036b0:	20000004 	.word	0x20000004

080036b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b03      	ldr	r3, [pc, #12]	@ (80036c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000000 	.word	0x20000000

080036cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036d0:	f7ff fff0 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	0a9b      	lsrs	r3, r3, #10
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4903      	ldr	r1, [pc, #12]	@ (80036f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	08005928 	.word	0x08005928

080036f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f8:	b0a6      	sub	sp, #152	@ 0x98
 80036fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800371a:	4bc8      	ldr	r3, [pc, #800]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x348>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b0c      	cmp	r3, #12
 8003724:	f200 817e 	bhi.w	8003a24 <HAL_RCC_GetSysClockFreq+0x330>
 8003728:	a201      	add	r2, pc, #4	@ (adr r2, 8003730 <HAL_RCC_GetSysClockFreq+0x3c>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003765 	.word	0x08003765
 8003734:	08003a25 	.word	0x08003a25
 8003738:	08003a25 	.word	0x08003a25
 800373c:	08003a25 	.word	0x08003a25
 8003740:	0800376d 	.word	0x0800376d
 8003744:	08003a25 	.word	0x08003a25
 8003748:	08003a25 	.word	0x08003a25
 800374c:	08003a25 	.word	0x08003a25
 8003750:	08003775 	.word	0x08003775
 8003754:	08003a25 	.word	0x08003a25
 8003758:	08003a25 	.word	0x08003a25
 800375c:	08003a25 	.word	0x08003a25
 8003760:	080038df 	.word	0x080038df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003764:	4bb6      	ldr	r3, [pc, #728]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003766:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800376a:	e15f      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800376c:	4bb5      	ldr	r3, [pc, #724]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x350>)
 800376e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003772:	e15b      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003774:	4bb1      	ldr	r3, [pc, #708]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x348>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800377c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003780:	4bae      	ldr	r3, [pc, #696]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x348>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d031      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378c:	4bab      	ldr	r3, [pc, #684]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x348>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	2200      	movs	r2, #0
 8003794:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003798:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379e:	663b      	str	r3, [r7, #96]	@ 0x60
 80037a0:	2300      	movs	r3, #0
 80037a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80037a4:	4ba7      	ldr	r3, [pc, #668]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x350>)
 80037a6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80037aa:	462a      	mov	r2, r5
 80037ac:	fb03 f202 	mul.w	r2, r3, r2
 80037b0:	2300      	movs	r3, #0
 80037b2:	4621      	mov	r1, r4
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	4aa2      	ldr	r2, [pc, #648]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x350>)
 80037bc:	4621      	mov	r1, r4
 80037be:	fba1 1202 	umull	r1, r2, r1, r2
 80037c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037c4:	460a      	mov	r2, r1
 80037c6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80037c8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80037ca:	4413      	add	r3, r2
 80037cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d2:	2200      	movs	r2, #0
 80037d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80037d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80037e0:	f7fd f9f6 	bl	8000bd0 <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4613      	mov	r3, r2
 80037ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037ee:	e064      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f0:	4b92      	ldr	r3, [pc, #584]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x348>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	099b      	lsrs	r3, r3, #6
 80037f6:	2200      	movs	r2, #0
 80037f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80037fa:	657a      	str	r2, [r7, #84]	@ 0x54
 80037fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003802:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003804:	2300      	movs	r3, #0
 8003806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003808:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800380c:	4622      	mov	r2, r4
 800380e:	462b      	mov	r3, r5
 8003810:	f04f 0000 	mov.w	r0, #0
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	0159      	lsls	r1, r3, #5
 800381a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800381e:	0150      	lsls	r0, r2, #5
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4621      	mov	r1, r4
 8003826:	1a51      	subs	r1, r2, r1
 8003828:	6139      	str	r1, [r7, #16]
 800382a:	4629      	mov	r1, r5
 800382c:	eb63 0301 	sbc.w	r3, r3, r1
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800383e:	4659      	mov	r1, fp
 8003840:	018b      	lsls	r3, r1, #6
 8003842:	4651      	mov	r1, sl
 8003844:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003848:	4651      	mov	r1, sl
 800384a:	018a      	lsls	r2, r1, #6
 800384c:	4651      	mov	r1, sl
 800384e:	ebb2 0801 	subs.w	r8, r2, r1
 8003852:	4659      	mov	r1, fp
 8003854:	eb63 0901 	sbc.w	r9, r3, r1
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003864:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003868:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800386c:	4690      	mov	r8, r2
 800386e:	4699      	mov	r9, r3
 8003870:	4623      	mov	r3, r4
 8003872:	eb18 0303 	adds.w	r3, r8, r3
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	462b      	mov	r3, r5
 800387a:	eb49 0303 	adc.w	r3, r9, r3
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800388c:	4629      	mov	r1, r5
 800388e:	028b      	lsls	r3, r1, #10
 8003890:	4621      	mov	r1, r4
 8003892:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003896:	4621      	mov	r1, r4
 8003898:	028a      	lsls	r2, r1, #10
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038a2:	2200      	movs	r2, #0
 80038a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80038a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80038a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038ac:	f7fd f990 	bl	8000bd0 <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4613      	mov	r3, r2
 80038b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038ba:	4b60      	ldr	r3, [pc, #384]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x348>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	0c1b      	lsrs	r3, r3, #16
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	3301      	adds	r3, #1
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80038cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80038dc:	e0a6      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038de:	4b57      	ldr	r3, [pc, #348]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x348>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ea:	4b54      	ldr	r3, [pc, #336]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x348>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d02a      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f6:	4b51      	ldr	r3, [pc, #324]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x348>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	099b      	lsrs	r3, r3, #6
 80038fc:	2200      	movs	r2, #0
 80038fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003900:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003904:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003908:	2100      	movs	r1, #0
 800390a:	4b4e      	ldr	r3, [pc, #312]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x350>)
 800390c:	fb03 f201 	mul.w	r2, r3, r1
 8003910:	2300      	movs	r3, #0
 8003912:	fb00 f303 	mul.w	r3, r0, r3
 8003916:	4413      	add	r3, r2
 8003918:	4a4a      	ldr	r2, [pc, #296]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x350>)
 800391a:	fba0 1202 	umull	r1, r2, r0, r2
 800391e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003920:	460a      	mov	r2, r1
 8003922:	673a      	str	r2, [r7, #112]	@ 0x70
 8003924:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003926:	4413      	add	r3, r2
 8003928:	677b      	str	r3, [r7, #116]	@ 0x74
 800392a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800392e:	2200      	movs	r2, #0
 8003930:	633b      	str	r3, [r7, #48]	@ 0x30
 8003932:	637a      	str	r2, [r7, #52]	@ 0x34
 8003934:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003938:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800393c:	f7fd f948 	bl	8000bd0 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4613      	mov	r3, r2
 8003946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800394a:	e05b      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800394c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x348>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	2200      	movs	r2, #0
 8003954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003956:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395e:	623b      	str	r3, [r7, #32]
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
 8003964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003968:	4642      	mov	r2, r8
 800396a:	464b      	mov	r3, r9
 800396c:	f04f 0000 	mov.w	r0, #0
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	0159      	lsls	r1, r3, #5
 8003976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800397a:	0150      	lsls	r0, r2, #5
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4641      	mov	r1, r8
 8003982:	ebb2 0a01 	subs.w	sl, r2, r1
 8003986:	4649      	mov	r1, r9
 8003988:	eb63 0b01 	sbc.w	fp, r3, r1
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800399c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039a0:	ebb2 040a 	subs.w	r4, r2, sl
 80039a4:	eb63 050b 	sbc.w	r5, r3, fp
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	00eb      	lsls	r3, r5, #3
 80039b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039b6:	00e2      	lsls	r2, r4, #3
 80039b8:	4614      	mov	r4, r2
 80039ba:	461d      	mov	r5, r3
 80039bc:	4643      	mov	r3, r8
 80039be:	18e3      	adds	r3, r4, r3
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	464b      	mov	r3, r9
 80039c4:	eb45 0303 	adc.w	r3, r5, r3
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039d6:	4629      	mov	r1, r5
 80039d8:	028b      	lsls	r3, r1, #10
 80039da:	4621      	mov	r1, r4
 80039dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039e0:	4621      	mov	r1, r4
 80039e2:	028a      	lsls	r2, r1, #10
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ec:	2200      	movs	r2, #0
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	61fa      	str	r2, [r7, #28]
 80039f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f6:	f7fd f8eb 	bl	8000bd0 <__aeabi_uldivmod>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4613      	mov	r3, r2
 8003a00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a04:	4b0d      	ldr	r3, [pc, #52]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x348>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	0f1b      	lsrs	r3, r3, #28
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003a22:	e003      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a24:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3798      	adds	r7, #152	@ 0x98
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	017d7840 	.word	0x017d7840

08003a48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e28d      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8083 	beq.w	8003b6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a68:	4b94      	ldr	r3, [pc, #592]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 030c 	and.w	r3, r3, #12
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d019      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a74:	4b91      	ldr	r3, [pc, #580]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a80:	4b8e      	ldr	r3, [pc, #568]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a8e:	4b8b      	ldr	r3, [pc, #556]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d112      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9a:	4b88      	ldr	r3, [pc, #544]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	4b84      	ldr	r3, [pc, #528]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d05b      	beq.n	8003b6c <HAL_RCC_OscConfig+0x124>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d157      	bne.n	8003b6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e25a      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac8:	d106      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x90>
 8003aca:	4b7c      	ldr	r3, [pc, #496]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a7b      	ldr	r2, [pc, #492]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e01d      	b.n	8003b14 <HAL_RCC_OscConfig+0xcc>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0xb4>
 8003ae2:	4b76      	ldr	r3, [pc, #472]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a75      	ldr	r2, [pc, #468]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b73      	ldr	r3, [pc, #460]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a72      	ldr	r2, [pc, #456]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0xcc>
 8003afc:	4b6f      	ldr	r3, [pc, #444]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a6e      	ldr	r2, [pc, #440]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b6c      	ldr	r3, [pc, #432]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a6b      	ldr	r2, [pc, #428]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fe f8e0 	bl	8001ce0 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fe f8dc 	bl	8001ce0 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	@ 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e21f      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b61      	ldr	r3, [pc, #388]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0xdc>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe f8cc 	bl	8001ce0 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe f8c8 	bl	8001ce0 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	@ 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e20b      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	4b57      	ldr	r3, [pc, #348]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x104>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d06f      	beq.n	8003c5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b7a:	4b50      	ldr	r3, [pc, #320]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d017      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b86:	4b4d      	ldr	r3, [pc, #308]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d105      	bne.n	8003b9e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b92:	4b4a      	ldr	r3, [pc, #296]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9e:	4b47      	ldr	r3, [pc, #284]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d11c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003baa:	4b44      	ldr	r3, [pc, #272]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d116      	bne.n	8003be4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb6:	4b41      	ldr	r3, [pc, #260]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_RCC_OscConfig+0x186>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d001      	beq.n	8003bce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e1d3      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bce:	4b3b      	ldr	r3, [pc, #236]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4937      	ldr	r1, [pc, #220]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be2:	e03a      	b.n	8003c5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d020      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bec:	4b34      	ldr	r3, [pc, #208]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fe f875 	bl	8001ce0 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfa:	f7fe f871 	bl	8001ce0 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e1b4      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c18:	4b28      	ldr	r3, [pc, #160]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4925      	ldr	r1, [pc, #148]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]
 8003c2c:	e015      	b.n	8003c5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2e:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe f854 	bl	8001ce0 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3c:	f7fe f850 	bl	8001ce0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e193      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d036      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d016      	beq.n	8003c9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c6e:	4b15      	ldr	r3, [pc, #84]	@ (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fe f834 	bl	8001ce0 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7c:	f7fe f830 	bl	8001ce0 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e173      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x234>
 8003c9a:	e01b      	b.n	8003cd4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9c:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <HAL_RCC_OscConfig+0x27c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca2:	f7fe f81d 	bl	8001ce0 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca8:	e00e      	b.n	8003cc8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003caa:	f7fe f819 	bl	8001ce0 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d907      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e15c      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	42470000 	.word	0x42470000
 8003cc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc8:	4b8a      	ldr	r3, [pc, #552]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ea      	bne.n	8003caa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8097 	beq.w	8003e10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce6:	4b83      	ldr	r3, [pc, #524]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d02:	4b7c      	ldr	r3, [pc, #496]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d12:	4b79      	ldr	r3, [pc, #484]	@ (8003ef8 <HAL_RCC_OscConfig+0x4b0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d118      	bne.n	8003d50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1e:	4b76      	ldr	r3, [pc, #472]	@ (8003ef8 <HAL_RCC_OscConfig+0x4b0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a75      	ldr	r2, [pc, #468]	@ (8003ef8 <HAL_RCC_OscConfig+0x4b0>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2a:	f7fd ffd9 	bl	8001ce0 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d32:	f7fd ffd5 	bl	8001ce0 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e118      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d44:	4b6c      	ldr	r3, [pc, #432]	@ (8003ef8 <HAL_RCC_OscConfig+0x4b0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x31e>
 8003d58:	4b66      	ldr	r3, [pc, #408]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5c:	4a65      	ldr	r2, [pc, #404]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d64:	e01c      	b.n	8003da0 <HAL_RCC_OscConfig+0x358>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x340>
 8003d6e:	4b61      	ldr	r3, [pc, #388]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d72:	4a60      	ldr	r2, [pc, #384]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003d74:	f043 0304 	orr.w	r3, r3, #4
 8003d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7a:	4b5e      	ldr	r3, [pc, #376]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_OscConfig+0x358>
 8003d88:	4b5a      	ldr	r3, [pc, #360]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8c:	4a59      	ldr	r2, [pc, #356]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d94:	4b57      	ldr	r3, [pc, #348]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d98:	4a56      	ldr	r2, [pc, #344]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003d9a:	f023 0304 	bic.w	r3, r3, #4
 8003d9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d015      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fd ff9a 	bl	8001ce0 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fd ff96 	bl	8001ce0 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0d7      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0ee      	beq.n	8003db0 <HAL_RCC_OscConfig+0x368>
 8003dd2:	e014      	b.n	8003dfe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fd ff84 	bl	8001ce0 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dda:	e00a      	b.n	8003df2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ddc:	f7fd ff80 	bl	8001ce0 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e0c1      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df2:	4b40      	ldr	r3, [pc, #256]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1ee      	bne.n	8003ddc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d105      	bne.n	8003e10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e04:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	4a3a      	ldr	r2, [pc, #232]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003e0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80ad 	beq.w	8003f74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e1a:	4b36      	ldr	r3, [pc, #216]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d060      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d145      	bne.n	8003eba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	4b33      	ldr	r3, [pc, #204]	@ (8003efc <HAL_RCC_OscConfig+0x4b4>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fd ff54 	bl	8001ce0 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd ff50 	bl	8001ce0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e093      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	019b      	lsls	r3, r3, #6
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	3b01      	subs	r3, #1
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e84:	071b      	lsls	r3, r3, #28
 8003e86:	491b      	ldr	r1, [pc, #108]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003efc <HAL_RCC_OscConfig+0x4b4>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd ff25 	bl	8001ce0 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9a:	f7fd ff21 	bl	8001ce0 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e064      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eac:	4b11      	ldr	r3, [pc, #68]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x452>
 8003eb8:	e05c      	b.n	8003f74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eba:	4b10      	ldr	r3, [pc, #64]	@ (8003efc <HAL_RCC_OscConfig+0x4b4>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fd ff0e 	bl	8001ce0 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec8:	f7fd ff0a 	bl	8001ce0 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e04d      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <HAL_RCC_OscConfig+0x4ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x480>
 8003ee6:	e045      	b.n	8003f74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e040      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40007000 	.word	0x40007000
 8003efc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f00:	4b1f      	ldr	r3, [pc, #124]	@ (8003f80 <HAL_RCC_OscConfig+0x538>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d030      	beq.n	8003f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d129      	bne.n	8003f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d122      	bne.n	8003f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f30:	4013      	ands	r3, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d119      	bne.n	8003f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d10f      	bne.n	8003f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800

08003f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e041      	b.n	800401a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fde0 	bl	8001b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 fa7e 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d001      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e04e      	b.n	80040da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a23      	ldr	r2, [pc, #140]	@ (80040e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d022      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x80>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004066:	d01d      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x80>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1f      	ldr	r2, [pc, #124]	@ (80040ec <HAL_TIM_Base_Start_IT+0xc8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d018      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x80>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1e      	ldr	r2, [pc, #120]	@ (80040f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x80>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1c      	ldr	r2, [pc, #112]	@ (80040f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00e      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x80>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1b      	ldr	r2, [pc, #108]	@ (80040f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d009      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x80>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a19      	ldr	r2, [pc, #100]	@ (80040fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d004      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x80>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a18      	ldr	r2, [pc, #96]	@ (8004100 <HAL_TIM_Base_Start_IT+0xdc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d111      	bne.n	80040c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d010      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c6:	e007      	b.n	80040d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800
 80040f4:	40000c00 	.word	0x40000c00
 80040f8:	40010400 	.word	0x40010400
 80040fc:	40014000 	.word	0x40014000
 8004100:	40001800 	.word	0x40001800

08004104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d020      	beq.n	8004168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01b      	beq.n	8004168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0202 	mvn.w	r2, #2
 8004138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f999 	bl	8004486 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f98b 	bl	8004472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f99c 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d020      	beq.n	80041b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01b      	beq.n	80041b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0204 	mvn.w	r2, #4
 8004184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f973 	bl	8004486 <HAL_TIM_IC_CaptureCallback>
 80041a0:	e005      	b.n	80041ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f965 	bl	8004472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f976 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d020      	beq.n	8004200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01b      	beq.n	8004200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0208 	mvn.w	r2, #8
 80041d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2204      	movs	r2, #4
 80041d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f94d 	bl	8004486 <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f93f 	bl	8004472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f950 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b00      	cmp	r3, #0
 8004208:	d020      	beq.n	800424c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01b      	beq.n	800424c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0210 	mvn.w	r2, #16
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2208      	movs	r2, #8
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f927 	bl	8004486 <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f919 	bl	8004472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f92a 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00c      	beq.n	8004270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0201 	mvn.w	r2, #1
 8004268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd f8bc 	bl	80013e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00c      	beq.n	8004294 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fae4 	bl	800485c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8fb 	bl	80044ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0220 	mvn.w	r2, #32
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fab6 	bl	8004848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_TIM_ConfigClockSource+0x1c>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e0b4      	b.n	800446a <HAL_TIM_ConfigClockSource+0x186>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800431e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004338:	d03e      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0xd4>
 800433a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800433e:	f200 8087 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x16c>
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004346:	f000 8086 	beq.w	8004456 <HAL_TIM_ConfigClockSource+0x172>
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800434e:	d87f      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x16c>
 8004350:	2b70      	cmp	r3, #112	@ 0x70
 8004352:	d01a      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xa6>
 8004354:	2b70      	cmp	r3, #112	@ 0x70
 8004356:	d87b      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x16c>
 8004358:	2b60      	cmp	r3, #96	@ 0x60
 800435a:	d050      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x11a>
 800435c:	2b60      	cmp	r3, #96	@ 0x60
 800435e:	d877      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x16c>
 8004360:	2b50      	cmp	r3, #80	@ 0x50
 8004362:	d03c      	beq.n	80043de <HAL_TIM_ConfigClockSource+0xfa>
 8004364:	2b50      	cmp	r3, #80	@ 0x50
 8004366:	d873      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x16c>
 8004368:	2b40      	cmp	r3, #64	@ 0x40
 800436a:	d058      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x13a>
 800436c:	2b40      	cmp	r3, #64	@ 0x40
 800436e:	d86f      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x16c>
 8004370:	2b30      	cmp	r3, #48	@ 0x30
 8004372:	d064      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x15a>
 8004374:	2b30      	cmp	r3, #48	@ 0x30
 8004376:	d86b      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x16c>
 8004378:	2b20      	cmp	r3, #32
 800437a:	d060      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x15a>
 800437c:	2b20      	cmp	r3, #32
 800437e:	d867      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x16c>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d05c      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x15a>
 8004384:	2b10      	cmp	r3, #16
 8004386:	d05a      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x15a>
 8004388:	e062      	b.n	8004450 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800439a:	f000 f9b9 	bl	8004710 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	609a      	str	r2, [r3, #8]
      break;
 80043b6:	e04f      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043c8:	f000 f9a2 	bl	8004710 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043da:	609a      	str	r2, [r3, #8]
      break;
 80043dc:	e03c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 f916 	bl	800461c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2150      	movs	r1, #80	@ 0x50
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f96f 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 80043fc:	e02c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800440a:	461a      	mov	r2, r3
 800440c:	f000 f935 	bl	800467a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2160      	movs	r1, #96	@ 0x60
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f95f 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 800441c:	e01c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442a:	461a      	mov	r2, r3
 800442c:	f000 f8f6 	bl	800461c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2140      	movs	r1, #64	@ 0x40
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f94f 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 800443c:	e00c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f000 f946 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 800444e:	e003      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      break;
 8004454:	e000      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004468:	7bfb      	ldrb	r3, [r7, #15]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a46      	ldr	r2, [pc, #280]	@ (80045f0 <TIM_Base_SetConfig+0x12c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e2:	d00f      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a43      	ldr	r2, [pc, #268]	@ (80045f4 <TIM_Base_SetConfig+0x130>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00b      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a42      	ldr	r2, [pc, #264]	@ (80045f8 <TIM_Base_SetConfig+0x134>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a41      	ldr	r2, [pc, #260]	@ (80045fc <TIM_Base_SetConfig+0x138>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a40      	ldr	r2, [pc, #256]	@ (8004600 <TIM_Base_SetConfig+0x13c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d108      	bne.n	8004516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800450a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a35      	ldr	r2, [pc, #212]	@ (80045f0 <TIM_Base_SetConfig+0x12c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d02b      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004524:	d027      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a32      	ldr	r2, [pc, #200]	@ (80045f4 <TIM_Base_SetConfig+0x130>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d023      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a31      	ldr	r2, [pc, #196]	@ (80045f8 <TIM_Base_SetConfig+0x134>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01f      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a30      	ldr	r2, [pc, #192]	@ (80045fc <TIM_Base_SetConfig+0x138>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01b      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2f      	ldr	r2, [pc, #188]	@ (8004600 <TIM_Base_SetConfig+0x13c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d017      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2e      	ldr	r2, [pc, #184]	@ (8004604 <TIM_Base_SetConfig+0x140>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a2d      	ldr	r2, [pc, #180]	@ (8004608 <TIM_Base_SetConfig+0x144>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00f      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a2c      	ldr	r2, [pc, #176]	@ (800460c <TIM_Base_SetConfig+0x148>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2b      	ldr	r2, [pc, #172]	@ (8004610 <TIM_Base_SetConfig+0x14c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a2a      	ldr	r2, [pc, #168]	@ (8004614 <TIM_Base_SetConfig+0x150>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a29      	ldr	r2, [pc, #164]	@ (8004618 <TIM_Base_SetConfig+0x154>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a10      	ldr	r2, [pc, #64]	@ (80045f0 <TIM_Base_SetConfig+0x12c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_Base_SetConfig+0xf8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <TIM_Base_SetConfig+0x13c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d103      	bne.n	80045c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d105      	bne.n	80045e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f023 0201 	bic.w	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	611a      	str	r2, [r3, #16]
  }
}
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40010000 	.word	0x40010000
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40010400 	.word	0x40010400
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800
 8004610:	40001800 	.word	0x40001800
 8004614:	40001c00 	.word	0x40001c00
 8004618:	40002000 	.word	0x40002000

0800461c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f023 0201 	bic.w	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 030a 	bic.w	r3, r3, #10
 8004658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800467a:	b480      	push	{r7}
 800467c:	b087      	sub	sp, #28
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f023 0210 	bic.w	r2, r3, #16
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	031b      	lsls	r3, r3, #12
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f043 0307 	orr.w	r3, r3, #7
 80046fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	609a      	str	r2, [r3, #8]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800472a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	431a      	orrs	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4313      	orrs	r3, r2
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	609a      	str	r2, [r3, #8]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004764:	2302      	movs	r3, #2
 8004766:	e05a      	b.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a21      	ldr	r2, [pc, #132]	@ (800482c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d022      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b4:	d01d      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d018      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00e      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a18      	ldr	r2, [pc, #96]	@ (800483c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a17      	ldr	r2, [pc, #92]	@ (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a15      	ldr	r2, [pc, #84]	@ (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10c      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	4313      	orrs	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40010000 	.word	0x40010000
 8004830:	40000400 	.word	0x40000400
 8004834:	40000800 	.word	0x40000800
 8004838:	40000c00 	.word	0x40000c00
 800483c:	40010400 	.word	0x40010400
 8004840:	40014000 	.word	0x40014000
 8004844:	40001800 	.word	0x40001800

08004848 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <std>:
 8004870:	2300      	movs	r3, #0
 8004872:	b510      	push	{r4, lr}
 8004874:	4604      	mov	r4, r0
 8004876:	e9c0 3300 	strd	r3, r3, [r0]
 800487a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800487e:	6083      	str	r3, [r0, #8]
 8004880:	8181      	strh	r1, [r0, #12]
 8004882:	6643      	str	r3, [r0, #100]	@ 0x64
 8004884:	81c2      	strh	r2, [r0, #14]
 8004886:	6183      	str	r3, [r0, #24]
 8004888:	4619      	mov	r1, r3
 800488a:	2208      	movs	r2, #8
 800488c:	305c      	adds	r0, #92	@ 0x5c
 800488e:	f000 f9e7 	bl	8004c60 <memset>
 8004892:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <std+0x58>)
 8004894:	6263      	str	r3, [r4, #36]	@ 0x24
 8004896:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <std+0x5c>)
 8004898:	62a3      	str	r3, [r4, #40]	@ 0x28
 800489a:	4b0d      	ldr	r3, [pc, #52]	@ (80048d0 <std+0x60>)
 800489c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800489e:	4b0d      	ldr	r3, [pc, #52]	@ (80048d4 <std+0x64>)
 80048a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80048a2:	4b0d      	ldr	r3, [pc, #52]	@ (80048d8 <std+0x68>)
 80048a4:	6224      	str	r4, [r4, #32]
 80048a6:	429c      	cmp	r4, r3
 80048a8:	d006      	beq.n	80048b8 <std+0x48>
 80048aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048ae:	4294      	cmp	r4, r2
 80048b0:	d002      	beq.n	80048b8 <std+0x48>
 80048b2:	33d0      	adds	r3, #208	@ 0xd0
 80048b4:	429c      	cmp	r4, r3
 80048b6:	d105      	bne.n	80048c4 <std+0x54>
 80048b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c0:	f000 ba46 	b.w	8004d50 <__retarget_lock_init_recursive>
 80048c4:	bd10      	pop	{r4, pc}
 80048c6:	bf00      	nop
 80048c8:	08004ab1 	.word	0x08004ab1
 80048cc:	08004ad3 	.word	0x08004ad3
 80048d0:	08004b0b 	.word	0x08004b0b
 80048d4:	08004b2f 	.word	0x08004b2f
 80048d8:	20000160 	.word	0x20000160

080048dc <stdio_exit_handler>:
 80048dc:	4a02      	ldr	r2, [pc, #8]	@ (80048e8 <stdio_exit_handler+0xc>)
 80048de:	4903      	ldr	r1, [pc, #12]	@ (80048ec <stdio_exit_handler+0x10>)
 80048e0:	4803      	ldr	r0, [pc, #12]	@ (80048f0 <stdio_exit_handler+0x14>)
 80048e2:	f000 b869 	b.w	80049b8 <_fwalk_sglue>
 80048e6:	bf00      	nop
 80048e8:	2000000c 	.word	0x2000000c
 80048ec:	08005051 	.word	0x08005051
 80048f0:	2000001c 	.word	0x2000001c

080048f4 <cleanup_stdio>:
 80048f4:	6841      	ldr	r1, [r0, #4]
 80048f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <cleanup_stdio+0x34>)
 80048f8:	4299      	cmp	r1, r3
 80048fa:	b510      	push	{r4, lr}
 80048fc:	4604      	mov	r4, r0
 80048fe:	d001      	beq.n	8004904 <cleanup_stdio+0x10>
 8004900:	f000 fba6 	bl	8005050 <_fflush_r>
 8004904:	68a1      	ldr	r1, [r4, #8]
 8004906:	4b09      	ldr	r3, [pc, #36]	@ (800492c <cleanup_stdio+0x38>)
 8004908:	4299      	cmp	r1, r3
 800490a:	d002      	beq.n	8004912 <cleanup_stdio+0x1e>
 800490c:	4620      	mov	r0, r4
 800490e:	f000 fb9f 	bl	8005050 <_fflush_r>
 8004912:	68e1      	ldr	r1, [r4, #12]
 8004914:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <cleanup_stdio+0x3c>)
 8004916:	4299      	cmp	r1, r3
 8004918:	d004      	beq.n	8004924 <cleanup_stdio+0x30>
 800491a:	4620      	mov	r0, r4
 800491c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004920:	f000 bb96 	b.w	8005050 <_fflush_r>
 8004924:	bd10      	pop	{r4, pc}
 8004926:	bf00      	nop
 8004928:	20000160 	.word	0x20000160
 800492c:	200001c8 	.word	0x200001c8
 8004930:	20000230 	.word	0x20000230

08004934 <global_stdio_init.part.0>:
 8004934:	b510      	push	{r4, lr}
 8004936:	4b0b      	ldr	r3, [pc, #44]	@ (8004964 <global_stdio_init.part.0+0x30>)
 8004938:	4c0b      	ldr	r4, [pc, #44]	@ (8004968 <global_stdio_init.part.0+0x34>)
 800493a:	4a0c      	ldr	r2, [pc, #48]	@ (800496c <global_stdio_init.part.0+0x38>)
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	4620      	mov	r0, r4
 8004940:	2200      	movs	r2, #0
 8004942:	2104      	movs	r1, #4
 8004944:	f7ff ff94 	bl	8004870 <std>
 8004948:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800494c:	2201      	movs	r2, #1
 800494e:	2109      	movs	r1, #9
 8004950:	f7ff ff8e 	bl	8004870 <std>
 8004954:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004958:	2202      	movs	r2, #2
 800495a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800495e:	2112      	movs	r1, #18
 8004960:	f7ff bf86 	b.w	8004870 <std>
 8004964:	20000298 	.word	0x20000298
 8004968:	20000160 	.word	0x20000160
 800496c:	080048dd 	.word	0x080048dd

08004970 <__sfp_lock_acquire>:
 8004970:	4801      	ldr	r0, [pc, #4]	@ (8004978 <__sfp_lock_acquire+0x8>)
 8004972:	f000 b9ee 	b.w	8004d52 <__retarget_lock_acquire_recursive>
 8004976:	bf00      	nop
 8004978:	200002a1 	.word	0x200002a1

0800497c <__sfp_lock_release>:
 800497c:	4801      	ldr	r0, [pc, #4]	@ (8004984 <__sfp_lock_release+0x8>)
 800497e:	f000 b9e9 	b.w	8004d54 <__retarget_lock_release_recursive>
 8004982:	bf00      	nop
 8004984:	200002a1 	.word	0x200002a1

08004988 <__sinit>:
 8004988:	b510      	push	{r4, lr}
 800498a:	4604      	mov	r4, r0
 800498c:	f7ff fff0 	bl	8004970 <__sfp_lock_acquire>
 8004990:	6a23      	ldr	r3, [r4, #32]
 8004992:	b11b      	cbz	r3, 800499c <__sinit+0x14>
 8004994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004998:	f7ff bff0 	b.w	800497c <__sfp_lock_release>
 800499c:	4b04      	ldr	r3, [pc, #16]	@ (80049b0 <__sinit+0x28>)
 800499e:	6223      	str	r3, [r4, #32]
 80049a0:	4b04      	ldr	r3, [pc, #16]	@ (80049b4 <__sinit+0x2c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f5      	bne.n	8004994 <__sinit+0xc>
 80049a8:	f7ff ffc4 	bl	8004934 <global_stdio_init.part.0>
 80049ac:	e7f2      	b.n	8004994 <__sinit+0xc>
 80049ae:	bf00      	nop
 80049b0:	080048f5 	.word	0x080048f5
 80049b4:	20000298 	.word	0x20000298

080049b8 <_fwalk_sglue>:
 80049b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049bc:	4607      	mov	r7, r0
 80049be:	4688      	mov	r8, r1
 80049c0:	4614      	mov	r4, r2
 80049c2:	2600      	movs	r6, #0
 80049c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049c8:	f1b9 0901 	subs.w	r9, r9, #1
 80049cc:	d505      	bpl.n	80049da <_fwalk_sglue+0x22>
 80049ce:	6824      	ldr	r4, [r4, #0]
 80049d0:	2c00      	cmp	r4, #0
 80049d2:	d1f7      	bne.n	80049c4 <_fwalk_sglue+0xc>
 80049d4:	4630      	mov	r0, r6
 80049d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049da:	89ab      	ldrh	r3, [r5, #12]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d907      	bls.n	80049f0 <_fwalk_sglue+0x38>
 80049e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049e4:	3301      	adds	r3, #1
 80049e6:	d003      	beq.n	80049f0 <_fwalk_sglue+0x38>
 80049e8:	4629      	mov	r1, r5
 80049ea:	4638      	mov	r0, r7
 80049ec:	47c0      	blx	r8
 80049ee:	4306      	orrs	r6, r0
 80049f0:	3568      	adds	r5, #104	@ 0x68
 80049f2:	e7e9      	b.n	80049c8 <_fwalk_sglue+0x10>

080049f4 <_puts_r>:
 80049f4:	6a03      	ldr	r3, [r0, #32]
 80049f6:	b570      	push	{r4, r5, r6, lr}
 80049f8:	6884      	ldr	r4, [r0, #8]
 80049fa:	4605      	mov	r5, r0
 80049fc:	460e      	mov	r6, r1
 80049fe:	b90b      	cbnz	r3, 8004a04 <_puts_r+0x10>
 8004a00:	f7ff ffc2 	bl	8004988 <__sinit>
 8004a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a06:	07db      	lsls	r3, r3, #31
 8004a08:	d405      	bmi.n	8004a16 <_puts_r+0x22>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	0598      	lsls	r0, r3, #22
 8004a0e:	d402      	bmi.n	8004a16 <_puts_r+0x22>
 8004a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a12:	f000 f99e 	bl	8004d52 <__retarget_lock_acquire_recursive>
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	0719      	lsls	r1, r3, #28
 8004a1a:	d502      	bpl.n	8004a22 <_puts_r+0x2e>
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d135      	bne.n	8004a8e <_puts_r+0x9a>
 8004a22:	4621      	mov	r1, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	f000 f8c5 	bl	8004bb4 <__swsetup_r>
 8004a2a:	b380      	cbz	r0, 8004a8e <_puts_r+0x9a>
 8004a2c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a32:	07da      	lsls	r2, r3, #31
 8004a34:	d405      	bmi.n	8004a42 <_puts_r+0x4e>
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	059b      	lsls	r3, r3, #22
 8004a3a:	d402      	bmi.n	8004a42 <_puts_r+0x4e>
 8004a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a3e:	f000 f989 	bl	8004d54 <__retarget_lock_release_recursive>
 8004a42:	4628      	mov	r0, r5
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da04      	bge.n	8004a54 <_puts_r+0x60>
 8004a4a:	69a2      	ldr	r2, [r4, #24]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	dc17      	bgt.n	8004a80 <_puts_r+0x8c>
 8004a50:	290a      	cmp	r1, #10
 8004a52:	d015      	beq.n	8004a80 <_puts_r+0x8c>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	6022      	str	r2, [r4, #0]
 8004a5a:	7019      	strb	r1, [r3, #0]
 8004a5c:	68a3      	ldr	r3, [r4, #8]
 8004a5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a62:	3b01      	subs	r3, #1
 8004a64:	60a3      	str	r3, [r4, #8]
 8004a66:	2900      	cmp	r1, #0
 8004a68:	d1ed      	bne.n	8004a46 <_puts_r+0x52>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	da11      	bge.n	8004a92 <_puts_r+0x9e>
 8004a6e:	4622      	mov	r2, r4
 8004a70:	210a      	movs	r1, #10
 8004a72:	4628      	mov	r0, r5
 8004a74:	f000 f85f 	bl	8004b36 <__swbuf_r>
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d0d7      	beq.n	8004a2c <_puts_r+0x38>
 8004a7c:	250a      	movs	r5, #10
 8004a7e:	e7d7      	b.n	8004a30 <_puts_r+0x3c>
 8004a80:	4622      	mov	r2, r4
 8004a82:	4628      	mov	r0, r5
 8004a84:	f000 f857 	bl	8004b36 <__swbuf_r>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d1e7      	bne.n	8004a5c <_puts_r+0x68>
 8004a8c:	e7ce      	b.n	8004a2c <_puts_r+0x38>
 8004a8e:	3e01      	subs	r6, #1
 8004a90:	e7e4      	b.n	8004a5c <_puts_r+0x68>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	6022      	str	r2, [r4, #0]
 8004a98:	220a      	movs	r2, #10
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e7ee      	b.n	8004a7c <_puts_r+0x88>
	...

08004aa0 <puts>:
 8004aa0:	4b02      	ldr	r3, [pc, #8]	@ (8004aac <puts+0xc>)
 8004aa2:	4601      	mov	r1, r0
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	f7ff bfa5 	b.w	80049f4 <_puts_r>
 8004aaa:	bf00      	nop
 8004aac:	20000018 	.word	0x20000018

08004ab0 <__sread>:
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab8:	f000 f8fc 	bl	8004cb4 <_read_r>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	bfab      	itete	ge
 8004ac0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ac4:	181b      	addge	r3, r3, r0
 8004ac6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004aca:	bfac      	ite	ge
 8004acc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ace:	81a3      	strhlt	r3, [r4, #12]
 8004ad0:	bd10      	pop	{r4, pc}

08004ad2 <__swrite>:
 8004ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad6:	461f      	mov	r7, r3
 8004ad8:	898b      	ldrh	r3, [r1, #12]
 8004ada:	05db      	lsls	r3, r3, #23
 8004adc:	4605      	mov	r5, r0
 8004ade:	460c      	mov	r4, r1
 8004ae0:	4616      	mov	r6, r2
 8004ae2:	d505      	bpl.n	8004af0 <__swrite+0x1e>
 8004ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae8:	2302      	movs	r3, #2
 8004aea:	2200      	movs	r2, #0
 8004aec:	f000 f8d0 	bl	8004c90 <_lseek_r>
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004af6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	4632      	mov	r2, r6
 8004afe:	463b      	mov	r3, r7
 8004b00:	4628      	mov	r0, r5
 8004b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b06:	f000 b8e7 	b.w	8004cd8 <_write_r>

08004b0a <__sseek>:
 8004b0a:	b510      	push	{r4, lr}
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b12:	f000 f8bd 	bl	8004c90 <_lseek_r>
 8004b16:	1c43      	adds	r3, r0, #1
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	bf15      	itete	ne
 8004b1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b26:	81a3      	strheq	r3, [r4, #12]
 8004b28:	bf18      	it	ne
 8004b2a:	81a3      	strhne	r3, [r4, #12]
 8004b2c:	bd10      	pop	{r4, pc}

08004b2e <__sclose>:
 8004b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b32:	f000 b89d 	b.w	8004c70 <_close_r>

08004b36 <__swbuf_r>:
 8004b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b38:	460e      	mov	r6, r1
 8004b3a:	4614      	mov	r4, r2
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	b118      	cbz	r0, 8004b48 <__swbuf_r+0x12>
 8004b40:	6a03      	ldr	r3, [r0, #32]
 8004b42:	b90b      	cbnz	r3, 8004b48 <__swbuf_r+0x12>
 8004b44:	f7ff ff20 	bl	8004988 <__sinit>
 8004b48:	69a3      	ldr	r3, [r4, #24]
 8004b4a:	60a3      	str	r3, [r4, #8]
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	071a      	lsls	r2, r3, #28
 8004b50:	d501      	bpl.n	8004b56 <__swbuf_r+0x20>
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	b943      	cbnz	r3, 8004b68 <__swbuf_r+0x32>
 8004b56:	4621      	mov	r1, r4
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f000 f82b 	bl	8004bb4 <__swsetup_r>
 8004b5e:	b118      	cbz	r0, 8004b68 <__swbuf_r+0x32>
 8004b60:	f04f 37ff 	mov.w	r7, #4294967295
 8004b64:	4638      	mov	r0, r7
 8004b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	6922      	ldr	r2, [r4, #16]
 8004b6c:	1a98      	subs	r0, r3, r2
 8004b6e:	6963      	ldr	r3, [r4, #20]
 8004b70:	b2f6      	uxtb	r6, r6
 8004b72:	4283      	cmp	r3, r0
 8004b74:	4637      	mov	r7, r6
 8004b76:	dc05      	bgt.n	8004b84 <__swbuf_r+0x4e>
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 fa68 	bl	8005050 <_fflush_r>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d1ed      	bne.n	8004b60 <__swbuf_r+0x2a>
 8004b84:	68a3      	ldr	r3, [r4, #8]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	60a3      	str	r3, [r4, #8]
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	6022      	str	r2, [r4, #0]
 8004b90:	701e      	strb	r6, [r3, #0]
 8004b92:	6962      	ldr	r2, [r4, #20]
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d004      	beq.n	8004ba4 <__swbuf_r+0x6e>
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	07db      	lsls	r3, r3, #31
 8004b9e:	d5e1      	bpl.n	8004b64 <__swbuf_r+0x2e>
 8004ba0:	2e0a      	cmp	r6, #10
 8004ba2:	d1df      	bne.n	8004b64 <__swbuf_r+0x2e>
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 fa52 	bl	8005050 <_fflush_r>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d0d9      	beq.n	8004b64 <__swbuf_r+0x2e>
 8004bb0:	e7d6      	b.n	8004b60 <__swbuf_r+0x2a>
	...

08004bb4 <__swsetup_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4b29      	ldr	r3, [pc, #164]	@ (8004c5c <__swsetup_r+0xa8>)
 8004bb8:	4605      	mov	r5, r0
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	b118      	cbz	r0, 8004bc8 <__swsetup_r+0x14>
 8004bc0:	6a03      	ldr	r3, [r0, #32]
 8004bc2:	b90b      	cbnz	r3, 8004bc8 <__swsetup_r+0x14>
 8004bc4:	f7ff fee0 	bl	8004988 <__sinit>
 8004bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bcc:	0719      	lsls	r1, r3, #28
 8004bce:	d422      	bmi.n	8004c16 <__swsetup_r+0x62>
 8004bd0:	06da      	lsls	r2, r3, #27
 8004bd2:	d407      	bmi.n	8004be4 <__swsetup_r+0x30>
 8004bd4:	2209      	movs	r2, #9
 8004bd6:	602a      	str	r2, [r5, #0]
 8004bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bdc:	81a3      	strh	r3, [r4, #12]
 8004bde:	f04f 30ff 	mov.w	r0, #4294967295
 8004be2:	e033      	b.n	8004c4c <__swsetup_r+0x98>
 8004be4:	0758      	lsls	r0, r3, #29
 8004be6:	d512      	bpl.n	8004c0e <__swsetup_r+0x5a>
 8004be8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bea:	b141      	cbz	r1, 8004bfe <__swsetup_r+0x4a>
 8004bec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bf0:	4299      	cmp	r1, r3
 8004bf2:	d002      	beq.n	8004bfa <__swsetup_r+0x46>
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	f000 f8af 	bl	8004d58 <_free_r>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c04:	81a3      	strh	r3, [r4, #12]
 8004c06:	2300      	movs	r3, #0
 8004c08:	6063      	str	r3, [r4, #4]
 8004c0a:	6923      	ldr	r3, [r4, #16]
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	f043 0308 	orr.w	r3, r3, #8
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	b94b      	cbnz	r3, 8004c2e <__swsetup_r+0x7a>
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c24:	d003      	beq.n	8004c2e <__swsetup_r+0x7a>
 8004c26:	4621      	mov	r1, r4
 8004c28:	4628      	mov	r0, r5
 8004c2a:	f000 fa5f 	bl	80050ec <__smakebuf_r>
 8004c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c32:	f013 0201 	ands.w	r2, r3, #1
 8004c36:	d00a      	beq.n	8004c4e <__swsetup_r+0x9a>
 8004c38:	2200      	movs	r2, #0
 8004c3a:	60a2      	str	r2, [r4, #8]
 8004c3c:	6962      	ldr	r2, [r4, #20]
 8004c3e:	4252      	negs	r2, r2
 8004c40:	61a2      	str	r2, [r4, #24]
 8004c42:	6922      	ldr	r2, [r4, #16]
 8004c44:	b942      	cbnz	r2, 8004c58 <__swsetup_r+0xa4>
 8004c46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c4a:	d1c5      	bne.n	8004bd8 <__swsetup_r+0x24>
 8004c4c:	bd38      	pop	{r3, r4, r5, pc}
 8004c4e:	0799      	lsls	r1, r3, #30
 8004c50:	bf58      	it	pl
 8004c52:	6962      	ldrpl	r2, [r4, #20]
 8004c54:	60a2      	str	r2, [r4, #8]
 8004c56:	e7f4      	b.n	8004c42 <__swsetup_r+0x8e>
 8004c58:	2000      	movs	r0, #0
 8004c5a:	e7f7      	b.n	8004c4c <__swsetup_r+0x98>
 8004c5c:	20000018 	.word	0x20000018

08004c60 <memset>:
 8004c60:	4402      	add	r2, r0
 8004c62:	4603      	mov	r3, r0
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d100      	bne.n	8004c6a <memset+0xa>
 8004c68:	4770      	bx	lr
 8004c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c6e:	e7f9      	b.n	8004c64 <memset+0x4>

08004c70 <_close_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4d06      	ldr	r5, [pc, #24]	@ (8004c8c <_close_r+0x1c>)
 8004c74:	2300      	movs	r3, #0
 8004c76:	4604      	mov	r4, r0
 8004c78:	4608      	mov	r0, r1
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	f7fc fead 	bl	80019da <_close>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d102      	bne.n	8004c8a <_close_r+0x1a>
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	b103      	cbz	r3, 8004c8a <_close_r+0x1a>
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	2000029c 	.word	0x2000029c

08004c90 <_lseek_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4d07      	ldr	r5, [pc, #28]	@ (8004cb0 <_lseek_r+0x20>)
 8004c94:	4604      	mov	r4, r0
 8004c96:	4608      	mov	r0, r1
 8004c98:	4611      	mov	r1, r2
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	602a      	str	r2, [r5, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f7fc fec2 	bl	8001a28 <_lseek>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_lseek_r+0x1e>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_lseek_r+0x1e>
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	2000029c 	.word	0x2000029c

08004cb4 <_read_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4d07      	ldr	r5, [pc, #28]	@ (8004cd4 <_read_r+0x20>)
 8004cb8:	4604      	mov	r4, r0
 8004cba:	4608      	mov	r0, r1
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	602a      	str	r2, [r5, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f7fc fe50 	bl	8001968 <_read>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_read_r+0x1e>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_read_r+0x1e>
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	2000029c 	.word	0x2000029c

08004cd8 <_write_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d07      	ldr	r5, [pc, #28]	@ (8004cf8 <_write_r+0x20>)
 8004cdc:	4604      	mov	r4, r0
 8004cde:	4608      	mov	r0, r1
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	602a      	str	r2, [r5, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f7fc fe5b 	bl	80019a2 <_write>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_write_r+0x1e>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_write_r+0x1e>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	2000029c 	.word	0x2000029c

08004cfc <__errno>:
 8004cfc:	4b01      	ldr	r3, [pc, #4]	@ (8004d04 <__errno+0x8>)
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000018 	.word	0x20000018

08004d08 <__libc_init_array>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8004d40 <__libc_init_array+0x38>)
 8004d0c:	4c0d      	ldr	r4, [pc, #52]	@ (8004d44 <__libc_init_array+0x3c>)
 8004d0e:	1b64      	subs	r4, r4, r5
 8004d10:	10a4      	asrs	r4, r4, #2
 8004d12:	2600      	movs	r6, #0
 8004d14:	42a6      	cmp	r6, r4
 8004d16:	d109      	bne.n	8004d2c <__libc_init_array+0x24>
 8004d18:	4d0b      	ldr	r5, [pc, #44]	@ (8004d48 <__libc_init_array+0x40>)
 8004d1a:	4c0c      	ldr	r4, [pc, #48]	@ (8004d4c <__libc_init_array+0x44>)
 8004d1c:	f000 fdc4 	bl	80058a8 <_init>
 8004d20:	1b64      	subs	r4, r4, r5
 8004d22:	10a4      	asrs	r4, r4, #2
 8004d24:	2600      	movs	r6, #0
 8004d26:	42a6      	cmp	r6, r4
 8004d28:	d105      	bne.n	8004d36 <__libc_init_array+0x2e>
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d30:	4798      	blx	r3
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7ee      	b.n	8004d14 <__libc_init_array+0xc>
 8004d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3a:	4798      	blx	r3
 8004d3c:	3601      	adds	r6, #1
 8004d3e:	e7f2      	b.n	8004d26 <__libc_init_array+0x1e>
 8004d40:	080059a8 	.word	0x080059a8
 8004d44:	080059a8 	.word	0x080059a8
 8004d48:	080059a8 	.word	0x080059a8
 8004d4c:	080059ac 	.word	0x080059ac

08004d50 <__retarget_lock_init_recursive>:
 8004d50:	4770      	bx	lr

08004d52 <__retarget_lock_acquire_recursive>:
 8004d52:	4770      	bx	lr

08004d54 <__retarget_lock_release_recursive>:
 8004d54:	4770      	bx	lr
	...

08004d58 <_free_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	4605      	mov	r5, r0
 8004d5c:	2900      	cmp	r1, #0
 8004d5e:	d041      	beq.n	8004de4 <_free_r+0x8c>
 8004d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d64:	1f0c      	subs	r4, r1, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bfb8      	it	lt
 8004d6a:	18e4      	addlt	r4, r4, r3
 8004d6c:	f000 f8e0 	bl	8004f30 <__malloc_lock>
 8004d70:	4a1d      	ldr	r2, [pc, #116]	@ (8004de8 <_free_r+0x90>)
 8004d72:	6813      	ldr	r3, [r2, #0]
 8004d74:	b933      	cbnz	r3, 8004d84 <_free_r+0x2c>
 8004d76:	6063      	str	r3, [r4, #4]
 8004d78:	6014      	str	r4, [r2, #0]
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d80:	f000 b8dc 	b.w	8004f3c <__malloc_unlock>
 8004d84:	42a3      	cmp	r3, r4
 8004d86:	d908      	bls.n	8004d9a <_free_r+0x42>
 8004d88:	6820      	ldr	r0, [r4, #0]
 8004d8a:	1821      	adds	r1, r4, r0
 8004d8c:	428b      	cmp	r3, r1
 8004d8e:	bf01      	itttt	eq
 8004d90:	6819      	ldreq	r1, [r3, #0]
 8004d92:	685b      	ldreq	r3, [r3, #4]
 8004d94:	1809      	addeq	r1, r1, r0
 8004d96:	6021      	streq	r1, [r4, #0]
 8004d98:	e7ed      	b.n	8004d76 <_free_r+0x1e>
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	b10b      	cbz	r3, 8004da4 <_free_r+0x4c>
 8004da0:	42a3      	cmp	r3, r4
 8004da2:	d9fa      	bls.n	8004d9a <_free_r+0x42>
 8004da4:	6811      	ldr	r1, [r2, #0]
 8004da6:	1850      	adds	r0, r2, r1
 8004da8:	42a0      	cmp	r0, r4
 8004daa:	d10b      	bne.n	8004dc4 <_free_r+0x6c>
 8004dac:	6820      	ldr	r0, [r4, #0]
 8004dae:	4401      	add	r1, r0
 8004db0:	1850      	adds	r0, r2, r1
 8004db2:	4283      	cmp	r3, r0
 8004db4:	6011      	str	r1, [r2, #0]
 8004db6:	d1e0      	bne.n	8004d7a <_free_r+0x22>
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	6053      	str	r3, [r2, #4]
 8004dbe:	4408      	add	r0, r1
 8004dc0:	6010      	str	r0, [r2, #0]
 8004dc2:	e7da      	b.n	8004d7a <_free_r+0x22>
 8004dc4:	d902      	bls.n	8004dcc <_free_r+0x74>
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	602b      	str	r3, [r5, #0]
 8004dca:	e7d6      	b.n	8004d7a <_free_r+0x22>
 8004dcc:	6820      	ldr	r0, [r4, #0]
 8004dce:	1821      	adds	r1, r4, r0
 8004dd0:	428b      	cmp	r3, r1
 8004dd2:	bf04      	itt	eq
 8004dd4:	6819      	ldreq	r1, [r3, #0]
 8004dd6:	685b      	ldreq	r3, [r3, #4]
 8004dd8:	6063      	str	r3, [r4, #4]
 8004dda:	bf04      	itt	eq
 8004ddc:	1809      	addeq	r1, r1, r0
 8004dde:	6021      	streq	r1, [r4, #0]
 8004de0:	6054      	str	r4, [r2, #4]
 8004de2:	e7ca      	b.n	8004d7a <_free_r+0x22>
 8004de4:	bd38      	pop	{r3, r4, r5, pc}
 8004de6:	bf00      	nop
 8004de8:	200002a8 	.word	0x200002a8

08004dec <sbrk_aligned>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4e0f      	ldr	r6, [pc, #60]	@ (8004e2c <sbrk_aligned+0x40>)
 8004df0:	460c      	mov	r4, r1
 8004df2:	6831      	ldr	r1, [r6, #0]
 8004df4:	4605      	mov	r5, r0
 8004df6:	b911      	cbnz	r1, 8004dfe <sbrk_aligned+0x12>
 8004df8:	f000 f9d6 	bl	80051a8 <_sbrk_r>
 8004dfc:	6030      	str	r0, [r6, #0]
 8004dfe:	4621      	mov	r1, r4
 8004e00:	4628      	mov	r0, r5
 8004e02:	f000 f9d1 	bl	80051a8 <_sbrk_r>
 8004e06:	1c43      	adds	r3, r0, #1
 8004e08:	d103      	bne.n	8004e12 <sbrk_aligned+0x26>
 8004e0a:	f04f 34ff 	mov.w	r4, #4294967295
 8004e0e:	4620      	mov	r0, r4
 8004e10:	bd70      	pop	{r4, r5, r6, pc}
 8004e12:	1cc4      	adds	r4, r0, #3
 8004e14:	f024 0403 	bic.w	r4, r4, #3
 8004e18:	42a0      	cmp	r0, r4
 8004e1a:	d0f8      	beq.n	8004e0e <sbrk_aligned+0x22>
 8004e1c:	1a21      	subs	r1, r4, r0
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 f9c2 	bl	80051a8 <_sbrk_r>
 8004e24:	3001      	adds	r0, #1
 8004e26:	d1f2      	bne.n	8004e0e <sbrk_aligned+0x22>
 8004e28:	e7ef      	b.n	8004e0a <sbrk_aligned+0x1e>
 8004e2a:	bf00      	nop
 8004e2c:	200002a4 	.word	0x200002a4

08004e30 <_malloc_r>:
 8004e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e34:	1ccd      	adds	r5, r1, #3
 8004e36:	f025 0503 	bic.w	r5, r5, #3
 8004e3a:	3508      	adds	r5, #8
 8004e3c:	2d0c      	cmp	r5, #12
 8004e3e:	bf38      	it	cc
 8004e40:	250c      	movcc	r5, #12
 8004e42:	2d00      	cmp	r5, #0
 8004e44:	4606      	mov	r6, r0
 8004e46:	db01      	blt.n	8004e4c <_malloc_r+0x1c>
 8004e48:	42a9      	cmp	r1, r5
 8004e4a:	d904      	bls.n	8004e56 <_malloc_r+0x26>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	6033      	str	r3, [r6, #0]
 8004e50:	2000      	movs	r0, #0
 8004e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f2c <_malloc_r+0xfc>
 8004e5a:	f000 f869 	bl	8004f30 <__malloc_lock>
 8004e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e62:	461c      	mov	r4, r3
 8004e64:	bb44      	cbnz	r4, 8004eb8 <_malloc_r+0x88>
 8004e66:	4629      	mov	r1, r5
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f7ff ffbf 	bl	8004dec <sbrk_aligned>
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	4604      	mov	r4, r0
 8004e72:	d158      	bne.n	8004f26 <_malloc_r+0xf6>
 8004e74:	f8d8 4000 	ldr.w	r4, [r8]
 8004e78:	4627      	mov	r7, r4
 8004e7a:	2f00      	cmp	r7, #0
 8004e7c:	d143      	bne.n	8004f06 <_malloc_r+0xd6>
 8004e7e:	2c00      	cmp	r4, #0
 8004e80:	d04b      	beq.n	8004f1a <_malloc_r+0xea>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	4639      	mov	r1, r7
 8004e86:	4630      	mov	r0, r6
 8004e88:	eb04 0903 	add.w	r9, r4, r3
 8004e8c:	f000 f98c 	bl	80051a8 <_sbrk_r>
 8004e90:	4581      	cmp	r9, r0
 8004e92:	d142      	bne.n	8004f1a <_malloc_r+0xea>
 8004e94:	6821      	ldr	r1, [r4, #0]
 8004e96:	1a6d      	subs	r5, r5, r1
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f7ff ffa6 	bl	8004dec <sbrk_aligned>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d03a      	beq.n	8004f1a <_malloc_r+0xea>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	442b      	add	r3, r5
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	bb62      	cbnz	r2, 8004f0c <_malloc_r+0xdc>
 8004eb2:	f8c8 7000 	str.w	r7, [r8]
 8004eb6:	e00f      	b.n	8004ed8 <_malloc_r+0xa8>
 8004eb8:	6822      	ldr	r2, [r4, #0]
 8004eba:	1b52      	subs	r2, r2, r5
 8004ebc:	d420      	bmi.n	8004f00 <_malloc_r+0xd0>
 8004ebe:	2a0b      	cmp	r2, #11
 8004ec0:	d917      	bls.n	8004ef2 <_malloc_r+0xc2>
 8004ec2:	1961      	adds	r1, r4, r5
 8004ec4:	42a3      	cmp	r3, r4
 8004ec6:	6025      	str	r5, [r4, #0]
 8004ec8:	bf18      	it	ne
 8004eca:	6059      	strne	r1, [r3, #4]
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	bf08      	it	eq
 8004ed0:	f8c8 1000 	streq.w	r1, [r8]
 8004ed4:	5162      	str	r2, [r4, r5]
 8004ed6:	604b      	str	r3, [r1, #4]
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f000 f82f 	bl	8004f3c <__malloc_unlock>
 8004ede:	f104 000b 	add.w	r0, r4, #11
 8004ee2:	1d23      	adds	r3, r4, #4
 8004ee4:	f020 0007 	bic.w	r0, r0, #7
 8004ee8:	1ac2      	subs	r2, r0, r3
 8004eea:	bf1c      	itt	ne
 8004eec:	1a1b      	subne	r3, r3, r0
 8004eee:	50a3      	strne	r3, [r4, r2]
 8004ef0:	e7af      	b.n	8004e52 <_malloc_r+0x22>
 8004ef2:	6862      	ldr	r2, [r4, #4]
 8004ef4:	42a3      	cmp	r3, r4
 8004ef6:	bf0c      	ite	eq
 8004ef8:	f8c8 2000 	streq.w	r2, [r8]
 8004efc:	605a      	strne	r2, [r3, #4]
 8004efe:	e7eb      	b.n	8004ed8 <_malloc_r+0xa8>
 8004f00:	4623      	mov	r3, r4
 8004f02:	6864      	ldr	r4, [r4, #4]
 8004f04:	e7ae      	b.n	8004e64 <_malloc_r+0x34>
 8004f06:	463c      	mov	r4, r7
 8004f08:	687f      	ldr	r7, [r7, #4]
 8004f0a:	e7b6      	b.n	8004e7a <_malloc_r+0x4a>
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	42a3      	cmp	r3, r4
 8004f12:	d1fb      	bne.n	8004f0c <_malloc_r+0xdc>
 8004f14:	2300      	movs	r3, #0
 8004f16:	6053      	str	r3, [r2, #4]
 8004f18:	e7de      	b.n	8004ed8 <_malloc_r+0xa8>
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	6033      	str	r3, [r6, #0]
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f000 f80c 	bl	8004f3c <__malloc_unlock>
 8004f24:	e794      	b.n	8004e50 <_malloc_r+0x20>
 8004f26:	6005      	str	r5, [r0, #0]
 8004f28:	e7d6      	b.n	8004ed8 <_malloc_r+0xa8>
 8004f2a:	bf00      	nop
 8004f2c:	200002a8 	.word	0x200002a8

08004f30 <__malloc_lock>:
 8004f30:	4801      	ldr	r0, [pc, #4]	@ (8004f38 <__malloc_lock+0x8>)
 8004f32:	f7ff bf0e 	b.w	8004d52 <__retarget_lock_acquire_recursive>
 8004f36:	bf00      	nop
 8004f38:	200002a0 	.word	0x200002a0

08004f3c <__malloc_unlock>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	@ (8004f44 <__malloc_unlock+0x8>)
 8004f3e:	f7ff bf09 	b.w	8004d54 <__retarget_lock_release_recursive>
 8004f42:	bf00      	nop
 8004f44:	200002a0 	.word	0x200002a0

08004f48 <__sflush_r>:
 8004f48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f50:	0716      	lsls	r6, r2, #28
 8004f52:	4605      	mov	r5, r0
 8004f54:	460c      	mov	r4, r1
 8004f56:	d454      	bmi.n	8005002 <__sflush_r+0xba>
 8004f58:	684b      	ldr	r3, [r1, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	dc02      	bgt.n	8004f64 <__sflush_r+0x1c>
 8004f5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	dd48      	ble.n	8004ff6 <__sflush_r+0xae>
 8004f64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	d045      	beq.n	8004ff6 <__sflush_r+0xae>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f70:	682f      	ldr	r7, [r5, #0]
 8004f72:	6a21      	ldr	r1, [r4, #32]
 8004f74:	602b      	str	r3, [r5, #0]
 8004f76:	d030      	beq.n	8004fda <__sflush_r+0x92>
 8004f78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f7a:	89a3      	ldrh	r3, [r4, #12]
 8004f7c:	0759      	lsls	r1, r3, #29
 8004f7e:	d505      	bpl.n	8004f8c <__sflush_r+0x44>
 8004f80:	6863      	ldr	r3, [r4, #4]
 8004f82:	1ad2      	subs	r2, r2, r3
 8004f84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f86:	b10b      	cbz	r3, 8004f8c <__sflush_r+0x44>
 8004f88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f8a:	1ad2      	subs	r2, r2, r3
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f90:	6a21      	ldr	r1, [r4, #32]
 8004f92:	4628      	mov	r0, r5
 8004f94:	47b0      	blx	r6
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	d106      	bne.n	8004faa <__sflush_r+0x62>
 8004f9c:	6829      	ldr	r1, [r5, #0]
 8004f9e:	291d      	cmp	r1, #29
 8004fa0:	d82b      	bhi.n	8004ffa <__sflush_r+0xb2>
 8004fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800504c <__sflush_r+0x104>)
 8004fa4:	410a      	asrs	r2, r1
 8004fa6:	07d6      	lsls	r6, r2, #31
 8004fa8:	d427      	bmi.n	8004ffa <__sflush_r+0xb2>
 8004faa:	2200      	movs	r2, #0
 8004fac:	6062      	str	r2, [r4, #4]
 8004fae:	04d9      	lsls	r1, r3, #19
 8004fb0:	6922      	ldr	r2, [r4, #16]
 8004fb2:	6022      	str	r2, [r4, #0]
 8004fb4:	d504      	bpl.n	8004fc0 <__sflush_r+0x78>
 8004fb6:	1c42      	adds	r2, r0, #1
 8004fb8:	d101      	bne.n	8004fbe <__sflush_r+0x76>
 8004fba:	682b      	ldr	r3, [r5, #0]
 8004fbc:	b903      	cbnz	r3, 8004fc0 <__sflush_r+0x78>
 8004fbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8004fc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fc2:	602f      	str	r7, [r5, #0]
 8004fc4:	b1b9      	cbz	r1, 8004ff6 <__sflush_r+0xae>
 8004fc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fca:	4299      	cmp	r1, r3
 8004fcc:	d002      	beq.n	8004fd4 <__sflush_r+0x8c>
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f7ff fec2 	bl	8004d58 <_free_r>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fd8:	e00d      	b.n	8004ff6 <__sflush_r+0xae>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b0      	blx	r6
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	1c50      	adds	r0, r2, #1
 8004fe4:	d1c9      	bne.n	8004f7a <__sflush_r+0x32>
 8004fe6:	682b      	ldr	r3, [r5, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0c6      	beq.n	8004f7a <__sflush_r+0x32>
 8004fec:	2b1d      	cmp	r3, #29
 8004fee:	d001      	beq.n	8004ff4 <__sflush_r+0xac>
 8004ff0:	2b16      	cmp	r3, #22
 8004ff2:	d11e      	bne.n	8005032 <__sflush_r+0xea>
 8004ff4:	602f      	str	r7, [r5, #0]
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	e022      	b.n	8005040 <__sflush_r+0xf8>
 8004ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ffe:	b21b      	sxth	r3, r3
 8005000:	e01b      	b.n	800503a <__sflush_r+0xf2>
 8005002:	690f      	ldr	r7, [r1, #16]
 8005004:	2f00      	cmp	r7, #0
 8005006:	d0f6      	beq.n	8004ff6 <__sflush_r+0xae>
 8005008:	0793      	lsls	r3, r2, #30
 800500a:	680e      	ldr	r6, [r1, #0]
 800500c:	bf08      	it	eq
 800500e:	694b      	ldreq	r3, [r1, #20]
 8005010:	600f      	str	r7, [r1, #0]
 8005012:	bf18      	it	ne
 8005014:	2300      	movne	r3, #0
 8005016:	eba6 0807 	sub.w	r8, r6, r7
 800501a:	608b      	str	r3, [r1, #8]
 800501c:	f1b8 0f00 	cmp.w	r8, #0
 8005020:	dde9      	ble.n	8004ff6 <__sflush_r+0xae>
 8005022:	6a21      	ldr	r1, [r4, #32]
 8005024:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005026:	4643      	mov	r3, r8
 8005028:	463a      	mov	r2, r7
 800502a:	4628      	mov	r0, r5
 800502c:	47b0      	blx	r6
 800502e:	2800      	cmp	r0, #0
 8005030:	dc08      	bgt.n	8005044 <__sflush_r+0xfc>
 8005032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800503a:	81a3      	strh	r3, [r4, #12]
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005044:	4407      	add	r7, r0
 8005046:	eba8 0800 	sub.w	r8, r8, r0
 800504a:	e7e7      	b.n	800501c <__sflush_r+0xd4>
 800504c:	dfbffffe 	.word	0xdfbffffe

08005050 <_fflush_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	690b      	ldr	r3, [r1, #16]
 8005054:	4605      	mov	r5, r0
 8005056:	460c      	mov	r4, r1
 8005058:	b913      	cbnz	r3, 8005060 <_fflush_r+0x10>
 800505a:	2500      	movs	r5, #0
 800505c:	4628      	mov	r0, r5
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	b118      	cbz	r0, 800506a <_fflush_r+0x1a>
 8005062:	6a03      	ldr	r3, [r0, #32]
 8005064:	b90b      	cbnz	r3, 800506a <_fflush_r+0x1a>
 8005066:	f7ff fc8f 	bl	8004988 <__sinit>
 800506a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f3      	beq.n	800505a <_fflush_r+0xa>
 8005072:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005074:	07d0      	lsls	r0, r2, #31
 8005076:	d404      	bmi.n	8005082 <_fflush_r+0x32>
 8005078:	0599      	lsls	r1, r3, #22
 800507a:	d402      	bmi.n	8005082 <_fflush_r+0x32>
 800507c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800507e:	f7ff fe68 	bl	8004d52 <__retarget_lock_acquire_recursive>
 8005082:	4628      	mov	r0, r5
 8005084:	4621      	mov	r1, r4
 8005086:	f7ff ff5f 	bl	8004f48 <__sflush_r>
 800508a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800508c:	07da      	lsls	r2, r3, #31
 800508e:	4605      	mov	r5, r0
 8005090:	d4e4      	bmi.n	800505c <_fflush_r+0xc>
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	059b      	lsls	r3, r3, #22
 8005096:	d4e1      	bmi.n	800505c <_fflush_r+0xc>
 8005098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800509a:	f7ff fe5b 	bl	8004d54 <__retarget_lock_release_recursive>
 800509e:	e7dd      	b.n	800505c <_fflush_r+0xc>

080050a0 <__swhatbuf_r>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	460c      	mov	r4, r1
 80050a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a8:	2900      	cmp	r1, #0
 80050aa:	b096      	sub	sp, #88	@ 0x58
 80050ac:	4615      	mov	r5, r2
 80050ae:	461e      	mov	r6, r3
 80050b0:	da0d      	bge.n	80050ce <__swhatbuf_r+0x2e>
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80050b8:	f04f 0100 	mov.w	r1, #0
 80050bc:	bf14      	ite	ne
 80050be:	2340      	movne	r3, #64	@ 0x40
 80050c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050c4:	2000      	movs	r0, #0
 80050c6:	6031      	str	r1, [r6, #0]
 80050c8:	602b      	str	r3, [r5, #0]
 80050ca:	b016      	add	sp, #88	@ 0x58
 80050cc:	bd70      	pop	{r4, r5, r6, pc}
 80050ce:	466a      	mov	r2, sp
 80050d0:	f000 f848 	bl	8005164 <_fstat_r>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	dbec      	blt.n	80050b2 <__swhatbuf_r+0x12>
 80050d8:	9901      	ldr	r1, [sp, #4]
 80050da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050e2:	4259      	negs	r1, r3
 80050e4:	4159      	adcs	r1, r3
 80050e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050ea:	e7eb      	b.n	80050c4 <__swhatbuf_r+0x24>

080050ec <__smakebuf_r>:
 80050ec:	898b      	ldrh	r3, [r1, #12]
 80050ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050f0:	079d      	lsls	r5, r3, #30
 80050f2:	4606      	mov	r6, r0
 80050f4:	460c      	mov	r4, r1
 80050f6:	d507      	bpl.n	8005108 <__smakebuf_r+0x1c>
 80050f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	6123      	str	r3, [r4, #16]
 8005100:	2301      	movs	r3, #1
 8005102:	6163      	str	r3, [r4, #20]
 8005104:	b003      	add	sp, #12
 8005106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005108:	ab01      	add	r3, sp, #4
 800510a:	466a      	mov	r2, sp
 800510c:	f7ff ffc8 	bl	80050a0 <__swhatbuf_r>
 8005110:	9f00      	ldr	r7, [sp, #0]
 8005112:	4605      	mov	r5, r0
 8005114:	4639      	mov	r1, r7
 8005116:	4630      	mov	r0, r6
 8005118:	f7ff fe8a 	bl	8004e30 <_malloc_r>
 800511c:	b948      	cbnz	r0, 8005132 <__smakebuf_r+0x46>
 800511e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005122:	059a      	lsls	r2, r3, #22
 8005124:	d4ee      	bmi.n	8005104 <__smakebuf_r+0x18>
 8005126:	f023 0303 	bic.w	r3, r3, #3
 800512a:	f043 0302 	orr.w	r3, r3, #2
 800512e:	81a3      	strh	r3, [r4, #12]
 8005130:	e7e2      	b.n	80050f8 <__smakebuf_r+0xc>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	6020      	str	r0, [r4, #0]
 8005136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800513a:	81a3      	strh	r3, [r4, #12]
 800513c:	9b01      	ldr	r3, [sp, #4]
 800513e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005142:	b15b      	cbz	r3, 800515c <__smakebuf_r+0x70>
 8005144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005148:	4630      	mov	r0, r6
 800514a:	f000 f81d 	bl	8005188 <_isatty_r>
 800514e:	b128      	cbz	r0, 800515c <__smakebuf_r+0x70>
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	81a3      	strh	r3, [r4, #12]
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	431d      	orrs	r5, r3
 8005160:	81a5      	strh	r5, [r4, #12]
 8005162:	e7cf      	b.n	8005104 <__smakebuf_r+0x18>

08005164 <_fstat_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4d07      	ldr	r5, [pc, #28]	@ (8005184 <_fstat_r+0x20>)
 8005168:	2300      	movs	r3, #0
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	4611      	mov	r1, r2
 8005170:	602b      	str	r3, [r5, #0]
 8005172:	f7fc fc3e 	bl	80019f2 <_fstat>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	d102      	bne.n	8005180 <_fstat_r+0x1c>
 800517a:	682b      	ldr	r3, [r5, #0]
 800517c:	b103      	cbz	r3, 8005180 <_fstat_r+0x1c>
 800517e:	6023      	str	r3, [r4, #0]
 8005180:	bd38      	pop	{r3, r4, r5, pc}
 8005182:	bf00      	nop
 8005184:	2000029c 	.word	0x2000029c

08005188 <_isatty_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4d06      	ldr	r5, [pc, #24]	@ (80051a4 <_isatty_r+0x1c>)
 800518c:	2300      	movs	r3, #0
 800518e:	4604      	mov	r4, r0
 8005190:	4608      	mov	r0, r1
 8005192:	602b      	str	r3, [r5, #0]
 8005194:	f7fc fc3d 	bl	8001a12 <_isatty>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_isatty_r+0x1a>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_isatty_r+0x1a>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	2000029c 	.word	0x2000029c

080051a8 <_sbrk_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4d06      	ldr	r5, [pc, #24]	@ (80051c4 <_sbrk_r+0x1c>)
 80051ac:	2300      	movs	r3, #0
 80051ae:	4604      	mov	r4, r0
 80051b0:	4608      	mov	r0, r1
 80051b2:	602b      	str	r3, [r5, #0]
 80051b4:	f7fc fc46 	bl	8001a44 <_sbrk>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d102      	bne.n	80051c2 <_sbrk_r+0x1a>
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	b103      	cbz	r3, 80051c2 <_sbrk_r+0x1a>
 80051c0:	6023      	str	r3, [r4, #0]
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
 80051c4:	2000029c 	.word	0x2000029c

080051c8 <atan2>:
 80051c8:	f000 b906 	b.w	80053d8 <__ieee754_atan2>

080051cc <sqrt>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	ed2d 8b02 	vpush	{d8}
 80051d2:	ec55 4b10 	vmov	r4, r5, d0
 80051d6:	f000 f825 	bl	8005224 <__ieee754_sqrt>
 80051da:	4622      	mov	r2, r4
 80051dc:	462b      	mov	r3, r5
 80051de:	4620      	mov	r0, r4
 80051e0:	4629      	mov	r1, r5
 80051e2:	eeb0 8a40 	vmov.f32	s16, s0
 80051e6:	eef0 8a60 	vmov.f32	s17, s1
 80051ea:	f7fb fc63 	bl	8000ab4 <__aeabi_dcmpun>
 80051ee:	b990      	cbnz	r0, 8005216 <sqrt+0x4a>
 80051f0:	2200      	movs	r2, #0
 80051f2:	2300      	movs	r3, #0
 80051f4:	4620      	mov	r0, r4
 80051f6:	4629      	mov	r1, r5
 80051f8:	f7fb fc34 	bl	8000a64 <__aeabi_dcmplt>
 80051fc:	b158      	cbz	r0, 8005216 <sqrt+0x4a>
 80051fe:	f7ff fd7d 	bl	8004cfc <__errno>
 8005202:	2321      	movs	r3, #33	@ 0x21
 8005204:	6003      	str	r3, [r0, #0]
 8005206:	2200      	movs	r2, #0
 8005208:	2300      	movs	r3, #0
 800520a:	4610      	mov	r0, r2
 800520c:	4619      	mov	r1, r3
 800520e:	f7fb fae1 	bl	80007d4 <__aeabi_ddiv>
 8005212:	ec41 0b18 	vmov	d8, r0, r1
 8005216:	eeb0 0a48 	vmov.f32	s0, s16
 800521a:	eef0 0a68 	vmov.f32	s1, s17
 800521e:	ecbd 8b02 	vpop	{d8}
 8005222:	bd38      	pop	{r3, r4, r5, pc}

08005224 <__ieee754_sqrt>:
 8005224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	4a68      	ldr	r2, [pc, #416]	@ (80053cc <__ieee754_sqrt+0x1a8>)
 800522a:	ec55 4b10 	vmov	r4, r5, d0
 800522e:	43aa      	bics	r2, r5
 8005230:	462b      	mov	r3, r5
 8005232:	4621      	mov	r1, r4
 8005234:	d110      	bne.n	8005258 <__ieee754_sqrt+0x34>
 8005236:	4622      	mov	r2, r4
 8005238:	4620      	mov	r0, r4
 800523a:	4629      	mov	r1, r5
 800523c:	f7fb f9a0 	bl	8000580 <__aeabi_dmul>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4620      	mov	r0, r4
 8005246:	4629      	mov	r1, r5
 8005248:	f7fa ffe4 	bl	8000214 <__adddf3>
 800524c:	4604      	mov	r4, r0
 800524e:	460d      	mov	r5, r1
 8005250:	ec45 4b10 	vmov	d0, r4, r5
 8005254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005258:	2d00      	cmp	r5, #0
 800525a:	dc0e      	bgt.n	800527a <__ieee754_sqrt+0x56>
 800525c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005260:	4322      	orrs	r2, r4
 8005262:	d0f5      	beq.n	8005250 <__ieee754_sqrt+0x2c>
 8005264:	b19d      	cbz	r5, 800528e <__ieee754_sqrt+0x6a>
 8005266:	4622      	mov	r2, r4
 8005268:	4620      	mov	r0, r4
 800526a:	4629      	mov	r1, r5
 800526c:	f7fa ffd0 	bl	8000210 <__aeabi_dsub>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	f7fb faae 	bl	80007d4 <__aeabi_ddiv>
 8005278:	e7e8      	b.n	800524c <__ieee754_sqrt+0x28>
 800527a:	152a      	asrs	r2, r5, #20
 800527c:	d115      	bne.n	80052aa <__ieee754_sqrt+0x86>
 800527e:	2000      	movs	r0, #0
 8005280:	e009      	b.n	8005296 <__ieee754_sqrt+0x72>
 8005282:	0acb      	lsrs	r3, r1, #11
 8005284:	3a15      	subs	r2, #21
 8005286:	0549      	lsls	r1, r1, #21
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0fa      	beq.n	8005282 <__ieee754_sqrt+0x5e>
 800528c:	e7f7      	b.n	800527e <__ieee754_sqrt+0x5a>
 800528e:	462a      	mov	r2, r5
 8005290:	e7fa      	b.n	8005288 <__ieee754_sqrt+0x64>
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	3001      	adds	r0, #1
 8005296:	02dc      	lsls	r4, r3, #11
 8005298:	d5fb      	bpl.n	8005292 <__ieee754_sqrt+0x6e>
 800529a:	1e44      	subs	r4, r0, #1
 800529c:	1b12      	subs	r2, r2, r4
 800529e:	f1c0 0420 	rsb	r4, r0, #32
 80052a2:	fa21 f404 	lsr.w	r4, r1, r4
 80052a6:	4323      	orrs	r3, r4
 80052a8:	4081      	lsls	r1, r0
 80052aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052ae:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80052b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052b6:	07d2      	lsls	r2, r2, #31
 80052b8:	bf5c      	itt	pl
 80052ba:	005b      	lslpl	r3, r3, #1
 80052bc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80052c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052c4:	bf58      	it	pl
 80052c6:	0049      	lslpl	r1, r1, #1
 80052c8:	2600      	movs	r6, #0
 80052ca:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80052ce:	106d      	asrs	r5, r5, #1
 80052d0:	0049      	lsls	r1, r1, #1
 80052d2:	2016      	movs	r0, #22
 80052d4:	4632      	mov	r2, r6
 80052d6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80052da:	1917      	adds	r7, r2, r4
 80052dc:	429f      	cmp	r7, r3
 80052de:	bfde      	ittt	le
 80052e0:	193a      	addle	r2, r7, r4
 80052e2:	1bdb      	suble	r3, r3, r7
 80052e4:	1936      	addle	r6, r6, r4
 80052e6:	0fcf      	lsrs	r7, r1, #31
 80052e8:	3801      	subs	r0, #1
 80052ea:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80052ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80052f2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80052f6:	d1f0      	bne.n	80052da <__ieee754_sqrt+0xb6>
 80052f8:	4604      	mov	r4, r0
 80052fa:	2720      	movs	r7, #32
 80052fc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005300:	429a      	cmp	r2, r3
 8005302:	eb00 0e0c 	add.w	lr, r0, ip
 8005306:	db02      	blt.n	800530e <__ieee754_sqrt+0xea>
 8005308:	d113      	bne.n	8005332 <__ieee754_sqrt+0x10e>
 800530a:	458e      	cmp	lr, r1
 800530c:	d811      	bhi.n	8005332 <__ieee754_sqrt+0x10e>
 800530e:	f1be 0f00 	cmp.w	lr, #0
 8005312:	eb0e 000c 	add.w	r0, lr, ip
 8005316:	da42      	bge.n	800539e <__ieee754_sqrt+0x17a>
 8005318:	2800      	cmp	r0, #0
 800531a:	db40      	blt.n	800539e <__ieee754_sqrt+0x17a>
 800531c:	f102 0801 	add.w	r8, r2, #1
 8005320:	1a9b      	subs	r3, r3, r2
 8005322:	458e      	cmp	lr, r1
 8005324:	bf88      	it	hi
 8005326:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800532a:	eba1 010e 	sub.w	r1, r1, lr
 800532e:	4464      	add	r4, ip
 8005330:	4642      	mov	r2, r8
 8005332:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005336:	3f01      	subs	r7, #1
 8005338:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800533c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005340:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005344:	d1dc      	bne.n	8005300 <__ieee754_sqrt+0xdc>
 8005346:	4319      	orrs	r1, r3
 8005348:	d01b      	beq.n	8005382 <__ieee754_sqrt+0x15e>
 800534a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80053d0 <__ieee754_sqrt+0x1ac>
 800534e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80053d4 <__ieee754_sqrt+0x1b0>
 8005352:	e9da 0100 	ldrd	r0, r1, [sl]
 8005356:	e9db 2300 	ldrd	r2, r3, [fp]
 800535a:	f7fa ff59 	bl	8000210 <__aeabi_dsub>
 800535e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4640      	mov	r0, r8
 8005368:	4649      	mov	r1, r9
 800536a:	f7fb fb85 	bl	8000a78 <__aeabi_dcmple>
 800536e:	b140      	cbz	r0, 8005382 <__ieee754_sqrt+0x15e>
 8005370:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005374:	e9da 0100 	ldrd	r0, r1, [sl]
 8005378:	e9db 2300 	ldrd	r2, r3, [fp]
 800537c:	d111      	bne.n	80053a2 <__ieee754_sqrt+0x17e>
 800537e:	3601      	adds	r6, #1
 8005380:	463c      	mov	r4, r7
 8005382:	1072      	asrs	r2, r6, #1
 8005384:	0863      	lsrs	r3, r4, #1
 8005386:	07f1      	lsls	r1, r6, #31
 8005388:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800538c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005390:	bf48      	it	mi
 8005392:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005396:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800539a:	4618      	mov	r0, r3
 800539c:	e756      	b.n	800524c <__ieee754_sqrt+0x28>
 800539e:	4690      	mov	r8, r2
 80053a0:	e7be      	b.n	8005320 <__ieee754_sqrt+0xfc>
 80053a2:	f7fa ff37 	bl	8000214 <__adddf3>
 80053a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4640      	mov	r0, r8
 80053b0:	4649      	mov	r1, r9
 80053b2:	f7fb fb57 	bl	8000a64 <__aeabi_dcmplt>
 80053b6:	b120      	cbz	r0, 80053c2 <__ieee754_sqrt+0x19e>
 80053b8:	1ca0      	adds	r0, r4, #2
 80053ba:	bf08      	it	eq
 80053bc:	3601      	addeq	r6, #1
 80053be:	3402      	adds	r4, #2
 80053c0:	e7df      	b.n	8005382 <__ieee754_sqrt+0x15e>
 80053c2:	1c63      	adds	r3, r4, #1
 80053c4:	f023 0401 	bic.w	r4, r3, #1
 80053c8:	e7db      	b.n	8005382 <__ieee754_sqrt+0x15e>
 80053ca:	bf00      	nop
 80053cc:	7ff00000 	.word	0x7ff00000
 80053d0:	20000070 	.word	0x20000070
 80053d4:	20000068 	.word	0x20000068

080053d8 <__ieee754_atan2>:
 80053d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053dc:	ec57 6b11 	vmov	r6, r7, d1
 80053e0:	4273      	negs	r3, r6
 80053e2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8005560 <__ieee754_atan2+0x188>
 80053e6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80053ea:	4333      	orrs	r3, r6
 80053ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80053f0:	4543      	cmp	r3, r8
 80053f2:	ec51 0b10 	vmov	r0, r1, d0
 80053f6:	4635      	mov	r5, r6
 80053f8:	d809      	bhi.n	800540e <__ieee754_atan2+0x36>
 80053fa:	4244      	negs	r4, r0
 80053fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005400:	4304      	orrs	r4, r0
 8005402:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005406:	4544      	cmp	r4, r8
 8005408:	468e      	mov	lr, r1
 800540a:	4681      	mov	r9, r0
 800540c:	d907      	bls.n	800541e <__ieee754_atan2+0x46>
 800540e:	4632      	mov	r2, r6
 8005410:	463b      	mov	r3, r7
 8005412:	f7fa feff 	bl	8000214 <__adddf3>
 8005416:	ec41 0b10 	vmov	d0, r0, r1
 800541a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800541e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8005422:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8005426:	4334      	orrs	r4, r6
 8005428:	d103      	bne.n	8005432 <__ieee754_atan2+0x5a>
 800542a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800542e:	f000 b89b 	b.w	8005568 <atan>
 8005432:	17bc      	asrs	r4, r7, #30
 8005434:	f004 0402 	and.w	r4, r4, #2
 8005438:	ea53 0909 	orrs.w	r9, r3, r9
 800543c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005440:	d107      	bne.n	8005452 <__ieee754_atan2+0x7a>
 8005442:	2c02      	cmp	r4, #2
 8005444:	d05f      	beq.n	8005506 <__ieee754_atan2+0x12e>
 8005446:	2c03      	cmp	r4, #3
 8005448:	d1e5      	bne.n	8005416 <__ieee754_atan2+0x3e>
 800544a:	a141      	add	r1, pc, #260	@ (adr r1, 8005550 <__ieee754_atan2+0x178>)
 800544c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005450:	e7e1      	b.n	8005416 <__ieee754_atan2+0x3e>
 8005452:	4315      	orrs	r5, r2
 8005454:	d106      	bne.n	8005464 <__ieee754_atan2+0x8c>
 8005456:	f1be 0f00 	cmp.w	lr, #0
 800545a:	da5f      	bge.n	800551c <__ieee754_atan2+0x144>
 800545c:	a13e      	add	r1, pc, #248	@ (adr r1, 8005558 <__ieee754_atan2+0x180>)
 800545e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005462:	e7d8      	b.n	8005416 <__ieee754_atan2+0x3e>
 8005464:	4542      	cmp	r2, r8
 8005466:	d10f      	bne.n	8005488 <__ieee754_atan2+0xb0>
 8005468:	4293      	cmp	r3, r2
 800546a:	f104 34ff 	add.w	r4, r4, #4294967295
 800546e:	d107      	bne.n	8005480 <__ieee754_atan2+0xa8>
 8005470:	2c02      	cmp	r4, #2
 8005472:	d84c      	bhi.n	800550e <__ieee754_atan2+0x136>
 8005474:	4b34      	ldr	r3, [pc, #208]	@ (8005548 <__ieee754_atan2+0x170>)
 8005476:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800547a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800547e:	e7ca      	b.n	8005416 <__ieee754_atan2+0x3e>
 8005480:	2c02      	cmp	r4, #2
 8005482:	d848      	bhi.n	8005516 <__ieee754_atan2+0x13e>
 8005484:	4b31      	ldr	r3, [pc, #196]	@ (800554c <__ieee754_atan2+0x174>)
 8005486:	e7f6      	b.n	8005476 <__ieee754_atan2+0x9e>
 8005488:	4543      	cmp	r3, r8
 800548a:	d0e4      	beq.n	8005456 <__ieee754_atan2+0x7e>
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8005492:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005496:	da1e      	bge.n	80054d6 <__ieee754_atan2+0xfe>
 8005498:	2f00      	cmp	r7, #0
 800549a:	da01      	bge.n	80054a0 <__ieee754_atan2+0xc8>
 800549c:	323c      	adds	r2, #60	@ 0x3c
 800549e:	db1e      	blt.n	80054de <__ieee754_atan2+0x106>
 80054a0:	4632      	mov	r2, r6
 80054a2:	463b      	mov	r3, r7
 80054a4:	f7fb f996 	bl	80007d4 <__aeabi_ddiv>
 80054a8:	ec41 0b10 	vmov	d0, r0, r1
 80054ac:	f000 f9f4 	bl	8005898 <fabs>
 80054b0:	f000 f85a 	bl	8005568 <atan>
 80054b4:	ec51 0b10 	vmov	r0, r1, d0
 80054b8:	2c01      	cmp	r4, #1
 80054ba:	d013      	beq.n	80054e4 <__ieee754_atan2+0x10c>
 80054bc:	2c02      	cmp	r4, #2
 80054be:	d015      	beq.n	80054ec <__ieee754_atan2+0x114>
 80054c0:	2c00      	cmp	r4, #0
 80054c2:	d0a8      	beq.n	8005416 <__ieee754_atan2+0x3e>
 80054c4:	a318      	add	r3, pc, #96	@ (adr r3, 8005528 <__ieee754_atan2+0x150>)
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	f7fa fea1 	bl	8000210 <__aeabi_dsub>
 80054ce:	a318      	add	r3, pc, #96	@ (adr r3, 8005530 <__ieee754_atan2+0x158>)
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	e014      	b.n	8005500 <__ieee754_atan2+0x128>
 80054d6:	a118      	add	r1, pc, #96	@ (adr r1, 8005538 <__ieee754_atan2+0x160>)
 80054d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054dc:	e7ec      	b.n	80054b8 <__ieee754_atan2+0xe0>
 80054de:	2000      	movs	r0, #0
 80054e0:	2100      	movs	r1, #0
 80054e2:	e7e9      	b.n	80054b8 <__ieee754_atan2+0xe0>
 80054e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80054e8:	4619      	mov	r1, r3
 80054ea:	e794      	b.n	8005416 <__ieee754_atan2+0x3e>
 80054ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8005528 <__ieee754_atan2+0x150>)
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	f7fa fe8d 	bl	8000210 <__aeabi_dsub>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	a10d      	add	r1, pc, #52	@ (adr r1, 8005530 <__ieee754_atan2+0x158>)
 80054fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005500:	f7fa fe86 	bl	8000210 <__aeabi_dsub>
 8005504:	e787      	b.n	8005416 <__ieee754_atan2+0x3e>
 8005506:	a10a      	add	r1, pc, #40	@ (adr r1, 8005530 <__ieee754_atan2+0x158>)
 8005508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800550c:	e783      	b.n	8005416 <__ieee754_atan2+0x3e>
 800550e:	a10c      	add	r1, pc, #48	@ (adr r1, 8005540 <__ieee754_atan2+0x168>)
 8005510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005514:	e77f      	b.n	8005416 <__ieee754_atan2+0x3e>
 8005516:	2000      	movs	r0, #0
 8005518:	2100      	movs	r1, #0
 800551a:	e77c      	b.n	8005416 <__ieee754_atan2+0x3e>
 800551c:	a106      	add	r1, pc, #24	@ (adr r1, 8005538 <__ieee754_atan2+0x160>)
 800551e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005522:	e778      	b.n	8005416 <__ieee754_atan2+0x3e>
 8005524:	f3af 8000 	nop.w
 8005528:	33145c07 	.word	0x33145c07
 800552c:	3ca1a626 	.word	0x3ca1a626
 8005530:	54442d18 	.word	0x54442d18
 8005534:	400921fb 	.word	0x400921fb
 8005538:	54442d18 	.word	0x54442d18
 800553c:	3ff921fb 	.word	0x3ff921fb
 8005540:	54442d18 	.word	0x54442d18
 8005544:	3fe921fb 	.word	0x3fe921fb
 8005548:	08005948 	.word	0x08005948
 800554c:	08005930 	.word	0x08005930
 8005550:	54442d18 	.word	0x54442d18
 8005554:	c00921fb 	.word	0xc00921fb
 8005558:	54442d18 	.word	0x54442d18
 800555c:	bff921fb 	.word	0xbff921fb
 8005560:	7ff00000 	.word	0x7ff00000
 8005564:	00000000 	.word	0x00000000

08005568 <atan>:
 8005568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556c:	ec55 4b10 	vmov	r4, r5, d0
 8005570:	4bbf      	ldr	r3, [pc, #764]	@ (8005870 <atan+0x308>)
 8005572:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8005576:	429e      	cmp	r6, r3
 8005578:	46ab      	mov	fp, r5
 800557a:	d918      	bls.n	80055ae <atan+0x46>
 800557c:	4bbd      	ldr	r3, [pc, #756]	@ (8005874 <atan+0x30c>)
 800557e:	429e      	cmp	r6, r3
 8005580:	d801      	bhi.n	8005586 <atan+0x1e>
 8005582:	d109      	bne.n	8005598 <atan+0x30>
 8005584:	b144      	cbz	r4, 8005598 <atan+0x30>
 8005586:	4622      	mov	r2, r4
 8005588:	462b      	mov	r3, r5
 800558a:	4620      	mov	r0, r4
 800558c:	4629      	mov	r1, r5
 800558e:	f7fa fe41 	bl	8000214 <__adddf3>
 8005592:	4604      	mov	r4, r0
 8005594:	460d      	mov	r5, r1
 8005596:	e006      	b.n	80055a6 <atan+0x3e>
 8005598:	f1bb 0f00 	cmp.w	fp, #0
 800559c:	f340 812b 	ble.w	80057f6 <atan+0x28e>
 80055a0:	a597      	add	r5, pc, #604	@ (adr r5, 8005800 <atan+0x298>)
 80055a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80055a6:	ec45 4b10 	vmov	d0, r4, r5
 80055aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ae:	4bb2      	ldr	r3, [pc, #712]	@ (8005878 <atan+0x310>)
 80055b0:	429e      	cmp	r6, r3
 80055b2:	d813      	bhi.n	80055dc <atan+0x74>
 80055b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80055b8:	429e      	cmp	r6, r3
 80055ba:	d80c      	bhi.n	80055d6 <atan+0x6e>
 80055bc:	a392      	add	r3, pc, #584	@ (adr r3, 8005808 <atan+0x2a0>)
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	4620      	mov	r0, r4
 80055c4:	4629      	mov	r1, r5
 80055c6:	f7fa fe25 	bl	8000214 <__adddf3>
 80055ca:	4bac      	ldr	r3, [pc, #688]	@ (800587c <atan+0x314>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	f7fb fa67 	bl	8000aa0 <__aeabi_dcmpgt>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d1e7      	bne.n	80055a6 <atan+0x3e>
 80055d6:	f04f 3aff 	mov.w	sl, #4294967295
 80055da:	e029      	b.n	8005630 <atan+0xc8>
 80055dc:	f000 f95c 	bl	8005898 <fabs>
 80055e0:	4ba7      	ldr	r3, [pc, #668]	@ (8005880 <atan+0x318>)
 80055e2:	429e      	cmp	r6, r3
 80055e4:	ec55 4b10 	vmov	r4, r5, d0
 80055e8:	f200 80bc 	bhi.w	8005764 <atan+0x1fc>
 80055ec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80055f0:	429e      	cmp	r6, r3
 80055f2:	f200 809e 	bhi.w	8005732 <atan+0x1ca>
 80055f6:	4622      	mov	r2, r4
 80055f8:	462b      	mov	r3, r5
 80055fa:	4620      	mov	r0, r4
 80055fc:	4629      	mov	r1, r5
 80055fe:	f7fa fe09 	bl	8000214 <__adddf3>
 8005602:	4b9e      	ldr	r3, [pc, #632]	@ (800587c <atan+0x314>)
 8005604:	2200      	movs	r2, #0
 8005606:	f7fa fe03 	bl	8000210 <__aeabi_dsub>
 800560a:	2200      	movs	r2, #0
 800560c:	4606      	mov	r6, r0
 800560e:	460f      	mov	r7, r1
 8005610:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005614:	4620      	mov	r0, r4
 8005616:	4629      	mov	r1, r5
 8005618:	f7fa fdfc 	bl	8000214 <__adddf3>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4630      	mov	r0, r6
 8005622:	4639      	mov	r1, r7
 8005624:	f7fb f8d6 	bl	80007d4 <__aeabi_ddiv>
 8005628:	f04f 0a00 	mov.w	sl, #0
 800562c:	4604      	mov	r4, r0
 800562e:	460d      	mov	r5, r1
 8005630:	4622      	mov	r2, r4
 8005632:	462b      	mov	r3, r5
 8005634:	4620      	mov	r0, r4
 8005636:	4629      	mov	r1, r5
 8005638:	f7fa ffa2 	bl	8000580 <__aeabi_dmul>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4680      	mov	r8, r0
 8005642:	4689      	mov	r9, r1
 8005644:	f7fa ff9c 	bl	8000580 <__aeabi_dmul>
 8005648:	a371      	add	r3, pc, #452	@ (adr r3, 8005810 <atan+0x2a8>)
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	4606      	mov	r6, r0
 8005650:	460f      	mov	r7, r1
 8005652:	f7fa ff95 	bl	8000580 <__aeabi_dmul>
 8005656:	a370      	add	r3, pc, #448	@ (adr r3, 8005818 <atan+0x2b0>)
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f7fa fdda 	bl	8000214 <__adddf3>
 8005660:	4632      	mov	r2, r6
 8005662:	463b      	mov	r3, r7
 8005664:	f7fa ff8c 	bl	8000580 <__aeabi_dmul>
 8005668:	a36d      	add	r3, pc, #436	@ (adr r3, 8005820 <atan+0x2b8>)
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f7fa fdd1 	bl	8000214 <__adddf3>
 8005672:	4632      	mov	r2, r6
 8005674:	463b      	mov	r3, r7
 8005676:	f7fa ff83 	bl	8000580 <__aeabi_dmul>
 800567a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005828 <atan+0x2c0>)
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f7fa fdc8 	bl	8000214 <__adddf3>
 8005684:	4632      	mov	r2, r6
 8005686:	463b      	mov	r3, r7
 8005688:	f7fa ff7a 	bl	8000580 <__aeabi_dmul>
 800568c:	a368      	add	r3, pc, #416	@ (adr r3, 8005830 <atan+0x2c8>)
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f7fa fdbf 	bl	8000214 <__adddf3>
 8005696:	4632      	mov	r2, r6
 8005698:	463b      	mov	r3, r7
 800569a:	f7fa ff71 	bl	8000580 <__aeabi_dmul>
 800569e:	a366      	add	r3, pc, #408	@ (adr r3, 8005838 <atan+0x2d0>)
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f7fa fdb6 	bl	8000214 <__adddf3>
 80056a8:	4642      	mov	r2, r8
 80056aa:	464b      	mov	r3, r9
 80056ac:	f7fa ff68 	bl	8000580 <__aeabi_dmul>
 80056b0:	a363      	add	r3, pc, #396	@ (adr r3, 8005840 <atan+0x2d8>)
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	4680      	mov	r8, r0
 80056b8:	4689      	mov	r9, r1
 80056ba:	4630      	mov	r0, r6
 80056bc:	4639      	mov	r1, r7
 80056be:	f7fa ff5f 	bl	8000580 <__aeabi_dmul>
 80056c2:	a361      	add	r3, pc, #388	@ (adr r3, 8005848 <atan+0x2e0>)
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	f7fa fda2 	bl	8000210 <__aeabi_dsub>
 80056cc:	4632      	mov	r2, r6
 80056ce:	463b      	mov	r3, r7
 80056d0:	f7fa ff56 	bl	8000580 <__aeabi_dmul>
 80056d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8005850 <atan+0x2e8>)
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	f7fa fd99 	bl	8000210 <__aeabi_dsub>
 80056de:	4632      	mov	r2, r6
 80056e0:	463b      	mov	r3, r7
 80056e2:	f7fa ff4d 	bl	8000580 <__aeabi_dmul>
 80056e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8005858 <atan+0x2f0>)
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f7fa fd90 	bl	8000210 <__aeabi_dsub>
 80056f0:	4632      	mov	r2, r6
 80056f2:	463b      	mov	r3, r7
 80056f4:	f7fa ff44 	bl	8000580 <__aeabi_dmul>
 80056f8:	a359      	add	r3, pc, #356	@ (adr r3, 8005860 <atan+0x2f8>)
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f7fa fd87 	bl	8000210 <__aeabi_dsub>
 8005702:	4632      	mov	r2, r6
 8005704:	463b      	mov	r3, r7
 8005706:	f7fa ff3b 	bl	8000580 <__aeabi_dmul>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4640      	mov	r0, r8
 8005710:	4649      	mov	r1, r9
 8005712:	f7fa fd7f 	bl	8000214 <__adddf3>
 8005716:	4622      	mov	r2, r4
 8005718:	462b      	mov	r3, r5
 800571a:	f7fa ff31 	bl	8000580 <__aeabi_dmul>
 800571e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	d148      	bne.n	80057ba <atan+0x252>
 8005728:	4620      	mov	r0, r4
 800572a:	4629      	mov	r1, r5
 800572c:	f7fa fd70 	bl	8000210 <__aeabi_dsub>
 8005730:	e72f      	b.n	8005592 <atan+0x2a>
 8005732:	4b52      	ldr	r3, [pc, #328]	@ (800587c <atan+0x314>)
 8005734:	2200      	movs	r2, #0
 8005736:	4620      	mov	r0, r4
 8005738:	4629      	mov	r1, r5
 800573a:	f7fa fd69 	bl	8000210 <__aeabi_dsub>
 800573e:	4b4f      	ldr	r3, [pc, #316]	@ (800587c <atan+0x314>)
 8005740:	4606      	mov	r6, r0
 8005742:	460f      	mov	r7, r1
 8005744:	2200      	movs	r2, #0
 8005746:	4620      	mov	r0, r4
 8005748:	4629      	mov	r1, r5
 800574a:	f7fa fd63 	bl	8000214 <__adddf3>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4630      	mov	r0, r6
 8005754:	4639      	mov	r1, r7
 8005756:	f7fb f83d 	bl	80007d4 <__aeabi_ddiv>
 800575a:	f04f 0a01 	mov.w	sl, #1
 800575e:	4604      	mov	r4, r0
 8005760:	460d      	mov	r5, r1
 8005762:	e765      	b.n	8005630 <atan+0xc8>
 8005764:	4b47      	ldr	r3, [pc, #284]	@ (8005884 <atan+0x31c>)
 8005766:	429e      	cmp	r6, r3
 8005768:	d21c      	bcs.n	80057a4 <atan+0x23c>
 800576a:	4b47      	ldr	r3, [pc, #284]	@ (8005888 <atan+0x320>)
 800576c:	2200      	movs	r2, #0
 800576e:	4620      	mov	r0, r4
 8005770:	4629      	mov	r1, r5
 8005772:	f7fa fd4d 	bl	8000210 <__aeabi_dsub>
 8005776:	4b44      	ldr	r3, [pc, #272]	@ (8005888 <atan+0x320>)
 8005778:	4606      	mov	r6, r0
 800577a:	460f      	mov	r7, r1
 800577c:	2200      	movs	r2, #0
 800577e:	4620      	mov	r0, r4
 8005780:	4629      	mov	r1, r5
 8005782:	f7fa fefd 	bl	8000580 <__aeabi_dmul>
 8005786:	4b3d      	ldr	r3, [pc, #244]	@ (800587c <atan+0x314>)
 8005788:	2200      	movs	r2, #0
 800578a:	f7fa fd43 	bl	8000214 <__adddf3>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4630      	mov	r0, r6
 8005794:	4639      	mov	r1, r7
 8005796:	f7fb f81d 	bl	80007d4 <__aeabi_ddiv>
 800579a:	f04f 0a02 	mov.w	sl, #2
 800579e:	4604      	mov	r4, r0
 80057a0:	460d      	mov	r5, r1
 80057a2:	e745      	b.n	8005630 <atan+0xc8>
 80057a4:	4622      	mov	r2, r4
 80057a6:	462b      	mov	r3, r5
 80057a8:	4938      	ldr	r1, [pc, #224]	@ (800588c <atan+0x324>)
 80057aa:	2000      	movs	r0, #0
 80057ac:	f7fb f812 	bl	80007d4 <__aeabi_ddiv>
 80057b0:	f04f 0a03 	mov.w	sl, #3
 80057b4:	4604      	mov	r4, r0
 80057b6:	460d      	mov	r5, r1
 80057b8:	e73a      	b.n	8005630 <atan+0xc8>
 80057ba:	4b35      	ldr	r3, [pc, #212]	@ (8005890 <atan+0x328>)
 80057bc:	4e35      	ldr	r6, [pc, #212]	@ (8005894 <atan+0x32c>)
 80057be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f7fa fd23 	bl	8000210 <__aeabi_dsub>
 80057ca:	4622      	mov	r2, r4
 80057cc:	462b      	mov	r3, r5
 80057ce:	f7fa fd1f 	bl	8000210 <__aeabi_dsub>
 80057d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	e9d6 0100 	ldrd	r0, r1, [r6]
 80057de:	f7fa fd17 	bl	8000210 <__aeabi_dsub>
 80057e2:	f1bb 0f00 	cmp.w	fp, #0
 80057e6:	4604      	mov	r4, r0
 80057e8:	460d      	mov	r5, r1
 80057ea:	f6bf aedc 	bge.w	80055a6 <atan+0x3e>
 80057ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80057f2:	461d      	mov	r5, r3
 80057f4:	e6d7      	b.n	80055a6 <atan+0x3e>
 80057f6:	a51c      	add	r5, pc, #112	@ (adr r5, 8005868 <atan+0x300>)
 80057f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80057fc:	e6d3      	b.n	80055a6 <atan+0x3e>
 80057fe:	bf00      	nop
 8005800:	54442d18 	.word	0x54442d18
 8005804:	3ff921fb 	.word	0x3ff921fb
 8005808:	8800759c 	.word	0x8800759c
 800580c:	7e37e43c 	.word	0x7e37e43c
 8005810:	e322da11 	.word	0xe322da11
 8005814:	3f90ad3a 	.word	0x3f90ad3a
 8005818:	24760deb 	.word	0x24760deb
 800581c:	3fa97b4b 	.word	0x3fa97b4b
 8005820:	a0d03d51 	.word	0xa0d03d51
 8005824:	3fb10d66 	.word	0x3fb10d66
 8005828:	c54c206e 	.word	0xc54c206e
 800582c:	3fb745cd 	.word	0x3fb745cd
 8005830:	920083ff 	.word	0x920083ff
 8005834:	3fc24924 	.word	0x3fc24924
 8005838:	5555550d 	.word	0x5555550d
 800583c:	3fd55555 	.word	0x3fd55555
 8005840:	2c6a6c2f 	.word	0x2c6a6c2f
 8005844:	bfa2b444 	.word	0xbfa2b444
 8005848:	52defd9a 	.word	0x52defd9a
 800584c:	3fadde2d 	.word	0x3fadde2d
 8005850:	af749a6d 	.word	0xaf749a6d
 8005854:	3fb3b0f2 	.word	0x3fb3b0f2
 8005858:	fe231671 	.word	0xfe231671
 800585c:	3fbc71c6 	.word	0x3fbc71c6
 8005860:	9998ebc4 	.word	0x9998ebc4
 8005864:	3fc99999 	.word	0x3fc99999
 8005868:	54442d18 	.word	0x54442d18
 800586c:	bff921fb 	.word	0xbff921fb
 8005870:	440fffff 	.word	0x440fffff
 8005874:	7ff00000 	.word	0x7ff00000
 8005878:	3fdbffff 	.word	0x3fdbffff
 800587c:	3ff00000 	.word	0x3ff00000
 8005880:	3ff2ffff 	.word	0x3ff2ffff
 8005884:	40038000 	.word	0x40038000
 8005888:	3ff80000 	.word	0x3ff80000
 800588c:	bff00000 	.word	0xbff00000
 8005890:	08005960 	.word	0x08005960
 8005894:	08005980 	.word	0x08005980

08005898 <fabs>:
 8005898:	ec51 0b10 	vmov	r0, r1, d0
 800589c:	4602      	mov	r2, r0
 800589e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80058a2:	ec43 2b10 	vmov	d0, r2, r3
 80058a6:	4770      	bx	lr

080058a8 <_init>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr

080058b4 <_fini>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	bf00      	nop
 80058b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ba:	bc08      	pop	{r3}
 80058bc:	469e      	mov	lr, r3
 80058be:	4770      	bx	lr
