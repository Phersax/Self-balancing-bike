
mpu6050_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004220  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080043e8  080043e8  000053e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004458  08004458  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004458  08004458  00005458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004460  08004460  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004460  08004460  00005460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004464  08004464  00005464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004468  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000068  080044d0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  080044d0  00006240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000835b  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000195f  00000000  00000000  0000e3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0000fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069a  00000000  00000000  00010608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221bb  00000000  00000000  00010ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b65a  00000000  00000000  00032e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca510  00000000  00000000  0003e4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001089c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a18  00000000  00000000  00108a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0010b424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000068 	.word	0x20000068
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080043d0 	.word	0x080043d0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000006c 	.word	0x2000006c
 8000204:	080043d0 	.word	0x080043d0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a08:	f000 b96a 	b.w	8000ce0 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14e      	bne.n	8000ace <__udivmoddi4+0xaa>
 8000a30:	4694      	mov	ip, r2
 8000a32:	458c      	cmp	ip, r1
 8000a34:	4686      	mov	lr, r0
 8000a36:	fab2 f282 	clz	r2, r2
 8000a3a:	d962      	bls.n	8000b02 <__udivmoddi4+0xde>
 8000a3c:	b14a      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a3e:	f1c2 0320 	rsb	r3, r2, #32
 8000a42:	4091      	lsls	r1, r2
 8000a44:	fa20 f303 	lsr.w	r3, r0, r3
 8000a48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a56:	fa1f f68c 	uxth.w	r6, ip
 8000a5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a62:	fb07 1114 	mls	r1, r7, r4, r1
 8000a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6a:	fb04 f106 	mul.w	r1, r4, r6
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x64>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a7a:	f080 8112 	bcs.w	8000ca2 <__udivmoddi4+0x27e>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 810f 	bls.w	8000ca2 <__udivmoddi4+0x27e>
 8000a84:	3c02      	subs	r4, #2
 8000a86:	4463      	add	r3, ip
 8000a88:	1a59      	subs	r1, r3, r1
 8000a8a:	fa1f f38e 	uxth.w	r3, lr
 8000a8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a92:	fb07 1110 	mls	r1, r7, r0, r1
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f606 	mul.w	r6, r0, r6
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x94>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aaa:	f080 80fc 	bcs.w	8000ca6 <__udivmoddi4+0x282>
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	f240 80f9 	bls.w	8000ca6 <__udivmoddi4+0x282>
 8000ab4:	4463      	add	r3, ip
 8000ab6:	3802      	subs	r0, #2
 8000ab8:	1b9b      	subs	r3, r3, r6
 8000aba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000abe:	2100      	movs	r1, #0
 8000ac0:	b11d      	cbz	r5, 8000aca <__udivmoddi4+0xa6>
 8000ac2:	40d3      	lsrs	r3, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d905      	bls.n	8000ade <__udivmoddi4+0xba>
 8000ad2:	b10d      	cbz	r5, 8000ad8 <__udivmoddi4+0xb4>
 8000ad4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4608      	mov	r0, r1
 8000adc:	e7f5      	b.n	8000aca <__udivmoddi4+0xa6>
 8000ade:	fab3 f183 	clz	r1, r3
 8000ae2:	2900      	cmp	r1, #0
 8000ae4:	d146      	bne.n	8000b74 <__udivmoddi4+0x150>
 8000ae6:	42a3      	cmp	r3, r4
 8000ae8:	d302      	bcc.n	8000af0 <__udivmoddi4+0xcc>
 8000aea:	4290      	cmp	r0, r2
 8000aec:	f0c0 80f0 	bcc.w	8000cd0 <__udivmoddi4+0x2ac>
 8000af0:	1a86      	subs	r6, r0, r2
 8000af2:	eb64 0303 	sbc.w	r3, r4, r3
 8000af6:	2001      	movs	r0, #1
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d0e6      	beq.n	8000aca <__udivmoddi4+0xa6>
 8000afc:	e9c5 6300 	strd	r6, r3, [r5]
 8000b00:	e7e3      	b.n	8000aca <__udivmoddi4+0xa6>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	f040 8090 	bne.w	8000c28 <__udivmoddi4+0x204>
 8000b08:	eba1 040c 	sub.w	r4, r1, ip
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	fa1f f78c 	uxth.w	r7, ip
 8000b14:	2101      	movs	r1, #1
 8000b16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b26:	fb07 f006 	mul.w	r0, r7, r6
 8000b2a:	4298      	cmp	r0, r3
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x11c>
 8000b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x11a>
 8000b38:	4298      	cmp	r0, r3
 8000b3a:	f200 80cd 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b3e:	4626      	mov	r6, r4
 8000b40:	1a1c      	subs	r4, r3, r0
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b52:	fb00 f707 	mul.w	r7, r0, r7
 8000b56:	429f      	cmp	r7, r3
 8000b58:	d908      	bls.n	8000b6c <__udivmoddi4+0x148>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b62:	d202      	bcs.n	8000b6a <__udivmoddi4+0x146>
 8000b64:	429f      	cmp	r7, r3
 8000b66:	f200 80b0 	bhi.w	8000cca <__udivmoddi4+0x2a6>
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	1bdb      	subs	r3, r3, r7
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	e7a5      	b.n	8000ac0 <__udivmoddi4+0x9c>
 8000b74:	f1c1 0620 	rsb	r6, r1, #32
 8000b78:	408b      	lsls	r3, r1
 8000b7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b84:	fa04 f301 	lsl.w	r3, r4, r1
 8000b88:	ea43 030c 	orr.w	r3, r3, ip
 8000b8c:	40f4      	lsrs	r4, r6
 8000b8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b92:	0c38      	lsrs	r0, r7, #16
 8000b94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b98:	fbb4 fef0 	udiv	lr, r4, r0
 8000b9c:	fa1f fc87 	uxth.w	ip, r7
 8000ba0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ba4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bac:	45a1      	cmp	r9, r4
 8000bae:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb2:	d90a      	bls.n	8000bca <__udivmoddi4+0x1a6>
 8000bb4:	193c      	adds	r4, r7, r4
 8000bb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bba:	f080 8084 	bcs.w	8000cc6 <__udivmoddi4+0x2a2>
 8000bbe:	45a1      	cmp	r9, r4
 8000bc0:	f240 8081 	bls.w	8000cc6 <__udivmoddi4+0x2a2>
 8000bc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bc8:	443c      	add	r4, r7
 8000bca:	eba4 0409 	sub.w	r4, r4, r9
 8000bce:	fa1f f983 	uxth.w	r9, r3
 8000bd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000be2:	45a4      	cmp	ip, r4
 8000be4:	d907      	bls.n	8000bf6 <__udivmoddi4+0x1d2>
 8000be6:	193c      	adds	r4, r7, r4
 8000be8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bec:	d267      	bcs.n	8000cbe <__udivmoddi4+0x29a>
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0x29a>
 8000bf2:	3b02      	subs	r3, #2
 8000bf4:	443c      	add	r4, r7
 8000bf6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bfe:	eba4 040c 	sub.w	r4, r4, ip
 8000c02:	429c      	cmp	r4, r3
 8000c04:	46ce      	mov	lr, r9
 8000c06:	469c      	mov	ip, r3
 8000c08:	d351      	bcc.n	8000cae <__udivmoddi4+0x28a>
 8000c0a:	d04e      	beq.n	8000caa <__udivmoddi4+0x286>
 8000c0c:	b155      	cbz	r5, 8000c24 <__udivmoddi4+0x200>
 8000c0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c12:	eb64 040c 	sbc.w	r4, r4, ip
 8000c16:	fa04 f606 	lsl.w	r6, r4, r6
 8000c1a:	40cb      	lsrs	r3, r1
 8000c1c:	431e      	orrs	r6, r3
 8000c1e:	40cc      	lsrs	r4, r1
 8000c20:	e9c5 6400 	strd	r6, r4, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	e750      	b.n	8000aca <__udivmoddi4+0xa6>
 8000c28:	f1c2 0320 	rsb	r3, r2, #32
 8000c2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c34:	fa24 f303 	lsr.w	r3, r4, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	430c      	orrs	r4, r1
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c44:	fa1f f78c 	uxth.w	r7, ip
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c50:	0c23      	lsrs	r3, r4, #16
 8000c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c56:	fb00 f107 	mul.w	r1, r0, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x24c>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c66:	d22c      	bcs.n	8000cc2 <__udivmoddi4+0x29e>
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	d92a      	bls.n	8000cc2 <__udivmoddi4+0x29e>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c78:	fb08 3311 	mls	r3, r8, r1, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb01 f307 	mul.w	r3, r1, r7
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x276>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c90:	d213      	bcs.n	8000cba <__udivmoddi4+0x296>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d911      	bls.n	8000cba <__udivmoddi4+0x296>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4464      	add	r4, ip
 8000c9a:	1ae4      	subs	r4, r4, r3
 8000c9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ca0:	e739      	b.n	8000b16 <__udivmoddi4+0xf2>
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	e6f0      	b.n	8000a88 <__udivmoddi4+0x64>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e706      	b.n	8000ab8 <__udivmoddi4+0x94>
 8000caa:	45c8      	cmp	r8, r9
 8000cac:	d2ae      	bcs.n	8000c0c <__udivmoddi4+0x1e8>
 8000cae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cb6:	3801      	subs	r0, #1
 8000cb8:	e7a8      	b.n	8000c0c <__udivmoddi4+0x1e8>
 8000cba:	4631      	mov	r1, r6
 8000cbc:	e7ed      	b.n	8000c9a <__udivmoddi4+0x276>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	e799      	b.n	8000bf6 <__udivmoddi4+0x1d2>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e7d4      	b.n	8000c70 <__udivmoddi4+0x24c>
 8000cc6:	46d6      	mov	lr, sl
 8000cc8:	e77f      	b.n	8000bca <__udivmoddi4+0x1a6>
 8000cca:	4463      	add	r3, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	e74d      	b.n	8000b6c <__udivmoddi4+0x148>
 8000cd0:	4606      	mov	r6, r0
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e70f      	b.n	8000af8 <__udivmoddi4+0xd4>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	e730      	b.n	8000b40 <__udivmoddi4+0x11c>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce8:	f000 fc90 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cec:	f000 f858 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf0:	f000 f8f2 	bl	8000ed8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cf4:	f000 f8c2 	bl	8000e7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  mpu6050_init();
 8000cf8:	f000 f986 	bl	8001008 <mpu6050_init>
  calculate_gyroscope_bias();
 8000cfc:	f000 f936 	bl	8000f6c <calculate_gyroscope_bias>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ax = mpu6050_accx();
 8000d00:	f000 fa2a 	bl	8001158 <mpu6050_accx>
 8000d04:	4603      	mov	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <main+0x98>)
 8000d0a:	801a      	strh	r2, [r3, #0]
	ay = mpu6050_accy();
 8000d0c:	f000 fa3e 	bl	800118c <mpu6050_accy>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <main+0x9c>)
 8000d16:	801a      	strh	r2, [r3, #0]
	az = mpu6050_accz();
 8000d18:	f000 fa52 	bl	80011c0 <mpu6050_accz>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <main+0xa0>)
 8000d22:	801a      	strh	r2, [r3, #0]

	gx = mpu6050_gyrox() - gx_bias;
 8000d24:	f000 faa0 	bl	8001268 <mpu6050_gyrox>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <main+0xa4>)
 8000d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <main+0xa8>)
 8000d3c:	801a      	strh	r2, [r3, #0]
	gy = mpu6050_gyroy() - gy_bias;
 8000d3e:	f000 faaf 	bl	80012a0 <mpu6050_gyroy>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <main+0xac>)
 8000d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <main+0xb0>)
 8000d56:	801a      	strh	r2, [r3, #0]
	gz = mpu6050_gyroz() - gz_bias;
 8000d58:	f000 fabe 	bl	80012d8 <mpu6050_gyroz>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <main+0xb4>)
 8000d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <main+0xb8>)
 8000d70:	801a      	strh	r2, [r3, #0]

	HAL_Delay(100);
 8000d72:	2064      	movs	r0, #100	@ 0x64
 8000d74:	f000 fcbc 	bl	80016f0 <HAL_Delay>
	ax = mpu6050_accx();
 8000d78:	bf00      	nop
 8000d7a:	e7c1      	b.n	8000d00 <main+0x1c>
 8000d7c:	200000d8 	.word	0x200000d8
 8000d80:	200000da 	.word	0x200000da
 8000d84:	200000dc 	.word	0x200000dc
 8000d88:	200000e4 	.word	0x200000e4
 8000d8c:	200000de 	.word	0x200000de
 8000d90:	200000e6 	.word	0x200000e6
 8000d94:	200000e0 	.word	0x200000e0
 8000d98:	200000e8 	.word	0x200000e8
 8000d9c:	200000e2 	.word	0x200000e2

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	@ 0x50
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2234      	movs	r2, #52	@ 0x34
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 ff82 	bl	8003cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <SystemClock_Config+0xd4>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	4a29      	ldr	r2, [pc, #164]	@ (8000e74 <SystemClock_Config+0xd4>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd4:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <SystemClock_Config+0xd4>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000de0:	2300      	movs	r3, #0
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <SystemClock_Config+0xd8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dec:	4a22      	ldr	r2, [pc, #136]	@ (8000e78 <SystemClock_Config+0xd8>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <SystemClock_Config+0xd8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e14:	2310      	movs	r3, #16
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e18:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fb84 	bl	800353c <HAL_RCC_OscConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e3a:	f000 f891 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	230f      	movs	r3, #15
 8000e40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e42:	2302      	movs	r3, #2
 8000e44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 f838 	bl	8002ed0 <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e66:	f000 f87b 	bl	8000f60 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3750      	adds	r7, #80	@ 0x50
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000

08000e7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MX_I2C1_Init+0x50>)
 8000e82:	4a13      	ldr	r2, [pc, #76]	@ (8000ed0 <MX_I2C1_Init+0x54>)
 8000e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_I2C1_Init+0x50>)
 8000e88:	4a12      	ldr	r2, [pc, #72]	@ (8000ed4 <MX_I2C1_Init+0x58>)
 8000e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_I2C1_Init+0x50>)
 8000e9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <MX_I2C1_Init+0x50>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_I2C1_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <MX_I2C1_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_I2C1_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <MX_I2C1_Init+0x50>)
 8000eba:	f000 feb7 	bl	8001c2c <HAL_I2C_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ec4:	f000 f84c 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000084 	.word	0x20000084
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	000186a0 	.word	0x000186a0

08000ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a16      	ldr	r2, [pc, #88]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a08      	ldr	r2, [pc, #32]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <MX_GPIO_Init+0x84>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <Error_Handler+0x8>

08000f6c <calculate_gyroscope_bias>:
/* Define global variables */
short gx_bias = 0;
short gy_bias = 0;
short gz_bias = 0;

void calculate_gyroscope_bias() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
    int num_samples = 1000;  // Number of samples to average
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	607b      	str	r3, [r7, #4]
    long gx_sum = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
    long gy_sum = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
    long gz_sum = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < num_samples; i++) {
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	e01a      	b.n	8000fc0 <calculate_gyroscope_bias+0x54>
        gx_sum += mpu6050_gyrox();
 8000f8a:	f000 f96d 	bl	8001268 <mpu6050_gyrox>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	4413      	add	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
        gy_sum += mpu6050_gyroy();
 8000f98:	f000 f982 	bl	80012a0 <mpu6050_gyroy>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        gz_sum += mpu6050_gyroz();
 8000fa6:	f000 f997 	bl	80012d8 <mpu6050_gyroz>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
        HAL_Delay(1);  // Small delay to allow time between samples
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f000 fb9b 	bl	80016f0 <HAL_Delay>
    for (int i = 0; i < num_samples; i++) {
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbe0      	blt.n	8000f8a <calculate_gyroscope_bias+0x1e>
    }

    gx_bias = gx_sum / num_samples;
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <calculate_gyroscope_bias+0x90>)
 8000fd4:	801a      	strh	r2, [r3, #0]
    gy_bias = gy_sum / num_samples;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <calculate_gyroscope_bias+0x94>)
 8000fe2:	801a      	strh	r2, [r3, #0]
    gz_bias = gz_sum / num_samples;
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <calculate_gyroscope_bias+0x98>)
 8000ff0:	801a      	strh	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000e4 	.word	0x200000e4
 8001000:	200000e6 	.word	0x200000e6
 8001004:	200000e8 	.word	0x200000e8

08001008 <mpu6050_init>:

void mpu6050_init() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_IMU_ADDR, 1, 100);
 800100e:	2364      	movs	r3, #100	@ 0x64
 8001010:	2201      	movs	r2, #1
 8001012:	21d0      	movs	r1, #208	@ 0xd0
 8001014:	4826      	ldr	r0, [pc, #152]	@ (80010b0 <mpu6050_init+0xa8>)
 8001016:	f001 fa79 	bl	800250c <HAL_I2C_IsDeviceReady>
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
    if (status == HAL_OK) {
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d13e      	bne.n	80010a2 <mpu6050_init+0x9a>
        printf("MPU6050 is ready \n");
 8001024:	4823      	ldr	r0, [pc, #140]	@ (80010b4 <mpu6050_init+0xac>)
 8001026:	f002 fe3f 	bl	8003ca8 <puts>
        printf("MPU6050 configuration... \n");
 800102a:	4823      	ldr	r0, [pc, #140]	@ (80010b8 <mpu6050_init+0xb0>)
 800102c:	f002 fe3c 	bl	8003ca8 <puts>

        uint8_t data;

        // Power management register 0X6B must be all 0s to wake the sensor up
        data = 0x00;
 8001030:	2300      	movs	r3, #0
 8001032:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_IMU_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &data, 1, 100);
 8001034:	2364      	movs	r3, #100	@ 0x64
 8001036:	9302      	str	r3, [sp, #8]
 8001038:	2301      	movs	r3, #1
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	1dbb      	adds	r3, r7, #6
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	226b      	movs	r2, #107	@ 0x6b
 8001044:	21d0      	movs	r1, #208	@ 0xd0
 8001046:	481a      	ldr	r0, [pc, #104]	@ (80010b0 <mpu6050_init+0xa8>)
 8001048:	f000 ff34 	bl	8001eb4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        data = 0x07;
 800104c:	2307      	movs	r3, #7
 800104e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_IMU_ADDR, MPU6050_SMPLRT_DIV_REG, 1, &data, 1, 100);
 8001050:	2364      	movs	r3, #100	@ 0x64
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2301      	movs	r3, #1
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	1dbb      	adds	r3, r7, #6
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	2219      	movs	r2, #25
 8001060:	21d0      	movs	r1, #208	@ 0xd0
 8001062:	4813      	ldr	r0, [pc, #76]	@ (80010b0 <mpu6050_init+0xa8>)
 8001064:	f000 ff26 	bl	8001eb4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        data = MPU6050_FS_ACC_2G;
 8001068:	2300      	movs	r3, #0
 800106a:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_IMU_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &data, 1, 100);
 800106c:	2364      	movs	r3, #100	@ 0x64
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2301      	movs	r3, #1
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	221c      	movs	r2, #28
 800107c:	21d0      	movs	r1, #208	@ 0xd0
 800107e:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <mpu6050_init+0xa8>)
 8001080:	f000 ff18 	bl	8001eb4 <HAL_I2C_Mem_Write>

        // Set Gyroscope configuration in GYRO_CONFIG Register
        data = MPU6050_FS_GYRO_250;
 8001084:	2300      	movs	r3, #0
 8001086:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_IMU_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &data, 1, 100);
 8001088:	2364      	movs	r3, #100	@ 0x64
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	1dbb      	adds	r3, r7, #6
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	221b      	movs	r2, #27
 8001098:	21d0      	movs	r1, #208	@ 0xd0
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <mpu6050_init+0xa8>)
 800109c:	f000 ff0a 	bl	8001eb4 <HAL_I2C_Mem_Write>
    } else {
        printf("MPU6050 error, check connection cables \n");
    }
}
 80010a0:	e002      	b.n	80010a8 <mpu6050_init+0xa0>
        printf("MPU6050 error, check connection cables \n");
 80010a2:	4806      	ldr	r0, [pc, #24]	@ (80010bc <mpu6050_init+0xb4>)
 80010a4:	f002 fe00 	bl	8003ca8 <puts>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000084 	.word	0x20000084
 80010b4:	080043e8 	.word	0x080043e8
 80010b8:	080043fc 	.word	0x080043fc
 80010bc:	08004418 	.word	0x08004418

080010c0 <mpu6050_read_data>:

// Read MPU6050 Data
void mpu6050_read_data(uint8_t* buffer) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_IMU_ADDR, MPU6050_ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, 200);
 80010c8:	23c8      	movs	r3, #200	@ 0xc8
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	230e      	movs	r3, #14
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	223b      	movs	r2, #59	@ 0x3b
 80010d8:	21d0      	movs	r1, #208	@ 0xd0
 80010da:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <mpu6050_read_data+0x28>)
 80010dc:	f000 ffe4 	bl	80020a8 <HAL_I2C_Mem_Read>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000084 	.word	0x20000084

080010ec <mpu6050_raw_accx>:

// Accelerometer readings
int16_t mpu6050_raw_accx() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
    uint8_t buffer[14];
    mpu6050_read_data(buffer);
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ffe3 	bl	80010c0 <mpu6050_read_data>
    return (buffer[0] << 8) | buffer[1];
 80010fa:	783b      	ldrb	r3, [r7, #0]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21a      	sxth	r2, r3
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b21b      	sxth	r3, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <mpu6050_raw_accy>:

int16_t mpu6050_raw_accy() {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
    uint8_t buffer[14];
    mpu6050_read_data(buffer);
 8001116:	463b      	mov	r3, r7
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ffd1 	bl	80010c0 <mpu6050_read_data>
    return (buffer[2] << 8) | buffer[3];
 800111e:	78bb      	ldrb	r3, [r7, #2]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	b21a      	sxth	r2, r3
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21b      	sxth	r3, r3
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <mpu6050_raw_accz>:

int16_t mpu6050_raw_accz() {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
    uint8_t buffer[14];
    mpu6050_read_data(buffer);
 800113a:	463b      	mov	r3, r7
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffbf 	bl	80010c0 <mpu6050_read_data>
    return (buffer[4] << 8) | buffer[5];
 8001142:	793b      	ldrb	r3, [r7, #4]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	797b      	ldrb	r3, [r7, #5]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <mpu6050_accx>:

int16_t mpu6050_accx() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
    return mpu6050_raw_accx() / 16384.0;
 800115c:	f7ff ffc6 	bl	80010ec <mpu6050_raw_accx>
 8001160:	4603      	mov	r3, r0
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9a2 	bl	80004ac <__aeabi_i2d>
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <mpu6050_accx+0x30>)
 800116e:	f7ff fb31 	bl	80007d4 <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fc13 	bl	80009a4 <__aeabi_d2iz>
 800117e:	4603      	mov	r3, r0
 8001180:	b21b      	sxth	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40d00000 	.word	0x40d00000

0800118c <mpu6050_accy>:

int16_t mpu6050_accy() {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	return mpu6050_raw_accy() / 16384.0;
 8001190:	f7ff ffbe 	bl	8001110 <mpu6050_raw_accy>
 8001194:	4603      	mov	r3, r0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f988 	bl	80004ac <__aeabi_i2d>
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <mpu6050_accy+0x30>)
 80011a2:	f7ff fb17 	bl	80007d4 <__aeabi_ddiv>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fbf9 	bl	80009a4 <__aeabi_d2iz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b21b      	sxth	r3, r3
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40d00000 	.word	0x40d00000

080011c0 <mpu6050_accz>:

int16_t mpu6050_accz() {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	return mpu6050_raw_accz() / 14418.0;
 80011c4:	f7ff ffb6 	bl	8001134 <mpu6050_raw_accz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f96e 	bl	80004ac <__aeabi_i2d>
 80011d0:	a307      	add	r3, pc, #28	@ (adr r3, 80011f0 <mpu6050_accz+0x30>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fafd 	bl	80007d4 <__aeabi_ddiv>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff fbdf 	bl	80009a4 <__aeabi_d2iz>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b21b      	sxth	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40cc2900 	.word	0x40cc2900

080011f8 <mpu6050_raw_gyrox>:
    return (buffer[6] << 8) | buffer[7];
}


// Gyroscope readings
int16_t mpu6050_raw_gyrox() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
    uint8_t buffer[14];
    mpu6050_read_data(buffer);
 80011fe:	463b      	mov	r3, r7
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5d 	bl	80010c0 <mpu6050_read_data>
    return (buffer[8] << 8) | buffer[9];
 8001206:	7a3b      	ldrb	r3, [r7, #8]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21a      	sxth	r2, r3
 800120c:	7a7b      	ldrb	r3, [r7, #9]
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21b      	sxth	r3, r3
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <mpu6050_raw_gyroy>:

int16_t mpu6050_raw_gyroy() {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
    uint8_t buffer[14];
    mpu6050_read_data(buffer);
 8001222:	463b      	mov	r3, r7
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff4b 	bl	80010c0 <mpu6050_read_data>
    return (buffer[10] << 8) | buffer[11];
 800122a:	7abb      	ldrb	r3, [r7, #10]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21a      	sxth	r2, r3
 8001230:	7afb      	ldrb	r3, [r7, #11]
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b21b      	sxth	r3, r3
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <mpu6050_raw_gyroz>:

int16_t mpu6050_raw_gyroz() {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
    uint8_t buffer[14];
    mpu6050_read_data(buffer);
 8001246:	463b      	mov	r3, r7
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff39 	bl	80010c0 <mpu6050_read_data>
    return (buffer[12] << 8) | buffer[13];
 800124e:	7b3b      	ldrb	r3, [r7, #12]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	7b7b      	ldrb	r3, [r7, #13]
 8001256:	b21b      	sxth	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	b21b      	sxth	r3, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0000      	movs	r0, r0
	...

08001268 <mpu6050_gyrox>:

int16_t mpu6050_gyrox() {
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	return mpu6050_raw_gyrox() / 131.0;
 800126c:	f7ff ffc4 	bl	80011f8 <mpu6050_raw_gyrox>
 8001270:	4603      	mov	r3, r0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f91a 	bl	80004ac <__aeabi_i2d>
 8001278:	a307      	add	r3, pc, #28	@ (adr r3, 8001298 <mpu6050_gyrox+0x30>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff faa9 	bl	80007d4 <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fb8b 	bl	80009a4 <__aeabi_d2iz>
 800128e:	4603      	mov	r3, r0
 8001290:	b21b      	sxth	r3, r3
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	00000000 	.word	0x00000000
 800129c:	40606000 	.word	0x40606000

080012a0 <mpu6050_gyroy>:

int16_t mpu6050_gyroy() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	return mpu6050_raw_gyroy() / 131.0;
 80012a4:	f7ff ffba 	bl	800121c <mpu6050_raw_gyroy>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8fe 	bl	80004ac <__aeabi_i2d>
 80012b0:	a307      	add	r3, pc, #28	@ (adr r3, 80012d0 <mpu6050_gyroy+0x30>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff fa8d 	bl	80007d4 <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fb6f 	bl	80009a4 <__aeabi_d2iz>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b21b      	sxth	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40606000 	.word	0x40606000

080012d8 <mpu6050_gyroz>:

int16_t mpu6050_gyroz() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	return mpu6050_raw_gyroz() / 131.0;
 80012dc:	f7ff ffb0 	bl	8001240 <mpu6050_raw_gyroz>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f8e2 	bl	80004ac <__aeabi_i2d>
 80012e8:	a307      	add	r3, pc, #28	@ (adr r3, 8001308 <mpu6050_gyroz+0x30>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff fa71 	bl	80007d4 <__aeabi_ddiv>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fb53 	bl	80009a4 <__aeabi_d2iz>
 80012fe:	4603      	mov	r3, r0
 8001300:	b21b      	sxth	r3, r3
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	00000000 	.word	0x00000000
 800130c:	40606000 	.word	0x40606000

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	4a0f      	ldr	r2, [pc, #60]	@ (800135c <HAL_MspInit+0x4c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001324:	6453      	str	r3, [r2, #68]	@ 0x44
 8001326:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	4a08      	ldr	r2, [pc, #32]	@ (800135c <HAL_MspInit+0x4c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	@ 0x40
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800134e:	2007      	movs	r0, #7
 8001350:	f000 faa4 	bl	800189c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	@ 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	@ (80013e4 <HAL_I2C_MspInit+0x84>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12c      	bne.n	80013dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <HAL_I2C_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <HAL_I2C_MspInit+0x88>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <HAL_I2C_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800139e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a4:	2312      	movs	r3, #18
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b0:	2304      	movs	r3, #4
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	480c      	ldr	r0, [pc, #48]	@ (80013ec <HAL_I2C_MspInit+0x8c>)
 80013bc:	f000 faa2 	bl	8001904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <HAL_I2C_MspInit+0x88>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c8:	4a07      	ldr	r2, [pc, #28]	@ (80013e8 <HAL_I2C_MspInit+0x88>)
 80013ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <HAL_I2C_MspInit+0x88>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	@ 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40005400 	.word	0x40005400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020400 	.word	0x40020400

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <NMI_Handler+0x4>

080013f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <MemManage_Handler+0x4>

08001408 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <UsageFault_Handler+0x4>

08001418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001446:	f000 f933 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}

0800144e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e00a      	b.n	8001476 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001460:	f3af 8000 	nop.w
 8001464:	4601      	mov	r1, r0
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	60ba      	str	r2, [r7, #8]
 800146c:	b2ca      	uxtb	r2, r1
 800146e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	dbf0      	blt.n	8001460 <_read+0x12>
  }

  return len;
 800147e:	687b      	ldr	r3, [r7, #4]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e009      	b.n	80014ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	60ba      	str	r2, [r7, #8]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3301      	adds	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dbf1      	blt.n	800149a <_write+0x12>
  }
  return len;
 80014b6:	687b      	ldr	r3, [r7, #4]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_close>:

int _close(int file)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e8:	605a      	str	r2, [r3, #4]
  return 0;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_isatty>:

int _isatty(int file)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001500:	2301      	movs	r3, #1
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	@ (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f002 fbb6 	bl	8003cc8 <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	@ (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20020000 	.word	0x20020000
 8001588:	00000400 	.word	0x00000400
 800158c:	200000ec 	.word	0x200000ec
 8001590:	20000240 	.word	0x20000240

08001594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015bc:	f7ff ffea 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c2:	490d      	ldr	r1, [pc, #52]	@ (80015f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001604 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f002 fb75 	bl	8003cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ea:	f7ff fb7b 	bl	8000ce4 <main>
  bx  lr    
 80015ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015fc:	08004468 	.word	0x08004468
  ldr r2, =_sbss
 8001600:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001604:	20000240 	.word	0x20000240

08001608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <HAL_Init+0x40>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800161a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_Init+0x40>)
 8001622:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001626:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	@ (800164c <HAL_Init+0x40>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 f931 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fe66 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f93b 	bl	80018ea <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800168c:	f000 f911 	bl	80018b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	@ (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000008 	.word	0x20000008
 80016d4:	200000f0 	.word	0x200000f0

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	200000f0 	.word	0x200000f0

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ffee 	bl	80016d8 <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffde 	bl	80016d8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008

08001738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <__NVIC_SetPriorityGrouping+0x44>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001754:	4013      	ands	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001760:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176a:	4a04      	ldr	r2, [pc, #16]	@ (800177c <__NVIC_SetPriorityGrouping+0x44>)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	60d3      	str	r3, [r2, #12]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <__NVIC_GetPriorityGrouping+0x18>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	f003 0307 	and.w	r3, r3, #7
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	@ (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	@ (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	@ 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	@ 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800187c:	f7ff ff8e 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff47 	bl	8001738 <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff5c 	bl	8001780 <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff8e 	bl	80017f0 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5d 	bl	800179c <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffb0 	bl	8001858 <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	@ 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e165      	b.n	8001bec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8154 	bne.w	8001be6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d005      	beq.n	8001956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	2b02      	cmp	r3, #2
 8001954:	d130      	bne.n	80019b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80ae 	beq.w	8001be6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a5c      	ldr	r2, [pc, #368]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa6:	4a58      	ldr	r2, [pc, #352]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c0c <HAL_GPIO_Init+0x308>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d025      	beq.n	8001b1e <HAL_GPIO_Init+0x21a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c10 <HAL_GPIO_Init+0x30c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01f      	beq.n	8001b1a <HAL_GPIO_Init+0x216>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4d      	ldr	r2, [pc, #308]	@ (8001c14 <HAL_GPIO_Init+0x310>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x212>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8001c18 <HAL_GPIO_Init+0x314>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x20e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4b      	ldr	r2, [pc, #300]	@ (8001c1c <HAL_GPIO_Init+0x318>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x20a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4a      	ldr	r2, [pc, #296]	@ (8001c20 <HAL_GPIO_Init+0x31c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x206>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a49      	ldr	r2, [pc, #292]	@ (8001c24 <HAL_GPIO_Init+0x320>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x202>
 8001b02:	2306      	movs	r3, #6
 8001b04:	e00c      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b06:	2307      	movs	r3, #7
 8001b08:	e00a      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	e008      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b12:	2303      	movs	r3, #3
 8001b14:	e004      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f002 0203 	and.w	r2, r2, #3
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	4093      	lsls	r3, r2
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b30:	4935      	ldr	r1, [pc, #212]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b62:	4a31      	ldr	r2, [pc, #196]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b68:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b8c:	4a26      	ldr	r2, [pc, #152]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b92:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be0:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	f67f ae96 	bls.w	8001920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3724      	adds	r7, #36	@ 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40021400 	.word	0x40021400
 8001c24:	40021800 	.word	0x40021800
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e12b      	b.n	8001e96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fb84 	bl	8001360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2224      	movs	r2, #36	@ 0x24
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c90:	f001 fa10 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 8001c94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4a81      	ldr	r2, [pc, #516]	@ (8001ea0 <HAL_I2C_Init+0x274>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d807      	bhi.n	8001cb0 <HAL_I2C_Init+0x84>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4a80      	ldr	r2, [pc, #512]	@ (8001ea4 <HAL_I2C_Init+0x278>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	bf94      	ite	ls
 8001ca8:	2301      	movls	r3, #1
 8001caa:	2300      	movhi	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	e006      	b.n	8001cbe <HAL_I2C_Init+0x92>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ea8 <HAL_I2C_Init+0x27c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	bf94      	ite	ls
 8001cb8:	2301      	movls	r3, #1
 8001cba:	2300      	movhi	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0e7      	b.n	8001e96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a78      	ldr	r2, [pc, #480]	@ (8001eac <HAL_I2C_Init+0x280>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0c9b      	lsrs	r3, r3, #18
 8001cd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a6a      	ldr	r2, [pc, #424]	@ (8001ea0 <HAL_I2C_Init+0x274>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d802      	bhi.n	8001d00 <HAL_I2C_Init+0xd4>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	e009      	b.n	8001d14 <HAL_I2C_Init+0xe8>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	4a69      	ldr	r2, [pc, #420]	@ (8001eb0 <HAL_I2C_Init+0x284>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	3301      	adds	r3, #1
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	495c      	ldr	r1, [pc, #368]	@ (8001ea0 <HAL_I2C_Init+0x274>)
 8001d30:	428b      	cmp	r3, r1
 8001d32:	d819      	bhi.n	8001d68 <HAL_I2C_Init+0x13c>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1e59      	subs	r1, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d42:	1c59      	adds	r1, r3, #1
 8001d44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d48:	400b      	ands	r3, r1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00a      	beq.n	8001d64 <HAL_I2C_Init+0x138>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1e59      	subs	r1, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d62:	e051      	b.n	8001e08 <HAL_I2C_Init+0x1dc>
 8001d64:	2304      	movs	r3, #4
 8001d66:	e04f      	b.n	8001e08 <HAL_I2C_Init+0x1dc>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d111      	bne.n	8001d94 <HAL_I2C_Init+0x168>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e58      	subs	r0, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	440b      	add	r3, r1
 8001d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d82:	3301      	adds	r3, #1
 8001d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	e012      	b.n	8001dba <HAL_I2C_Init+0x18e>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1e58      	subs	r0, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	0099      	lsls	r1, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001daa:	3301      	adds	r3, #1
 8001dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_Init+0x196>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e022      	b.n	8001e08 <HAL_I2C_Init+0x1dc>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10e      	bne.n	8001de8 <HAL_I2C_Init+0x1bc>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1e58      	subs	r0, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	440b      	add	r3, r1
 8001dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001de6:	e00f      	b.n	8001e08 <HAL_I2C_Init+0x1dc>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e58      	subs	r0, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	0099      	lsls	r1, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	6809      	ldr	r1, [r1, #0]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6911      	ldr	r1, [r2, #16]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68d2      	ldr	r2, [r2, #12]
 8001e42:	4311      	orrs	r1, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2220      	movs	r2, #32
 8001e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	000186a0 	.word	0x000186a0
 8001ea4:	001e847f 	.word	0x001e847f
 8001ea8:	003d08ff 	.word	0x003d08ff
 8001eac:	431bde83 	.word	0x431bde83
 8001eb0:	10624dd3 	.word	0x10624dd3

08001eb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	817b      	strh	r3, [r7, #10]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	813b      	strh	r3, [r7, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ece:	f7ff fc03 	bl	80016d8 <HAL_GetTick>
 8001ed2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	f040 80d9 	bne.w	8002094 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2319      	movs	r3, #25
 8001ee8:	2201      	movs	r2, #1
 8001eea:	496d      	ldr	r1, [pc, #436]	@ (80020a0 <HAL_I2C_Mem_Write+0x1ec>)
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fdb9 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0cc      	b.n	8002096 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_I2C_Mem_Write+0x56>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e0c5      	b.n	8002096 <HAL_I2C_Mem_Write+0x1e2>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d007      	beq.n	8001f30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2221      	movs	r2, #33	@ 0x21
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2240      	movs	r2, #64	@ 0x40
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a3a      	ldr	r2, [r7, #32]
 8001f5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a4d      	ldr	r2, [pc, #308]	@ (80020a4 <HAL_I2C_Mem_Write+0x1f0>)
 8001f70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f72:	88f8      	ldrh	r0, [r7, #6]
 8001f74:	893a      	ldrh	r2, [r7, #8]
 8001f76:	8979      	ldrh	r1, [r7, #10]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	4603      	mov	r3, r0
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fbf0 	bl	8002768 <I2C_RequestMemoryWrite>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d052      	beq.n	8002034 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e081      	b.n	8002096 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 fe7e 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d107      	bne.n	8001fba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e06b      	b.n	8002096 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d11b      	bne.n	8002034 <HAL_I2C_Mem_Write+0x180>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d017      	beq.n	8002034 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	781a      	ldrb	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1aa      	bne.n	8001f92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fe71 	bl	8002d28 <I2C_WaitOnBTFFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	2b04      	cmp	r3, #4
 8002052:	d107      	bne.n	8002064 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002062:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e016      	b.n	8002096 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	e000      	b.n	8002096 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002094:	2302      	movs	r3, #2
  }
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	00100002 	.word	0x00100002
 80020a4:	ffff0000 	.word	0xffff0000

080020a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	@ 0x30
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	4608      	mov	r0, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	817b      	strh	r3, [r7, #10]
 80020ba:	460b      	mov	r3, r1
 80020bc:	813b      	strh	r3, [r7, #8]
 80020be:	4613      	mov	r3, r2
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020c2:	f7ff fb09 	bl	80016d8 <HAL_GetTick>
 80020c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	f040 8214 	bne.w	80024fe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2319      	movs	r3, #25
 80020dc:	2201      	movs	r2, #1
 80020de:	497b      	ldr	r1, [pc, #492]	@ (80022cc <HAL_I2C_Mem_Read+0x224>)
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fcbf 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
 80020ee:	e207      	b.n	8002500 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_I2C_Mem_Read+0x56>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e200      	b.n	8002500 <HAL_I2C_Mem_Read+0x458>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d007      	beq.n	8002124 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002132:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2222      	movs	r2, #34	@ 0x22
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2240      	movs	r2, #64	@ 0x40
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800214e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002154:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a5b      	ldr	r2, [pc, #364]	@ (80022d0 <HAL_I2C_Mem_Read+0x228>)
 8002164:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002166:	88f8      	ldrh	r0, [r7, #6]
 8002168:	893a      	ldrh	r2, [r7, #8]
 800216a:	8979      	ldrh	r1, [r7, #10]
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4603      	mov	r3, r0
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fb8c 	bl	8002894 <I2C_RequestMemoryRead>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e1bc      	b.n	8002500 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218a:	2b00      	cmp	r3, #0
 800218c:	d113      	bne.n	80021b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e190      	b.n	80024d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d11b      	bne.n	80021f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e170      	b.n	80024d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d11b      	bne.n	8002236 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800220c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800221c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	e150      	b.n	80024d8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800224c:	e144      	b.n	80024d8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002252:	2b03      	cmp	r3, #3
 8002254:	f200 80f1 	bhi.w	800243a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225c:	2b01      	cmp	r3, #1
 800225e:	d123      	bne.n	80022a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002262:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fda7 	bl	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e145      	b.n	8002500 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022a6:	e117      	b.n	80024d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d14e      	bne.n	800234e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b6:	2200      	movs	r2, #0
 80022b8:	4906      	ldr	r1, [pc, #24]	@ (80022d4 <HAL_I2C_Mem_Read+0x22c>)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fbd2 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e11a      	b.n	8002500 <HAL_I2C_Mem_Read+0x458>
 80022ca:	bf00      	nop
 80022cc:	00100002 	.word	0x00100002
 80022d0:	ffff0000 	.word	0xffff0000
 80022d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800234c:	e0c4      	b.n	80024d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002354:	2200      	movs	r2, #0
 8002356:	496c      	ldr	r1, [pc, #432]	@ (8002508 <HAL_I2C_Mem_Read+0x460>)
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fb83 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0cb      	b.n	8002500 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002376:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b0:	2200      	movs	r2, #0
 80023b2:	4955      	ldr	r1, [pc, #340]	@ (8002508 <HAL_I2C_Mem_Read+0x460>)
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fb55 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e09d      	b.n	8002500 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002438:	e04e      	b.n	80024d8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fcba 	bl	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e058      	b.n	8002500 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b04      	cmp	r3, #4
 800248c:	d124      	bne.n	80024d8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002492:	2b03      	cmp	r3, #3
 8002494:	d107      	bne.n	80024a6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f aeb6 	bne.w	800224e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
  }
}
 8002500:	4618      	mov	r0, r3
 8002502:	3728      	adds	r7, #40	@ 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	00010004 	.word	0x00010004

0800250c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	460b      	mov	r3, r1
 800251a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff f8dc 	bl	80016d8 <HAL_GetTick>
 8002520:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b20      	cmp	r3, #32
 8002530:	f040 8111 	bne.w	8002756 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2319      	movs	r3, #25
 800253a:	2201      	movs	r2, #1
 800253c:	4988      	ldr	r1, [pc, #544]	@ (8002760 <HAL_I2C_IsDeviceReady+0x254>)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa90 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800254a:	2302      	movs	r3, #2
 800254c:	e104      	b.n	8002758 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_I2C_IsDeviceReady+0x50>
 8002558:	2302      	movs	r3, #2
 800255a:	e0fd      	b.n	8002758 <HAL_I2C_IsDeviceReady+0x24c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d007      	beq.n	8002582 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002590:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2224      	movs	r2, #36	@ 0x24
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a70      	ldr	r2, [pc, #448]	@ (8002764 <HAL_I2C_IsDeviceReady+0x258>)
 80025a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2200      	movs	r2, #0
 80025be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fa4e 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00d      	beq.n	80025ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025dc:	d103      	bne.n	80025e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025e4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e0b6      	b.n	8002758 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ea:	897b      	ldrh	r3, [r7, #10]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025fa:	f7ff f86d 	bl	80016d8 <HAL_GetTick>
 80025fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b02      	cmp	r3, #2
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002624:	bf0c      	ite	eq
 8002626:	2301      	moveq	r3, #1
 8002628:	2300      	movne	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800262e:	e025      	b.n	800267c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002630:	f7ff f852 	bl	80016d8 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d302      	bcc.n	8002646 <HAL_I2C_IsDeviceReady+0x13a>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d103      	bne.n	800264e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	22a0      	movs	r2, #160	@ 0xa0
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b02      	cmp	r3, #2
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2ba0      	cmp	r3, #160	@ 0xa0
 8002686:	d005      	beq.n	8002694 <HAL_I2C_IsDeviceReady+0x188>
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_I2C_IsDeviceReady+0x188>
 800268e:	7dbb      	ldrb	r3, [r7, #22]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0cd      	beq.n	8002630 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d129      	bne.n	80026fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2319      	movs	r3, #25
 80026d6:	2201      	movs	r2, #1
 80026d8:	4921      	ldr	r1, [pc, #132]	@ (8002760 <HAL_I2C_IsDeviceReady+0x254>)
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f9c2 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e036      	b.n	8002758 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e02c      	b.n	8002758 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800270c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002716:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2319      	movs	r3, #25
 800271e:	2201      	movs	r2, #1
 8002720:	490f      	ldr	r1, [pc, #60]	@ (8002760 <HAL_I2C_IsDeviceReady+0x254>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f99e 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e012      	b.n	8002758 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	3301      	adds	r3, #1
 8002736:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	f4ff af32 	bcc.w	80025a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	00100002 	.word	0x00100002
 8002764:	ffff0000 	.word	0xffff0000

08002768 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	4608      	mov	r0, r1
 8002772:	4611      	mov	r1, r2
 8002774:	461a      	mov	r2, r3
 8002776:	4603      	mov	r3, r0
 8002778:	817b      	strh	r3, [r7, #10]
 800277a:	460b      	mov	r3, r1
 800277c:	813b      	strh	r3, [r7, #8]
 800277e:	4613      	mov	r3, r2
 8002780:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	2200      	movs	r2, #0
 800279a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f960 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027b8:	d103      	bne.n	80027c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e05f      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027c6:	897b      	ldrh	r3, [r7, #10]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	492d      	ldr	r1, [pc, #180]	@ (8002890 <I2C_RequestMemoryWrite+0x128>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f9bb 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e04c      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002804:	6a39      	ldr	r1, [r7, #32]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fa46 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00d      	beq.n	800282e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	2b04      	cmp	r3, #4
 8002818:	d107      	bne.n	800282a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e02b      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002834:	893b      	ldrh	r3, [r7, #8]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]
 800283e:	e021      	b.n	8002884 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002840:	893b      	ldrh	r3, [r7, #8]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b29b      	uxth	r3, r3
 8002846:	b2da      	uxtb	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fa20 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	2b04      	cmp	r3, #4
 8002864:	d107      	bne.n	8002876 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e005      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800287a:	893b      	ldrh	r3, [r7, #8]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	00010002 	.word	0x00010002

08002894 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	4608      	mov	r0, r1
 800289e:	4611      	mov	r1, r2
 80028a0:	461a      	mov	r2, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	817b      	strh	r3, [r7, #10]
 80028a6:	460b      	mov	r3, r1
 80028a8:	813b      	strh	r3, [r7, #8]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f8c2 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028f4:	d103      	bne.n	80028fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e0aa      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002902:	897b      	ldrh	r3, [r7, #10]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002910:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	4952      	ldr	r1, [pc, #328]	@ (8002a60 <I2C_RequestMemoryRead+0x1cc>)
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f91d 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e097      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800293e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002940:	6a39      	ldr	r1, [r7, #32]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f9a8 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00d      	beq.n	800296a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2b04      	cmp	r3, #4
 8002954:	d107      	bne.n	8002966 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002964:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e076      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002970:	893b      	ldrh	r3, [r7, #8]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	611a      	str	r2, [r3, #16]
 800297a:	e021      	b.n	80029c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800297c:	893b      	ldrh	r3, [r7, #8]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	b29b      	uxth	r3, r3
 8002982:	b2da      	uxtb	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800298a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298c:	6a39      	ldr	r1, [r7, #32]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f982 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d107      	bne.n	80029b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e050      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029b6:	893b      	ldrh	r3, [r7, #8]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c2:	6a39      	ldr	r1, [r7, #32]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f967 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d107      	bne.n	80029e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e035      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f82b 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00d      	beq.n	8002a30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a22:	d103      	bne.n	8002a2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e013      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	6a3a      	ldr	r2, [r7, #32]
 8002a44:	4906      	ldr	r1, [pc, #24]	@ (8002a60 <I2C_RequestMemoryRead+0x1cc>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f886 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	00010002 	.word	0x00010002

08002a64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a74:	e048      	b.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a7c:	d044      	beq.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7fe fe2b 	bl	80016d8 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d139      	bne.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10d      	bne.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	e00c      	b.n	8002ad4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d116      	bne.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e023      	b.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	0c1b      	lsrs	r3, r3, #16
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10d      	bne.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	e00c      	b.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	43da      	mvns	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d093      	beq.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b66:	e071      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b76:	d123      	bne.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	f043 0204 	orr.w	r2, r3, #4
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e067      	b.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bc6:	d041      	beq.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc8:	f7fe fd86 	bl	80016d8 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d302      	bcc.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d136      	bne.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10c      	bne.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	e00b      	b.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e021      	b.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	0c1b      	lsrs	r3, r3, #16
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d10c      	bne.n	8002c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4013      	ands	r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e00b      	b.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f47f af6d 	bne.w	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ca4:	e034      	b.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f8e3 	bl	8002e72 <I2C_IsAcknowledgeFailed>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e034      	b.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cbc:	d028      	beq.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbe:	f7fe fd0b 	bl	80016d8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d302      	bcc.n	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11d      	bne.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cde:	2b80      	cmp	r3, #128	@ 0x80
 8002ce0:	d016      	beq.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e007      	b.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1a:	2b80      	cmp	r3, #128	@ 0x80
 8002d1c:	d1c3      	bne.n	8002ca6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d34:	e034      	b.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f89b 	bl	8002e72 <I2C_IsAcknowledgeFailed>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e034      	b.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d4c:	d028      	beq.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fe fcc3 	bl	80016d8 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d11d      	bne.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d016      	beq.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e007      	b.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d1c3      	bne.n	8002d36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dc4:	e049      	b.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d119      	bne.n	8002e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0210 	mvn.w	r2, #16
 8002ddc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e030      	b.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e08:	f7fe fc66 	bl	80016d8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d302      	bcc.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11d      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e28:	2b40      	cmp	r3, #64	@ 0x40
 8002e2a:	d016      	beq.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e007      	b.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e64:	2b40      	cmp	r3, #64	@ 0x40
 8002e66:	d1ae      	bne.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e88:	d11b      	bne.n	8002ec2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	f043 0204 	orr.w	r2, r3, #4
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0cc      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b68      	ldr	r3, [pc, #416]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d90c      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b65      	ldr	r3, [pc, #404]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b63      	ldr	r3, [pc, #396]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0b8      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f24:	4b59      	ldr	r3, [pc, #356]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a58      	ldr	r2, [pc, #352]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f3c:	4b53      	ldr	r3, [pc, #332]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a52      	ldr	r2, [pc, #328]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b50      	ldr	r3, [pc, #320]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	494d      	ldr	r1, [pc, #308]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d044      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b47      	ldr	r3, [pc, #284]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d119      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e06f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e067      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b37      	ldr	r3, [pc, #220]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4934      	ldr	r1, [pc, #208]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fb8a 	bl	80016d8 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	f7fe fb86 	bl	80016d8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e04f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	4b2b      	ldr	r3, [pc, #172]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 020c 	and.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1eb      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b25      	ldr	r3, [pc, #148]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d20c      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b22      	ldr	r3, [pc, #136]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e032      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b19      	ldr	r3, [pc, #100]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4916      	ldr	r1, [pc, #88]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003042:	4b12      	ldr	r3, [pc, #72]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	490e      	ldr	r1, [pc, #56]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003056:	f000 f841 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	490a      	ldr	r1, [pc, #40]	@ (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a09      	ldr	r2, [pc, #36]	@ (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe faea 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00
 800308c:	40023800 	.word	0x40023800
 8003090:	08004440 	.word	0x08004440
 8003094:	20000000 	.word	0x20000000
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a0:	4b03      	ldr	r3, [pc, #12]	@ (80030b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000000 	.word	0x20000000

080030b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030b8:	f7ff fff0 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0a9b      	lsrs	r3, r3, #10
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4903      	ldr	r1, [pc, #12]	@ (80030d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40023800 	.word	0x40023800
 80030d8:	08004450 	.word	0x08004450

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e0:	b0ae      	sub	sp, #184	@ 0xb8
 80030e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003102:	4bcb      	ldr	r3, [pc, #812]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b0c      	cmp	r3, #12
 800310c:	f200 8206 	bhi.w	800351c <HAL_RCC_GetSysClockFreq+0x440>
 8003110:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800314d 	.word	0x0800314d
 800311c:	0800351d 	.word	0x0800351d
 8003120:	0800351d 	.word	0x0800351d
 8003124:	0800351d 	.word	0x0800351d
 8003128:	08003155 	.word	0x08003155
 800312c:	0800351d 	.word	0x0800351d
 8003130:	0800351d 	.word	0x0800351d
 8003134:	0800351d 	.word	0x0800351d
 8003138:	0800315d 	.word	0x0800315d
 800313c:	0800351d 	.word	0x0800351d
 8003140:	0800351d 	.word	0x0800351d
 8003144:	0800351d 	.word	0x0800351d
 8003148:	0800334d 	.word	0x0800334d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800314c:	4bb9      	ldr	r3, [pc, #740]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x358>)
 800314e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003152:	e1e7      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003154:	4bb8      	ldr	r3, [pc, #736]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003156:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800315a:	e1e3      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800315c:	4bb4      	ldr	r3, [pc, #720]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003168:	4bb1      	ldr	r3, [pc, #708]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d071      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003174:	4bae      	ldr	r3, [pc, #696]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	2200      	movs	r2, #0
 800317c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003180:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	f04f 0000 	mov.w	r0, #0
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	0159      	lsls	r1, r3, #5
 80031a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ac:	0150      	lsls	r0, r2, #5
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4621      	mov	r1, r4
 80031b4:	1a51      	subs	r1, r2, r1
 80031b6:	6439      	str	r1, [r7, #64]	@ 0x40
 80031b8:	4629      	mov	r1, r5
 80031ba:	eb63 0301 	sbc.w	r3, r3, r1
 80031be:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80031cc:	4649      	mov	r1, r9
 80031ce:	018b      	lsls	r3, r1, #6
 80031d0:	4641      	mov	r1, r8
 80031d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031d6:	4641      	mov	r1, r8
 80031d8:	018a      	lsls	r2, r1, #6
 80031da:	4641      	mov	r1, r8
 80031dc:	1a51      	subs	r1, r2, r1
 80031de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031e0:	4649      	mov	r1, r9
 80031e2:	eb63 0301 	sbc.w	r3, r3, r1
 80031e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80031f4:	4649      	mov	r1, r9
 80031f6:	00cb      	lsls	r3, r1, #3
 80031f8:	4641      	mov	r1, r8
 80031fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fe:	4641      	mov	r1, r8
 8003200:	00ca      	lsls	r2, r1, #3
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	4603      	mov	r3, r0
 8003208:	4622      	mov	r2, r4
 800320a:	189b      	adds	r3, r3, r2
 800320c:	633b      	str	r3, [r7, #48]	@ 0x30
 800320e:	462b      	mov	r3, r5
 8003210:	460a      	mov	r2, r1
 8003212:	eb42 0303 	adc.w	r3, r2, r3
 8003216:	637b      	str	r3, [r7, #52]	@ 0x34
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003224:	4629      	mov	r1, r5
 8003226:	024b      	lsls	r3, r1, #9
 8003228:	4621      	mov	r1, r4
 800322a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800322e:	4621      	mov	r1, r4
 8003230:	024a      	lsls	r2, r1, #9
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800323a:	2200      	movs	r2, #0
 800323c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003240:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003244:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003248:	f7fd fbd4 	bl	80009f4 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4613      	mov	r3, r2
 8003252:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003256:	e067      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003258:	4b75      	ldr	r3, [pc, #468]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003264:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003268:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800326c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003270:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003272:	2300      	movs	r3, #0
 8003274:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003276:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800327a:	4622      	mov	r2, r4
 800327c:	462b      	mov	r3, r5
 800327e:	f04f 0000 	mov.w	r0, #0
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	0159      	lsls	r1, r3, #5
 8003288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800328c:	0150      	lsls	r0, r2, #5
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4621      	mov	r1, r4
 8003294:	1a51      	subs	r1, r2, r1
 8003296:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003298:	4629      	mov	r1, r5
 800329a:	eb63 0301 	sbc.w	r3, r3, r1
 800329e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80032ac:	4649      	mov	r1, r9
 80032ae:	018b      	lsls	r3, r1, #6
 80032b0:	4641      	mov	r1, r8
 80032b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032b6:	4641      	mov	r1, r8
 80032b8:	018a      	lsls	r2, r1, #6
 80032ba:	4641      	mov	r1, r8
 80032bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80032c0:	4649      	mov	r1, r9
 80032c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032da:	4692      	mov	sl, r2
 80032dc:	469b      	mov	fp, r3
 80032de:	4623      	mov	r3, r4
 80032e0:	eb1a 0303 	adds.w	r3, sl, r3
 80032e4:	623b      	str	r3, [r7, #32]
 80032e6:	462b      	mov	r3, r5
 80032e8:	eb4b 0303 	adc.w	r3, fp, r3
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80032fa:	4629      	mov	r1, r5
 80032fc:	028b      	lsls	r3, r1, #10
 80032fe:	4621      	mov	r1, r4
 8003300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003304:	4621      	mov	r1, r4
 8003306:	028a      	lsls	r2, r1, #10
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003310:	2200      	movs	r2, #0
 8003312:	673b      	str	r3, [r7, #112]	@ 0x70
 8003314:	677a      	str	r2, [r7, #116]	@ 0x74
 8003316:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800331a:	f7fd fb6b 	bl	80009f4 <__aeabi_uldivmod>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4613      	mov	r3, r2
 8003324:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003328:	4b41      	ldr	r3, [pc, #260]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	3301      	adds	r3, #1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800333a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800333e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800334a:	e0eb      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800334c:	4b38      	ldr	r3, [pc, #224]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003358:	4b35      	ldr	r3, [pc, #212]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d06b      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003364:	4b32      	ldr	r3, [pc, #200]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	099b      	lsrs	r3, r3, #6
 800336a:	2200      	movs	r2, #0
 800336c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800336e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003370:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	663b      	str	r3, [r7, #96]	@ 0x60
 8003378:	2300      	movs	r3, #0
 800337a:	667b      	str	r3, [r7, #100]	@ 0x64
 800337c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003380:	4622      	mov	r2, r4
 8003382:	462b      	mov	r3, r5
 8003384:	f04f 0000 	mov.w	r0, #0
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	0159      	lsls	r1, r3, #5
 800338e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003392:	0150      	lsls	r0, r2, #5
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4621      	mov	r1, r4
 800339a:	1a51      	subs	r1, r2, r1
 800339c:	61b9      	str	r1, [r7, #24]
 800339e:	4629      	mov	r1, r5
 80033a0:	eb63 0301 	sbc.w	r3, r3, r1
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033b2:	4659      	mov	r1, fp
 80033b4:	018b      	lsls	r3, r1, #6
 80033b6:	4651      	mov	r1, sl
 80033b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033bc:	4651      	mov	r1, sl
 80033be:	018a      	lsls	r2, r1, #6
 80033c0:	4651      	mov	r1, sl
 80033c2:	ebb2 0801 	subs.w	r8, r2, r1
 80033c6:	4659      	mov	r1, fp
 80033c8:	eb63 0901 	sbc.w	r9, r3, r1
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033e0:	4690      	mov	r8, r2
 80033e2:	4699      	mov	r9, r3
 80033e4:	4623      	mov	r3, r4
 80033e6:	eb18 0303 	adds.w	r3, r8, r3
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	462b      	mov	r3, r5
 80033ee:	eb49 0303 	adc.w	r3, r9, r3
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003400:	4629      	mov	r1, r5
 8003402:	024b      	lsls	r3, r1, #9
 8003404:	4621      	mov	r1, r4
 8003406:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800340a:	4621      	mov	r1, r4
 800340c:	024a      	lsls	r2, r1, #9
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003416:	2200      	movs	r2, #0
 8003418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800341a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800341c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003420:	f7fd fae8 	bl	80009f4 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4613      	mov	r3, r2
 800342a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800342e:	e065      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x420>
 8003430:	40023800 	.word	0x40023800
 8003434:	00f42400 	.word	0x00f42400
 8003438:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343c:	4b3d      	ldr	r3, [pc, #244]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x458>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	099b      	lsrs	r3, r3, #6
 8003442:	2200      	movs	r2, #0
 8003444:	4618      	mov	r0, r3
 8003446:	4611      	mov	r1, r2
 8003448:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800344c:	653b      	str	r3, [r7, #80]	@ 0x50
 800344e:	2300      	movs	r3, #0
 8003450:	657b      	str	r3, [r7, #84]	@ 0x54
 8003452:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003456:	4642      	mov	r2, r8
 8003458:	464b      	mov	r3, r9
 800345a:	f04f 0000 	mov.w	r0, #0
 800345e:	f04f 0100 	mov.w	r1, #0
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003468:	0150      	lsls	r0, r2, #5
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4641      	mov	r1, r8
 8003470:	1a51      	subs	r1, r2, r1
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	4649      	mov	r1, r9
 8003476:	eb63 0301 	sbc.w	r3, r3, r1
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003488:	4659      	mov	r1, fp
 800348a:	018b      	lsls	r3, r1, #6
 800348c:	4651      	mov	r1, sl
 800348e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003492:	4651      	mov	r1, sl
 8003494:	018a      	lsls	r2, r1, #6
 8003496:	4651      	mov	r1, sl
 8003498:	1a54      	subs	r4, r2, r1
 800349a:	4659      	mov	r1, fp
 800349c:	eb63 0501 	sbc.w	r5, r3, r1
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	00eb      	lsls	r3, r5, #3
 80034aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ae:	00e2      	lsls	r2, r4, #3
 80034b0:	4614      	mov	r4, r2
 80034b2:	461d      	mov	r5, r3
 80034b4:	4643      	mov	r3, r8
 80034b6:	18e3      	adds	r3, r4, r3
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	464b      	mov	r3, r9
 80034bc:	eb45 0303 	adc.w	r3, r5, r3
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ce:	4629      	mov	r1, r5
 80034d0:	028b      	lsls	r3, r1, #10
 80034d2:	4621      	mov	r1, r4
 80034d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d8:	4621      	mov	r1, r4
 80034da:	028a      	lsls	r2, r1, #10
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034e4:	2200      	movs	r2, #0
 80034e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034ee:	f7fd fa81 	bl	80009f4 <__aeabi_uldivmod>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4613      	mov	r3, r2
 80034f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x458>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	0f1b      	lsrs	r3, r3, #28
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800350a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800350e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003512:	fbb2 f3f3 	udiv	r3, r2, r3
 8003516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800351a:	e003      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800351c:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x45c>)
 800351e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003522:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003528:	4618      	mov	r0, r3
 800352a:	37b8      	adds	r7, #184	@ 0xb8
 800352c:	46bd      	mov	sp, r7
 800352e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
 8003538:	00f42400 	.word	0x00f42400

0800353c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e28d      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8083 	beq.w	8003662 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800355c:	4b94      	ldr	r3, [pc, #592]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b04      	cmp	r3, #4
 8003566:	d019      	beq.n	800359c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003568:	4b91      	ldr	r3, [pc, #580]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003570:	2b08      	cmp	r3, #8
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003574:	4b8e      	ldr	r3, [pc, #568]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003580:	d00c      	beq.n	800359c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003582:	4b8b      	ldr	r3, [pc, #556]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d112      	bne.n	80035b4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358e:	4b88      	ldr	r3, [pc, #544]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800359a:	d10b      	bne.n	80035b4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	4b84      	ldr	r3, [pc, #528]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d05b      	beq.n	8003660 <HAL_RCC_OscConfig+0x124>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d157      	bne.n	8003660 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e25a      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035bc:	d106      	bne.n	80035cc <HAL_RCC_OscConfig+0x90>
 80035be:	4b7c      	ldr	r3, [pc, #496]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a7b      	ldr	r2, [pc, #492]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e01d      	b.n	8003608 <HAL_RCC_OscConfig+0xcc>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0xb4>
 80035d6:	4b76      	ldr	r3, [pc, #472]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a75      	ldr	r2, [pc, #468]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80035dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b73      	ldr	r3, [pc, #460]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a72      	ldr	r2, [pc, #456]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e00b      	b.n	8003608 <HAL_RCC_OscConfig+0xcc>
 80035f0:	4b6f      	ldr	r3, [pc, #444]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a6e      	ldr	r2, [pc, #440]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4b6c      	ldr	r3, [pc, #432]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a6b      	ldr	r2, [pc, #428]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 8003602:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d013      	beq.n	8003638 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fe f862 	bl	80016d8 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003618:	f7fe f85e 	bl	80016d8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	@ 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e21f      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b61      	ldr	r3, [pc, #388]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0xdc>
 8003636:	e014      	b.n	8003662 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe f84e 	bl	80016d8 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003640:	f7fe f84a 	bl	80016d8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	@ 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e20b      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003652:	4b57      	ldr	r3, [pc, #348]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x104>
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d06f      	beq.n	800374e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800366e:	4b50      	ldr	r3, [pc, #320]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b00      	cmp	r3, #0
 8003678:	d017      	beq.n	80036aa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800367a:	4b4d      	ldr	r3, [pc, #308]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003682:	2b08      	cmp	r3, #8
 8003684:	d105      	bne.n	8003692 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003686:	4b4a      	ldr	r3, [pc, #296]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003692:	4b47      	ldr	r3, [pc, #284]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d11c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b44      	ldr	r3, [pc, #272]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	4b41      	ldr	r3, [pc, #260]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x186>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e1d3      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4937      	ldr	r1, [pc, #220]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	e03a      	b.n	800374e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e0:	4b34      	ldr	r3, [pc, #208]	@ (80037b4 <HAL_RCC_OscConfig+0x278>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fd fff7 	bl	80016d8 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fd fff3 	bl	80016d8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1b4      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	4b2b      	ldr	r3, [pc, #172]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b28      	ldr	r3, [pc, #160]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4925      	ldr	r1, [pc, #148]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003722:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <HAL_RCC_OscConfig+0x278>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fd ffd6 	bl	80016d8 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003730:	f7fd ffd2 	bl	80016d8 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e193      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d036      	beq.n	80037c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d016      	beq.n	8003790 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003762:	4b15      	ldr	r3, [pc, #84]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd ffb6 	bl	80016d8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003770:	f7fd ffb2 	bl	80016d8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e173      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCC_OscConfig+0x274>)
 8003784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x234>
 800378e:	e01b      	b.n	80037c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003790:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003796:	f7fd ff9f 	bl	80016d8 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	e00e      	b.n	80037bc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379e:	f7fd ff9b 	bl	80016d8 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d907      	bls.n	80037bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e15c      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
 80037b0:	40023800 	.word	0x40023800
 80037b4:	42470000 	.word	0x42470000
 80037b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037bc:	4b8a      	ldr	r3, [pc, #552]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 80037be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ea      	bne.n	800379e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8097 	beq.w	8003904 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037da:	4b83      	ldr	r3, [pc, #524]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	4b7f      	ldr	r3, [pc, #508]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	4a7e      	ldr	r2, [pc, #504]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037f6:	4b7c      	ldr	r3, [pc, #496]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4b79      	ldr	r3, [pc, #484]	@ (80039ec <HAL_RCC_OscConfig+0x4b0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d118      	bne.n	8003844 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003812:	4b76      	ldr	r3, [pc, #472]	@ (80039ec <HAL_RCC_OscConfig+0x4b0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a75      	ldr	r2, [pc, #468]	@ (80039ec <HAL_RCC_OscConfig+0x4b0>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381e:	f7fd ff5b 	bl	80016d8 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003826:	f7fd ff57 	bl	80016d8 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e118      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	4b6c      	ldr	r3, [pc, #432]	@ (80039ec <HAL_RCC_OscConfig+0x4b0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x31e>
 800384c:	4b66      	ldr	r3, [pc, #408]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	4a65      	ldr	r2, [pc, #404]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6713      	str	r3, [r2, #112]	@ 0x70
 8003858:	e01c      	b.n	8003894 <HAL_RCC_OscConfig+0x358>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b05      	cmp	r3, #5
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x340>
 8003862:	4b61      	ldr	r3, [pc, #388]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	4a60      	ldr	r2, [pc, #384]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6713      	str	r3, [r2, #112]	@ 0x70
 800386e:	4b5e      	ldr	r3, [pc, #376]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	4a5d      	ldr	r2, [pc, #372]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	@ 0x70
 800387a:	e00b      	b.n	8003894 <HAL_RCC_OscConfig+0x358>
 800387c:	4b5a      	ldr	r3, [pc, #360]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a59      	ldr	r2, [pc, #356]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
 8003888:	4b57      	ldr	r3, [pc, #348]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a56      	ldr	r2, [pc, #344]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 800388e:	f023 0304 	bic.w	r3, r3, #4
 8003892:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fd ff1c 	bl	80016d8 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fd ff18 	bl	80016d8 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0d7      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	4b4b      	ldr	r3, [pc, #300]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ee      	beq.n	80038a4 <HAL_RCC_OscConfig+0x368>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fd ff06 	bl	80016d8 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fd ff02 	bl	80016d8 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0c1      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e6:	4b40      	ldr	r3, [pc, #256]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ee      	bne.n	80038d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f8:	4b3b      	ldr	r3, [pc, #236]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	4a3a      	ldr	r2, [pc, #232]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 80038fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003902:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80ad 	beq.w	8003a68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800390e:	4b36      	ldr	r3, [pc, #216]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b08      	cmp	r3, #8
 8003918:	d060      	beq.n	80039dc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d145      	bne.n	80039ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b33      	ldr	r3, [pc, #204]	@ (80039f0 <HAL_RCC_OscConfig+0x4b4>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fd fed6 	bl	80016d8 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fd fed2 	bl	80016d8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e093      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b29      	ldr	r3, [pc, #164]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	019b      	lsls	r3, r3, #6
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	3b01      	subs	r3, #1
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003978:	071b      	lsls	r3, r3, #28
 800397a:	491b      	ldr	r1, [pc, #108]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 800397c:	4313      	orrs	r3, r2
 800397e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003980:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <HAL_RCC_OscConfig+0x4b4>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fd fea7 	bl	80016d8 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398e:	f7fd fea3 	bl	80016d8 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e064      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a0:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x452>
 80039ac:	e05c      	b.n	8003a68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ae:	4b10      	ldr	r3, [pc, #64]	@ (80039f0 <HAL_RCC_OscConfig+0x4b4>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fe90 	bl	80016d8 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd fe8c 	bl	80016d8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e04d      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_RCC_OscConfig+0x4ac>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x480>
 80039da:	e045      	b.n	8003a68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e040      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40007000 	.word	0x40007000
 80039f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a74 <HAL_RCC_OscConfig+0x538>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d030      	beq.n	8003a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d129      	bne.n	8003a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d122      	bne.n	8003a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d119      	bne.n	8003a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3a:	085b      	lsrs	r3, r3, #1
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d10f      	bne.n	8003a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800

08003a78 <std>:
 8003a78:	2300      	movs	r3, #0
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a86:	6083      	str	r3, [r0, #8]
 8003a88:	8181      	strh	r1, [r0, #12]
 8003a8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a8c:	81c2      	strh	r2, [r0, #14]
 8003a8e:	6183      	str	r3, [r0, #24]
 8003a90:	4619      	mov	r1, r3
 8003a92:	2208      	movs	r2, #8
 8003a94:	305c      	adds	r0, #92	@ 0x5c
 8003a96:	f000 f90f 	bl	8003cb8 <memset>
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <std+0x58>)
 8003a9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <std+0x5c>)
 8003aa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <std+0x60>)
 8003aa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <std+0x64>)
 8003aa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <std+0x68>)
 8003aac:	6224      	str	r4, [r4, #32]
 8003aae:	429c      	cmp	r4, r3
 8003ab0:	d006      	beq.n	8003ac0 <std+0x48>
 8003ab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ab6:	4294      	cmp	r4, r2
 8003ab8:	d002      	beq.n	8003ac0 <std+0x48>
 8003aba:	33d0      	adds	r3, #208	@ 0xd0
 8003abc:	429c      	cmp	r4, r3
 8003abe:	d105      	bne.n	8003acc <std+0x54>
 8003ac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac8:	f000 b928 	b.w	8003d1c <__retarget_lock_init_recursive>
 8003acc:	bd10      	pop	{r4, pc}
 8003ace:	bf00      	nop
 8003ad0:	08003fd9 	.word	0x08003fd9
 8003ad4:	08003ffb 	.word	0x08003ffb
 8003ad8:	08004033 	.word	0x08004033
 8003adc:	08004057 	.word	0x08004057
 8003ae0:	200000f4 	.word	0x200000f4

08003ae4 <stdio_exit_handler>:
 8003ae4:	4a02      	ldr	r2, [pc, #8]	@ (8003af0 <stdio_exit_handler+0xc>)
 8003ae6:	4903      	ldr	r1, [pc, #12]	@ (8003af4 <stdio_exit_handler+0x10>)
 8003ae8:	4803      	ldr	r0, [pc, #12]	@ (8003af8 <stdio_exit_handler+0x14>)
 8003aea:	f000 b869 	b.w	8003bc0 <_fwalk_sglue>
 8003aee:	bf00      	nop
 8003af0:	2000000c 	.word	0x2000000c
 8003af4:	08003f71 	.word	0x08003f71
 8003af8:	2000001c 	.word	0x2000001c

08003afc <cleanup_stdio>:
 8003afc:	6841      	ldr	r1, [r0, #4]
 8003afe:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <cleanup_stdio+0x34>)
 8003b00:	4299      	cmp	r1, r3
 8003b02:	b510      	push	{r4, lr}
 8003b04:	4604      	mov	r4, r0
 8003b06:	d001      	beq.n	8003b0c <cleanup_stdio+0x10>
 8003b08:	f000 fa32 	bl	8003f70 <_fflush_r>
 8003b0c:	68a1      	ldr	r1, [r4, #8]
 8003b0e:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <cleanup_stdio+0x38>)
 8003b10:	4299      	cmp	r1, r3
 8003b12:	d002      	beq.n	8003b1a <cleanup_stdio+0x1e>
 8003b14:	4620      	mov	r0, r4
 8003b16:	f000 fa2b 	bl	8003f70 <_fflush_r>
 8003b1a:	68e1      	ldr	r1, [r4, #12]
 8003b1c:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <cleanup_stdio+0x3c>)
 8003b1e:	4299      	cmp	r1, r3
 8003b20:	d004      	beq.n	8003b2c <cleanup_stdio+0x30>
 8003b22:	4620      	mov	r0, r4
 8003b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b28:	f000 ba22 	b.w	8003f70 <_fflush_r>
 8003b2c:	bd10      	pop	{r4, pc}
 8003b2e:	bf00      	nop
 8003b30:	200000f4 	.word	0x200000f4
 8003b34:	2000015c 	.word	0x2000015c
 8003b38:	200001c4 	.word	0x200001c4

08003b3c <global_stdio_init.part.0>:
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <global_stdio_init.part.0+0x30>)
 8003b40:	4c0b      	ldr	r4, [pc, #44]	@ (8003b70 <global_stdio_init.part.0+0x34>)
 8003b42:	4a0c      	ldr	r2, [pc, #48]	@ (8003b74 <global_stdio_init.part.0+0x38>)
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	4620      	mov	r0, r4
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	f7ff ff94 	bl	8003a78 <std>
 8003b50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b54:	2201      	movs	r2, #1
 8003b56:	2109      	movs	r1, #9
 8003b58:	f7ff ff8e 	bl	8003a78 <std>
 8003b5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b60:	2202      	movs	r2, #2
 8003b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b66:	2112      	movs	r1, #18
 8003b68:	f7ff bf86 	b.w	8003a78 <std>
 8003b6c:	2000022c 	.word	0x2000022c
 8003b70:	200000f4 	.word	0x200000f4
 8003b74:	08003ae5 	.word	0x08003ae5

08003b78 <__sfp_lock_acquire>:
 8003b78:	4801      	ldr	r0, [pc, #4]	@ (8003b80 <__sfp_lock_acquire+0x8>)
 8003b7a:	f000 b8d0 	b.w	8003d1e <__retarget_lock_acquire_recursive>
 8003b7e:	bf00      	nop
 8003b80:	20000231 	.word	0x20000231

08003b84 <__sfp_lock_release>:
 8003b84:	4801      	ldr	r0, [pc, #4]	@ (8003b8c <__sfp_lock_release+0x8>)
 8003b86:	f000 b8cb 	b.w	8003d20 <__retarget_lock_release_recursive>
 8003b8a:	bf00      	nop
 8003b8c:	20000231 	.word	0x20000231

08003b90 <__sinit>:
 8003b90:	b510      	push	{r4, lr}
 8003b92:	4604      	mov	r4, r0
 8003b94:	f7ff fff0 	bl	8003b78 <__sfp_lock_acquire>
 8003b98:	6a23      	ldr	r3, [r4, #32]
 8003b9a:	b11b      	cbz	r3, 8003ba4 <__sinit+0x14>
 8003b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba0:	f7ff bff0 	b.w	8003b84 <__sfp_lock_release>
 8003ba4:	4b04      	ldr	r3, [pc, #16]	@ (8003bb8 <__sinit+0x28>)
 8003ba6:	6223      	str	r3, [r4, #32]
 8003ba8:	4b04      	ldr	r3, [pc, #16]	@ (8003bbc <__sinit+0x2c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f5      	bne.n	8003b9c <__sinit+0xc>
 8003bb0:	f7ff ffc4 	bl	8003b3c <global_stdio_init.part.0>
 8003bb4:	e7f2      	b.n	8003b9c <__sinit+0xc>
 8003bb6:	bf00      	nop
 8003bb8:	08003afd 	.word	0x08003afd
 8003bbc:	2000022c 	.word	0x2000022c

08003bc0 <_fwalk_sglue>:
 8003bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc4:	4607      	mov	r7, r0
 8003bc6:	4688      	mov	r8, r1
 8003bc8:	4614      	mov	r4, r2
 8003bca:	2600      	movs	r6, #0
 8003bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8003bd4:	d505      	bpl.n	8003be2 <_fwalk_sglue+0x22>
 8003bd6:	6824      	ldr	r4, [r4, #0]
 8003bd8:	2c00      	cmp	r4, #0
 8003bda:	d1f7      	bne.n	8003bcc <_fwalk_sglue+0xc>
 8003bdc:	4630      	mov	r0, r6
 8003bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003be2:	89ab      	ldrh	r3, [r5, #12]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d907      	bls.n	8003bf8 <_fwalk_sglue+0x38>
 8003be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bec:	3301      	adds	r3, #1
 8003bee:	d003      	beq.n	8003bf8 <_fwalk_sglue+0x38>
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	47c0      	blx	r8
 8003bf6:	4306      	orrs	r6, r0
 8003bf8:	3568      	adds	r5, #104	@ 0x68
 8003bfa:	e7e9      	b.n	8003bd0 <_fwalk_sglue+0x10>

08003bfc <_puts_r>:
 8003bfc:	6a03      	ldr	r3, [r0, #32]
 8003bfe:	b570      	push	{r4, r5, r6, lr}
 8003c00:	6884      	ldr	r4, [r0, #8]
 8003c02:	4605      	mov	r5, r0
 8003c04:	460e      	mov	r6, r1
 8003c06:	b90b      	cbnz	r3, 8003c0c <_puts_r+0x10>
 8003c08:	f7ff ffc2 	bl	8003b90 <__sinit>
 8003c0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c0e:	07db      	lsls	r3, r3, #31
 8003c10:	d405      	bmi.n	8003c1e <_puts_r+0x22>
 8003c12:	89a3      	ldrh	r3, [r4, #12]
 8003c14:	0598      	lsls	r0, r3, #22
 8003c16:	d402      	bmi.n	8003c1e <_puts_r+0x22>
 8003c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c1a:	f000 f880 	bl	8003d1e <__retarget_lock_acquire_recursive>
 8003c1e:	89a3      	ldrh	r3, [r4, #12]
 8003c20:	0719      	lsls	r1, r3, #28
 8003c22:	d502      	bpl.n	8003c2a <_puts_r+0x2e>
 8003c24:	6923      	ldr	r3, [r4, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d135      	bne.n	8003c96 <_puts_r+0x9a>
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	f000 fa55 	bl	80040dc <__swsetup_r>
 8003c32:	b380      	cbz	r0, 8003c96 <_puts_r+0x9a>
 8003c34:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003c38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c3a:	07da      	lsls	r2, r3, #31
 8003c3c:	d405      	bmi.n	8003c4a <_puts_r+0x4e>
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	059b      	lsls	r3, r3, #22
 8003c42:	d402      	bmi.n	8003c4a <_puts_r+0x4e>
 8003c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c46:	f000 f86b 	bl	8003d20 <__retarget_lock_release_recursive>
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	da04      	bge.n	8003c5c <_puts_r+0x60>
 8003c52:	69a2      	ldr	r2, [r4, #24]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	dc17      	bgt.n	8003c88 <_puts_r+0x8c>
 8003c58:	290a      	cmp	r1, #10
 8003c5a:	d015      	beq.n	8003c88 <_puts_r+0x8c>
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	6022      	str	r2, [r4, #0]
 8003c62:	7019      	strb	r1, [r3, #0]
 8003c64:	68a3      	ldr	r3, [r4, #8]
 8003c66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	60a3      	str	r3, [r4, #8]
 8003c6e:	2900      	cmp	r1, #0
 8003c70:	d1ed      	bne.n	8003c4e <_puts_r+0x52>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da11      	bge.n	8003c9a <_puts_r+0x9e>
 8003c76:	4622      	mov	r2, r4
 8003c78:	210a      	movs	r1, #10
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f000 f9ef 	bl	800405e <__swbuf_r>
 8003c80:	3001      	adds	r0, #1
 8003c82:	d0d7      	beq.n	8003c34 <_puts_r+0x38>
 8003c84:	250a      	movs	r5, #10
 8003c86:	e7d7      	b.n	8003c38 <_puts_r+0x3c>
 8003c88:	4622      	mov	r2, r4
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f000 f9e7 	bl	800405e <__swbuf_r>
 8003c90:	3001      	adds	r0, #1
 8003c92:	d1e7      	bne.n	8003c64 <_puts_r+0x68>
 8003c94:	e7ce      	b.n	8003c34 <_puts_r+0x38>
 8003c96:	3e01      	subs	r6, #1
 8003c98:	e7e4      	b.n	8003c64 <_puts_r+0x68>
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	6022      	str	r2, [r4, #0]
 8003ca0:	220a      	movs	r2, #10
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e7ee      	b.n	8003c84 <_puts_r+0x88>
	...

08003ca8 <puts>:
 8003ca8:	4b02      	ldr	r3, [pc, #8]	@ (8003cb4 <puts+0xc>)
 8003caa:	4601      	mov	r1, r0
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	f7ff bfa5 	b.w	8003bfc <_puts_r>
 8003cb2:	bf00      	nop
 8003cb4:	20000018 	.word	0x20000018

08003cb8 <memset>:
 8003cb8:	4402      	add	r2, r0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d100      	bne.n	8003cc2 <memset+0xa>
 8003cc0:	4770      	bx	lr
 8003cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc6:	e7f9      	b.n	8003cbc <memset+0x4>

08003cc8 <__errno>:
 8003cc8:	4b01      	ldr	r3, [pc, #4]	@ (8003cd0 <__errno+0x8>)
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000018 	.word	0x20000018

08003cd4 <__libc_init_array>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8003d0c <__libc_init_array+0x38>)
 8003cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8003d10 <__libc_init_array+0x3c>)
 8003cda:	1b64      	subs	r4, r4, r5
 8003cdc:	10a4      	asrs	r4, r4, #2
 8003cde:	2600      	movs	r6, #0
 8003ce0:	42a6      	cmp	r6, r4
 8003ce2:	d109      	bne.n	8003cf8 <__libc_init_array+0x24>
 8003ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8003d14 <__libc_init_array+0x40>)
 8003ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8003d18 <__libc_init_array+0x44>)
 8003ce8:	f000 fb72 	bl	80043d0 <_init>
 8003cec:	1b64      	subs	r4, r4, r5
 8003cee:	10a4      	asrs	r4, r4, #2
 8003cf0:	2600      	movs	r6, #0
 8003cf2:	42a6      	cmp	r6, r4
 8003cf4:	d105      	bne.n	8003d02 <__libc_init_array+0x2e>
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfc:	4798      	blx	r3
 8003cfe:	3601      	adds	r6, #1
 8003d00:	e7ee      	b.n	8003ce0 <__libc_init_array+0xc>
 8003d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d06:	4798      	blx	r3
 8003d08:	3601      	adds	r6, #1
 8003d0a:	e7f2      	b.n	8003cf2 <__libc_init_array+0x1e>
 8003d0c:	08004460 	.word	0x08004460
 8003d10:	08004460 	.word	0x08004460
 8003d14:	08004460 	.word	0x08004460
 8003d18:	08004464 	.word	0x08004464

08003d1c <__retarget_lock_init_recursive>:
 8003d1c:	4770      	bx	lr

08003d1e <__retarget_lock_acquire_recursive>:
 8003d1e:	4770      	bx	lr

08003d20 <__retarget_lock_release_recursive>:
 8003d20:	4770      	bx	lr
	...

08003d24 <sbrk_aligned>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	4e0f      	ldr	r6, [pc, #60]	@ (8003d64 <sbrk_aligned+0x40>)
 8003d28:	460c      	mov	r4, r1
 8003d2a:	6831      	ldr	r1, [r6, #0]
 8003d2c:	4605      	mov	r5, r0
 8003d2e:	b911      	cbnz	r1, 8003d36 <sbrk_aligned+0x12>
 8003d30:	f000 fae2 	bl	80042f8 <_sbrk_r>
 8003d34:	6030      	str	r0, [r6, #0]
 8003d36:	4621      	mov	r1, r4
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f000 fadd 	bl	80042f8 <_sbrk_r>
 8003d3e:	1c43      	adds	r3, r0, #1
 8003d40:	d103      	bne.n	8003d4a <sbrk_aligned+0x26>
 8003d42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003d46:	4620      	mov	r0, r4
 8003d48:	bd70      	pop	{r4, r5, r6, pc}
 8003d4a:	1cc4      	adds	r4, r0, #3
 8003d4c:	f024 0403 	bic.w	r4, r4, #3
 8003d50:	42a0      	cmp	r0, r4
 8003d52:	d0f8      	beq.n	8003d46 <sbrk_aligned+0x22>
 8003d54:	1a21      	subs	r1, r4, r0
 8003d56:	4628      	mov	r0, r5
 8003d58:	f000 face 	bl	80042f8 <_sbrk_r>
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d1f2      	bne.n	8003d46 <sbrk_aligned+0x22>
 8003d60:	e7ef      	b.n	8003d42 <sbrk_aligned+0x1e>
 8003d62:	bf00      	nop
 8003d64:	20000234 	.word	0x20000234

08003d68 <_malloc_r>:
 8003d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d6c:	1ccd      	adds	r5, r1, #3
 8003d6e:	f025 0503 	bic.w	r5, r5, #3
 8003d72:	3508      	adds	r5, #8
 8003d74:	2d0c      	cmp	r5, #12
 8003d76:	bf38      	it	cc
 8003d78:	250c      	movcc	r5, #12
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	4606      	mov	r6, r0
 8003d7e:	db01      	blt.n	8003d84 <_malloc_r+0x1c>
 8003d80:	42a9      	cmp	r1, r5
 8003d82:	d904      	bls.n	8003d8e <_malloc_r+0x26>
 8003d84:	230c      	movs	r3, #12
 8003d86:	6033      	str	r3, [r6, #0]
 8003d88:	2000      	movs	r0, #0
 8003d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e64 <_malloc_r+0xfc>
 8003d92:	f000 f915 	bl	8003fc0 <__malloc_lock>
 8003d96:	f8d8 3000 	ldr.w	r3, [r8]
 8003d9a:	461c      	mov	r4, r3
 8003d9c:	bb44      	cbnz	r4, 8003df0 <_malloc_r+0x88>
 8003d9e:	4629      	mov	r1, r5
 8003da0:	4630      	mov	r0, r6
 8003da2:	f7ff ffbf 	bl	8003d24 <sbrk_aligned>
 8003da6:	1c43      	adds	r3, r0, #1
 8003da8:	4604      	mov	r4, r0
 8003daa:	d158      	bne.n	8003e5e <_malloc_r+0xf6>
 8003dac:	f8d8 4000 	ldr.w	r4, [r8]
 8003db0:	4627      	mov	r7, r4
 8003db2:	2f00      	cmp	r7, #0
 8003db4:	d143      	bne.n	8003e3e <_malloc_r+0xd6>
 8003db6:	2c00      	cmp	r4, #0
 8003db8:	d04b      	beq.n	8003e52 <_malloc_r+0xea>
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	4639      	mov	r1, r7
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	eb04 0903 	add.w	r9, r4, r3
 8003dc4:	f000 fa98 	bl	80042f8 <_sbrk_r>
 8003dc8:	4581      	cmp	r9, r0
 8003dca:	d142      	bne.n	8003e52 <_malloc_r+0xea>
 8003dcc:	6821      	ldr	r1, [r4, #0]
 8003dce:	1a6d      	subs	r5, r5, r1
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f7ff ffa6 	bl	8003d24 <sbrk_aligned>
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d03a      	beq.n	8003e52 <_malloc_r+0xea>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	442b      	add	r3, r5
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	f8d8 3000 	ldr.w	r3, [r8]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	bb62      	cbnz	r2, 8003e44 <_malloc_r+0xdc>
 8003dea:	f8c8 7000 	str.w	r7, [r8]
 8003dee:	e00f      	b.n	8003e10 <_malloc_r+0xa8>
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	1b52      	subs	r2, r2, r5
 8003df4:	d420      	bmi.n	8003e38 <_malloc_r+0xd0>
 8003df6:	2a0b      	cmp	r2, #11
 8003df8:	d917      	bls.n	8003e2a <_malloc_r+0xc2>
 8003dfa:	1961      	adds	r1, r4, r5
 8003dfc:	42a3      	cmp	r3, r4
 8003dfe:	6025      	str	r5, [r4, #0]
 8003e00:	bf18      	it	ne
 8003e02:	6059      	strne	r1, [r3, #4]
 8003e04:	6863      	ldr	r3, [r4, #4]
 8003e06:	bf08      	it	eq
 8003e08:	f8c8 1000 	streq.w	r1, [r8]
 8003e0c:	5162      	str	r2, [r4, r5]
 8003e0e:	604b      	str	r3, [r1, #4]
 8003e10:	4630      	mov	r0, r6
 8003e12:	f000 f8db 	bl	8003fcc <__malloc_unlock>
 8003e16:	f104 000b 	add.w	r0, r4, #11
 8003e1a:	1d23      	adds	r3, r4, #4
 8003e1c:	f020 0007 	bic.w	r0, r0, #7
 8003e20:	1ac2      	subs	r2, r0, r3
 8003e22:	bf1c      	itt	ne
 8003e24:	1a1b      	subne	r3, r3, r0
 8003e26:	50a3      	strne	r3, [r4, r2]
 8003e28:	e7af      	b.n	8003d8a <_malloc_r+0x22>
 8003e2a:	6862      	ldr	r2, [r4, #4]
 8003e2c:	42a3      	cmp	r3, r4
 8003e2e:	bf0c      	ite	eq
 8003e30:	f8c8 2000 	streq.w	r2, [r8]
 8003e34:	605a      	strne	r2, [r3, #4]
 8003e36:	e7eb      	b.n	8003e10 <_malloc_r+0xa8>
 8003e38:	4623      	mov	r3, r4
 8003e3a:	6864      	ldr	r4, [r4, #4]
 8003e3c:	e7ae      	b.n	8003d9c <_malloc_r+0x34>
 8003e3e:	463c      	mov	r4, r7
 8003e40:	687f      	ldr	r7, [r7, #4]
 8003e42:	e7b6      	b.n	8003db2 <_malloc_r+0x4a>
 8003e44:	461a      	mov	r2, r3
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	42a3      	cmp	r3, r4
 8003e4a:	d1fb      	bne.n	8003e44 <_malloc_r+0xdc>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	6053      	str	r3, [r2, #4]
 8003e50:	e7de      	b.n	8003e10 <_malloc_r+0xa8>
 8003e52:	230c      	movs	r3, #12
 8003e54:	6033      	str	r3, [r6, #0]
 8003e56:	4630      	mov	r0, r6
 8003e58:	f000 f8b8 	bl	8003fcc <__malloc_unlock>
 8003e5c:	e794      	b.n	8003d88 <_malloc_r+0x20>
 8003e5e:	6005      	str	r5, [r0, #0]
 8003e60:	e7d6      	b.n	8003e10 <_malloc_r+0xa8>
 8003e62:	bf00      	nop
 8003e64:	20000238 	.word	0x20000238

08003e68 <__sflush_r>:
 8003e68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e70:	0716      	lsls	r6, r2, #28
 8003e72:	4605      	mov	r5, r0
 8003e74:	460c      	mov	r4, r1
 8003e76:	d454      	bmi.n	8003f22 <__sflush_r+0xba>
 8003e78:	684b      	ldr	r3, [r1, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	dc02      	bgt.n	8003e84 <__sflush_r+0x1c>
 8003e7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	dd48      	ble.n	8003f16 <__sflush_r+0xae>
 8003e84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e86:	2e00      	cmp	r6, #0
 8003e88:	d045      	beq.n	8003f16 <__sflush_r+0xae>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e90:	682f      	ldr	r7, [r5, #0]
 8003e92:	6a21      	ldr	r1, [r4, #32]
 8003e94:	602b      	str	r3, [r5, #0]
 8003e96:	d030      	beq.n	8003efa <__sflush_r+0x92>
 8003e98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	0759      	lsls	r1, r3, #29
 8003e9e:	d505      	bpl.n	8003eac <__sflush_r+0x44>
 8003ea0:	6863      	ldr	r3, [r4, #4]
 8003ea2:	1ad2      	subs	r2, r2, r3
 8003ea4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ea6:	b10b      	cbz	r3, 8003eac <__sflush_r+0x44>
 8003ea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003eaa:	1ad2      	subs	r2, r2, r3
 8003eac:	2300      	movs	r3, #0
 8003eae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003eb0:	6a21      	ldr	r1, [r4, #32]
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	47b0      	blx	r6
 8003eb6:	1c43      	adds	r3, r0, #1
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	d106      	bne.n	8003eca <__sflush_r+0x62>
 8003ebc:	6829      	ldr	r1, [r5, #0]
 8003ebe:	291d      	cmp	r1, #29
 8003ec0:	d82b      	bhi.n	8003f1a <__sflush_r+0xb2>
 8003ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f6c <__sflush_r+0x104>)
 8003ec4:	410a      	asrs	r2, r1
 8003ec6:	07d6      	lsls	r6, r2, #31
 8003ec8:	d427      	bmi.n	8003f1a <__sflush_r+0xb2>
 8003eca:	2200      	movs	r2, #0
 8003ecc:	6062      	str	r2, [r4, #4]
 8003ece:	04d9      	lsls	r1, r3, #19
 8003ed0:	6922      	ldr	r2, [r4, #16]
 8003ed2:	6022      	str	r2, [r4, #0]
 8003ed4:	d504      	bpl.n	8003ee0 <__sflush_r+0x78>
 8003ed6:	1c42      	adds	r2, r0, #1
 8003ed8:	d101      	bne.n	8003ede <__sflush_r+0x76>
 8003eda:	682b      	ldr	r3, [r5, #0]
 8003edc:	b903      	cbnz	r3, 8003ee0 <__sflush_r+0x78>
 8003ede:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ee2:	602f      	str	r7, [r5, #0]
 8003ee4:	b1b9      	cbz	r1, 8003f16 <__sflush_r+0xae>
 8003ee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003eea:	4299      	cmp	r1, r3
 8003eec:	d002      	beq.n	8003ef4 <__sflush_r+0x8c>
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 fa24 	bl	800433c <_free_r>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ef8:	e00d      	b.n	8003f16 <__sflush_r+0xae>
 8003efa:	2301      	movs	r3, #1
 8003efc:	4628      	mov	r0, r5
 8003efe:	47b0      	blx	r6
 8003f00:	4602      	mov	r2, r0
 8003f02:	1c50      	adds	r0, r2, #1
 8003f04:	d1c9      	bne.n	8003e9a <__sflush_r+0x32>
 8003f06:	682b      	ldr	r3, [r5, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0c6      	beq.n	8003e9a <__sflush_r+0x32>
 8003f0c:	2b1d      	cmp	r3, #29
 8003f0e:	d001      	beq.n	8003f14 <__sflush_r+0xac>
 8003f10:	2b16      	cmp	r3, #22
 8003f12:	d11e      	bne.n	8003f52 <__sflush_r+0xea>
 8003f14:	602f      	str	r7, [r5, #0]
 8003f16:	2000      	movs	r0, #0
 8003f18:	e022      	b.n	8003f60 <__sflush_r+0xf8>
 8003f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f1e:	b21b      	sxth	r3, r3
 8003f20:	e01b      	b.n	8003f5a <__sflush_r+0xf2>
 8003f22:	690f      	ldr	r7, [r1, #16]
 8003f24:	2f00      	cmp	r7, #0
 8003f26:	d0f6      	beq.n	8003f16 <__sflush_r+0xae>
 8003f28:	0793      	lsls	r3, r2, #30
 8003f2a:	680e      	ldr	r6, [r1, #0]
 8003f2c:	bf08      	it	eq
 8003f2e:	694b      	ldreq	r3, [r1, #20]
 8003f30:	600f      	str	r7, [r1, #0]
 8003f32:	bf18      	it	ne
 8003f34:	2300      	movne	r3, #0
 8003f36:	eba6 0807 	sub.w	r8, r6, r7
 8003f3a:	608b      	str	r3, [r1, #8]
 8003f3c:	f1b8 0f00 	cmp.w	r8, #0
 8003f40:	dde9      	ble.n	8003f16 <__sflush_r+0xae>
 8003f42:	6a21      	ldr	r1, [r4, #32]
 8003f44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003f46:	4643      	mov	r3, r8
 8003f48:	463a      	mov	r2, r7
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	47b0      	blx	r6
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	dc08      	bgt.n	8003f64 <__sflush_r+0xfc>
 8003f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f5a:	81a3      	strh	r3, [r4, #12]
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f64:	4407      	add	r7, r0
 8003f66:	eba8 0800 	sub.w	r8, r8, r0
 8003f6a:	e7e7      	b.n	8003f3c <__sflush_r+0xd4>
 8003f6c:	dfbffffe 	.word	0xdfbffffe

08003f70 <_fflush_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	690b      	ldr	r3, [r1, #16]
 8003f74:	4605      	mov	r5, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	b913      	cbnz	r3, 8003f80 <_fflush_r+0x10>
 8003f7a:	2500      	movs	r5, #0
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	b118      	cbz	r0, 8003f8a <_fflush_r+0x1a>
 8003f82:	6a03      	ldr	r3, [r0, #32]
 8003f84:	b90b      	cbnz	r3, 8003f8a <_fflush_r+0x1a>
 8003f86:	f7ff fe03 	bl	8003b90 <__sinit>
 8003f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f3      	beq.n	8003f7a <_fflush_r+0xa>
 8003f92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f94:	07d0      	lsls	r0, r2, #31
 8003f96:	d404      	bmi.n	8003fa2 <_fflush_r+0x32>
 8003f98:	0599      	lsls	r1, r3, #22
 8003f9a:	d402      	bmi.n	8003fa2 <_fflush_r+0x32>
 8003f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f9e:	f7ff febe 	bl	8003d1e <__retarget_lock_acquire_recursive>
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	f7ff ff5f 	bl	8003e68 <__sflush_r>
 8003faa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fac:	07da      	lsls	r2, r3, #31
 8003fae:	4605      	mov	r5, r0
 8003fb0:	d4e4      	bmi.n	8003f7c <_fflush_r+0xc>
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	059b      	lsls	r3, r3, #22
 8003fb6:	d4e1      	bmi.n	8003f7c <_fflush_r+0xc>
 8003fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fba:	f7ff feb1 	bl	8003d20 <__retarget_lock_release_recursive>
 8003fbe:	e7dd      	b.n	8003f7c <_fflush_r+0xc>

08003fc0 <__malloc_lock>:
 8003fc0:	4801      	ldr	r0, [pc, #4]	@ (8003fc8 <__malloc_lock+0x8>)
 8003fc2:	f7ff beac 	b.w	8003d1e <__retarget_lock_acquire_recursive>
 8003fc6:	bf00      	nop
 8003fc8:	20000230 	.word	0x20000230

08003fcc <__malloc_unlock>:
 8003fcc:	4801      	ldr	r0, [pc, #4]	@ (8003fd4 <__malloc_unlock+0x8>)
 8003fce:	f7ff bea7 	b.w	8003d20 <__retarget_lock_release_recursive>
 8003fd2:	bf00      	nop
 8003fd4:	20000230 	.word	0x20000230

08003fd8 <__sread>:
 8003fd8:	b510      	push	{r4, lr}
 8003fda:	460c      	mov	r4, r1
 8003fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe0:	f000 f978 	bl	80042d4 <_read_r>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	bfab      	itete	ge
 8003fe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003fea:	89a3      	ldrhlt	r3, [r4, #12]
 8003fec:	181b      	addge	r3, r3, r0
 8003fee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ff2:	bfac      	ite	ge
 8003ff4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ff6:	81a3      	strhlt	r3, [r4, #12]
 8003ff8:	bd10      	pop	{r4, pc}

08003ffa <__swrite>:
 8003ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffe:	461f      	mov	r7, r3
 8004000:	898b      	ldrh	r3, [r1, #12]
 8004002:	05db      	lsls	r3, r3, #23
 8004004:	4605      	mov	r5, r0
 8004006:	460c      	mov	r4, r1
 8004008:	4616      	mov	r6, r2
 800400a:	d505      	bpl.n	8004018 <__swrite+0x1e>
 800400c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004010:	2302      	movs	r3, #2
 8004012:	2200      	movs	r2, #0
 8004014:	f000 f94c 	bl	80042b0 <_lseek_r>
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800401e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004022:	81a3      	strh	r3, [r4, #12]
 8004024:	4632      	mov	r2, r6
 8004026:	463b      	mov	r3, r7
 8004028:	4628      	mov	r0, r5
 800402a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800402e:	f000 b973 	b.w	8004318 <_write_r>

08004032 <__sseek>:
 8004032:	b510      	push	{r4, lr}
 8004034:	460c      	mov	r4, r1
 8004036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800403a:	f000 f939 	bl	80042b0 <_lseek_r>
 800403e:	1c43      	adds	r3, r0, #1
 8004040:	89a3      	ldrh	r3, [r4, #12]
 8004042:	bf15      	itete	ne
 8004044:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004046:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800404a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800404e:	81a3      	strheq	r3, [r4, #12]
 8004050:	bf18      	it	ne
 8004052:	81a3      	strhne	r3, [r4, #12]
 8004054:	bd10      	pop	{r4, pc}

08004056 <__sclose>:
 8004056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800405a:	f000 b8f7 	b.w	800424c <_close_r>

0800405e <__swbuf_r>:
 800405e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004060:	460e      	mov	r6, r1
 8004062:	4614      	mov	r4, r2
 8004064:	4605      	mov	r5, r0
 8004066:	b118      	cbz	r0, 8004070 <__swbuf_r+0x12>
 8004068:	6a03      	ldr	r3, [r0, #32]
 800406a:	b90b      	cbnz	r3, 8004070 <__swbuf_r+0x12>
 800406c:	f7ff fd90 	bl	8003b90 <__sinit>
 8004070:	69a3      	ldr	r3, [r4, #24]
 8004072:	60a3      	str	r3, [r4, #8]
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	071a      	lsls	r2, r3, #28
 8004078:	d501      	bpl.n	800407e <__swbuf_r+0x20>
 800407a:	6923      	ldr	r3, [r4, #16]
 800407c:	b943      	cbnz	r3, 8004090 <__swbuf_r+0x32>
 800407e:	4621      	mov	r1, r4
 8004080:	4628      	mov	r0, r5
 8004082:	f000 f82b 	bl	80040dc <__swsetup_r>
 8004086:	b118      	cbz	r0, 8004090 <__swbuf_r+0x32>
 8004088:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800408c:	4638      	mov	r0, r7
 800408e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	6922      	ldr	r2, [r4, #16]
 8004094:	1a98      	subs	r0, r3, r2
 8004096:	6963      	ldr	r3, [r4, #20]
 8004098:	b2f6      	uxtb	r6, r6
 800409a:	4283      	cmp	r3, r0
 800409c:	4637      	mov	r7, r6
 800409e:	dc05      	bgt.n	80040ac <__swbuf_r+0x4e>
 80040a0:	4621      	mov	r1, r4
 80040a2:	4628      	mov	r0, r5
 80040a4:	f7ff ff64 	bl	8003f70 <_fflush_r>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	d1ed      	bne.n	8004088 <__swbuf_r+0x2a>
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60a3      	str	r3, [r4, #8]
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	6022      	str	r2, [r4, #0]
 80040b8:	701e      	strb	r6, [r3, #0]
 80040ba:	6962      	ldr	r2, [r4, #20]
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	429a      	cmp	r2, r3
 80040c0:	d004      	beq.n	80040cc <__swbuf_r+0x6e>
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	07db      	lsls	r3, r3, #31
 80040c6:	d5e1      	bpl.n	800408c <__swbuf_r+0x2e>
 80040c8:	2e0a      	cmp	r6, #10
 80040ca:	d1df      	bne.n	800408c <__swbuf_r+0x2e>
 80040cc:	4621      	mov	r1, r4
 80040ce:	4628      	mov	r0, r5
 80040d0:	f7ff ff4e 	bl	8003f70 <_fflush_r>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d0d9      	beq.n	800408c <__swbuf_r+0x2e>
 80040d8:	e7d6      	b.n	8004088 <__swbuf_r+0x2a>
	...

080040dc <__swsetup_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4b29      	ldr	r3, [pc, #164]	@ (8004184 <__swsetup_r+0xa8>)
 80040e0:	4605      	mov	r5, r0
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	460c      	mov	r4, r1
 80040e6:	b118      	cbz	r0, 80040f0 <__swsetup_r+0x14>
 80040e8:	6a03      	ldr	r3, [r0, #32]
 80040ea:	b90b      	cbnz	r3, 80040f0 <__swsetup_r+0x14>
 80040ec:	f7ff fd50 	bl	8003b90 <__sinit>
 80040f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040f4:	0719      	lsls	r1, r3, #28
 80040f6:	d422      	bmi.n	800413e <__swsetup_r+0x62>
 80040f8:	06da      	lsls	r2, r3, #27
 80040fa:	d407      	bmi.n	800410c <__swsetup_r+0x30>
 80040fc:	2209      	movs	r2, #9
 80040fe:	602a      	str	r2, [r5, #0]
 8004100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800410a:	e033      	b.n	8004174 <__swsetup_r+0x98>
 800410c:	0758      	lsls	r0, r3, #29
 800410e:	d512      	bpl.n	8004136 <__swsetup_r+0x5a>
 8004110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004112:	b141      	cbz	r1, 8004126 <__swsetup_r+0x4a>
 8004114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004118:	4299      	cmp	r1, r3
 800411a:	d002      	beq.n	8004122 <__swsetup_r+0x46>
 800411c:	4628      	mov	r0, r5
 800411e:	f000 f90d 	bl	800433c <_free_r>
 8004122:	2300      	movs	r3, #0
 8004124:	6363      	str	r3, [r4, #52]	@ 0x34
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	2300      	movs	r3, #0
 8004130:	6063      	str	r3, [r4, #4]
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	f043 0308 	orr.w	r3, r3, #8
 800413c:	81a3      	strh	r3, [r4, #12]
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	b94b      	cbnz	r3, 8004156 <__swsetup_r+0x7a>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800414c:	d003      	beq.n	8004156 <__swsetup_r+0x7a>
 800414e:	4621      	mov	r1, r4
 8004150:	4628      	mov	r0, r5
 8004152:	f000 f83f 	bl	80041d4 <__smakebuf_r>
 8004156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800415a:	f013 0201 	ands.w	r2, r3, #1
 800415e:	d00a      	beq.n	8004176 <__swsetup_r+0x9a>
 8004160:	2200      	movs	r2, #0
 8004162:	60a2      	str	r2, [r4, #8]
 8004164:	6962      	ldr	r2, [r4, #20]
 8004166:	4252      	negs	r2, r2
 8004168:	61a2      	str	r2, [r4, #24]
 800416a:	6922      	ldr	r2, [r4, #16]
 800416c:	b942      	cbnz	r2, 8004180 <__swsetup_r+0xa4>
 800416e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004172:	d1c5      	bne.n	8004100 <__swsetup_r+0x24>
 8004174:	bd38      	pop	{r3, r4, r5, pc}
 8004176:	0799      	lsls	r1, r3, #30
 8004178:	bf58      	it	pl
 800417a:	6962      	ldrpl	r2, [r4, #20]
 800417c:	60a2      	str	r2, [r4, #8]
 800417e:	e7f4      	b.n	800416a <__swsetup_r+0x8e>
 8004180:	2000      	movs	r0, #0
 8004182:	e7f7      	b.n	8004174 <__swsetup_r+0x98>
 8004184:	20000018 	.word	0x20000018

08004188 <__swhatbuf_r>:
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	460c      	mov	r4, r1
 800418c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004190:	2900      	cmp	r1, #0
 8004192:	b096      	sub	sp, #88	@ 0x58
 8004194:	4615      	mov	r5, r2
 8004196:	461e      	mov	r6, r3
 8004198:	da0d      	bge.n	80041b6 <__swhatbuf_r+0x2e>
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80041a0:	f04f 0100 	mov.w	r1, #0
 80041a4:	bf14      	ite	ne
 80041a6:	2340      	movne	r3, #64	@ 0x40
 80041a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80041ac:	2000      	movs	r0, #0
 80041ae:	6031      	str	r1, [r6, #0]
 80041b0:	602b      	str	r3, [r5, #0]
 80041b2:	b016      	add	sp, #88	@ 0x58
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	466a      	mov	r2, sp
 80041b8:	f000 f858 	bl	800426c <_fstat_r>
 80041bc:	2800      	cmp	r0, #0
 80041be:	dbec      	blt.n	800419a <__swhatbuf_r+0x12>
 80041c0:	9901      	ldr	r1, [sp, #4]
 80041c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80041c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80041ca:	4259      	negs	r1, r3
 80041cc:	4159      	adcs	r1, r3
 80041ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041d2:	e7eb      	b.n	80041ac <__swhatbuf_r+0x24>

080041d4 <__smakebuf_r>:
 80041d4:	898b      	ldrh	r3, [r1, #12]
 80041d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041d8:	079d      	lsls	r5, r3, #30
 80041da:	4606      	mov	r6, r0
 80041dc:	460c      	mov	r4, r1
 80041de:	d507      	bpl.n	80041f0 <__smakebuf_r+0x1c>
 80041e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	6123      	str	r3, [r4, #16]
 80041e8:	2301      	movs	r3, #1
 80041ea:	6163      	str	r3, [r4, #20]
 80041ec:	b003      	add	sp, #12
 80041ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f0:	ab01      	add	r3, sp, #4
 80041f2:	466a      	mov	r2, sp
 80041f4:	f7ff ffc8 	bl	8004188 <__swhatbuf_r>
 80041f8:	9f00      	ldr	r7, [sp, #0]
 80041fa:	4605      	mov	r5, r0
 80041fc:	4639      	mov	r1, r7
 80041fe:	4630      	mov	r0, r6
 8004200:	f7ff fdb2 	bl	8003d68 <_malloc_r>
 8004204:	b948      	cbnz	r0, 800421a <__smakebuf_r+0x46>
 8004206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800420a:	059a      	lsls	r2, r3, #22
 800420c:	d4ee      	bmi.n	80041ec <__smakebuf_r+0x18>
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	f043 0302 	orr.w	r3, r3, #2
 8004216:	81a3      	strh	r3, [r4, #12]
 8004218:	e7e2      	b.n	80041e0 <__smakebuf_r+0xc>
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	6020      	str	r0, [r4, #0]
 800421e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004222:	81a3      	strh	r3, [r4, #12]
 8004224:	9b01      	ldr	r3, [sp, #4]
 8004226:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800422a:	b15b      	cbz	r3, 8004244 <__smakebuf_r+0x70>
 800422c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004230:	4630      	mov	r0, r6
 8004232:	f000 f82d 	bl	8004290 <_isatty_r>
 8004236:	b128      	cbz	r0, 8004244 <__smakebuf_r+0x70>
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	81a3      	strh	r3, [r4, #12]
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	431d      	orrs	r5, r3
 8004248:	81a5      	strh	r5, [r4, #12]
 800424a:	e7cf      	b.n	80041ec <__smakebuf_r+0x18>

0800424c <_close_r>:
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	4d06      	ldr	r5, [pc, #24]	@ (8004268 <_close_r+0x1c>)
 8004250:	2300      	movs	r3, #0
 8004252:	4604      	mov	r4, r0
 8004254:	4608      	mov	r0, r1
 8004256:	602b      	str	r3, [r5, #0]
 8004258:	f7fd f932 	bl	80014c0 <_close>
 800425c:	1c43      	adds	r3, r0, #1
 800425e:	d102      	bne.n	8004266 <_close_r+0x1a>
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	b103      	cbz	r3, 8004266 <_close_r+0x1a>
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	bd38      	pop	{r3, r4, r5, pc}
 8004268:	2000023c 	.word	0x2000023c

0800426c <_fstat_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	4d07      	ldr	r5, [pc, #28]	@ (800428c <_fstat_r+0x20>)
 8004270:	2300      	movs	r3, #0
 8004272:	4604      	mov	r4, r0
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	602b      	str	r3, [r5, #0]
 800427a:	f7fd f92d 	bl	80014d8 <_fstat>
 800427e:	1c43      	adds	r3, r0, #1
 8004280:	d102      	bne.n	8004288 <_fstat_r+0x1c>
 8004282:	682b      	ldr	r3, [r5, #0]
 8004284:	b103      	cbz	r3, 8004288 <_fstat_r+0x1c>
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	bd38      	pop	{r3, r4, r5, pc}
 800428a:	bf00      	nop
 800428c:	2000023c 	.word	0x2000023c

08004290 <_isatty_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	4d06      	ldr	r5, [pc, #24]	@ (80042ac <_isatty_r+0x1c>)
 8004294:	2300      	movs	r3, #0
 8004296:	4604      	mov	r4, r0
 8004298:	4608      	mov	r0, r1
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	f7fd f92c 	bl	80014f8 <_isatty>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d102      	bne.n	80042aa <_isatty_r+0x1a>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	b103      	cbz	r3, 80042aa <_isatty_r+0x1a>
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	2000023c 	.word	0x2000023c

080042b0 <_lseek_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4d07      	ldr	r5, [pc, #28]	@ (80042d0 <_lseek_r+0x20>)
 80042b4:	4604      	mov	r4, r0
 80042b6:	4608      	mov	r0, r1
 80042b8:	4611      	mov	r1, r2
 80042ba:	2200      	movs	r2, #0
 80042bc:	602a      	str	r2, [r5, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	f7fd f925 	bl	800150e <_lseek>
 80042c4:	1c43      	adds	r3, r0, #1
 80042c6:	d102      	bne.n	80042ce <_lseek_r+0x1e>
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	b103      	cbz	r3, 80042ce <_lseek_r+0x1e>
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	bd38      	pop	{r3, r4, r5, pc}
 80042d0:	2000023c 	.word	0x2000023c

080042d4 <_read_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	4d07      	ldr	r5, [pc, #28]	@ (80042f4 <_read_r+0x20>)
 80042d8:	4604      	mov	r4, r0
 80042da:	4608      	mov	r0, r1
 80042dc:	4611      	mov	r1, r2
 80042de:	2200      	movs	r2, #0
 80042e0:	602a      	str	r2, [r5, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	f7fd f8b3 	bl	800144e <_read>
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	d102      	bne.n	80042f2 <_read_r+0x1e>
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	b103      	cbz	r3, 80042f2 <_read_r+0x1e>
 80042f0:	6023      	str	r3, [r4, #0]
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
 80042f4:	2000023c 	.word	0x2000023c

080042f8 <_sbrk_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4d06      	ldr	r5, [pc, #24]	@ (8004314 <_sbrk_r+0x1c>)
 80042fc:	2300      	movs	r3, #0
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	f7fd f910 	bl	8001528 <_sbrk>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_sbrk_r+0x1a>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_sbrk_r+0x1a>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	2000023c 	.word	0x2000023c

08004318 <_write_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4d07      	ldr	r5, [pc, #28]	@ (8004338 <_write_r+0x20>)
 800431c:	4604      	mov	r4, r0
 800431e:	4608      	mov	r0, r1
 8004320:	4611      	mov	r1, r2
 8004322:	2200      	movs	r2, #0
 8004324:	602a      	str	r2, [r5, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	f7fd f8ae 	bl	8001488 <_write>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d102      	bne.n	8004336 <_write_r+0x1e>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	b103      	cbz	r3, 8004336 <_write_r+0x1e>
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	2000023c 	.word	0x2000023c

0800433c <_free_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4605      	mov	r5, r0
 8004340:	2900      	cmp	r1, #0
 8004342:	d041      	beq.n	80043c8 <_free_r+0x8c>
 8004344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004348:	1f0c      	subs	r4, r1, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	bfb8      	it	lt
 800434e:	18e4      	addlt	r4, r4, r3
 8004350:	f7ff fe36 	bl	8003fc0 <__malloc_lock>
 8004354:	4a1d      	ldr	r2, [pc, #116]	@ (80043cc <_free_r+0x90>)
 8004356:	6813      	ldr	r3, [r2, #0]
 8004358:	b933      	cbnz	r3, 8004368 <_free_r+0x2c>
 800435a:	6063      	str	r3, [r4, #4]
 800435c:	6014      	str	r4, [r2, #0]
 800435e:	4628      	mov	r0, r5
 8004360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004364:	f7ff be32 	b.w	8003fcc <__malloc_unlock>
 8004368:	42a3      	cmp	r3, r4
 800436a:	d908      	bls.n	800437e <_free_r+0x42>
 800436c:	6820      	ldr	r0, [r4, #0]
 800436e:	1821      	adds	r1, r4, r0
 8004370:	428b      	cmp	r3, r1
 8004372:	bf01      	itttt	eq
 8004374:	6819      	ldreq	r1, [r3, #0]
 8004376:	685b      	ldreq	r3, [r3, #4]
 8004378:	1809      	addeq	r1, r1, r0
 800437a:	6021      	streq	r1, [r4, #0]
 800437c:	e7ed      	b.n	800435a <_free_r+0x1e>
 800437e:	461a      	mov	r2, r3
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	b10b      	cbz	r3, 8004388 <_free_r+0x4c>
 8004384:	42a3      	cmp	r3, r4
 8004386:	d9fa      	bls.n	800437e <_free_r+0x42>
 8004388:	6811      	ldr	r1, [r2, #0]
 800438a:	1850      	adds	r0, r2, r1
 800438c:	42a0      	cmp	r0, r4
 800438e:	d10b      	bne.n	80043a8 <_free_r+0x6c>
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	4401      	add	r1, r0
 8004394:	1850      	adds	r0, r2, r1
 8004396:	4283      	cmp	r3, r0
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	d1e0      	bne.n	800435e <_free_r+0x22>
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	6053      	str	r3, [r2, #4]
 80043a2:	4408      	add	r0, r1
 80043a4:	6010      	str	r0, [r2, #0]
 80043a6:	e7da      	b.n	800435e <_free_r+0x22>
 80043a8:	d902      	bls.n	80043b0 <_free_r+0x74>
 80043aa:	230c      	movs	r3, #12
 80043ac:	602b      	str	r3, [r5, #0]
 80043ae:	e7d6      	b.n	800435e <_free_r+0x22>
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	1821      	adds	r1, r4, r0
 80043b4:	428b      	cmp	r3, r1
 80043b6:	bf04      	itt	eq
 80043b8:	6819      	ldreq	r1, [r3, #0]
 80043ba:	685b      	ldreq	r3, [r3, #4]
 80043bc:	6063      	str	r3, [r4, #4]
 80043be:	bf04      	itt	eq
 80043c0:	1809      	addeq	r1, r1, r0
 80043c2:	6021      	streq	r1, [r4, #0]
 80043c4:	6054      	str	r4, [r2, #4]
 80043c6:	e7ca      	b.n	800435e <_free_r+0x22>
 80043c8:	bd38      	pop	{r3, r4, r5, pc}
 80043ca:	bf00      	nop
 80043cc:	20000238 	.word	0x20000238

080043d0 <_init>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr

080043dc <_fini>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr
